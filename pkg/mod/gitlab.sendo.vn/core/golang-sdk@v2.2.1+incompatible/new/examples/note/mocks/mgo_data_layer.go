// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MgoDataLayer is an autogenerated mock type for the MgoDataLayer type
type MgoDataLayer struct {
	mock.Mock
}

// Count provides a mock function with given fields: condition
func (_m *MgoDataLayer) Count(condition interface{}) (int, error) {
	ret := _m.Called(condition)

	var r0 int
	if rf, ok := ret.Get(0).(func(interface{}) int); ok {
		r0 = rf(condition)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: something
func (_m *MgoDataLayer) Delete(something interface{}) error {
	ret := _m.Called(something)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(something)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: condition, result, offset, limit
func (_m *MgoDataLayer) Find(condition interface{}, result interface{}, offset *int, limit *int) error {
	ret := _m.Called(condition, result, offset, limit)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *int, *int) error); ok {
		r0 = rf(condition, result, offset, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: something
func (_m *MgoDataLayer) Insert(something interface{}) error {
	ret := _m.Called(something)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(something)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: condition, something
func (_m *MgoDataLayer) Update(condition interface{}, something interface{}) error {
	ret := _m.Called(condition, something)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(condition, something)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
