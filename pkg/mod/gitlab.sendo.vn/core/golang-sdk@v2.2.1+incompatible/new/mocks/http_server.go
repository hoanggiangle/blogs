// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import gin "github.com/gin-gonic/gin"
import http_server "gitlab.sendo.vn/core/golang-sdk/new/http-server"
import mock "github.com/stretchr/testify/mock"

// HttpServer is an autogenerated mock type for the HttpServer type
type HttpServer struct {
	mock.Mock
}

// AddHandler provides a mock function with given fields: _a0
func (_m *HttpServer) AddHandler(_a0 func(*gin.Engine)) {
	_m.Called(_a0)
}

// Configure provides a mock function with given fields:
func (_m *HttpServer) Configure() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfig provides a mock function with given fields:
func (_m *HttpServer) GetConfig() http_server.Config {
	ret := _m.Called()

	var r0 http_server.Config
	if rf, ok := ret.Get(0).(func() http_server.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(http_server.Config)
	}

	return r0
}

// InitFlags provides a mock function with given fields:
func (_m *HttpServer) InitFlags() {
	_m.Called()
}

// Name provides a mock function with given fields:
func (_m *HttpServer) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *HttpServer) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *HttpServer) Stop() <-chan bool {
	ret := _m.Called()

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// URI provides a mock function with given fields:
func (_m *HttpServer) URI() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
