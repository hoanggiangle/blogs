// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import grpc "google.golang.org/grpc"
import logger "gitlab.sendo.vn/core/golang-sdk/new/logger"
import mock "github.com/stretchr/testify/mock"
import sendo "gitlab.sendo.vn/core/golang-sdk/new"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Broker provides a mock function with given fields:
func (_m *Service) Broker() sendo.Broker {
	ret := _m.Called()

	var r0 sendo.Broker
	if rf, ok := ret.Get(0).(func() sendo.Broker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sendo.Broker)
		}
	}

	return r0
}

// Client provides a mock function with given fields:
func (_m *Service) Client() sendo.Client {
	ret := _m.Called()

	var r0 sendo.Client
	if rf, ok := ret.Get(0).(func() sendo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sendo.Client)
		}
	}

	return r0
}

// HTTPServer provides a mock function with given fields:
func (_m *Service) HTTPServer() sendo.HttpServer {
	ret := _m.Called()

	var r0 sendo.HttpServer
	if rf, ok := ret.Get(0).(func() sendo.HttpServer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sendo.HttpServer)
		}
	}

	return r0
}

// Init provides a mock function with given fields:
func (_m *Service) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsRegistered provides a mock function with given fields:
func (_m *Service) IsRegistered() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Logger provides a mock function with given fields: prefix
func (_m *Service) Logger(prefix string) logger.Logger {
	ret := _m.Called(prefix)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(string) logger.Logger); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Service) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OutEnv provides a mock function with given fields:
func (_m *Service) OutEnv() {
	_m.Called()
}

// RunClient provides a mock function with given fields: _a0, _a1
func (_m *Service) RunClient(_a0 func(*grpc.ClientConn, sendo.ServiceContext) error, _a1 ...grpc.DialOption) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*grpc.ClientConn, sendo.ServiceContext) error, ...grpc.DialOption) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunFunction provides a mock function with given fields: _a0
func (_m *Service) RunFunction(_a0 func(sendo.ServiceContext) error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(sendo.ServiceContext) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server provides a mock function with given fields:
func (_m *Service) Server() sendo.Server {
	ret := _m.Called()

	var r0 sendo.Server
	if rf, ok := ret.Get(0).(func() sendo.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sendo.Server)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Service) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Service) Stop() {
	_m.Called()
}

// Storage provides a mock function with given fields:
func (_m *Service) Storage() sendo.Storage {
	ret := _m.Called()

	var r0 sendo.Storage
	if rf, ok := ret.Get(0).(func() sendo.Storage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sendo.Storage)
		}
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *Service) Version() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
