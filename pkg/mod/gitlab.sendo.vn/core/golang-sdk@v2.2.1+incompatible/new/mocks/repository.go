// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import demo "gitlab.sendo.vn/protobuf/internal-apis-go/demo"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: text
func (_m *Repository) Add(text string) (*demo.Note, error) {
	ret := _m.Called(text)

	var r0 *demo.Note
	if rf, ok := ret.Get(0).(func(string) *demo.Note); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*demo.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *Repository) Delete(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *Repository) FindById(id int64) (*demo.Note, error) {
	ret := _m.Called(id)

	var r0 *demo.Note
	if rf, ok := ret.Get(0).(func(int64) *demo.Note); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*demo.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: page, limit
func (_m *Repository) List(page int32, limit int32) ([]*demo.Note, int32, error) {
	ret := _m.Called(page, limit)

	var r0 []*demo.Note
	if rf, ok := ret.Get(0).(func(int32, int32) []*demo.Note); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*demo.Note)
		}
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(int32, int32) int32); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int32, int32) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: id, text
func (_m *Repository) Update(id int64, text string) error {
	ret := _m.Called(id, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(id, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatchChanged provides a mock function with given fields: _a0
func (_m *Repository) WatchChanged(_a0 context.Context) chan demo.NoteChangedEvent {
	ret := _m.Called(_a0)

	var r0 chan demo.NoteChangedEvent
	if rf, ok := ret.Get(0).(func(context.Context) chan demo.NoteChangedEvent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan demo.NoteChangedEvent)
		}
	}

	return r0
}
