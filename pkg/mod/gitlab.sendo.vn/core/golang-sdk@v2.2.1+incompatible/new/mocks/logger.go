// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import logger "gitlab.sendo.vn/core/golang-sdk/new/logger"
import mock "github.com/stretchr/testify/mock"

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: _a0
func (_m *Logger) Debug(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: _a0, _a1
func (_m *Logger) Debugf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Debugln provides a mock function with given fields: _a0
func (_m *Logger) Debugln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: _a0
func (_m *Logger) Error(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: _a0, _a1
func (_m *Logger) Errorf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Errorln provides a mock function with given fields: _a0
func (_m *Logger) Errorln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: _a0
func (_m *Logger) Fatal(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: _a0, _a1
func (_m *Logger) Fatalf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Fatalln provides a mock function with given fields: _a0
func (_m *Logger) Fatalln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: _a0
func (_m *Logger) Info(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: _a0, _a1
func (_m *Logger) Infof(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Infoln provides a mock function with given fields: _a0
func (_m *Logger) Infoln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Panic provides a mock function with given fields: _a0
func (_m *Logger) Panic(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Panicf provides a mock function with given fields: _a0, _a1
func (_m *Logger) Panicf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Panicln provides a mock function with given fields: _a0
func (_m *Logger) Panicln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: _a0
func (_m *Logger) Warn(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: _a0, _a1
func (_m *Logger) Warnf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Warnln provides a mock function with given fields: _a0
func (_m *Logger) Warnln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// With provides a mock function with given fields: key, value
func (_m *Logger) With(key string, value interface{}) logger.Logger {
	ret := _m.Called(key, value)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(string, interface{}) logger.Logger); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// WithSrc provides a mock function with given fields:
func (_m *Logger) WithSrc() logger.Logger {
	ret := _m.Called()

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func() logger.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Withs provides a mock function with given fields: _a0
func (_m *Logger) Withs(_a0 logger.Fields) logger.Logger {
	ret := _m.Called(_a0)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(logger.Fields) logger.Logger); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}
