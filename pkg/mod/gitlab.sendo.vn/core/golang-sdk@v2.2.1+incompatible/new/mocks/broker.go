// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import broker "gitlab.sendo.vn/core/golang-sdk/new/broker"
import context "context"
import mock "github.com/stretchr/testify/mock"

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// GetPubToken provides a mock function with given fields: e
func (_m *Broker) GetPubToken(e string) string {
	ret := _m.Called(e)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSubToken provides a mock function with given fields: e
func (_m *Broker) GetSubToken(e string) string {
	ret := _m.Called(e)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsConnected provides a mock function with given fields:
func (_m *Broker) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Publish provides a mock function with given fields: _a0
func (_m *Broker) Publish(_a0 *broker.Publishing) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*broker.Publishing) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*broker.Publishing) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *Broker) Subscribe(_a0 context.Context, _a1 *broker.SubscribeOption) (<-chan *broker.Message, error) {
	ret := _m.Called(_a0, _a1)

	var r0 <-chan *broker.Message
	if rf, ok := ret.Get(0).(func(context.Context, *broker.SubscribeOption) <-chan *broker.Message); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *broker.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *broker.SubscribeOption) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
