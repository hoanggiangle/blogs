// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: oauth/oauth.proto

package oauth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on GetUserUsingTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserUsingTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MessageId

	// no validation rules for AppId

	// no validation rules for Token

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetUserUsingTokenRequestValidationError is the validation error returned by
// GetUserUsingTokenRequest.Validate if the designated constraints aren't met.
type GetUserUsingTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserUsingTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserUsingTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserUsingTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserUsingTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserUsingTokenRequestValidationError) ErrorName() string {
	return "GetUserUsingTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserUsingTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserUsingTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserUsingTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserUsingTokenRequestValidationError{}

// Validate checks the field values on GetUserUsingTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserUsingTokenResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MessageId

	// no validation rules for ErrorId

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for FirstName

	// no validation rules for LastName

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetUserUsingTokenResponseValidationError is the validation error returned by
// GetUserUsingTokenResponse.Validate if the designated constraints aren't met.
type GetUserUsingTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserUsingTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserUsingTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserUsingTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserUsingTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserUsingTokenResponseValidationError) ErrorName() string {
	return "GetUserUsingTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserUsingTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserUsingTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserUsingTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserUsingTokenResponseValidationError{}

// Validate checks the field values on GetUserUsingTokenRequestV2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserUsingTokenRequestV2) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MessageId

	// no validation rules for AppId

	// no validation rules for Token

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetUserUsingTokenRequestV2ValidationError is the validation error returned
// by GetUserUsingTokenRequestV2.Validate if the designated constraints aren't met.
type GetUserUsingTokenRequestV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserUsingTokenRequestV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserUsingTokenRequestV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserUsingTokenRequestV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserUsingTokenRequestV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserUsingTokenRequestV2ValidationError) ErrorName() string {
	return "GetUserUsingTokenRequestV2ValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserUsingTokenRequestV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserUsingTokenRequestV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserUsingTokenRequestV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserUsingTokenRequestV2ValidationError{}

// Validate checks the field values on GetUserUsingTokenResponseV2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserUsingTokenResponseV2) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MessageId

	// no validation rules for ErrorId

	// no validation rules for CustomerId

	// no validation rules for FptId

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for CheckoutVerified

	// no validation rules for EmailVerified

	// no validation rules for PhoneVerified

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Avatar

	// no validation rules for Birthday

	// no validation rules for Gender

	// no validation rules for DefaultShipping

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetUserUsingTokenResponseV2ValidationError is the validation error returned
// by GetUserUsingTokenResponseV2.Validate if the designated constraints
// aren't met.
type GetUserUsingTokenResponseV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserUsingTokenResponseV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserUsingTokenResponseV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserUsingTokenResponseV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserUsingTokenResponseV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserUsingTokenResponseV2ValidationError) ErrorName() string {
	return "GetUserUsingTokenResponseV2ValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserUsingTokenResponseV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserUsingTokenResponseV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserUsingTokenResponseV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserUsingTokenResponseV2ValidationError{}
