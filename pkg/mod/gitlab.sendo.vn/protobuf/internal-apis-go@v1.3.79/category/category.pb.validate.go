// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: category/category.proto

package category

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCategoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCategoryRequestValidationError is the validation error returned by
// GetCategoryRequest.Validate if the designated constraints aren't met.
type GetCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRequestValidationError) ErrorName() string {
	return "GetCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRequestValidationError{}

// Validate checks the field values on ListMetaData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListMetaData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListMetaDataValidationError is the validation error returned by
// ListMetaData.Validate if the designated constraints aren't met.
type ListMetaDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetaDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetaDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetaDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetaDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetaDataValidationError) ErrorName() string { return "ListMetaDataValidationError" }

// Error satisfies the builtin error interface
func (e ListMetaDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetaData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetaDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetaDataValidationError{}

// Validate checks the field values on ListCategoiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCategoiesRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	// no validation rules for Query

	// no validation rules for ParentId

	// no validation rules for DepositCode

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListCategoiesRequestValidationError is the validation error returned by
// ListCategoiesRequest.Validate if the designated constraints aren't met.
type ListCategoiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoiesRequestValidationError) ErrorName() string {
	return "ListCategoiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoiesRequestValidationError{}

// Validate checks the field values on ListCategoiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCategoiesResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetMetaData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("MetaData", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("List[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListCategoiesResponseValidationError is the validation error returned by
// ListCategoiesResponse.Validate if the designated constraints aren't met.
type ListCategoiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoiesResponseValidationError) ErrorName() string {
	return "ListCategoiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoiesResponseValidationError{}

// Validate checks the field values on GetChildCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetChildCategoryReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Path

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetChildCategoryReqValidationError is the validation error returned by
// GetChildCategoryReq.Validate if the designated constraints aren't met.
type GetChildCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChildCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChildCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChildCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChildCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChildCategoryReqValidationError) ErrorName() string {
	return "GetChildCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetChildCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChildCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChildCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChildCategoryReqValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Category) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CategoryId

	// no validation rules for ParentId

	// no validation rules for Path

	// no validation rules for Name

	// no validation rules for Level

	// no validation rules for DisplayOrder

	// no validation rules for Description

	// no validation rules for IsInstallment

	// no validation rules for IsSeller

	// no validation rules for IsBuyer

	// no validation rules for RedirectLink

	// no validation rules for UrlKey

	// no validation rules for UrlPath

	// no validation rules for MetaDescription

	// no validation rules for MetaKeyword

	// no validation rules for SellerPolicy

	// no validation rules for Image

	// no validation rules for ThumbnailImage

	// no validation rules for AttributeSetId

	// no validation rules for Author

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdateUser

	// no validation rules for CategoryStatus

	// no validation rules for StatusDate

	// no validation rules for IsAnchor

	// no validation rules for IsLimited

	// no validation rules for IsRequiredCertificateFile

	// no validation rules for SenmallDescription

	// no validation rules for IsDelete

	if v, ok := interface{}(m.GetParent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Parent", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Children[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for DepositCode

	// no validation rules for IsSelfShipping

	// no validation rules for IsReviewProduct

	// no validation rules for IsAutoSetReviewedProduct

	// no validation rules for IsOld

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on GetAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAttributeRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Code

	// no validation rules for Id

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetAttributeRequestValidationError is the validation error returned by
// GetAttributeRequest.Validate if the designated constraints aren't met.
type GetAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeRequestValidationError) ErrorName() string {
	return "GetAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeRequestValidationError{}

// Validate checks the field values on ListAttributesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAttributesRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CategoryId

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListAttributesRequestValidationError is the validation error returned by
// ListAttributesRequest.Validate if the designated constraints aren't met.
type ListAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttributesRequestValidationError) ErrorName() string {
	return "ListAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttributesRequestValidationError{}

// Validate checks the field values on ListAttributesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAttributesResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetMetaData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("MetaData", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("List[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListAttributesResponseValidationError is the validation error returned by
// ListAttributesResponse.Validate if the designated constraints aren't met.
type ListAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttributesResponseValidationError) ErrorName() string {
	return "ListAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttributesResponseValidationError{}

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attribute) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for AttributeId

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for IsEffect

	// no validation rules for ShowRequired

	// no validation rules for IsUnique

	for idx, item := range m.GetAttributeValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("AttributeValue[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for AttributeType

	// no validation rules for IsCheckout

	// no validation rules for IsImage

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

// Validate checks the field values on AttributeValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AttributeValue) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OptionId

	// no validation rules for Value

	// no validation rules for DisplayOrder

	// no validation rules for IsDelete

	// no validation rules for Background

	// no validation rules for ColorHexRgb

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AttributeValueValidationError is the validation error returned by
// AttributeValue.Validate if the designated constraints aren't met.
type AttributeValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValueValidationError) ErrorName() string { return "AttributeValueValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValueValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Pagination) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Limit

	// no validation rules for Page

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on ListColorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListColorRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListColorRequestValidationError is the validation error returned by
// ListColorRequest.Validate if the designated constraints aren't met.
type ListColorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColorRequestValidationError) ErrorName() string { return "ListColorRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListColorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColorRequestValidationError{}

// Validate checks the field values on ListColorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListColorResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("List[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListColorResponseValidationError is the validation error returned by
// ListColorResponse.Validate if the designated constraints aren't met.
type ListColorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColorResponseValidationError) ErrorName() string {
	return "ListColorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListColorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColorResponseValidationError{}

// Validate checks the field values on Color with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Color) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ColorId

	// no validation rules for ColorName

	// no validation rules for ColorHexRgb

	// no validation rules for Image

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ColorValidationError is the validation error returned by Color.Validate if
// the designated constraints aren't met.
type ColorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColorValidationError) ErrorName() string { return "ColorValidationError" }

// Error satisfies the builtin error interface
func (e ColorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColorValidationError{}

// Validate checks the field values on GenAttrAndOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenAttrAndOptionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Options

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GenAttrAndOptionsRequestValidationError is the validation error returned by
// GenAttrAndOptionsRequest.Validate if the designated constraints aren't met.
type GenAttrAndOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenAttrAndOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenAttrAndOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenAttrAndOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenAttrAndOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenAttrAndOptionsRequestValidationError) ErrorName() string {
	return "GenAttrAndOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenAttrAndOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenAttrAndOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenAttrAndOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenAttrAndOptionsRequestValidationError{}

// Validate checks the field values on GenAttrAndOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenAttrAndOptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Attributes[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GenAttrAndOptionsResponseValidationError is the validation error returned by
// GenAttrAndOptionsResponse.Validate if the designated constraints aren't met.
type GenAttrAndOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenAttrAndOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenAttrAndOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenAttrAndOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenAttrAndOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenAttrAndOptionsResponseValidationError) ErrorName() string {
	return "GenAttrAndOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenAttrAndOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenAttrAndOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenAttrAndOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenAttrAndOptionsResponseValidationError{}
