// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: category/category.proto

package category // import "gitlab.sendo.vn/protobuf/internal-apis-go/category"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AttributeInputType int32

const (
	AttributeInputType_Empty    AttributeInputType = 0
	AttributeInputType_CheckBox AttributeInputType = 1
	AttributeInputType_ComboBox AttributeInputType = 2
	AttributeInputType_TextBox  AttributeInputType = 3
)

var AttributeInputType_name = map[int32]string{
	0: "Empty",
	1: "CheckBox",
	2: "ComboBox",
	3: "TextBox",
}
var AttributeInputType_value = map[string]int32{
	"Empty":    0,
	"CheckBox": 1,
	"ComboBox": 2,
	"TextBox":  3,
}

func (x AttributeInputType) String() string {
	return proto.EnumName(AttributeInputType_name, int32(x))
}
func (AttributeInputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{0}
}

type GetCategoryRequest struct {
	Id                   int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields               *types.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetCategoryRequest) Reset()         { *m = GetCategoryRequest{} }
func (m *GetCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetCategoryRequest) ProtoMessage()    {}
func (*GetCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{0}
}
func (m *GetCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCategoryRequest.Merge(dst, src)
}
func (m *GetCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCategoryRequest proto.InternalMessageInfo

func (m *GetCategoryRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetCategoryRequest) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ListMetaData struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMetaData) Reset()         { *m = ListMetaData{} }
func (m *ListMetaData) String() string { return proto.CompactTextString(m) }
func (*ListMetaData) ProtoMessage()    {}
func (*ListMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{1}
}
func (m *ListMetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMetaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMetaData.Merge(dst, src)
}
func (m *ListMetaData) XXX_Size() int {
	return m.Size()
}
func (m *ListMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_ListMetaData proto.InternalMessageInfo

func (m *ListMetaData) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ListCategoiesRequest struct {
	Fields               *types.FieldMask `protobuf:"bytes,1,opt,name=fields" json:"fields,omitempty"`
	Query                string           `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Ids                  []int32          `protobuf:"varint,3,rep,packed,name=ids" json:"ids,omitempty"`
	ParentId             int32            `protobuf:"varint,4,opt,name=parent_id,proto3" json:"parent_id,omitempty"`
	DepositCode          string           `protobuf:"bytes,5,opt,name=deposit_code,proto3" json:"deposit_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListCategoiesRequest) Reset()         { *m = ListCategoiesRequest{} }
func (m *ListCategoiesRequest) String() string { return proto.CompactTextString(m) }
func (*ListCategoiesRequest) ProtoMessage()    {}
func (*ListCategoiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{2}
}
func (m *ListCategoiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCategoiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCategoiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListCategoiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCategoiesRequest.Merge(dst, src)
}
func (m *ListCategoiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCategoiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCategoiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCategoiesRequest proto.InternalMessageInfo

func (m *ListCategoiesRequest) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListCategoiesRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ListCategoiesRequest) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ListCategoiesRequest) GetParentId() int32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *ListCategoiesRequest) GetDepositCode() string {
	if m != nil {
		return m.DepositCode
	}
	return ""
}

type ListCategoiesResponse struct {
	MetaData             *ListMetaData `protobuf:"bytes,1,opt,name=meta_data" json:"meta_data,omitempty"`
	List                 []*Category   `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListCategoiesResponse) Reset()         { *m = ListCategoiesResponse{} }
func (m *ListCategoiesResponse) String() string { return proto.CompactTextString(m) }
func (*ListCategoiesResponse) ProtoMessage()    {}
func (*ListCategoiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{3}
}
func (m *ListCategoiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCategoiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCategoiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListCategoiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCategoiesResponse.Merge(dst, src)
}
func (m *ListCategoiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCategoiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCategoiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCategoiesResponse proto.InternalMessageInfo

func (m *ListCategoiesResponse) GetMetaData() *ListMetaData {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *ListCategoiesResponse) GetList() []*Category {
	if m != nil {
		return m.List
	}
	return nil
}

type GetChildCategoryReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChildCategoryReq) Reset()         { *m = GetChildCategoryReq{} }
func (m *GetChildCategoryReq) String() string { return proto.CompactTextString(m) }
func (*GetChildCategoryReq) ProtoMessage()    {}
func (*GetChildCategoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{4}
}
func (m *GetChildCategoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChildCategoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChildCategoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetChildCategoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChildCategoryReq.Merge(dst, src)
}
func (m *GetChildCategoryReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChildCategoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChildCategoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChildCategoryReq proto.InternalMessageInfo

func (m *GetChildCategoryReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Category struct {
	CategoryId                int32       `protobuf:"varint,1,opt,name=category_id,proto3" json:"category_id,omitempty"`
	ParentId                  int32       `protobuf:"varint,2,opt,name=parent_id,proto3" json:"parent_id,omitempty"`
	Path                      string      `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Name                      string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Level                     int32       `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	DisplayOrder              int32       `protobuf:"varint,7,opt,name=display_order,proto3" json:"display_order,omitempty"`
	Description               string      `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	IsInstallment             bool        `protobuf:"varint,9,opt,name=is_installment,proto3" json:"is_installment,omitempty"`
	IsSeller                  bool        `protobuf:"varint,10,opt,name=is_seller,proto3" json:"is_seller,omitempty"`
	IsBuyer                   bool        `protobuf:"varint,11,opt,name=is_buyer,proto3" json:"is_buyer,omitempty"`
	RedirectLink              string      `protobuf:"bytes,12,opt,name=redirect_link,proto3" json:"redirect_link,omitempty"`
	UrlKey                    string      `protobuf:"bytes,13,opt,name=url_key,proto3" json:"url_key,omitempty"`
	UrlPath                   string      `protobuf:"bytes,14,opt,name=url_path,proto3" json:"url_path,omitempty"`
	MetaDescription           string      `protobuf:"bytes,15,opt,name=meta_description,proto3" json:"meta_description,omitempty"`
	MetaKeyword               string      `protobuf:"bytes,16,opt,name=meta_keyword,proto3" json:"meta_keyword,omitempty"`
	SellerPolicy              string      `protobuf:"bytes,17,opt,name=seller_policy,proto3" json:"seller_policy,omitempty"`
	Images                    []string    `protobuf:"bytes,18,rep,name=images" json:"images,omitempty"`
	Image                     string      `protobuf:"bytes,19,opt,name=image,proto3" json:"image,omitempty"`
	ThumbnailImage            string      `protobuf:"bytes,20,opt,name=thumbnail_image,proto3" json:"thumbnail_image,omitempty"`
	AttributeSetId            int32       `protobuf:"varint,21,opt,name=attribute_set_id,proto3" json:"attribute_set_id,omitempty"`
	Author                    string      `protobuf:"bytes,22,opt,name=author,proto3" json:"author,omitempty"`
	UpdatedAt                 int64       `protobuf:"varint,23,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	CreatedAt                 int64       `protobuf:"varint,24,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdateUser                string      `protobuf:"bytes,25,opt,name=update_user,proto3" json:"update_user,omitempty"`
	CategoryStatus            int32       `protobuf:"varint,26,opt,name=category_status,proto3" json:"category_status,omitempty"`
	StatusDate                int64       `protobuf:"varint,27,opt,name=status_date,proto3" json:"status_date,omitempty"`
	IsAnchor                  bool        `protobuf:"varint,28,opt,name=is_anchor,proto3" json:"is_anchor,omitempty"`
	IsLimited                 bool        `protobuf:"varint,29,opt,name=is_limited,proto3" json:"is_limited,omitempty"`
	IsRequiredCertificateFile bool        `protobuf:"varint,30,opt,name=is_required_certificate_file,proto3" json:"is_required_certificate_file,omitempty"`
	SenmallDescription        string      `protobuf:"bytes,31,opt,name=senmall_description,proto3" json:"senmall_description,omitempty"`
	IsDelete                  bool        `protobuf:"varint,32,opt,name=is_delete,proto3" json:"is_delete,omitempty"`
	Parent                    *Category   `protobuf:"bytes,33,opt,name=parent" json:"parent,omitempty"`
	Children                  []*Category `protobuf:"bytes,34,rep,name=children" json:"children,omitempty"`
	DepositCode               string      `protobuf:"bytes,35,opt,name=deposit_code,proto3" json:"deposit_code,omitempty"`
	IsSelfShipping            bool        `protobuf:"varint,36,opt,name=is_self_shipping,proto3" json:"is_self_shipping,omitempty"`
	IsReviewProduct           bool        `protobuf:"varint,37,opt,name=is_review_product,proto3" json:"is_review_product,omitempty"`
	IsAutoSetReviewedProduct  bool        `protobuf:"varint,38,opt,name=is_auto_set_reviewed_product,proto3" json:"is_auto_set_reviewed_product,omitempty"`
	IsOld                     bool        `protobuf:"varint,39,opt,name=is_old,proto3" json:"is_old,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}    `json:"-"`
	XXX_unrecognized          []byte      `json:"-"`
	XXX_sizecache             int32       `json:"-"`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}
func (*Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{5}
}
func (m *Category) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Category.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category.Merge(dst, src)
}
func (m *Category) XXX_Size() int {
	return m.Size()
}
func (m *Category) XXX_DiscardUnknown() {
	xxx_messageInfo_Category.DiscardUnknown(m)
}

var xxx_messageInfo_Category proto.InternalMessageInfo

func (m *Category) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *Category) GetParentId() int32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Category) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Category) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Category) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *Category) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Category) GetIsInstallment() bool {
	if m != nil {
		return m.IsInstallment
	}
	return false
}

func (m *Category) GetIsSeller() bool {
	if m != nil {
		return m.IsSeller
	}
	return false
}

func (m *Category) GetIsBuyer() bool {
	if m != nil {
		return m.IsBuyer
	}
	return false
}

func (m *Category) GetRedirectLink() string {
	if m != nil {
		return m.RedirectLink
	}
	return ""
}

func (m *Category) GetUrlKey() string {
	if m != nil {
		return m.UrlKey
	}
	return ""
}

func (m *Category) GetUrlPath() string {
	if m != nil {
		return m.UrlPath
	}
	return ""
}

func (m *Category) GetMetaDescription() string {
	if m != nil {
		return m.MetaDescription
	}
	return ""
}

func (m *Category) GetMetaKeyword() string {
	if m != nil {
		return m.MetaKeyword
	}
	return ""
}

func (m *Category) GetSellerPolicy() string {
	if m != nil {
		return m.SellerPolicy
	}
	return ""
}

func (m *Category) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Category) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Category) GetThumbnailImage() string {
	if m != nil {
		return m.ThumbnailImage
	}
	return ""
}

func (m *Category) GetAttributeSetId() int32 {
	if m != nil {
		return m.AttributeSetId
	}
	return 0
}

func (m *Category) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Category) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Category) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Category) GetUpdateUser() string {
	if m != nil {
		return m.UpdateUser
	}
	return ""
}

func (m *Category) GetCategoryStatus() int32 {
	if m != nil {
		return m.CategoryStatus
	}
	return 0
}

func (m *Category) GetStatusDate() int64 {
	if m != nil {
		return m.StatusDate
	}
	return 0
}

func (m *Category) GetIsAnchor() bool {
	if m != nil {
		return m.IsAnchor
	}
	return false
}

func (m *Category) GetIsLimited() bool {
	if m != nil {
		return m.IsLimited
	}
	return false
}

func (m *Category) GetIsRequiredCertificateFile() bool {
	if m != nil {
		return m.IsRequiredCertificateFile
	}
	return false
}

func (m *Category) GetSenmallDescription() string {
	if m != nil {
		return m.SenmallDescription
	}
	return ""
}

func (m *Category) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *Category) GetParent() *Category {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Category) GetChildren() []*Category {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Category) GetDepositCode() string {
	if m != nil {
		return m.DepositCode
	}
	return ""
}

func (m *Category) GetIsSelfShipping() bool {
	if m != nil {
		return m.IsSelfShipping
	}
	return false
}

func (m *Category) GetIsReviewProduct() bool {
	if m != nil {
		return m.IsReviewProduct
	}
	return false
}

func (m *Category) GetIsAutoSetReviewedProduct() bool {
	if m != nil {
		return m.IsAutoSetReviewedProduct
	}
	return false
}

func (m *Category) GetIsOld() bool {
	if m != nil {
		return m.IsOld
	}
	return false
}

type GetAttributeRequest struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAttributeRequest) Reset()         { *m = GetAttributeRequest{} }
func (m *GetAttributeRequest) String() string { return proto.CompactTextString(m) }
func (*GetAttributeRequest) ProtoMessage()    {}
func (*GetAttributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{6}
}
func (m *GetAttributeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttributeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAttributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttributeRequest.Merge(dst, src)
}
func (m *GetAttributeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAttributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttributeRequest proto.InternalMessageInfo

func (m *GetAttributeRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GetAttributeRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListAttributesRequest struct {
	CategoryId           int32            `protobuf:"varint,1,opt,name=category_id,proto3" json:"category_id,omitempty"`
	Fields               *types.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListAttributesRequest) Reset()         { *m = ListAttributesRequest{} }
func (m *ListAttributesRequest) String() string { return proto.CompactTextString(m) }
func (*ListAttributesRequest) ProtoMessage()    {}
func (*ListAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{7}
}
func (m *ListAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAttributesRequest.Merge(dst, src)
}
func (m *ListAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAttributesRequest proto.InternalMessageInfo

func (m *ListAttributesRequest) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *ListAttributesRequest) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ListAttributesResponse struct {
	MetaData             *ListMetaData `protobuf:"bytes,1,opt,name=meta_data" json:"meta_data,omitempty"`
	List                 []*Attribute  `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListAttributesResponse) Reset()         { *m = ListAttributesResponse{} }
func (m *ListAttributesResponse) String() string { return proto.CompactTextString(m) }
func (*ListAttributesResponse) ProtoMessage()    {}
func (*ListAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{8}
}
func (m *ListAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAttributesResponse.Merge(dst, src)
}
func (m *ListAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAttributesResponse proto.InternalMessageInfo

func (m *ListAttributesResponse) GetMetaData() *ListMetaData {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *ListAttributesResponse) GetList() []*Attribute {
	if m != nil {
		return m.List
	}
	return nil
}

type Attribute struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code                 string             `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	AttributeId          int32              `protobuf:"varint,3,opt,name=attribute_id,proto3" json:"attribute_id,omitempty"`
	Type                 AttributeInputType `protobuf:"varint,4,opt,name=type,proto3,enum=sendo.v1.api.category.AttributeInputType" json:"type,omitempty"`
	Description          string             `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	IsEffect             bool               `protobuf:"varint,6,opt,name=is_effect,proto3" json:"is_effect,omitempty"`
	ShowRequired         bool               `protobuf:"varint,7,opt,name=show_required,proto3" json:"show_required,omitempty"`
	IsUnique             bool               `protobuf:"varint,8,opt,name=is_unique,proto3" json:"is_unique,omitempty"`
	AttributeValue       []*AttributeValue  `protobuf:"bytes,9,rep,name=attribute_value" json:"attribute_value,omitempty"`
	AttributeType        int32              `protobuf:"varint,10,opt,name=attribute_type,proto3" json:"attribute_type,omitempty"`
	IsCheckout           bool               `protobuf:"varint,11,opt,name=is_checkout,proto3" json:"is_checkout,omitempty"`
	IsImage              bool               `protobuf:"varint,12,opt,name=is_image,proto3" json:"is_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{9}
}
func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(dst, src)
}
func (m *Attribute) XXX_Size() int {
	return m.Size()
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attribute) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Attribute) GetAttributeId() int32 {
	if m != nil {
		return m.AttributeId
	}
	return 0
}

func (m *Attribute) GetType() AttributeInputType {
	if m != nil {
		return m.Type
	}
	return AttributeInputType_Empty
}

func (m *Attribute) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Attribute) GetIsEffect() bool {
	if m != nil {
		return m.IsEffect
	}
	return false
}

func (m *Attribute) GetShowRequired() bool {
	if m != nil {
		return m.ShowRequired
	}
	return false
}

func (m *Attribute) GetIsUnique() bool {
	if m != nil {
		return m.IsUnique
	}
	return false
}

func (m *Attribute) GetAttributeValue() []*AttributeValue {
	if m != nil {
		return m.AttributeValue
	}
	return nil
}

func (m *Attribute) GetAttributeType() int32 {
	if m != nil {
		return m.AttributeType
	}
	return 0
}

func (m *Attribute) GetIsCheckout() bool {
	if m != nil {
		return m.IsCheckout
	}
	return false
}

func (m *Attribute) GetIsImage() bool {
	if m != nil {
		return m.IsImage
	}
	return false
}

type AttributeValue struct {
	OptionId             int32    `protobuf:"varint,1,opt,name=option_id,proto3" json:"option_id,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	DisplayOrder         int32    `protobuf:"varint,3,opt,name=display_order,proto3" json:"display_order,omitempty"`
	IsDelete             bool     `protobuf:"varint,4,opt,name=is_delete,proto3" json:"is_delete,omitempty"`
	Background           string   `protobuf:"bytes,5,opt,name=background,proto3" json:"background,omitempty"`
	ColorHexRgb          string   `protobuf:"bytes,6,opt,name=color_hex_rgb,proto3" json:"color_hex_rgb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttributeValue) Reset()         { *m = AttributeValue{} }
func (m *AttributeValue) String() string { return proto.CompactTextString(m) }
func (*AttributeValue) ProtoMessage()    {}
func (*AttributeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{10}
}
func (m *AttributeValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttributeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttributeValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AttributeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeValue.Merge(dst, src)
}
func (m *AttributeValue) XXX_Size() int {
	return m.Size()
}
func (m *AttributeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeValue proto.InternalMessageInfo

func (m *AttributeValue) GetOptionId() int32 {
	if m != nil {
		return m.OptionId
	}
	return 0
}

func (m *AttributeValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *AttributeValue) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *AttributeValue) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *AttributeValue) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *AttributeValue) GetColorHexRgb() string {
	if m != nil {
		return m.ColorHexRgb
	}
	return ""
}

type Pagination struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page                 int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{11}
}
func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(dst, src)
}
func (m *Pagination) XXX_Size() int {
	return m.Size()
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagination) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListColorRequest struct {
	Q                    []string `protobuf:"bytes,1,rep,name=q" json:"q,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListColorRequest) Reset()         { *m = ListColorRequest{} }
func (m *ListColorRequest) String() string { return proto.CompactTextString(m) }
func (*ListColorRequest) ProtoMessage()    {}
func (*ListColorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{12}
}
func (m *ListColorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListColorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListColorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListColorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListColorRequest.Merge(dst, src)
}
func (m *ListColorRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListColorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListColorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListColorRequest proto.InternalMessageInfo

func (m *ListColorRequest) GetQ() []string {
	if m != nil {
		return m.Q
	}
	return nil
}

type ListColorResponse struct {
	List                 []*Color `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListColorResponse) Reset()         { *m = ListColorResponse{} }
func (m *ListColorResponse) String() string { return proto.CompactTextString(m) }
func (*ListColorResponse) ProtoMessage()    {}
func (*ListColorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{13}
}
func (m *ListColorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListColorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListColorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListColorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListColorResponse.Merge(dst, src)
}
func (m *ListColorResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListColorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListColorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListColorResponse proto.InternalMessageInfo

func (m *ListColorResponse) GetList() []*Color {
	if m != nil {
		return m.List
	}
	return nil
}

type Color struct {
	ColorId              int32    `protobuf:"varint,1,opt,name=color_id,proto3" json:"color_id,omitempty"`
	ColorName            string   `protobuf:"bytes,2,opt,name=color_name,proto3" json:"color_name,omitempty"`
	ColorHexRgb          string   `protobuf:"bytes,3,opt,name=color_hex_rgb,proto3" json:"color_hex_rgb,omitempty"`
	Image                string   `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Color) Reset()         { *m = Color{} }
func (m *Color) String() string { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()    {}
func (*Color) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{14}
}
func (m *Color) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Color) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Color.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Color) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Color.Merge(dst, src)
}
func (m *Color) XXX_Size() int {
	return m.Size()
}
func (m *Color) XXX_DiscardUnknown() {
	xxx_messageInfo_Color.DiscardUnknown(m)
}

var xxx_messageInfo_Color proto.InternalMessageInfo

func (m *Color) GetColorId() int32 {
	if m != nil {
		return m.ColorId
	}
	return 0
}

func (m *Color) GetColorName() string {
	if m != nil {
		return m.ColorName
	}
	return ""
}

func (m *Color) GetColorHexRgb() string {
	if m != nil {
		return m.ColorHexRgb
	}
	return ""
}

func (m *Color) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type GenAttrAndOptionsRequest struct {
	Options              int32    `protobuf:"varint,1,opt,name=options,proto3" json:"options,omitempty"`
	Attributes           []string `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenAttrAndOptionsRequest) Reset()         { *m = GenAttrAndOptionsRequest{} }
func (m *GenAttrAndOptionsRequest) String() string { return proto.CompactTextString(m) }
func (*GenAttrAndOptionsRequest) ProtoMessage()    {}
func (*GenAttrAndOptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{15}
}
func (m *GenAttrAndOptionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenAttrAndOptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenAttrAndOptionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GenAttrAndOptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenAttrAndOptionsRequest.Merge(dst, src)
}
func (m *GenAttrAndOptionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenAttrAndOptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenAttrAndOptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenAttrAndOptionsRequest proto.InternalMessageInfo

func (m *GenAttrAndOptionsRequest) GetOptions() int32 {
	if m != nil {
		return m.Options
	}
	return 0
}

func (m *GenAttrAndOptionsRequest) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type GenAttrAndOptionsResponse struct {
	OptionIds            []int32      `protobuf:"varint,1,rep,packed,name=optionIds,json=option_ids" json:"optionIds,omitempty"`
	Attributes           []*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GenAttrAndOptionsResponse) Reset()         { *m = GenAttrAndOptionsResponse{} }
func (m *GenAttrAndOptionsResponse) String() string { return proto.CompactTextString(m) }
func (*GenAttrAndOptionsResponse) ProtoMessage()    {}
func (*GenAttrAndOptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_category_3c21c33483d83222, []int{16}
}
func (m *GenAttrAndOptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenAttrAndOptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenAttrAndOptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GenAttrAndOptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenAttrAndOptionsResponse.Merge(dst, src)
}
func (m *GenAttrAndOptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenAttrAndOptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenAttrAndOptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenAttrAndOptionsResponse proto.InternalMessageInfo

func (m *GenAttrAndOptionsResponse) GetOptionIds() []int32 {
	if m != nil {
		return m.OptionIds
	}
	return nil
}

func (m *GenAttrAndOptionsResponse) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCategoryRequest)(nil), "sendo.v1.api.category.GetCategoryRequest")
	proto.RegisterType((*ListMetaData)(nil), "sendo.v1.api.category.ListMetaData")
	proto.RegisterType((*ListCategoiesRequest)(nil), "sendo.v1.api.category.ListCategoiesRequest")
	proto.RegisterType((*ListCategoiesResponse)(nil), "sendo.v1.api.category.ListCategoiesResponse")
	proto.RegisterType((*GetChildCategoryReq)(nil), "sendo.v1.api.category.GetChildCategoryReq")
	proto.RegisterType((*Category)(nil), "sendo.v1.api.category.Category")
	proto.RegisterType((*GetAttributeRequest)(nil), "sendo.v1.api.category.GetAttributeRequest")
	proto.RegisterType((*ListAttributesRequest)(nil), "sendo.v1.api.category.ListAttributesRequest")
	proto.RegisterType((*ListAttributesResponse)(nil), "sendo.v1.api.category.ListAttributesResponse")
	proto.RegisterType((*Attribute)(nil), "sendo.v1.api.category.Attribute")
	proto.RegisterType((*AttributeValue)(nil), "sendo.v1.api.category.AttributeValue")
	proto.RegisterType((*Pagination)(nil), "sendo.v1.api.category.Pagination")
	proto.RegisterType((*ListColorRequest)(nil), "sendo.v1.api.category.ListColorRequest")
	proto.RegisterType((*ListColorResponse)(nil), "sendo.v1.api.category.ListColorResponse")
	proto.RegisterType((*Color)(nil), "sendo.v1.api.category.Color")
	proto.RegisterType((*GenAttrAndOptionsRequest)(nil), "sendo.v1.api.category.GenAttrAndOptionsRequest")
	proto.RegisterType((*GenAttrAndOptionsResponse)(nil), "sendo.v1.api.category.GenAttrAndOptionsResponse")
	proto.RegisterEnum("sendo.v1.api.category.AttributeInputType", AttributeInputType_name, AttributeInputType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CategoryServiceClient interface {
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	ListCategoies(ctx context.Context, in *ListCategoiesRequest, opts ...grpc.CallOption) (*ListCategoiesResponse, error)
	ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*ListAttributesResponse, error)
	GetAttribute(ctx context.Context, in *GetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error)
	ListColor(ctx context.Context, in *ListColorRequest, opts ...grpc.CallOption) (*ListColorResponse, error)
	GenAttrAndOptions(ctx context.Context, in *GenAttrAndOptionsRequest, opts ...grpc.CallOption) (*GenAttrAndOptionsResponse, error)
}

type categoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewCategoryServiceClient(cc *grpc.ClientConn) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.category.CategoryService/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) ListCategoies(ctx context.Context, in *ListCategoiesRequest, opts ...grpc.CallOption) (*ListCategoiesResponse, error) {
	out := new(ListCategoiesResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.category.CategoryService/ListCategoies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*ListAttributesResponse, error) {
	out := new(ListAttributesResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.category.CategoryService/ListAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetAttribute(ctx context.Context, in *GetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error) {
	out := new(Attribute)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.category.CategoryService/GetAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) ListColor(ctx context.Context, in *ListColorRequest, opts ...grpc.CallOption) (*ListColorResponse, error) {
	out := new(ListColorResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.category.CategoryService/ListColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GenAttrAndOptions(ctx context.Context, in *GenAttrAndOptionsRequest, opts ...grpc.CallOption) (*GenAttrAndOptionsResponse, error) {
	out := new(GenAttrAndOptionsResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.category.CategoryService/GenAttrAndOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
type CategoryServiceServer interface {
	GetCategory(context.Context, *GetCategoryRequest) (*Category, error)
	ListCategoies(context.Context, *ListCategoiesRequest) (*ListCategoiesResponse, error)
	ListAttributes(context.Context, *ListAttributesRequest) (*ListAttributesResponse, error)
	GetAttribute(context.Context, *GetAttributeRequest) (*Attribute, error)
	ListColor(context.Context, *ListColorRequest) (*ListColorResponse, error)
	GenAttrAndOptions(context.Context, *GenAttrAndOptionsRequest) (*GenAttrAndOptionsResponse, error)
}

func RegisterCategoryServiceServer(s *grpc.Server, srv CategoryServiceServer) {
	s.RegisterService(&_CategoryService_serviceDesc, srv)
}

func _CategoryService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.category.CategoryService/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_ListCategoies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).ListCategoies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.category.CategoryService/ListCategoies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).ListCategoies(ctx, req.(*ListCategoiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_ListAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).ListAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.category.CategoryService/ListAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).ListAttributes(ctx, req.(*ListAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.category.CategoryService/GetAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetAttribute(ctx, req.(*GetAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_ListColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).ListColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.category.CategoryService/ListColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).ListColor(ctx, req.(*ListColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GenAttrAndOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenAttrAndOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GenAttrAndOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.category.CategoryService/GenAttrAndOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GenAttrAndOptions(ctx, req.(*GenAttrAndOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CategoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.category.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategory",
			Handler:    _CategoryService_GetCategory_Handler,
		},
		{
			MethodName: "ListCategoies",
			Handler:    _CategoryService_ListCategoies_Handler,
		},
		{
			MethodName: "ListAttributes",
			Handler:    _CategoryService_ListAttributes_Handler,
		},
		{
			MethodName: "GetAttribute",
			Handler:    _CategoryService_GetAttribute_Handler,
		},
		{
			MethodName: "ListColor",
			Handler:    _CategoryService_ListColor_Handler,
		},
		{
			MethodName: "GenAttrAndOptions",
			Handler:    _CategoryService_GenAttrAndOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category/category.proto",
}

func (m *GetCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Id))
	}
	if m.Fields != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Fields.Size()))
		n1, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListMetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMetaData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListCategoiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCategoiesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Fields.Size()))
		n2, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Query) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCategory(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.ParentId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.ParentId))
	}
	if len(m.DepositCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.DepositCode)))
		i += copy(dAtA[i:], m.DepositCode)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListCategoiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCategoiesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MetaData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.MetaData.Size()))
		n5, err := m.MetaData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCategory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetChildCategoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChildCategoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Category) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Category) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CategoryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.CategoryId))
	}
	if m.ParentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.ParentId))
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Level))
	}
	if m.DisplayOrder != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.DisplayOrder))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.IsInstallment {
		dAtA[i] = 0x48
		i++
		if m.IsInstallment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsSeller {
		dAtA[i] = 0x50
		i++
		if m.IsSeller {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBuyer {
		dAtA[i] = 0x58
		i++
		if m.IsBuyer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RedirectLink) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.RedirectLink)))
		i += copy(dAtA[i:], m.RedirectLink)
	}
	if len(m.UrlKey) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.UrlKey)))
		i += copy(dAtA[i:], m.UrlKey)
	}
	if len(m.UrlPath) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.UrlPath)))
		i += copy(dAtA[i:], m.UrlPath)
	}
	if len(m.MetaDescription) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.MetaDescription)))
		i += copy(dAtA[i:], m.MetaDescription)
	}
	if len(m.MetaKeyword) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.MetaKeyword)))
		i += copy(dAtA[i:], m.MetaKeyword)
	}
	if len(m.SellerPolicy) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.SellerPolicy)))
		i += copy(dAtA[i:], m.SellerPolicy)
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.ThumbnailImage) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.ThumbnailImage)))
		i += copy(dAtA[i:], m.ThumbnailImage)
	}
	if m.AttributeSetId != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.AttributeSetId))
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.UpdatedAt))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.CreatedAt))
	}
	if len(m.UpdateUser) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.UpdateUser)))
		i += copy(dAtA[i:], m.UpdateUser)
	}
	if m.CategoryStatus != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.CategoryStatus))
	}
	if m.StatusDate != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.StatusDate))
	}
	if m.IsAnchor {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsAnchor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsLimited {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsLimited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsRequiredCertificateFile {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsRequiredCertificateFile {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SenmallDescription) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.SenmallDescription)))
		i += copy(dAtA[i:], m.SenmallDescription)
	}
	if m.IsDelete {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		if m.IsDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Parent != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Parent.Size()))
		n6, err := m.Parent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintCategory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DepositCode) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.DepositCode)))
		i += copy(dAtA[i:], m.DepositCode)
	}
	if m.IsSelfShipping {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		if m.IsSelfShipping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsReviewProduct {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		if m.IsReviewProduct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAutoSetReviewedProduct {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		if m.IsAutoSetReviewedProduct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOld {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		if m.IsOld {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAttributeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttributeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CategoryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.CategoryId))
	}
	if m.Fields != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Fields.Size()))
		n7, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MetaData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.MetaData.Size()))
		n8, err := m.MetaData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCategory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.AttributeId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.AttributeId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Type))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.IsEffect {
		dAtA[i] = 0x30
		i++
		if m.IsEffect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowRequired {
		dAtA[i] = 0x38
		i++
		if m.ShowRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsUnique {
		dAtA[i] = 0x40
		i++
		if m.IsUnique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AttributeValue) > 0 {
		for _, msg := range m.AttributeValue {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintCategory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AttributeType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.AttributeType))
	}
	if m.IsCheckout {
		dAtA[i] = 0x58
		i++
		if m.IsCheckout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsImage {
		dAtA[i] = 0x60
		i++
		if m.IsImage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttributeValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttributeValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OptionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.OptionId))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.DisplayOrder != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.DisplayOrder))
	}
	if m.IsDelete {
		dAtA[i] = 0x20
		i++
		if m.IsDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Background) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Background)))
		i += copy(dAtA[i:], m.Background)
	}
	if len(m.ColorHexRgb) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.ColorHexRgb)))
		i += copy(dAtA[i:], m.ColorHexRgb)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Pagination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pagination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListColorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListColorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Q) > 0 {
		for _, s := range m.Q {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListColorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListColorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCategory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Color) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Color) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ColorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.ColorId))
	}
	if len(m.ColorName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.ColorName)))
		i += copy(dAtA[i:], m.ColorName)
	}
	if len(m.ColorHexRgb) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.ColorHexRgb)))
		i += copy(dAtA[i:], m.ColorHexRgb)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCategory(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GenAttrAndOptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenAttrAndOptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Options != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCategory(dAtA, i, uint64(m.Options))
	}
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GenAttrAndOptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenAttrAndOptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OptionIds) > 0 {
		dAtA10 := make([]byte, len(m.OptionIds)*10)
		var j9 int
		for _, num1 := range m.OptionIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCategory(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCategory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCategory(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCategory(uint64(m.Id))
	}
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovCategory(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCategoiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovCategory(uint64(e))
		}
		n += 1 + sovCategory(uint64(l)) + l
	}
	if m.ParentId != 0 {
		n += 1 + sovCategory(uint64(m.ParentId))
	}
	l = len(m.DepositCode)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCategoiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetaData != nil {
		l = m.MetaData.Size()
		n += 1 + l + sovCategory(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovCategory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChildCategoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Category) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CategoryId != 0 {
		n += 1 + sovCategory(uint64(m.CategoryId))
	}
	if m.ParentId != 0 {
		n += 1 + sovCategory(uint64(m.ParentId))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovCategory(uint64(m.Level))
	}
	if m.DisplayOrder != 0 {
		n += 1 + sovCategory(uint64(m.DisplayOrder))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.IsInstallment {
		n += 2
	}
	if m.IsSeller {
		n += 2
	}
	if m.IsBuyer {
		n += 2
	}
	l = len(m.RedirectLink)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.UrlKey)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.UrlPath)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.MetaDescription)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.MetaKeyword)
	if l > 0 {
		n += 2 + l + sovCategory(uint64(l))
	}
	l = len(m.SellerPolicy)
	if l > 0 {
		n += 2 + l + sovCategory(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 2 + l + sovCategory(uint64(l))
		}
	}
	l = len(m.Image)
	if l > 0 {
		n += 2 + l + sovCategory(uint64(l))
	}
	l = len(m.ThumbnailImage)
	if l > 0 {
		n += 2 + l + sovCategory(uint64(l))
	}
	if m.AttributeSetId != 0 {
		n += 2 + sovCategory(uint64(m.AttributeSetId))
	}
	l = len(m.Author)
	if l > 0 {
		n += 2 + l + sovCategory(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovCategory(uint64(m.UpdatedAt))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovCategory(uint64(m.CreatedAt))
	}
	l = len(m.UpdateUser)
	if l > 0 {
		n += 2 + l + sovCategory(uint64(l))
	}
	if m.CategoryStatus != 0 {
		n += 2 + sovCategory(uint64(m.CategoryStatus))
	}
	if m.StatusDate != 0 {
		n += 2 + sovCategory(uint64(m.StatusDate))
	}
	if m.IsAnchor {
		n += 3
	}
	if m.IsLimited {
		n += 3
	}
	if m.IsRequiredCertificateFile {
		n += 3
	}
	l = len(m.SenmallDescription)
	if l > 0 {
		n += 2 + l + sovCategory(uint64(l))
	}
	if m.IsDelete {
		n += 3
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 2 + l + sovCategory(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 2 + l + sovCategory(uint64(l))
		}
	}
	l = len(m.DepositCode)
	if l > 0 {
		n += 2 + l + sovCategory(uint64(l))
	}
	if m.IsSelfShipping {
		n += 3
	}
	if m.IsReviewProduct {
		n += 3
	}
	if m.IsAutoSetReviewedProduct {
		n += 3
	}
	if m.IsOld {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAttributeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCategory(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CategoryId != 0 {
		n += 1 + sovCategory(uint64(m.CategoryId))
	}
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetaData != nil {
		l = m.MetaData.Size()
		n += 1 + l + sovCategory(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovCategory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.AttributeId != 0 {
		n += 1 + sovCategory(uint64(m.AttributeId))
	}
	if m.Type != 0 {
		n += 1 + sovCategory(uint64(m.Type))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.IsEffect {
		n += 2
	}
	if m.ShowRequired {
		n += 2
	}
	if m.IsUnique {
		n += 2
	}
	if len(m.AttributeValue) > 0 {
		for _, e := range m.AttributeValue {
			l = e.Size()
			n += 1 + l + sovCategory(uint64(l))
		}
	}
	if m.AttributeType != 0 {
		n += 1 + sovCategory(uint64(m.AttributeType))
	}
	if m.IsCheckout {
		n += 2
	}
	if m.IsImage {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttributeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OptionId != 0 {
		n += 1 + sovCategory(uint64(m.OptionId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.DisplayOrder != 0 {
		n += 1 + sovCategory(uint64(m.DisplayOrder))
	}
	if m.IsDelete {
		n += 2
	}
	l = len(m.Background)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.ColorHexRgb)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Pagination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovCategory(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCategory(uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListColorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Q) > 0 {
		for _, s := range m.Q {
			l = len(s)
			n += 1 + l + sovCategory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListColorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovCategory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Color) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ColorId != 0 {
		n += 1 + sovCategory(uint64(m.ColorId))
	}
	l = len(m.ColorName)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.ColorHexRgb)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCategory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenAttrAndOptionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != 0 {
		n += 1 + sovCategory(uint64(m.Options))
	}
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			l = len(s)
			n += 1 + l + sovCategory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenAttrAndOptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OptionIds) > 0 {
		l = 0
		for _, e := range m.OptionIds {
			l += sovCategory(uint64(e))
		}
		n += 1 + sovCategory(uint64(l)) + l
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovCategory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCategory(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCategory(x uint64) (n int) {
	return sovCategory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCategoiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCategoiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCategoiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCategory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCategory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCategory
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCategory
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCategoiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCategoiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCategoiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = &ListMetaData{}
			}
			if err := m.MetaData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Category{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChildCategoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChildCategoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChildCategoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Category) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Category: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Category: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			m.DisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayOrder |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInstallment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInstallment = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSeller", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSeller = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuyer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuyer = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaKeyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaKeyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbnailImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbnailImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeSetId", wireType)
			}
			m.AttributeSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributeSetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryStatus", wireType)
			}
			m.CategoryStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusDate", wireType)
			}
			m.StatusDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnchor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAnchor = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLimited = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRequiredCertificateFile", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRequiredCertificateFile = bool(v != 0)
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenmallDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenmallDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDelete = bool(v != 0)
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &Category{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Category{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelfShipping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelfShipping = bool(v != 0)
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReviewProduct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReviewProduct = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoSetReviewedProduct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoSetReviewedProduct = bool(v != 0)
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOld", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOld = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttributeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttributeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttributeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = &ListMetaData{}
			}
			if err := m.MetaData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Attribute{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeId", wireType)
			}
			m.AttributeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (AttributeInputType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEffect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEffect = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowRequired = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUnique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUnique = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeValue = append(m.AttributeValue, &AttributeValue{})
			if err := m.AttributeValue[len(m.AttributeValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeType", wireType)
			}
			m.AttributeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributeType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheckout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCheckout = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsImage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsImage = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributeValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributeValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributeValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionId", wireType)
			}
			m.OptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			m.DisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayOrder |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDelete = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Background = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorHexRgb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColorHexRgb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pagination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pagination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pagination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListColorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListColorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListColorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = append(m.Q, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListColorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListColorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListColorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Color{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Color) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Color: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Color: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorId", wireType)
			}
			m.ColorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorHexRgb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColorHexRgb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenAttrAndOptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenAttrAndOptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenAttrAndOptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			m.Options = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Options |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenAttrAndOptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenAttrAndOptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenAttrAndOptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCategory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OptionIds = append(m.OptionIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCategory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCategory
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OptionIds) == 0 {
					m.OptionIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCategory
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OptionIds = append(m.OptionIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCategory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCategory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCategory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCategory
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCategory
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCategory(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCategory = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCategory   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("category/category.proto", fileDescriptor_category_3c21c33483d83222) }

var fileDescriptor_category_3c21c33483d83222 = []byte{
	// 1673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0x1b, 0x4b,
	0x15, 0x67, 0xfd, 0x27, 0xb1, 0xc7, 0x4e, 0xe2, 0x4c, 0xda, 0x74, 0x6a, 0x72, 0x73, 0xcd, 0xde,
	0xdc, 0x5e, 0x37, 0x34, 0x76, 0x49, 0x11, 0x08, 0x10, 0xd2, 0x6d, 0x2f, 0x97, 0x52, 0x44, 0x55,
	0xb4, 0x54, 0x08, 0xf5, 0x65, 0x35, 0xde, 0x3d, 0xb1, 0x47, 0x59, 0xef, 0x6e, 0x76, 0x66, 0xd3,
	0x5a, 0xa5, 0xaa, 0xc4, 0x23, 0x2f, 0xa8, 0x82, 0x37, 0xbe, 0x06, 0x5f, 0x80, 0x37, 0x9e, 0x10,
	0x88, 0x2f, 0x80, 0x2a, 0x3e, 0x08, 0x9a, 0x33, 0xbb, 0xeb, 0xb5, 0x9d, 0x7f, 0x42, 0xbc, 0x58,
	0x73, 0x7e, 0x73, 0x66, 0xe6, 0xcc, 0xf9, 0xf7, 0x9b, 0x35, 0xb9, 0xe3, 0x71, 0x05, 0xe3, 0x28,
	0x99, 0x0d, 0xf3, 0xc1, 0x20, 0x4e, 0x22, 0x15, 0xd1, 0xdb, 0x12, 0x42, 0x3f, 0x1a, 0x9c, 0x7f,
	0x67, 0xc0, 0x63, 0x31, 0xc8, 0x27, 0xbb, 0x7b, 0xe3, 0x28, 0x1a, 0x07, 0x30, 0xe4, 0xb1, 0x18,
	0xf2, 0x30, 0x8c, 0x14, 0x57, 0x22, 0x0a, 0xa5, 0x59, 0xd4, 0xed, 0x65, 0xb3, 0x28, 0x8d, 0xd2,
	0x93, 0xe1, 0x89, 0x80, 0xc0, 0x77, 0xa7, 0x5c, 0x9e, 0x1a, 0x0d, 0xfb, 0x37, 0x84, 0x3e, 0x05,
	0xf5, 0x55, 0xb6, 0x9d, 0x03, 0x67, 0x29, 0x48, 0x45, 0x37, 0x49, 0x45, 0xf8, 0xcc, 0xea, 0x59,
	0xfd, 0xba, 0x53, 0x11, 0x3e, 0x3d, 0x26, 0x6b, 0xb8, 0x52, 0xb2, 0x4a, 0xcf, 0xea, 0xb7, 0x8e,
	0xbb, 0x03, 0xb3, 0xf1, 0x20, 0xdf, 0x78, 0xf0, 0x53, 0x3d, 0xfd, 0x9c, 0xcb, 0x53, 0x27, 0xd3,
	0xb4, 0x0f, 0x48, 0xfb, 0x17, 0x42, 0xaa, 0xe7, 0xa0, 0xf8, 0x4f, 0xb8, 0xe2, 0xf4, 0x16, 0xa9,
	0xab, 0x48, 0xf1, 0x20, 0xdb, 0xd6, 0x08, 0xf6, 0x5f, 0x2c, 0x72, 0x4b, 0xab, 0x19, 0x0b, 0x04,
	0xc8, 0xdc, 0x84, 0xf9, 0x91, 0xd6, 0x4d, 0x8f, 0xd4, 0x47, 0x9c, 0xa5, 0x90, 0xcc, 0xd0, 0xca,
	0xa6, 0x63, 0x04, 0xda, 0x21, 0x55, 0xe1, 0x4b, 0x56, 0xed, 0x55, 0xfb, 0x75, 0x47, 0x0f, 0xe9,
	0x1e, 0x69, 0xc6, 0x3c, 0x81, 0x50, 0xb9, 0xc2, 0x67, 0x35, 0x34, 0x67, 0x0e, 0x50, 0x9b, 0xb4,
	0x7d, 0x88, 0x23, 0x29, 0x94, 0xeb, 0x45, 0x3e, 0xb0, 0x3a, 0x6e, 0xb6, 0x80, 0xd9, 0x7f, 0xb0,
	0xc8, 0xed, 0x25, 0xb3, 0x65, 0x1c, 0x85, 0x12, 0xe8, 0x63, 0xd2, 0x9c, 0x82, 0xe2, 0xae, 0xcf,
	0x15, 0xcf, 0x4c, 0xff, 0x6c, 0x70, 0x61, 0xec, 0x06, 0x65, 0xf7, 0x38, 0xf3, 0x55, 0xf4, 0x11,
	0xa9, 0x05, 0x42, 0x2a, 0x56, 0xe9, 0x55, 0xfb, 0xad, 0xe3, 0x4f, 0x2f, 0x59, 0x5d, 0xc4, 0x0c,
	0x95, 0xed, 0xfb, 0x64, 0x47, 0x07, 0x72, 0x22, 0x02, 0xbf, 0x14, 0x4d, 0x4a, 0x49, 0x2d, 0xe6,
	0x6a, 0x82, 0x96, 0x34, 0x1d, 0x1c, 0xdb, 0xbf, 0x6f, 0x91, 0x46, 0xae, 0x43, 0x7b, 0xa4, 0x95,
	0x6f, 0xe9, 0x16, 0x31, 0x2f, 0x43, 0x8b, 0xde, 0xaa, 0x2c, 0x7b, 0x2b, 0x3f, 0xa0, 0x3a, 0x3f,
	0x40, 0x63, 0x21, 0x9f, 0x02, 0xba, 0xb6, 0xe9, 0xe0, 0x58, 0xc7, 0x26, 0x80, 0x73, 0x08, 0xd8,
	0x9a, 0x09, 0x3f, 0x0a, 0xf4, 0x80, 0x6c, 0xf8, 0x42, 0xc6, 0x01, 0x9f, 0xb9, 0x51, 0xe2, 0x43,
	0xc2, 0xd6, 0x71, 0x76, 0x11, 0xd4, 0x36, 0xfa, 0x20, 0xbd, 0x44, 0xc4, 0x3a, 0xb9, 0x59, 0x03,
	0xb7, 0x2d, 0x43, 0xf4, 0x1e, 0xd9, 0x14, 0xd2, 0x15, 0xa1, 0x54, 0x3c, 0x08, 0xa6, 0x10, 0x2a,
	0xd6, 0xec, 0x59, 0xfd, 0x86, 0xb3, 0x84, 0xea, 0xbb, 0x08, 0xe9, 0x4a, 0x08, 0x02, 0x48, 0x18,
	0x41, 0x95, 0x39, 0x40, 0xbb, 0xa4, 0x21, 0xa4, 0x3b, 0x4a, 0x67, 0x90, 0xb0, 0x16, 0x4e, 0x16,
	0xb2, 0xb6, 0x34, 0x01, 0x5f, 0x24, 0xe0, 0x29, 0x37, 0x10, 0xe1, 0x29, 0x6b, 0xa3, 0x15, 0x8b,
	0x20, 0x65, 0x64, 0x3d, 0x4d, 0x02, 0xf7, 0x14, 0x66, 0x6c, 0x03, 0xe7, 0x73, 0x51, 0xef, 0xad,
	0x87, 0xe8, 0xab, 0x4d, 0x9c, 0x2a, 0x64, 0x7a, 0x48, 0x3a, 0x26, 0xfa, 0xa5, 0x4b, 0x6e, 0xa1,
	0xce, 0x0a, 0xae, 0xb3, 0x13, 0xb1, 0x53, 0x98, 0xbd, 0x8e, 0x12, 0x9f, 0x75, 0x4c, 0x76, 0x96,
	0x31, 0x6d, 0xab, 0xb9, 0x91, 0x1b, 0x47, 0x81, 0xf0, 0x66, 0x6c, 0xdb, 0xd8, 0xba, 0x00, 0xd2,
	0x5d, 0xb2, 0x26, 0xa6, 0x7c, 0x0c, 0x92, 0xd1, 0x5e, 0xb5, 0xdf, 0x74, 0x32, 0x49, 0x47, 0x0a,
	0x47, 0x6c, 0xc7, 0x54, 0x11, 0x0a, 0xb4, 0x4f, 0xb6, 0xd4, 0x24, 0x9d, 0x8e, 0x42, 0x2e, 0x02,
	0xd7, 0xcc, 0xdf, 0xc2, 0xf9, 0x65, 0x58, 0xdf, 0x86, 0x2b, 0x95, 0x88, 0x51, 0xaa, 0xc0, 0x95,
	0x80, 0x69, 0x73, 0x1b, 0xc3, 0xba, 0x82, 0x6b, 0x1b, 0x78, 0xaa, 0x26, 0x51, 0xc2, 0x76, 0x71,
	0xb3, 0x4c, 0xa2, 0xfb, 0x84, 0xa4, 0xb1, 0xcf, 0x15, 0xf8, 0x2e, 0x57, 0xec, 0x4e, 0xcf, 0xea,
	0x57, 0x9d, 0x12, 0xa2, 0xe7, 0xbd, 0x04, 0xf2, 0x79, 0x66, 0xe6, 0xe7, 0x88, 0xce, 0x18, 0xa3,
	0xed, 0xa6, 0x12, 0x12, 0x76, 0xd7, 0x64, 0x4c, 0x09, 0xd2, 0xf7, 0x29, 0x92, 0x5c, 0x2a, 0xae,
	0x52, 0xc9, 0xba, 0x68, 0xe4, 0x32, 0xac, 0xf7, 0x32, 0x23, 0x5d, 0x9d, 0xc0, 0xbe, 0x89, 0x87,
	0x95, 0xa1, 0x2c, 0xab, 0x78, 0xe8, 0xe9, 0x8b, 0xec, 0x15, 0x59, 0x65, 0x00, 0x6d, 0xab, 0x90,
	0x6e, 0x20, 0xa6, 0x42, 0x81, 0xcf, 0x3e, 0xc1, 0xe9, 0x12, 0x42, 0x9f, 0x90, 0x3d, 0x21, 0xdd,
	0x04, 0xce, 0x52, 0x91, 0x80, 0xef, 0x7a, 0x90, 0x28, 0x71, 0x22, 0xb4, 0x15, 0xee, 0x89, 0x08,
	0x80, 0xed, 0xe3, 0x8a, 0x2b, 0x75, 0xe8, 0x43, 0xb2, 0x23, 0x21, 0x9c, 0xf2, 0x20, 0x58, 0x48,
	0xa2, 0x4f, 0xf1, 0xde, 0x17, 0x4d, 0x65, 0x36, 0xfb, 0x10, 0x80, 0x02, 0xd6, 0x2b, 0x6c, 0x36,
	0x00, 0xfd, 0x3e, 0x59, 0x33, 0x25, 0xce, 0xbe, 0x85, 0x2d, 0xec, 0xda, 0x26, 0x94, 0xa9, 0xd3,
	0x1f, 0x91, 0x86, 0xa7, 0x7b, 0x50, 0x02, 0x21, 0xb3, 0x6f, 0xd6, 0xbf, 0x8a, 0x05, 0x2b, 0x9d,
	0xf7, 0xb3, 0xd5, 0xce, 0xab, 0xb3, 0xcb, 0x14, 0xec, 0x89, 0x2b, 0x27, 0x22, 0x8e, 0x45, 0x38,
	0x66, 0x07, 0x68, 0xfe, 0x0a, 0x4e, 0x1f, 0x90, 0x6d, 0xf4, 0xda, 0xb9, 0x80, 0xd7, 0x6e, 0x9c,
	0x44, 0x7e, 0xea, 0x29, 0xf6, 0x39, 0x2a, 0xaf, 0x4e, 0x64, 0x71, 0xe0, 0xa9, 0x8a, 0x30, 0x3b,
	0xcd, 0x2c, 0xf8, 0xc5, 0xc2, 0x7b, 0x45, 0x1c, 0x2e, 0xd5, 0xc1, 0x9a, 0x92, 0x6e, 0x14, 0xf8,
	0xec, 0x0b, 0xd4, 0xce, 0xa4, 0x9f, 0xd7, 0x1a, 0xfd, 0xce, 0x7d, 0x87, 0x0a, 0xe9, 0x62, 0x20,
	0x12, 0x90, 0x2a, 0x11, 0x9e, 0x02, 0xdf, 0xfe, 0x01, 0xf6, 0xed, 0xc7, 0x79, 0x61, 0xe4, 0xf4,
	0x47, 0x49, 0x0d, 0x5d, 0x90, 0xf5, 0x6d, 0xbc, 0xba, 0x61, 0xe5, 0x4a, 0xce, 0xca, 0xf6, 0xd4,
	0x70, 0x50, 0xb1, 0xb6, 0xe0, 0xce, 0xeb, 0x7b, 0xfa, 0xff, 0x42, 0xe8, 0x1f, 0x2c, 0xb2, 0xbb,
	0x7c, 0xde, 0xff, 0x8f, 0xf4, 0xbe, 0xbb, 0x40, 0x7a, 0xbd, 0x4b, 0x56, 0xcf, 0xfd, 0x64, 0x58,
	0xef, 0x9f, 0x55, 0xd2, 0x2c, 0xb0, 0x82, 0x77, 0xac, 0x12, 0xef, 0xe4, 0x8e, 0xac, 0x94, 0x1c,
	0x69, 0x93, 0xf6, 0xbc, 0x13, 0x09, 0x1f, 0xb9, 0xab, 0xee, 0x2c, 0x60, 0xf4, 0xc7, 0xa4, 0xa6,
	0x66, 0xb1, 0xe1, 0xb0, 0xcd, 0xe3, 0xfb, 0xd7, 0xd9, 0xf3, 0x2c, 0x8c, 0x53, 0xf5, 0x72, 0x16,
	0x83, 0x83, 0xcb, 0x96, 0x29, 0xab, 0xbe, 0x4a, 0x59, 0xa6, 0x00, 0xe1, 0xe4, 0x04, 0x3c, 0x85,
	0xa4, 0x68, 0x0a, 0xd0, 0x00, 0xd8, 0xc2, 0x27, 0xd1, 0xeb, 0xa2, 0xe4, 0x91, 0x18, 0x1b, 0xce,
	0x22, 0x98, 0xed, 0x91, 0x86, 0xe2, 0x2c, 0x05, 0xa4, 0x45, 0xb3, 0x87, 0x01, 0xe8, 0x0b, 0xb2,
	0x35, 0xbf, 0xd2, 0x39, 0x0f, 0x52, 0x60, 0x4d, 0xf4, 0xee, 0xe7, 0xd7, 0xdd, 0xe6, 0xd7, 0x5a,
	0xd9, 0x59, 0x5e, 0xad, 0x59, 0x76, 0x0e, 0xa1, 0x77, 0x08, 0x7a, 0x6e, 0x09, 0xd5, 0x97, 0x17,
	0xd2, 0xf5, 0x26, 0xe0, 0x9d, 0x46, 0xa9, 0xca, 0xa8, 0xb4, 0x0c, 0x65, 0x4c, 0x6b, 0x68, 0xa4,
	0x5d, 0x30, 0x2d, 0xca, 0xf6, 0xdf, 0x2d, 0xb2, 0xb9, 0x68, 0x89, 0xbe, 0x67, 0x84, 0x5e, 0x9b,
	0xa7, 0xf3, 0x1c, 0xd0, 0x84, 0x65, 0x6e, 0x97, 0x3d, 0xfb, 0x8c, 0xb1, 0x2b, 0x4f, 0x8b, 0xea,
	0x45, 0x4f, 0x8b, 0x85, 0x36, 0x58, 0x5b, 0x6e, 0x83, 0xfb, 0x84, 0x8c, 0xb8, 0x77, 0x3a, 0x4e,
	0xa2, 0x34, 0xf4, 0xb3, 0x20, 0x96, 0x10, 0x7d, 0x86, 0x17, 0x05, 0x51, 0xe2, 0x4e, 0xe0, 0x8d,
	0x9b, 0x8c, 0x47, 0x18, 0xc7, 0xa6, 0xb3, 0x08, 0xda, 0xdf, 0x23, 0xe4, 0x97, 0x7c, 0x2c, 0x42,
	0x7c, 0x9a, 0xe3, 0x43, 0x48, 0x77, 0xfe, 0xfc, 0x1d, 0x8c, 0x82, 0x79, 0x46, 0x8d, 0x21, 0xab,
	0x6e, 0x1c, 0xdb, 0x3d, 0xd2, 0xc1, 0x37, 0xa6, 0xde, 0x2c, 0x2f, 0xed, 0x36, 0xb1, 0xce, 0x98,
	0x85, 0x7c, 0x6d, 0x9d, 0xd9, 0x5f, 0x93, 0xed, 0x92, 0x46, 0x56, 0x8c, 0x0f, 0xb3, 0x4a, 0xb2,
	0x30, 0xd6, 0x7b, 0x97, 0xb5, 0x5f, 0x5c, 0x63, 0xaa, 0xe8, 0x3d, 0xa9, 0xa3, 0xa8, 0xc3, 0x62,
	0x4c, 0x2f, 0xdc, 0x5c, 0xc8, 0x48, 0xb9, 0x38, 0xc6, 0x12, 0x33, 0xae, 0x2e, 0x21, 0xab, 0xbe,
	0xa8, 0x5e, 0xe0, 0x8b, 0xf9, 0xe3, 0xa2, 0x56, 0x7a, 0x5c, 0xd8, 0x2f, 0x09, 0x7b, 0x0a, 0xa1,
	0x0e, 0xfa, 0xe3, 0xd0, 0x7f, 0x81, 0x81, 0x2d, 0x9a, 0x19, 0x23, 0xeb, 0x26, 0xd4, 0x32, 0x33,
	0x29, 0x17, 0xb5, 0x45, 0x45, 0xe2, 0x49, 0x6c, 0x1c, 0x4d, 0xa7, 0x84, 0xd8, 0xbf, 0x25, 0x77,
	0x2f, 0xd8, 0x35, 0xf3, 0xd2, 0x27, 0x79, 0x4a, 0x3d, 0xc3, 0x4f, 0x0c, 0xfd, 0x6d, 0x40, 0x8a,
	0x94, 0x92, 0xf4, 0xcb, 0x95, 0xbd, 0x6f, 0xd2, 0x94, 0x4a, 0x6b, 0x0e, 0x7f, 0x46, 0xe8, 0x6a,
	0x77, 0xa0, 0x4d, 0x52, 0xff, 0x7a, 0x1a, 0xab, 0x59, 0xe7, 0x1b, 0xb4, 0x4d, 0x1a, 0x5f, 0xe9,
	0x7a, 0x78, 0x12, 0xbd, 0xe9, 0x58, 0x28, 0x45, 0xd3, 0x51, 0xa4, 0xa5, 0x0a, 0x6d, 0x91, 0xf5,
	0x97, 0xf0, 0x46, 0x69, 0xa1, 0x7a, 0xfc, 0xd7, 0x35, 0xb2, 0x95, 0xb3, 0xe5, 0xaf, 0x20, 0x39,
	0x17, 0x1e, 0x50, 0x49, 0x5a, 0xa5, 0xef, 0x36, 0x7a, 0x59, 0x7f, 0x5a, 0xfd, 0xb6, 0xeb, 0x5e,
	0xc7, 0xc7, 0x36, 0xfb, 0xdd, 0xbf, 0xfe, 0xf3, 0xc7, 0x0a, 0xa5, 0x9d, 0xfc, 0x13, 0x54, 0x80,
	0x1c, 0xbe, 0x15, 0xfe, 0x3b, 0xfa, 0x9e, 0x6c, 0x2c, 0x7c, 0xf4, 0xd0, 0x6f, 0x5f, 0xd1, 0xe4,
	0x97, 0xbf, 0xe8, 0xba, 0x0f, 0x6e, 0xa6, 0x6c, 0xe2, 0x63, 0xef, 0xa0, 0x15, 0x1b, 0xb4, 0x55,
	0xb2, 0x82, 0xfe, 0xd9, 0x22, 0x9b, 0x8b, 0x14, 0x44, 0xaf, 0xda, 0x75, 0x85, 0x19, 0xbb, 0x47,
	0x37, 0xd4, 0xce, 0x8c, 0x78, 0x80, 0x46, 0xdc, 0xa3, 0x07, 0x0b, 0xae, 0x28, 0x11, 0xe9, 0xbb,
	0xe1, 0x3c, 0xe2, 0xf4, 0x83, 0x45, 0xda, 0x65, 0x2e, 0xa7, 0x87, 0x97, 0x47, 0x65, 0x99, 0xf0,
	0xbb, 0xd7, 0x26, 0x97, 0xfd, 0x08, 0x8d, 0x39, 0xa2, 0x9d, 0xd2, 0x99, 0x18, 0x97, 0x57, 0x77,
	0xe9, 0x9d, 0x32, 0xa6, 0x39, 0x6e, 0xf8, 0x56, 0xff, 0xbe, 0xa3, 0x11, 0x69, 0x16, 0x1d, 0x82,
	0x7e, 0x71, 0x55, 0x04, 0x4a, 0x5d, 0xa6, 0xdb, 0xbf, 0x5e, 0x31, 0xf3, 0xd0, 0x16, 0x1a, 0xd5,
	0xa4, 0xeb, 0x43, 0xac, 0x73, 0x49, 0xff, 0x64, 0x91, 0xed, 0x95, 0xaa, 0xa3, 0xc3, 0x4b, 0x3d,
	0x71, 0x71, 0xd5, 0x77, 0x1f, 0xde, 0x7c, 0x41, 0x66, 0xc9, 0x1e, 0x5a, 0xb2, 0x6b, 0x6f, 0x0f,
	0xc7, 0x10, 0x1e, 0x69, 0x77, 0x1c, 0x65, 0x8d, 0xe2, 0x87, 0xd6, 0xe1, 0x93, 0x2f, 0xff, 0xf6,
	0x71, 0xdf, 0xfa, 0xc7, 0xc7, 0x7d, 0xeb, 0xdf, 0x1f, 0xf7, 0xad, 0x57, 0xc7, 0x63, 0xa1, 0x02,
	0x3e, 0xca, 0xcf, 0x08, 0xe7, 0x7f, 0x90, 0x88, 0x50, 0x41, 0x12, 0xf2, 0xe0, 0x88, 0xc7, 0x42,
	0x1e, 0x8d, 0xa3, 0xe2, 0x6f, 0x98, 0xd1, 0x1a, 0xea, 0x3c, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x59, 0x21, 0x3b, 0xb4, 0xa2, 0x11, 0x00, 0x00,
}
