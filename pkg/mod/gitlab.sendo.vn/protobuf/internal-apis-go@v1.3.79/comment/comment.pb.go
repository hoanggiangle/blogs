// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comment/comment.proto

package comment // import "gitlab.sendo.vn/protobuf/internal-apis-go/comment"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import base "gitlab.sendo.vn/protobuf/internal-apis-go/base"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ListRequest_Sort int32

const (
	// new comment first
	ListRequest_DEFAULT ListRequest_Sort = 0
	ListRequest_LIKE    ListRequest_Sort = 1
	// new comment or reply first
	ListRequest_COMMENT_OR_REPLY ListRequest_Sort = 2
)

var ListRequest_Sort_name = map[int32]string{
	0: "DEFAULT",
	1: "LIKE",
	2: "COMMENT_OR_REPLY",
}
var ListRequest_Sort_value = map[string]int32{
	"DEFAULT":          0,
	"LIKE":             1,
	"COMMENT_OR_REPLY": 2,
}

func (x ListRequest_Sort) String() string {
	return proto.EnumName(ListRequest_Sort_name, int32(x))
}
func (ListRequest_Sort) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{1, 0}
}

type ListAppRequest_Sort int32

const (
	// new comment first
	ListAppRequest_DEFAULT ListAppRequest_Sort = 0
	ListAppRequest_LIKE    ListAppRequest_Sort = 1
)

var ListAppRequest_Sort_name = map[int32]string{
	0: "DEFAULT",
	1: "LIKE",
}
var ListAppRequest_Sort_value = map[string]int32{
	"DEFAULT": 0,
	"LIKE":    1,
}

func (x ListAppRequest_Sort) String() string {
	return proto.EnumName(ListAppRequest_Sort_name, int32(x))
}
func (ListAppRequest_Sort) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{19, 0}
}

type GetOwnerCommentRequest_Sort int32

const (
	// new comment first
	GetOwnerCommentRequest_DEFAULT GetOwnerCommentRequest_Sort = 0
	GetOwnerCommentRequest_LIKE    GetOwnerCommentRequest_Sort = 1
)

var GetOwnerCommentRequest_Sort_name = map[int32]string{
	0: "DEFAULT",
	1: "LIKE",
}
var GetOwnerCommentRequest_Sort_value = map[string]int32{
	"DEFAULT": 0,
	"LIKE":    1,
}

func (x GetOwnerCommentRequest_Sort) String() string {
	return proto.EnumName(GetOwnerCommentRequest_Sort_name, int32(x))
}
func (GetOwnerCommentRequest_Sort) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{23, 0}
}

// Pair of type and external (product/shop) id
type ExternalThreadId struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Condition:
	//	*ExternalThreadId_NumValue
	Condition            isExternalThreadId_Condition `protobuf_oneof:"condition"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ExternalThreadId) Reset()         { *m = ExternalThreadId{} }
func (m *ExternalThreadId) String() string { return proto.CompactTextString(m) }
func (*ExternalThreadId) ProtoMessage()    {}
func (*ExternalThreadId) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{0}
}
func (m *ExternalThreadId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalThreadId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalThreadId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExternalThreadId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalThreadId.Merge(dst, src)
}
func (m *ExternalThreadId) XXX_Size() int {
	return m.Size()
}
func (m *ExternalThreadId) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalThreadId.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalThreadId proto.InternalMessageInfo

type isExternalThreadId_Condition interface {
	isExternalThreadId_Condition()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExternalThreadId_NumValue struct {
	NumValue int64 `protobuf:"varint,2,opt,name=num_value,json=numValue,proto3,oneof"`
}

func (*ExternalThreadId_NumValue) isExternalThreadId_Condition() {}

func (m *ExternalThreadId) GetCondition() isExternalThreadId_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ExternalThreadId) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ExternalThreadId) GetNumValue() int64 {
	if x, ok := m.GetCondition().(*ExternalThreadId_NumValue); ok {
		return x.NumValue
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExternalThreadId) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExternalThreadId_OneofMarshaler, _ExternalThreadId_OneofUnmarshaler, _ExternalThreadId_OneofSizer, []interface{}{
		(*ExternalThreadId_NumValue)(nil),
	}
}

func _ExternalThreadId_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExternalThreadId)
	// condition
	switch x := m.Condition.(type) {
	case *ExternalThreadId_NumValue:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.NumValue))
	case nil:
	default:
		return fmt.Errorf("ExternalThreadId.Condition has unexpected type %T", x)
	}
	return nil
}

func _ExternalThreadId_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExternalThreadId)
	switch tag {
	case 2: // condition.num_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Condition = &ExternalThreadId_NumValue{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _ExternalThreadId_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExternalThreadId)
	// condition
	switch x := m.Condition.(type) {
	case *ExternalThreadId_NumValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.NumValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListRequest struct {
	// Types that are valid to be assigned to Condition:
	//	*ListRequest_ExternalId
	Condition            isListRequest_Condition `protobuf_oneof:"condition"`
	Sort                 ListRequest_Sort        `protobuf:"varint,3,opt,name=sort,proto3,enum=sendo.v1.api.comment.ListRequest_Sort" json:"sort,omitempty"`
	Pagination           *base.Pagination        `protobuf:"bytes,4,opt,name=pagination" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{1}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(dst, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

type isListRequest_Condition interface {
	isListRequest_Condition()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListRequest_ExternalId struct {
	ExternalId *ExternalThreadId `protobuf:"bytes,1,opt,name=external_id,json=externalId,oneof"`
}

func (*ListRequest_ExternalId) isListRequest_Condition() {}

func (m *ListRequest) GetCondition() isListRequest_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ListRequest) GetExternalId() *ExternalThreadId {
	if x, ok := m.GetCondition().(*ListRequest_ExternalId); ok {
		return x.ExternalId
	}
	return nil
}

func (m *ListRequest) GetSort() ListRequest_Sort {
	if m != nil {
		return m.Sort
	}
	return ListRequest_DEFAULT
}

func (m *ListRequest) GetPagination() *base.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ListRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ListRequest_OneofMarshaler, _ListRequest_OneofUnmarshaler, _ListRequest_OneofSizer, []interface{}{
		(*ListRequest_ExternalId)(nil),
	}
}

func _ListRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ListRequest)
	// condition
	switch x := m.Condition.(type) {
	case *ListRequest_ExternalId:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExternalId); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ListRequest.Condition has unexpected type %T", x)
	}
	return nil
}

func _ListRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ListRequest)
	switch tag {
	case 1: // condition.external_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExternalThreadId)
		err := b.DecodeMessage(msg)
		m.Condition = &ListRequest_ExternalId{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ListRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ListRequest)
	// condition
	switch x := m.Condition.(type) {
	case *ListRequest_ExternalId:
		s := proto.Size(x.ExternalId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListResponse struct {
	// number of comments
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// subset of comments, based on pagination
	Comments             []*base.Comment `protobuf:"bytes,2,rep,name=comments" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{2}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(dst, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListResponse) GetComments() []*base.Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type GetRepliesRequest struct {
	ParentId             *base.CommentId  `protobuf:"bytes,1,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Pagination           *base.Pagination `protobuf:"bytes,2,opt,name=pagination" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetRepliesRequest) Reset()         { *m = GetRepliesRequest{} }
func (m *GetRepliesRequest) String() string { return proto.CompactTextString(m) }
func (*GetRepliesRequest) ProtoMessage()    {}
func (*GetRepliesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{3}
}
func (m *GetRepliesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRepliesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRepliesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRepliesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRepliesRequest.Merge(dst, src)
}
func (m *GetRepliesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRepliesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRepliesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRepliesRequest proto.InternalMessageInfo

func (m *GetRepliesRequest) GetParentId() *base.CommentId {
	if m != nil {
		return m.ParentId
	}
	return nil
}

func (m *GetRepliesRequest) GetPagination() *base.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type GetRepliesResponse struct {
	Total                int32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Comments             []*base.Comment `protobuf:"bytes,2,rep,name=comments" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetRepliesResponse) Reset()         { *m = GetRepliesResponse{} }
func (m *GetRepliesResponse) String() string { return proto.CompactTextString(m) }
func (*GetRepliesResponse) ProtoMessage()    {}
func (*GetRepliesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{4}
}
func (m *GetRepliesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRepliesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRepliesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRepliesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRepliesResponse.Merge(dst, src)
}
func (m *GetRepliesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRepliesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRepliesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRepliesResponse proto.InternalMessageInfo

func (m *GetRepliesResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetRepliesResponse) GetComments() []*base.Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type AddRequest struct {
	ExternalId           *ExternalThreadId `protobuf:"bytes,1,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	Comment              *base.Comment     `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{5}
}
func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(dst, src)
}
func (m *AddRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetExternalId() *ExternalThreadId {
	if m != nil {
		return m.ExternalId
	}
	return nil
}

func (m *AddRequest) GetComment() *base.Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type AddResponse struct {
	// only response id
	Comment              *base.Comment `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddResponse) Reset()         { *m = AddResponse{} }
func (m *AddResponse) String() string { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()    {}
func (*AddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{6}
}
func (m *AddResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddResponse.Merge(dst, src)
}
func (m *AddResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddResponse proto.InternalMessageInfo

func (m *AddResponse) GetComment() *base.Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type DeleteRequest struct {
	Id                   *base.CommentId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OwnerId              int64           `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{7}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(dst, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetId() *base.CommentId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeleteRequest) GetOwnerId() int64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

type DeleteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{8}
}
func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(dst, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

type EditRequest struct {
	Id                   *base.CommentId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Content              string          `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	OwnerId              int64           `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EditRequest) Reset()         { *m = EditRequest{} }
func (m *EditRequest) String() string { return proto.CompactTextString(m) }
func (*EditRequest) ProtoMessage()    {}
func (*EditRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{9}
}
func (m *EditRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EditRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditRequest.Merge(dst, src)
}
func (m *EditRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditRequest proto.InternalMessageInfo

func (m *EditRequest) GetId() *base.CommentId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EditRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *EditRequest) GetOwnerId() int64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

type EditResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditResponse) Reset()         { *m = EditResponse{} }
func (m *EditResponse) String() string { return proto.CompactTextString(m) }
func (*EditResponse) ProtoMessage()    {}
func (*EditResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{10}
}
func (m *EditResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EditResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditResponse.Merge(dst, src)
}
func (m *EditResponse) XXX_Size() int {
	return m.Size()
}
func (m *EditResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EditResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EditResponse proto.InternalMessageInfo

type CountRequest struct {
	ExternalId           *ExternalThreadId `protobuf:"bytes,1,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CountRequest) Reset()         { *m = CountRequest{} }
func (m *CountRequest) String() string { return proto.CompactTextString(m) }
func (*CountRequest) ProtoMessage()    {}
func (*CountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{11}
}
func (m *CountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountRequest.Merge(dst, src)
}
func (m *CountRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountRequest proto.InternalMessageInfo

func (m *CountRequest) GetExternalId() *ExternalThreadId {
	if m != nil {
		return m.ExternalId
	}
	return nil
}

type CountResponse struct {
	TotalParent          int32    `protobuf:"varint,1,opt,name=total_parent,json=totalParent,proto3" json:"total_parent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountResponse) Reset()         { *m = CountResponse{} }
func (m *CountResponse) String() string { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()    {}
func (*CountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{12}
}
func (m *CountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountResponse.Merge(dst, src)
}
func (m *CountResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountResponse proto.InternalMessageInfo

func (m *CountResponse) GetTotalParent() int32 {
	if m != nil {
		return m.TotalParent
	}
	return 0
}

type GetExternalRequest struct {
	Id                   *base.CommentId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetExternalRequest) Reset()         { *m = GetExternalRequest{} }
func (m *GetExternalRequest) String() string { return proto.CompactTextString(m) }
func (*GetExternalRequest) ProtoMessage()    {}
func (*GetExternalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{13}
}
func (m *GetExternalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExternalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExternalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetExternalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExternalRequest.Merge(dst, src)
}
func (m *GetExternalRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetExternalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExternalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetExternalRequest proto.InternalMessageInfo

func (m *GetExternalRequest) GetId() *base.CommentId {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetExternalResponse struct {
	ExternalId           *ExternalThreadId `protobuf:"bytes,1,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetExternalResponse) Reset()         { *m = GetExternalResponse{} }
func (m *GetExternalResponse) String() string { return proto.CompactTextString(m) }
func (*GetExternalResponse) ProtoMessage()    {}
func (*GetExternalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{14}
}
func (m *GetExternalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExternalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExternalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetExternalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExternalResponse.Merge(dst, src)
}
func (m *GetExternalResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetExternalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExternalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExternalResponse proto.InternalMessageInfo

func (m *GetExternalResponse) GetExternalId() *ExternalThreadId {
	if m != nil {
		return m.ExternalId
	}
	return nil
}

type GetAllUserRequest struct {
	Id                   *base.CommentId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetAllUserRequest) Reset()         { *m = GetAllUserRequest{} }
func (m *GetAllUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllUserRequest) ProtoMessage()    {}
func (*GetAllUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{15}
}
func (m *GetAllUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllUserRequest.Merge(dst, src)
}
func (m *GetAllUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllUserRequest proto.InternalMessageInfo

func (m *GetAllUserRequest) GetId() *base.CommentId {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetAllUserResponse struct {
	Users                []int64  `protobuf:"varint,1,rep,packed,name=users" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllUserResponse) Reset()         { *m = GetAllUserResponse{} }
func (m *GetAllUserResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllUserResponse) ProtoMessage()    {}
func (*GetAllUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{16}
}
func (m *GetAllUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllUserResponse.Merge(dst, src)
}
func (m *GetAllUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllUserResponse proto.InternalMessageInfo

func (m *GetAllUserResponse) GetUsers() []int64 {
	if m != nil {
		return m.Users
	}
	return nil
}

type GetCommentDetailsRequest struct {
	Id                   *base.CommentId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetCommentDetailsRequest) Reset()         { *m = GetCommentDetailsRequest{} }
func (m *GetCommentDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*GetCommentDetailsRequest) ProtoMessage()    {}
func (*GetCommentDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{17}
}
func (m *GetCommentDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommentDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommentDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCommentDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentDetailsRequest.Merge(dst, src)
}
func (m *GetCommentDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCommentDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentDetailsRequest proto.InternalMessageInfo

func (m *GetCommentDetailsRequest) GetId() *base.CommentId {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetCommentDetailsResponse struct {
	Comment              *base.Comment `protobuf:"bytes,1,opt,name=comment" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetCommentDetailsResponse) Reset()         { *m = GetCommentDetailsResponse{} }
func (m *GetCommentDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCommentDetailsResponse) ProtoMessage()    {}
func (*GetCommentDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{18}
}
func (m *GetCommentDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommentDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommentDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCommentDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentDetailsResponse.Merge(dst, src)
}
func (m *GetCommentDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCommentDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentDetailsResponse proto.InternalMessageInfo

func (m *GetCommentDetailsResponse) GetComment() *base.Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type ListAppRequest struct {
	ExternalId           *ExternalThreadId   `protobuf:"bytes,1,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	Sort                 ListAppRequest_Sort `protobuf:"varint,2,opt,name=sort,proto3,enum=sendo.v1.api.comment.ListAppRequest_Sort" json:"sort,omitempty"`
	Pagination           *base.Pagination    `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListAppRequest) Reset()         { *m = ListAppRequest{} }
func (m *ListAppRequest) String() string { return proto.CompactTextString(m) }
func (*ListAppRequest) ProtoMessage()    {}
func (*ListAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{19}
}
func (m *ListAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppRequest.Merge(dst, src)
}
func (m *ListAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppRequest proto.InternalMessageInfo

func (m *ListAppRequest) GetExternalId() *ExternalThreadId {
	if m != nil {
		return m.ExternalId
	}
	return nil
}

func (m *ListAppRequest) GetSort() ListAppRequest_Sort {
	if m != nil {
		return m.Sort
	}
	return ListAppRequest_DEFAULT
}

func (m *ListAppRequest) GetPagination() *base.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListAppResponse struct {
	// number of comments
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// subset of comments, based on pagination
	Comments             []*base.Comment `protobuf:"bytes,2,rep,name=comments" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListAppResponse) Reset()         { *m = ListAppResponse{} }
func (m *ListAppResponse) String() string { return proto.CompactTextString(m) }
func (*ListAppResponse) ProtoMessage()    {}
func (*ListAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{20}
}
func (m *ListAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppResponse.Merge(dst, src)
}
func (m *ListAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppResponse proto.InternalMessageInfo

func (m *ListAppResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListAppResponse) GetComments() []*base.Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type AdminDeleteRequest struct {
	Id                   *base.CommentId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AdminDeleteRequest) Reset()         { *m = AdminDeleteRequest{} }
func (m *AdminDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*AdminDeleteRequest) ProtoMessage()    {}
func (*AdminDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{21}
}
func (m *AdminDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminDeleteRequest.Merge(dst, src)
}
func (m *AdminDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminDeleteRequest proto.InternalMessageInfo

func (m *AdminDeleteRequest) GetId() *base.CommentId {
	if m != nil {
		return m.Id
	}
	return nil
}

type AdminDeleteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminDeleteResponse) Reset()         { *m = AdminDeleteResponse{} }
func (m *AdminDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*AdminDeleteResponse) ProtoMessage()    {}
func (*AdminDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{22}
}
func (m *AdminDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminDeleteResponse.Merge(dst, src)
}
func (m *AdminDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *AdminDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminDeleteResponse proto.InternalMessageInfo

type GetOwnerCommentRequest struct {
	OwnerId              int64                       `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CreatedAt            int64                       `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Sort                 GetOwnerCommentRequest_Sort `protobuf:"varint,3,opt,name=sort,proto3,enum=sendo.v1.api.comment.GetOwnerCommentRequest_Sort" json:"sort,omitempty"`
	Pagination           *base.Pagination            `protobuf:"bytes,4,opt,name=pagination" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetOwnerCommentRequest) Reset()         { *m = GetOwnerCommentRequest{} }
func (m *GetOwnerCommentRequest) String() string { return proto.CompactTextString(m) }
func (*GetOwnerCommentRequest) ProtoMessage()    {}
func (*GetOwnerCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{23}
}
func (m *GetOwnerCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnerCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnerCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOwnerCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnerCommentRequest.Merge(dst, src)
}
func (m *GetOwnerCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnerCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnerCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnerCommentRequest proto.InternalMessageInfo

func (m *GetOwnerCommentRequest) GetOwnerId() int64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *GetOwnerCommentRequest) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *GetOwnerCommentRequest) GetSort() GetOwnerCommentRequest_Sort {
	if m != nil {
		return m.Sort
	}
	return GetOwnerCommentRequest_DEFAULT
}

func (m *GetOwnerCommentRequest) GetPagination() *base.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type GetOwnerCommentResponse struct {
	Comments             []*GetOwnerCommentResponse_CmtProduct `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GetOwnerCommentResponse) Reset()         { *m = GetOwnerCommentResponse{} }
func (m *GetOwnerCommentResponse) String() string { return proto.CompactTextString(m) }
func (*GetOwnerCommentResponse) ProtoMessage()    {}
func (*GetOwnerCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{24}
}
func (m *GetOwnerCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnerCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnerCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOwnerCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnerCommentResponse.Merge(dst, src)
}
func (m *GetOwnerCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnerCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnerCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnerCommentResponse proto.InternalMessageInfo

func (m *GetOwnerCommentResponse) GetComments() []*GetOwnerCommentResponse_CmtProduct {
	if m != nil {
		return m.Comments
	}
	return nil
}

// a product(id) with comments's attachment
type GetOwnerCommentResponse_CmtProduct struct {
	ProductId            *base.ProductId `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Comment              *base.Comment   `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetOwnerCommentResponse_CmtProduct) Reset()         { *m = GetOwnerCommentResponse_CmtProduct{} }
func (m *GetOwnerCommentResponse_CmtProduct) String() string { return proto.CompactTextString(m) }
func (*GetOwnerCommentResponse_CmtProduct) ProtoMessage()    {}
func (*GetOwnerCommentResponse_CmtProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_821861532a832871, []int{24, 0}
}
func (m *GetOwnerCommentResponse_CmtProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnerCommentResponse_CmtProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnerCommentResponse_CmtProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOwnerCommentResponse_CmtProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnerCommentResponse_CmtProduct.Merge(dst, src)
}
func (m *GetOwnerCommentResponse_CmtProduct) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnerCommentResponse_CmtProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnerCommentResponse_CmtProduct.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnerCommentResponse_CmtProduct proto.InternalMessageInfo

func (m *GetOwnerCommentResponse_CmtProduct) GetProductId() *base.ProductId {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *GetOwnerCommentResponse_CmtProduct) GetComment() *base.Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func init() {
	proto.RegisterType((*ExternalThreadId)(nil), "sendo.v1.api.comment.ExternalThreadId")
	proto.RegisterType((*ListRequest)(nil), "sendo.v1.api.comment.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "sendo.v1.api.comment.ListResponse")
	proto.RegisterType((*GetRepliesRequest)(nil), "sendo.v1.api.comment.GetRepliesRequest")
	proto.RegisterType((*GetRepliesResponse)(nil), "sendo.v1.api.comment.GetRepliesResponse")
	proto.RegisterType((*AddRequest)(nil), "sendo.v1.api.comment.AddRequest")
	proto.RegisterType((*AddResponse)(nil), "sendo.v1.api.comment.AddResponse")
	proto.RegisterType((*DeleteRequest)(nil), "sendo.v1.api.comment.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "sendo.v1.api.comment.DeleteResponse")
	proto.RegisterType((*EditRequest)(nil), "sendo.v1.api.comment.EditRequest")
	proto.RegisterType((*EditResponse)(nil), "sendo.v1.api.comment.EditResponse")
	proto.RegisterType((*CountRequest)(nil), "sendo.v1.api.comment.CountRequest")
	proto.RegisterType((*CountResponse)(nil), "sendo.v1.api.comment.CountResponse")
	proto.RegisterType((*GetExternalRequest)(nil), "sendo.v1.api.comment.GetExternalRequest")
	proto.RegisterType((*GetExternalResponse)(nil), "sendo.v1.api.comment.GetExternalResponse")
	proto.RegisterType((*GetAllUserRequest)(nil), "sendo.v1.api.comment.GetAllUserRequest")
	proto.RegisterType((*GetAllUserResponse)(nil), "sendo.v1.api.comment.GetAllUserResponse")
	proto.RegisterType((*GetCommentDetailsRequest)(nil), "sendo.v1.api.comment.GetCommentDetailsRequest")
	proto.RegisterType((*GetCommentDetailsResponse)(nil), "sendo.v1.api.comment.GetCommentDetailsResponse")
	proto.RegisterType((*ListAppRequest)(nil), "sendo.v1.api.comment.ListAppRequest")
	proto.RegisterType((*ListAppResponse)(nil), "sendo.v1.api.comment.ListAppResponse")
	proto.RegisterType((*AdminDeleteRequest)(nil), "sendo.v1.api.comment.AdminDeleteRequest")
	proto.RegisterType((*AdminDeleteResponse)(nil), "sendo.v1.api.comment.AdminDeleteResponse")
	proto.RegisterType((*GetOwnerCommentRequest)(nil), "sendo.v1.api.comment.GetOwnerCommentRequest")
	proto.RegisterType((*GetOwnerCommentResponse)(nil), "sendo.v1.api.comment.GetOwnerCommentResponse")
	proto.RegisterType((*GetOwnerCommentResponse_CmtProduct)(nil), "sendo.v1.api.comment.GetOwnerCommentResponse.CmtProduct")
	proto.RegisterEnum("sendo.v1.api.comment.ListRequest_Sort", ListRequest_Sort_name, ListRequest_Sort_value)
	proto.RegisterEnum("sendo.v1.api.comment.ListAppRequest_Sort", ListAppRequest_Sort_name, ListAppRequest_Sort_value)
	proto.RegisterEnum("sendo.v1.api.comment.GetOwnerCommentRequest_Sort", GetOwnerCommentRequest_Sort_name, GetOwnerCommentRequest_Sort_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error)
	// List comment by condition
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Get comment replies
	GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Get external_id by comment id
	GetExternal(ctx context.Context, in *GetExternalRequest, opts ...grpc.CallOption) (*GetExternalResponse, error)
	// Get all user joint comment
	GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUserResponse, error)
	// Get comment details
	GetCommentDetails(ctx context.Context, in *GetCommentDetailsRequest, opts ...grpc.CallOption) (*GetCommentDetailsResponse, error)
	// Get list product's comment for app
	ListApp(ctx context.Context, in *ListAppRequest, opts ...grpc.CallOption) (*ListAppResponse, error)
	// Admin delete comment
	AdminDelete(ctx context.Context, in *AdminDeleteRequest, opts ...grpc.CallOption) (*AdminDeleteResponse, error)
	// Get list owner's comment
	GetOwnerComment(ctx context.Context, in *GetOwnerCommentRequest, opts ...grpc.CallOption) (*GetOwnerCommentResponse, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	out := new(EditResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesResponse, error) {
	out := new(GetRepliesResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/GetReplies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetExternal(ctx context.Context, in *GetExternalRequest, opts ...grpc.CallOption) (*GetExternalResponse, error) {
	out := new(GetExternalResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/GetExternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUserResponse, error) {
	out := new(GetAllUserResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/GetAllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentDetails(ctx context.Context, in *GetCommentDetailsRequest, opts ...grpc.CallOption) (*GetCommentDetailsResponse, error) {
	out := new(GetCommentDetailsResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/GetCommentDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListApp(ctx context.Context, in *ListAppRequest, opts ...grpc.CallOption) (*ListAppResponse, error) {
	out := new(ListAppResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/ListApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) AdminDelete(ctx context.Context, in *AdminDeleteRequest, opts ...grpc.CallOption) (*AdminDeleteResponse, error) {
	out := new(AdminDeleteResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/AdminDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetOwnerComment(ctx context.Context, in *GetOwnerCommentRequest, opts ...grpc.CallOption) (*GetOwnerCommentResponse, error) {
	out := new(GetOwnerCommentResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.comment.CommentService/GetOwnerComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
type CommentServiceServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Edit(context.Context, *EditRequest) (*EditResponse, error)
	// List comment by condition
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Get comment replies
	GetReplies(context.Context, *GetRepliesRequest) (*GetRepliesResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
	// Get external_id by comment id
	GetExternal(context.Context, *GetExternalRequest) (*GetExternalResponse, error)
	// Get all user joint comment
	GetAllUser(context.Context, *GetAllUserRequest) (*GetAllUserResponse, error)
	// Get comment details
	GetCommentDetails(context.Context, *GetCommentDetailsRequest) (*GetCommentDetailsResponse, error)
	// Get list product's comment for app
	ListApp(context.Context, *ListAppRequest) (*ListAppResponse, error)
	// Admin delete comment
	AdminDelete(context.Context, *AdminDeleteRequest) (*AdminDeleteResponse, error)
	// Get list owner's comment
	GetOwnerComment(context.Context, *GetOwnerCommentRequest) (*GetOwnerCommentResponse, error)
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Edit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/GetReplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetReplies(ctx, req.(*GetRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/GetExternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetExternal(ctx, req.(*GetExternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/GetAllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetAllUser(ctx, req.(*GetAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/GetCommentDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentDetails(ctx, req.(*GetCommentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/ListApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListApp(ctx, req.(*ListAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_AdminDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).AdminDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/AdminDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).AdminDelete(ctx, req.(*AdminDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetOwnerComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetOwnerComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.comment.CommentService/GetOwnerComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetOwnerComment(ctx, req.(*GetOwnerCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.comment.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _CommentService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CommentService_Delete_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _CommentService_Edit_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CommentService_List_Handler,
		},
		{
			MethodName: "GetReplies",
			Handler:    _CommentService_GetReplies_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _CommentService_Count_Handler,
		},
		{
			MethodName: "GetExternal",
			Handler:    _CommentService_GetExternal_Handler,
		},
		{
			MethodName: "GetAllUser",
			Handler:    _CommentService_GetAllUser_Handler,
		},
		{
			MethodName: "GetCommentDetails",
			Handler:    _CommentService_GetCommentDetails_Handler,
		},
		{
			MethodName: "ListApp",
			Handler:    _CommentService_ListApp_Handler,
		},
		{
			MethodName: "AdminDelete",
			Handler:    _CommentService_AdminDelete_Handler,
		},
		{
			MethodName: "GetOwnerComment",
			Handler:    _CommentService_GetOwnerComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment/comment.proto",
}

func (m *ExternalThreadId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalThreadId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Type))
	}
	if m.Condition != nil {
		nn1, err := m.Condition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExternalThreadId_NumValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintComment(dAtA, i, uint64(m.NumValue))
	return i, nil
}
func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Condition != nil {
		nn2, err := m.Condition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.Sort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Sort))
	}
	if m.Pagination != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Pagination.Size()))
		n3, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListRequest_ExternalId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExternalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.ExternalId.Size()))
		n4, err := m.ExternalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Total))
	}
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintComment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRepliesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRepliesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ParentId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.ParentId.Size()))
		n5, err := m.ParentId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Pagination != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Pagination.Size()))
		n6, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRepliesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRepliesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Total))
	}
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintComment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExternalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.ExternalId.Size()))
		n7, err := m.ExternalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Comment != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Comment.Size()))
		n8, err := m.Comment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Comment.Size()))
		n9, err := m.Comment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Id.Size()))
		n10, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.OwnerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EditRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Id.Size()))
		n11, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintComment(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.OwnerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EditResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExternalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.ExternalId.Size()))
		n12, err := m.ExternalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalParent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.TotalParent))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetExternalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExternalRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Id.Size()))
		n13, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetExternalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExternalResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExternalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.ExternalId.Size()))
		n14, err := m.ExternalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Id.Size()))
		n15, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		dAtA17 := make([]byte, len(m.Users)*10)
		var j16 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCommentDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Id.Size()))
		n18, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCommentDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Comment.Size()))
		n19, err := m.Comment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAppRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExternalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.ExternalId.Size()))
		n20, err := m.ExternalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Sort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Sort))
	}
	if m.Pagination != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Pagination.Size()))
		n21, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAppResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Total))
	}
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintComment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Id.Size()))
		n22, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOwnerCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnerCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OwnerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.OwnerId))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.CreatedAt))
	}
	if m.Sort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Sort))
	}
	if m.Pagination != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Pagination.Size()))
		n23, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOwnerCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnerCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintComment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOwnerCommentResponse_CmtProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnerCommentResponse_CmtProduct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.ProductId.Size()))
		n24, err := m.ProductId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.Comment != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintComment(dAtA, i, uint64(m.Comment.Size()))
		n25, err := m.Comment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintComment(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExternalThreadId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovComment(uint64(m.Type))
	}
	if m.Condition != nil {
		n += m.Condition.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExternalThreadId_NumValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovComment(uint64(m.NumValue))
	return n
}
func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Condition != nil {
		n += m.Condition.Size()
	}
	if m.Sort != 0 {
		n += 1 + sovComment(uint64(m.Sort))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRequest_ExternalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalId != nil {
		l = m.ExternalId.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovComment(uint64(m.Total))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRepliesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentId != nil {
		l = m.ParentId.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRepliesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovComment(uint64(m.Total))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalId != nil {
		l = m.ExternalId.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.OwnerId != 0 {
		n += 1 + sovComment(uint64(m.OwnerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.OwnerId != 0 {
		n += 1 + sovComment(uint64(m.OwnerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalId != nil {
		l = m.ExternalId.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalParent != 0 {
		n += 1 + sovComment(uint64(m.TotalParent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetExternalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetExternalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalId != nil {
		l = m.ExternalId.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovComment(uint64(e))
		}
		n += 1 + sovComment(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCommentDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCommentDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalId != nil {
		l = m.ExternalId.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovComment(uint64(m.Sort))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovComment(uint64(m.Total))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOwnerCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OwnerId != 0 {
		n += 1 + sovComment(uint64(m.OwnerId))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovComment(uint64(m.CreatedAt))
	}
	if m.Sort != 0 {
		n += 1 + sovComment(uint64(m.Sort))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOwnerCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOwnerCommentResponse_CmtProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != nil {
		l = m.ProductId.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComment(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozComment(x uint64) (n int) {
	return sovComment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExternalThreadId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalThreadId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalThreadId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Condition = &ExternalThreadId_NumValue{v}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExternalThreadId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &ListRequest_ExternalId{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (ListRequest_Sort(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &base.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &base.Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRepliesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRepliesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRepliesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentId == nil {
				m.ParentId = &base.CommentId{}
			}
			if err := m.ParentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &base.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRepliesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRepliesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRepliesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &base.Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalId == nil {
				m.ExternalId = &ExternalThreadId{}
			}
			if err := m.ExternalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &base.Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &base.Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &base.CommentId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &base.CommentId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalId == nil {
				m.ExternalId = &ExternalThreadId{}
			}
			if err := m.ExternalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalParent", wireType)
			}
			m.TotalParent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalParent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExternalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExternalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExternalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &base.CommentId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExternalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExternalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExternalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalId == nil {
				m.ExternalId = &ExternalThreadId{}
			}
			if err := m.ExternalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &base.CommentId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowComment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowComment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthComment
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Users) == 0 {
					m.Users = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &base.CommentId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &base.Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalId == nil {
				m.ExternalId = &ExternalThreadId{}
			}
			if err := m.ExternalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (ListAppRequest_Sort(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &base.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &base.Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &base.CommentId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnerCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnerCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnerCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (GetOwnerCommentRequest_Sort(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &base.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnerCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnerCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnerCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &GetOwnerCommentResponse_CmtProduct{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnerCommentResponse_CmtProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmtProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmtProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProductId == nil {
				m.ProductId = &base.ProductId{}
			}
			if err := m.ProductId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &base.Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthComment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowComment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipComment(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthComment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComment   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("comment/comment.proto", fileDescriptor_comment_821861532a832871) }

var fileDescriptor_comment_821861532a832871 = []byte{
	// 1041 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0x93, 0x74, 0x9b, 0x1c, 0x77, 0xd3, 0x30, 0xdb, 0x85, 0xac, 0x45, 0xab, 0xac, 0x77,
	0x81, 0x2c, 0xda, 0x3a, 0x6a, 0x17, 0x21, 0x7e, 0xb4, 0x42, 0x69, 0x1a, 0xda, 0x88, 0x2c, 0x2d,
	0xb3, 0x2d, 0x2c, 0x08, 0x11, 0x39, 0x99, 0xa1, 0x58, 0x72, 0x6c, 0x63, 0x4f, 0x0a, 0x5c, 0x21,
	0xae, 0x11, 0x97, 0xbc, 0x13, 0x97, 0x3c, 0x02, 0xea, 0x13, 0x70, 0x05, 0xb7, 0x2b, 0x8f, 0xc7,
	0x89, 0x9d, 0xda, 0x6e, 0x9a, 0x4d, 0x6f, 0x5a, 0x7b, 0x72, 0xe6, 0x3b, 0xdf, 0xf9, 0x99, 0xf3,
	0x8d, 0xe1, 0xee, 0xd0, 0x1e, 0x8d, 0xa8, 0xc5, 0x9a, 0xe2, 0xbf, 0xe6, 0xb8, 0x36, 0xb3, 0xd1,
	0x86, 0x47, 0x2d, 0x62, 0x6b, 0xe7, 0x3b, 0x9a, 0xee, 0x18, 0x9a, 0xf8, 0x4d, 0x59, 0x1f, 0xe8,
	0x1e, 0x6d, 0xfa, 0x7f, 0x02, 0x33, 0x15, 0x43, 0xb5, 0xf3, 0x33, 0xa3, 0xae, 0xa5, 0x9b, 0x27,
	0x3f, 0xb8, 0x54, 0x27, 0x5d, 0x82, 0x10, 0x14, 0xd9, 0x2f, 0x0e, 0xad, 0x49, 0x75, 0xa9, 0xb1,
	0x82, 0xf9, 0x33, 0xda, 0x84, 0xb2, 0x35, 0x1e, 0xf5, 0xcf, 0x75, 0x73, 0x4c, 0x6b, 0xf9, 0xba,
	0xd4, 0x28, 0x1c, 0xe6, 0x70, 0xc9, 0x1a, 0x8f, 0xbe, 0xf4, 0x57, 0xf6, 0x64, 0x28, 0x0f, 0x6d,
	0x8b, 0x18, 0xcc, 0xb0, 0x2d, 0xf5, 0xcf, 0x3c, 0xc8, 0x3d, 0xc3, 0x63, 0x98, 0xfe, 0x38, 0xa6,
	0x1e, 0x43, 0x5d, 0x90, 0xa9, 0xf0, 0xd1, 0x37, 0x08, 0x87, 0x95, 0x77, 0xdf, 0xd6, 0x92, 0x08,
	0x6a, 0xb3, 0x64, 0x0e, 0x73, 0x18, 0xc2, 0xcd, 0x5d, 0x82, 0x3e, 0x82, 0xa2, 0x67, 0xbb, 0xac,
	0x56, 0xa8, 0x4b, 0x8d, 0x4a, 0x1a, 0x46, 0xc4, 0xb7, 0xf6, 0xdc, 0x76, 0x19, 0xe6, 0x7b, 0xd0,
	0x53, 0x00, 0x47, 0x3f, 0x33, 0x2c, 0xdd, 0x27, 0x59, 0x2b, 0x72, 0x16, 0x9b, 0x71, 0x04, 0x9e,
	0x98, 0xe3, 0x89, 0x11, 0x8e, 0x6c, 0x50, 0x9f, 0x40, 0xd1, 0x07, 0x43, 0x32, 0xac, 0xee, 0x77,
	0x3e, 0x6d, 0x9d, 0xf6, 0x4e, 0xaa, 0x39, 0x54, 0x82, 0x62, 0xaf, 0xfb, 0x59, 0xa7, 0x2a, 0xa1,
	0x0d, 0xa8, 0xb6, 0x8f, 0x9e, 0x3d, 0xeb, 0x7c, 0x7e, 0xd2, 0x3f, 0xc2, 0x7d, 0xdc, 0x39, 0xee,
	0x7d, 0x5d, 0xcd, 0xc7, 0xf3, 0xf2, 0x2d, 0xac, 0x05, 0xd4, 0x3c, 0xc7, 0xb6, 0x3c, 0x8a, 0x36,
	0x60, 0x85, 0xd9, 0x4c, 0x37, 0x45, 0xa2, 0x83, 0x17, 0xf4, 0x3e, 0x94, 0x44, 0x20, 0x5e, 0x2d,
	0x5f, 0x2f, 0x34, 0xe4, 0x5d, 0x25, 0x81, 0x64, 0x3b, 0x30, 0xc1, 0x13, 0x5b, 0xf5, 0x0f, 0x09,
	0x5e, 0x3b, 0xa0, 0x0c, 0x53, 0xc7, 0x34, 0xa8, 0x17, 0xe6, 0xfe, 0x43, 0x28, 0x3b, 0xba, 0x4b,
	0x2d, 0x36, 0xcd, 0xfc, 0x9b, 0xe9, 0x70, 0x5d, 0x82, 0x4b, 0x81, 0x79, 0x97, 0xcc, 0xe4, 0x2b,
	0x7f, 0xdd, 0x7c, 0x0d, 0x00, 0x45, 0xe9, 0xdc, 0x48, 0xcc, 0xbf, 0x4b, 0x00, 0x2d, 0x42, 0xc2,
	0x60, 0x0f, 0x5e, 0xa1, 0xd1, 0x62, 0x6d, 0xf6, 0x1e, 0xac, 0x0a, 0x3b, 0x11, 0x77, 0x16, 0x9d,
	0xd0, 0x54, 0x6d, 0x83, 0xcc, 0xc9, 0x88, 0x50, 0x17, 0x03, 0x79, 0x01, 0xb7, 0xf7, 0xa9, 0x49,
	0x19, 0x0d, 0x83, 0x7a, 0x0c, 0xf9, 0x39, 0x4b, 0x97, 0x37, 0x08, 0xba, 0x07, 0x25, 0xfb, 0x27,
	0x8b, 0xba, 0x7e, 0xfc, 0xfc, 0x98, 0xe2, 0x55, 0xfe, 0xde, 0x25, 0x6a, 0x15, 0x2a, 0x21, 0x72,
	0xc0, 0x50, 0x75, 0x40, 0xee, 0x10, 0x83, 0x2d, 0xe6, 0xa9, 0xe6, 0x87, 0x67, 0xb1, 0x30, 0xbc,
	0x32, 0x0e, 0x5f, 0x63, 0x1c, 0x0a, 0x71, 0x0e, 0x15, 0x58, 0x0b, 0x3c, 0x0a, 0x06, 0x5f, 0xc1,
	0x5a, 0xdb, 0x1e, 0x5b, 0x6c, 0xd9, 0x15, 0x54, 0x77, 0xe1, 0xb6, 0x00, 0x16, 0xd5, 0xb8, 0x0f,
	0x6b, 0xbc, 0xd7, 0xfa, 0x41, 0x7f, 0x8b, 0xfe, 0x93, 0xf9, 0xda, 0x31, 0x5f, 0x52, 0xf7, 0x78,
	0xc7, 0x86, 0xb0, 0x0b, 0x65, 0x45, 0xfd, 0x0e, 0xee, 0xc4, 0x30, 0x84, 0xf7, 0xa5, 0xc5, 0xd5,
	0xe2, 0x87, 0xbc, 0x65, 0x9a, 0xa7, 0x1e, 0x75, 0x17, 0xa3, 0xf8, 0x2e, 0x0f, 0x73, 0x02, 0x31,
	0x3d, 0x98, 0x63, 0x8f, 0xba, 0x5e, 0x4d, 0xaa, 0x17, 0x1a, 0x05, 0x1c, 0xbc, 0xa8, 0x87, 0x50,
	0x3b, 0xa0, 0x4c, 0xec, 0xdf, 0xa7, 0x4c, 0x37, 0x4c, 0x6f, 0x31, 0xaf, 0x5f, 0xc0, 0xbd, 0x04,
	0xa4, 0xcb, 0x47, 0x45, 0x9a, 0xff, 0xa8, 0xfc, 0x27, 0x41, 0xc5, 0x1f, 0xa8, 0x2d, 0xc7, 0x59,
	0xfa, 0x04, 0x78, 0x2a, 0x84, 0x26, 0xcf, 0x85, 0xe6, 0x51, 0xba, 0xd0, 0x4c, 0x9d, 0xa7, 0x6b,
	0x4d, 0xe1, 0xba, 0xb3, 0x73, 0x33, 0x53, 0x6b, 0xd4, 0x3e, 0xac, 0x4f, 0x5c, 0xdf, 0xc8, 0x5c,
	0xdd, 0x03, 0xd4, 0x22, 0x23, 0xc3, 0x7a, 0x85, 0x49, 0xa4, 0xde, 0x85, 0x3b, 0x31, 0x0c, 0x71,
	0xe2, 0xff, 0x97, 0xe0, 0xf5, 0x03, 0xca, 0x8e, 0xfc, 0x81, 0x10, 0x3a, 0x16, 0xf8, 0xd1, 0xb9,
	0x21, 0xc5, 0xe6, 0x06, 0xda, 0x04, 0x18, 0xba, 0x54, 0x67, 0x94, 0xf4, 0x75, 0x26, 0x06, 0x5b,
	0x59, 0xac, 0xb4, 0x18, 0xea, 0xc4, 0xae, 0x05, 0x3b, 0xc9, 0xd5, 0x4a, 0xf6, 0xba, 0xc4, 0x1b,
	0xc2, 0x15, 0x55, 0xfb, 0x57, 0x82, 0x37, 0x2e, 0x71, 0x10, 0xe5, 0x3b, 0x89, 0x14, 0x4a, 0xe2,
	0x85, 0xfa, 0x60, 0xce, 0x20, 0x02, 0x00, 0xad, 0x3d, 0x62, 0xc7, 0xae, 0x4d, 0xc6, 0xc3, 0x48,
	0x19, 0x95, 0x5f, 0x01, 0xa6, 0xeb, 0xe8, 0x63, 0x00, 0x27, 0x78, 0xcc, 0xbe, 0x0b, 0x08, 0xfb,
	0x2e, 0xc1, 0x65, 0x27, 0x7c, 0x5c, 0x4c, 0xcc, 0x76, 0x7f, 0x2b, 0x43, 0x45, 0x2c, 0x3e, 0xa7,
	0xee, 0xb9, 0x31, 0xa4, 0xa8, 0x07, 0x85, 0x16, 0x21, 0xa8, 0x9e, 0x1c, 0xde, 0x54, 0xcc, 0x95,
	0xfb, 0x19, 0x16, 0xa2, 0x97, 0x72, 0xe8, 0x14, 0x6e, 0x05, 0xfd, 0x85, 0x1e, 0x24, 0x9b, 0xc7,
	0x3a, 0x58, 0x79, 0x98, 0x6d, 0x34, 0x81, 0x3d, 0x82, 0xa2, 0x2f, 0x53, 0x28, 0x85, 0x43, 0x44,
	0x34, 0x15, 0x35, 0xcb, 0x24, 0x0a, 0xe8, 0x9f, 0xd8, 0x34, 0xc0, 0xc8, 0x8d, 0x35, 0x0d, 0x30,
	0x7a, 0x73, 0x54, 0x73, 0x48, 0x07, 0x98, 0xde, 0xae, 0xd0, 0x3b, 0xa9, 0xcd, 0x12, 0xbf, 0x0e,
	0x2a, 0x8d, 0xab, 0x0d, 0x27, 0x2e, 0x30, 0xac, 0x70, 0x09, 0x45, 0x29, 0x8c, 0xa2, 0xc2, 0xad,
	0x3c, 0xc8, 0xb4, 0x99, 0x60, 0x12, 0x90, 0x23, 0xf2, 0x88, 0xd2, 0xe9, 0xcc, 0xa8, 0xb0, 0xf2,
	0x68, 0x0e, 0xcb, 0x99, 0xe4, 0x08, 0x85, 0xcb, 0x48, 0x4e, 0x5c, 0x46, 0x33, 0x92, 0x33, 0x23,
	0x96, 0x6a, 0x0e, 0x9d, 0x73, 0x1d, 0x8e, 0xcb, 0x19, 0xd2, 0x52, 0x01, 0x12, 0x15, 0x54, 0x69,
	0xce, 0x6d, 0x3f, 0xf1, 0xfb, 0x02, 0x56, 0xc5, 0xe8, 0x47, 0x0f, 0xe7, 0x11, 0x25, 0xe5, 0xad,
	0x2b, 0xac, 0xa2, 0xa5, 0x89, 0xcc, 0xeb, 0xb4, 0xd2, 0x5c, 0x96, 0x85, 0xb4, 0xd2, 0x24, 0x0d,
	0xff, 0x1c, 0x72, 0x60, 0x7d, 0x66, 0x84, 0xa1, 0xc7, 0xd7, 0x19, 0xd7, 0xca, 0xf6, 0xb5, 0xe6,
	0xa2, 0x9a, 0xdb, 0xfb, 0xe4, 0xaf, 0x8b, 0x2d, 0xe9, 0xef, 0x8b, 0x2d, 0xe9, 0x9f, 0x8b, 0x2d,
	0xe9, 0x9b, 0x9d, 0x33, 0x83, 0x99, 0xfa, 0x20, 0x04, 0xb1, 0x9a, 0xfc, 0x33, 0x78, 0x30, 0xfe,
	0xbe, 0x69, 0x58, 0x41, 0x1f, 0x6d, 0xeb, 0x8e, 0xe1, 0x6d, 0x9f, 0xd9, 0xe1, 0xf7, 0xf4, 0xe0,
	0x16, 0x37, 0x79, 0xf2, 0x32, 0x00, 0x00, 0xff, 0xff, 0x82, 0x02, 0x29, 0x3c, 0x69, 0x0f, 0x00,
	0x00,
}
