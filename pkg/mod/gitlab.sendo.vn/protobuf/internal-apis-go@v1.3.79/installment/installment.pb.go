// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: installment/installment.proto

package installment // import "gitlab.sendo.vn/protobuf/internal-apis-go/installment"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VerifyListProductRequest struct {
	ProductList          []*ProductItem `protobuf:"bytes,1,rep,name=product_list" json:"product_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VerifyListProductRequest) Reset()         { *m = VerifyListProductRequest{} }
func (m *VerifyListProductRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyListProductRequest) ProtoMessage()    {}
func (*VerifyListProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{0}
}
func (m *VerifyListProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyListProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyListProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VerifyListProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyListProductRequest.Merge(dst, src)
}
func (m *VerifyListProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyListProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyListProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyListProductRequest proto.InternalMessageInfo

func (m *VerifyListProductRequest) GetProductList() []*ProductItem {
	if m != nil {
		return m.ProductList
	}
	return nil
}

type VerifyListProductResponse struct {
	ProductList          []*ProductItem `protobuf:"bytes,1,rep,name=product_list" json:"product_list,omitempty"`
	Error                *Error         `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VerifyListProductResponse) Reset()         { *m = VerifyListProductResponse{} }
func (m *VerifyListProductResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyListProductResponse) ProtoMessage()    {}
func (*VerifyListProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{1}
}
func (m *VerifyListProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyListProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyListProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VerifyListProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyListProductResponse.Merge(dst, src)
}
func (m *VerifyListProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyListProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyListProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyListProductResponse proto.InternalMessageInfo

func (m *VerifyListProductResponse) GetProductList() []*ProductItem {
	if m != nil {
		return m.ProductList
	}
	return nil
}

func (m *VerifyListProductResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ProductItem struct {
	ShopId               uint32   `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	ProductId            uint32   `protobuf:"varint,2,opt,name=product_id,proto3" json:"product_id,omitempty"`
	GrandTotal           float64  `protobuf:"fixed64,3,opt,name=grand_total,proto3" json:"grand_total,omitempty"`
	IsSupportInstallment bool     `protobuf:"varint,4,opt,name=is_support_installment,proto3" json:"is_support_installment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductItem) Reset()         { *m = ProductItem{} }
func (m *ProductItem) String() string { return proto.CompactTextString(m) }
func (*ProductItem) ProtoMessage()    {}
func (*ProductItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{2}
}
func (m *ProductItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductItem.Merge(dst, src)
}
func (m *ProductItem) XXX_Size() int {
	return m.Size()
}
func (m *ProductItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductItem.DiscardUnknown(m)
}

var xxx_messageInfo_ProductItem proto.InternalMessageInfo

func (m *ProductItem) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *ProductItem) GetProductId() uint32 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductItem) GetGrandTotal() float64 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *ProductItem) GetIsSupportInstallment() bool {
	if m != nil {
		return m.IsSupportInstallment
	}
	return false
}

type GetInstallmentDetailRequest struct {
	ShopId               uint32   `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	Qty                  uint32   `protobuf:"varint,2,opt,name=qty,proto3" json:"qty,omitempty"`
	Period               uint32   `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	BankId               uint32   `protobuf:"varint,4,opt,name=bank_id,proto3" json:"bank_id,omitempty"`
	GrandTotal           float64  `protobuf:"fixed64,5,opt,name=grand_total,proto3" json:"grand_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInstallmentDetailRequest) Reset()         { *m = GetInstallmentDetailRequest{} }
func (m *GetInstallmentDetailRequest) String() string { return proto.CompactTextString(m) }
func (*GetInstallmentDetailRequest) ProtoMessage()    {}
func (*GetInstallmentDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{3}
}
func (m *GetInstallmentDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInstallmentDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInstallmentDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetInstallmentDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInstallmentDetailRequest.Merge(dst, src)
}
func (m *GetInstallmentDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInstallmentDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInstallmentDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInstallmentDetailRequest proto.InternalMessageInfo

func (m *GetInstallmentDetailRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetInstallmentDetailRequest) GetQty() uint32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

func (m *GetInstallmentDetailRequest) GetPeriod() uint32 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *GetInstallmentDetailRequest) GetBankId() uint32 {
	if m != nil {
		return m.BankId
	}
	return 0
}

func (m *GetInstallmentDetailRequest) GetGrandTotal() float64 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

type GetInstallmentDetailResponse struct {
	Error                *Error               `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	InstallmentDetail    *BankInstallmentTerm `protobuf:"bytes,2,opt,name=installment_detail" json:"installment_detail,omitempty"`
	Bank                 *Bank                `protobuf:"bytes,3,opt,name=bank" json:"bank,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetInstallmentDetailResponse) Reset()         { *m = GetInstallmentDetailResponse{} }
func (m *GetInstallmentDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetInstallmentDetailResponse) ProtoMessage()    {}
func (*GetInstallmentDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{4}
}
func (m *GetInstallmentDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInstallmentDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInstallmentDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetInstallmentDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInstallmentDetailResponse.Merge(dst, src)
}
func (m *GetInstallmentDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInstallmentDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInstallmentDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInstallmentDetailResponse proto.InternalMessageInfo

func (m *GetInstallmentDetailResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GetInstallmentDetailResponse) GetInstallmentDetail() *BankInstallmentTerm {
	if m != nil {
		return m.InstallmentDetail
	}
	return nil
}

func (m *GetInstallmentDetailResponse) GetBank() *Bank {
	if m != nil {
		return m.Bank
	}
	return nil
}

type GetProductDetailRequest struct {
	ShopId               uint32   `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	Amount               float64  `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Qty                  uint32   `protobuf:"varint,3,opt,name=qty,proto3" json:"qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProductDetailRequest) Reset()         { *m = GetProductDetailRequest{} }
func (m *GetProductDetailRequest) String() string { return proto.CompactTextString(m) }
func (*GetProductDetailRequest) ProtoMessage()    {}
func (*GetProductDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{5}
}
func (m *GetProductDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProductDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProductDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetProductDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProductDetailRequest.Merge(dst, src)
}
func (m *GetProductDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetProductDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProductDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProductDetailRequest proto.InternalMessageInfo

func (m *GetProductDetailRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetProductDetailRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *GetProductDetailRequest) GetQty() uint32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

type GetProductDetailResponse struct {
	IsSupportedInstallment bool     `protobuf:"varint,1,opt,name=is_supported_installment,proto3" json:"is_supported_installment,omitempty"`
	Error                  *Error   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Title                  string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Color                  string   `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Icon                   string   `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	TooltipTitle           string   `protobuf:"bytes,6,opt,name=tooltip_title,proto3" json:"tooltip_title,omitempty"`
	TooltipContent         string   `protobuf:"bytes,7,opt,name=tooltip_content,proto3" json:"tooltip_content,omitempty"`
	AppTooltipContent      string   `protobuf:"bytes,8,opt,name=app_tooltip_content,proto3" json:"app_tooltip_content,omitempty"`
	InstallmentLabel       string   `protobuf:"bytes,9,opt,name=installment_label,proto3" json:"installment_label,omitempty"`
	AppInstallmentLabel    string   `protobuf:"bytes,10,opt,name=app_installment_label,proto3" json:"app_installment_label,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetProductDetailResponse) Reset()         { *m = GetProductDetailResponse{} }
func (m *GetProductDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetProductDetailResponse) ProtoMessage()    {}
func (*GetProductDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{6}
}
func (m *GetProductDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProductDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProductDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetProductDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProductDetailResponse.Merge(dst, src)
}
func (m *GetProductDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetProductDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProductDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProductDetailResponse proto.InternalMessageInfo

func (m *GetProductDetailResponse) GetIsSupportedInstallment() bool {
	if m != nil {
		return m.IsSupportedInstallment
	}
	return false
}

func (m *GetProductDetailResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GetProductDetailResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetProductDetailResponse) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *GetProductDetailResponse) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *GetProductDetailResponse) GetTooltipTitle() string {
	if m != nil {
		return m.TooltipTitle
	}
	return ""
}

func (m *GetProductDetailResponse) GetTooltipContent() string {
	if m != nil {
		return m.TooltipContent
	}
	return ""
}

func (m *GetProductDetailResponse) GetAppTooltipContent() string {
	if m != nil {
		return m.AppTooltipContent
	}
	return ""
}

func (m *GetProductDetailResponse) GetInstallmentLabel() string {
	if m != nil {
		return m.InstallmentLabel
	}
	return ""
}

func (m *GetProductDetailResponse) GetAppInstallmentLabel() string {
	if m != nil {
		return m.AppInstallmentLabel
	}
	return ""
}

type GetBanksConfigRequest struct {
	ShopId               uint32   `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	Amount               float64  `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Qty                  uint32   `protobuf:"varint,3,opt,name=qty,proto3" json:"qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBanksConfigRequest) Reset()         { *m = GetBanksConfigRequest{} }
func (m *GetBanksConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetBanksConfigRequest) ProtoMessage()    {}
func (*GetBanksConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{7}
}
func (m *GetBanksConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBanksConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBanksConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBanksConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBanksConfigRequest.Merge(dst, src)
}
func (m *GetBanksConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBanksConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBanksConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBanksConfigRequest proto.InternalMessageInfo

func (m *GetBanksConfigRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetBanksConfigRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *GetBanksConfigRequest) GetQty() uint32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

type GetBanksConfigResponse struct {
	IsSupportedInstallment bool     `protobuf:"varint,1,opt,name=is_supported_installment,proto3" json:"is_supported_installment,omitempty"`
	Error                  *Error   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	BankList               []*Bank  `protobuf:"bytes,3,rep,name=bank_list" json:"bank_list,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetBanksConfigResponse) Reset()         { *m = GetBanksConfigResponse{} }
func (m *GetBanksConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetBanksConfigResponse) ProtoMessage()    {}
func (*GetBanksConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{8}
}
func (m *GetBanksConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBanksConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBanksConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBanksConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBanksConfigResponse.Merge(dst, src)
}
func (m *GetBanksConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBanksConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBanksConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBanksConfigResponse proto.InternalMessageInfo

func (m *GetBanksConfigResponse) GetIsSupportedInstallment() bool {
	if m != nil {
		return m.IsSupportedInstallment
	}
	return false
}

func (m *GetBanksConfigResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GetBanksConfigResponse) GetBankList() []*Bank {
	if m != nil {
		return m.BankList
	}
	return nil
}

type Bank struct {
	BankId               uint32                 `protobuf:"varint,1,opt,name=bank_id,proto3" json:"bank_id,omitempty"`
	BankName             string                 `protobuf:"bytes,2,opt,name=bank_name,proto3" json:"bank_name,omitempty"`
	BankCode             string                 `protobuf:"bytes,3,opt,name=bank_code,proto3" json:"bank_code,omitempty"`
	Logo                 string                 `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Sort                 uint32                 `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	BankInstallmentTerms []*BankInstallmentTerm `protobuf:"bytes,6,rep,name=bank_installment_terms" json:"bank_installment_terms,omitempty"`
	BanksBins            []string               `protobuf:"bytes,7,rep,name=banks_bins" json:"banks_bins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Bank) Reset()         { *m = Bank{} }
func (m *Bank) String() string { return proto.CompactTextString(m) }
func (*Bank) ProtoMessage()    {}
func (*Bank) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{9}
}
func (m *Bank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Bank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank.Merge(dst, src)
}
func (m *Bank) XXX_Size() int {
	return m.Size()
}
func (m *Bank) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank.DiscardUnknown(m)
}

var xxx_messageInfo_Bank proto.InternalMessageInfo

func (m *Bank) GetBankId() uint32 {
	if m != nil {
		return m.BankId
	}
	return 0
}

func (m *Bank) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *Bank) GetBankCode() string {
	if m != nil {
		return m.BankCode
	}
	return ""
}

func (m *Bank) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Bank) GetSort() uint32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *Bank) GetBankInstallmentTerms() []*BankInstallmentTerm {
	if m != nil {
		return m.BankInstallmentTerms
	}
	return nil
}

func (m *Bank) GetBanksBins() []string {
	if m != nil {
		return m.BanksBins
	}
	return nil
}

type BankInstallmentTerm struct {
	Period               uint32   `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	InstallmentPlan      uint32   `protobuf:"varint,2,opt,name=installment_plan,proto3" json:"installment_plan,omitempty"`
	Label                string   `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	BankCharged          uint32   `protobuf:"varint,4,opt,name=bank_charged,proto3" json:"bank_charged,omitempty"`
	SendoCharged         uint32   `protobuf:"varint,5,opt,name=sendo_charged,proto3" json:"sendo_charged,omitempty"`
	Percent              float32  `protobuf:"fixed32,6,opt,name=percent,proto3" json:"percent,omitempty"`
	SendoChargedPercent  float32  `protobuf:"fixed32,7,opt,name=sendo_charged_percent,proto3" json:"sendo_charged_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BankInstallmentTerm) Reset()         { *m = BankInstallmentTerm{} }
func (m *BankInstallmentTerm) String() string { return proto.CompactTextString(m) }
func (*BankInstallmentTerm) ProtoMessage()    {}
func (*BankInstallmentTerm) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{10}
}
func (m *BankInstallmentTerm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankInstallmentTerm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankInstallmentTerm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BankInstallmentTerm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankInstallmentTerm.Merge(dst, src)
}
func (m *BankInstallmentTerm) XXX_Size() int {
	return m.Size()
}
func (m *BankInstallmentTerm) XXX_DiscardUnknown() {
	xxx_messageInfo_BankInstallmentTerm.DiscardUnknown(m)
}

var xxx_messageInfo_BankInstallmentTerm proto.InternalMessageInfo

func (m *BankInstallmentTerm) GetPeriod() uint32 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *BankInstallmentTerm) GetInstallmentPlan() uint32 {
	if m != nil {
		return m.InstallmentPlan
	}
	return 0
}

func (m *BankInstallmentTerm) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *BankInstallmentTerm) GetBankCharged() uint32 {
	if m != nil {
		return m.BankCharged
	}
	return 0
}

func (m *BankInstallmentTerm) GetSendoCharged() uint32 {
	if m != nil {
		return m.SendoCharged
	}
	return 0
}

func (m *BankInstallmentTerm) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *BankInstallmentTerm) GetSendoChargedPercent() float32 {
	if m != nil {
		return m.SendoChargedPercent
	}
	return 0
}

type GetShopConfigRequest struct {
	ShopId               uint32   `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetShopConfigRequest) Reset()         { *m = GetShopConfigRequest{} }
func (m *GetShopConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetShopConfigRequest) ProtoMessage()    {}
func (*GetShopConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{11}
}
func (m *GetShopConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShopConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShopConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetShopConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShopConfigRequest.Merge(dst, src)
}
func (m *GetShopConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetShopConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShopConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShopConfigRequest proto.InternalMessageInfo

func (m *GetShopConfigRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

type GetShopConfigResponse struct {
	Data                 *ShopInstallmentConfig `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Error                *Error                 `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetShopConfigResponse) Reset()         { *m = GetShopConfigResponse{} }
func (m *GetShopConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetShopConfigResponse) ProtoMessage()    {}
func (*GetShopConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{12}
}
func (m *GetShopConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShopConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShopConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetShopConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShopConfigResponse.Merge(dst, src)
}
func (m *GetShopConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetShopConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShopConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShopConfigResponse proto.InternalMessageInfo

func (m *GetShopConfigResponse) GetData() *ShopInstallmentConfig {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetShopConfigResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type UpdateShopConfigRequest struct {
	ShopId               uint32             `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	InstallmentTerms     []*InstallmentTerm `protobuf:"bytes,2,rep,name=installment_terms" json:"installment_terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpdateShopConfigRequest) Reset()         { *m = UpdateShopConfigRequest{} }
func (m *UpdateShopConfigRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateShopConfigRequest) ProtoMessage()    {}
func (*UpdateShopConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{13}
}
func (m *UpdateShopConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateShopConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateShopConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateShopConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateShopConfigRequest.Merge(dst, src)
}
func (m *UpdateShopConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateShopConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateShopConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateShopConfigRequest proto.InternalMessageInfo

func (m *UpdateShopConfigRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *UpdateShopConfigRequest) GetInstallmentTerms() []*InstallmentTerm {
	if m != nil {
		return m.InstallmentTerms
	}
	return nil
}

type UpdateShopConfigResponse struct {
	ShopId               uint32             `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	InstallmentTerms     []*InstallmentTerm `protobuf:"bytes,2,rep,name=installment_terms" json:"installment_terms,omitempty"`
	Error                *Error             `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	IsActive             bool               `protobuf:"varint,4,opt,name=is_active,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpdateShopConfigResponse) Reset()         { *m = UpdateShopConfigResponse{} }
func (m *UpdateShopConfigResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateShopConfigResponse) ProtoMessage()    {}
func (*UpdateShopConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{14}
}
func (m *UpdateShopConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateShopConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateShopConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateShopConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateShopConfigResponse.Merge(dst, src)
}
func (m *UpdateShopConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateShopConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateShopConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateShopConfigResponse proto.InternalMessageInfo

func (m *UpdateShopConfigResponse) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *UpdateShopConfigResponse) GetInstallmentTerms() []*InstallmentTerm {
	if m != nil {
		return m.InstallmentTerms
	}
	return nil
}

func (m *UpdateShopConfigResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *UpdateShopConfigResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type Error struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{15}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ShopInstallmentConfig struct {
	ShopId               uint32             `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	IsActive             bool               `protobuf:"varint,2,opt,name=is_active,proto3" json:"is_active,omitempty"`
	CreatedAt            uint32             `protobuf:"varint,3,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt            uint32             `protobuf:"varint,4,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	InstallmentTerms     []*InstallmentTerm `protobuf:"bytes,5,rep,name=installment_terms,json=instalment_term" json:"installment_terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ShopInstallmentConfig) Reset()         { *m = ShopInstallmentConfig{} }
func (m *ShopInstallmentConfig) String() string { return proto.CompactTextString(m) }
func (*ShopInstallmentConfig) ProtoMessage()    {}
func (*ShopInstallmentConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{16}
}
func (m *ShopInstallmentConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopInstallmentConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopInstallmentConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShopInstallmentConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopInstallmentConfig.Merge(dst, src)
}
func (m *ShopInstallmentConfig) XXX_Size() int {
	return m.Size()
}
func (m *ShopInstallmentConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopInstallmentConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ShopInstallmentConfig proto.InternalMessageInfo

func (m *ShopInstallmentConfig) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *ShopInstallmentConfig) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *ShopInstallmentConfig) GetCreatedAt() uint32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ShopInstallmentConfig) GetUpdatedAt() uint32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ShopInstallmentConfig) GetInstallmentTerms() []*InstallmentTerm {
	if m != nil {
		return m.InstallmentTerms
	}
	return nil
}

type InstallmentTerm struct {
	Period               uint32   `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Percent              float32  `protobuf:"fixed32,3,opt,name=percent,proto3" json:"percent,omitempty"`
	IsActive             bool     `protobuf:"varint,4,opt,name=is_active,proto3" json:"is_active,omitempty"`
	CreatedAt            uint32   `protobuf:"varint,5,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt            uint32   `protobuf:"varint,6,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallmentTerm) Reset()         { *m = InstallmentTerm{} }
func (m *InstallmentTerm) String() string { return proto.CompactTextString(m) }
func (*InstallmentTerm) ProtoMessage()    {}
func (*InstallmentTerm) Descriptor() ([]byte, []int) {
	return fileDescriptor_installment_3046d304fc069012, []int{17}
}
func (m *InstallmentTerm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallmentTerm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallmentTerm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *InstallmentTerm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallmentTerm.Merge(dst, src)
}
func (m *InstallmentTerm) XXX_Size() int {
	return m.Size()
}
func (m *InstallmentTerm) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallmentTerm.DiscardUnknown(m)
}

var xxx_messageInfo_InstallmentTerm proto.InternalMessageInfo

func (m *InstallmentTerm) GetPeriod() uint32 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *InstallmentTerm) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *InstallmentTerm) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *InstallmentTerm) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *InstallmentTerm) GetCreatedAt() uint32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *InstallmentTerm) GetUpdatedAt() uint32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*VerifyListProductRequest)(nil), "sendo.v1.api.installment.VerifyListProductRequest")
	proto.RegisterType((*VerifyListProductResponse)(nil), "sendo.v1.api.installment.VerifyListProductResponse")
	proto.RegisterType((*ProductItem)(nil), "sendo.v1.api.installment.productItem")
	proto.RegisterType((*GetInstallmentDetailRequest)(nil), "sendo.v1.api.installment.GetInstallmentDetailRequest")
	proto.RegisterType((*GetInstallmentDetailResponse)(nil), "sendo.v1.api.installment.GetInstallmentDetailResponse")
	proto.RegisterType((*GetProductDetailRequest)(nil), "sendo.v1.api.installment.GetProductDetailRequest")
	proto.RegisterType((*GetProductDetailResponse)(nil), "sendo.v1.api.installment.GetProductDetailResponse")
	proto.RegisterType((*GetBanksConfigRequest)(nil), "sendo.v1.api.installment.GetBanksConfigRequest")
	proto.RegisterType((*GetBanksConfigResponse)(nil), "sendo.v1.api.installment.GetBanksConfigResponse")
	proto.RegisterType((*Bank)(nil), "sendo.v1.api.installment.Bank")
	proto.RegisterType((*BankInstallmentTerm)(nil), "sendo.v1.api.installment.BankInstallmentTerm")
	proto.RegisterType((*GetShopConfigRequest)(nil), "sendo.v1.api.installment.GetShopConfigRequest")
	proto.RegisterType((*GetShopConfigResponse)(nil), "sendo.v1.api.installment.GetShopConfigResponse")
	proto.RegisterType((*UpdateShopConfigRequest)(nil), "sendo.v1.api.installment.UpdateShopConfigRequest")
	proto.RegisterType((*UpdateShopConfigResponse)(nil), "sendo.v1.api.installment.UpdateShopConfigResponse")
	proto.RegisterType((*Error)(nil), "sendo.v1.api.installment.Error")
	proto.RegisterType((*ShopInstallmentConfig)(nil), "sendo.v1.api.installment.ShopInstallmentConfig")
	proto.RegisterType((*InstallmentTerm)(nil), "sendo.v1.api.installment.InstallmentTerm")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InstallmentServiceClient is the client API for InstallmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InstallmentServiceClient interface {
	GetShopConfig(ctx context.Context, in *GetShopConfigRequest, opts ...grpc.CallOption) (*GetShopConfigResponse, error)
	UpdateShopConfig(ctx context.Context, in *UpdateShopConfigRequest, opts ...grpc.CallOption) (*UpdateShopConfigResponse, error)
	GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error)
	GetBanksConfig(ctx context.Context, in *GetBanksConfigRequest, opts ...grpc.CallOption) (*GetBanksConfigResponse, error)
	GetInstallmentDetail(ctx context.Context, in *GetInstallmentDetailRequest, opts ...grpc.CallOption) (*GetInstallmentDetailResponse, error)
	VerifyListProduct(ctx context.Context, in *VerifyListProductRequest, opts ...grpc.CallOption) (*VerifyListProductResponse, error)
}

type installmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewInstallmentServiceClient(cc *grpc.ClientConn) InstallmentServiceClient {
	return &installmentServiceClient{cc}
}

func (c *installmentServiceClient) GetShopConfig(ctx context.Context, in *GetShopConfigRequest, opts ...grpc.CallOption) (*GetShopConfigResponse, error) {
	out := new(GetShopConfigResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.installment.InstallmentService/GetShopConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) UpdateShopConfig(ctx context.Context, in *UpdateShopConfigRequest, opts ...grpc.CallOption) (*UpdateShopConfigResponse, error) {
	out := new(UpdateShopConfigResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.installment.InstallmentService/UpdateShopConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error) {
	out := new(GetProductDetailResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.installment.InstallmentService/GetProductDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetBanksConfig(ctx context.Context, in *GetBanksConfigRequest, opts ...grpc.CallOption) (*GetBanksConfigResponse, error) {
	out := new(GetBanksConfigResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.installment.InstallmentService/GetBanksConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetInstallmentDetail(ctx context.Context, in *GetInstallmentDetailRequest, opts ...grpc.CallOption) (*GetInstallmentDetailResponse, error) {
	out := new(GetInstallmentDetailResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.installment.InstallmentService/GetInstallmentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) VerifyListProduct(ctx context.Context, in *VerifyListProductRequest, opts ...grpc.CallOption) (*VerifyListProductResponse, error) {
	out := new(VerifyListProductResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.installment.InstallmentService/VerifyListProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallmentServiceServer is the server API for InstallmentService service.
type InstallmentServiceServer interface {
	GetShopConfig(context.Context, *GetShopConfigRequest) (*GetShopConfigResponse, error)
	UpdateShopConfig(context.Context, *UpdateShopConfigRequest) (*UpdateShopConfigResponse, error)
	GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error)
	GetBanksConfig(context.Context, *GetBanksConfigRequest) (*GetBanksConfigResponse, error)
	GetInstallmentDetail(context.Context, *GetInstallmentDetailRequest) (*GetInstallmentDetailResponse, error)
	VerifyListProduct(context.Context, *VerifyListProductRequest) (*VerifyListProductResponse, error)
}

func RegisterInstallmentServiceServer(s *grpc.Server, srv InstallmentServiceServer) {
	s.RegisterService(&_InstallmentService_serviceDesc, srv)
}

func _InstallmentService_GetShopConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetShopConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.installment.InstallmentService/GetShopConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetShopConfig(ctx, req.(*GetShopConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_UpdateShopConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShopConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).UpdateShopConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.installment.InstallmentService/UpdateShopConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).UpdateShopConfig(ctx, req.(*UpdateShopConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.installment.InstallmentService/GetProductDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetProductDetail(ctx, req.(*GetProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetBanksConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanksConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetBanksConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.installment.InstallmentService/GetBanksConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetBanksConfig(ctx, req.(*GetBanksConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetInstallmentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstallmentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetInstallmentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.installment.InstallmentService/GetInstallmentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetInstallmentDetail(ctx, req.(*GetInstallmentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_VerifyListProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyListProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).VerifyListProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.installment.InstallmentService/VerifyListProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).VerifyListProduct(ctx, req.(*VerifyListProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InstallmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.installment.InstallmentService",
	HandlerType: (*InstallmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShopConfig",
			Handler:    _InstallmentService_GetShopConfig_Handler,
		},
		{
			MethodName: "UpdateShopConfig",
			Handler:    _InstallmentService_UpdateShopConfig_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _InstallmentService_GetProductDetail_Handler,
		},
		{
			MethodName: "GetBanksConfig",
			Handler:    _InstallmentService_GetBanksConfig_Handler,
		},
		{
			MethodName: "GetInstallmentDetail",
			Handler:    _InstallmentService_GetInstallmentDetail_Handler,
		},
		{
			MethodName: "VerifyListProduct",
			Handler:    _InstallmentService_VerifyListProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "installment/installment.proto",
}

func (m *VerifyListProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyListProductRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for _, msg := range m.ProductList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInstallment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VerifyListProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyListProductResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for _, msg := range m.ProductList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInstallment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ShopId))
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ProductId))
	}
	if m.GrandTotal != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.GrandTotal))))
		i += 8
	}
	if m.IsSupportInstallment {
		dAtA[i] = 0x20
		i++
		if m.IsSupportInstallment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetInstallmentDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInstallmentDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ShopId))
	}
	if m.Qty != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Qty))
	}
	if m.Period != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Period))
	}
	if m.BankId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.BankId))
	}
	if m.GrandTotal != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.GrandTotal))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetInstallmentDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInstallmentDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Error.Size()))
		n2, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.InstallmentDetail != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.InstallmentDetail.Size()))
		n3, err := m.InstallmentDetail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Bank != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Bank.Size()))
		n4, err := m.Bank.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetProductDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProductDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ShopId))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i += 8
	}
	if m.Qty != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Qty))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetProductDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProductDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsSupportedInstallment {
		dAtA[i] = 0x8
		i++
		if m.IsSupportedInstallment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Error.Size()))
		n5, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.TooltipTitle) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.TooltipTitle)))
		i += copy(dAtA[i:], m.TooltipTitle)
	}
	if len(m.TooltipContent) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.TooltipContent)))
		i += copy(dAtA[i:], m.TooltipContent)
	}
	if len(m.AppTooltipContent) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.AppTooltipContent)))
		i += copy(dAtA[i:], m.AppTooltipContent)
	}
	if len(m.InstallmentLabel) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.InstallmentLabel)))
		i += copy(dAtA[i:], m.InstallmentLabel)
	}
	if len(m.AppInstallmentLabel) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.AppInstallmentLabel)))
		i += copy(dAtA[i:], m.AppInstallmentLabel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBanksConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBanksConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ShopId))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i += 8
	}
	if m.Qty != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Qty))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBanksConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBanksConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsSupportedInstallment {
		dAtA[i] = 0x8
		i++
		if m.IsSupportedInstallment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Error.Size()))
		n6, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.BankList) > 0 {
		for _, msg := range m.BankList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintInstallment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Bank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BankId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.BankId))
	}
	if len(m.BankName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.BankName)))
		i += copy(dAtA[i:], m.BankName)
	}
	if len(m.BankCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.BankCode)))
		i += copy(dAtA[i:], m.BankCode)
	}
	if len(m.Logo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.Logo)))
		i += copy(dAtA[i:], m.Logo)
	}
	if m.Sort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Sort))
	}
	if len(m.BankInstallmentTerms) > 0 {
		for _, msg := range m.BankInstallmentTerms {
			dAtA[i] = 0x32
			i++
			i = encodeVarintInstallment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BanksBins) > 0 {
		for _, s := range m.BanksBins {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BankInstallmentTerm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankInstallmentTerm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Period))
	}
	if m.InstallmentPlan != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.InstallmentPlan))
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.BankCharged != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.BankCharged))
	}
	if m.SendoCharged != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.SendoCharged))
	}
	if m.Percent != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Percent))))
		i += 4
	}
	if m.SendoChargedPercent != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SendoChargedPercent))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetShopConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShopConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ShopId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetShopConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShopConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Data.Size()))
		n7, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Error.Size()))
		n8, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateShopConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateShopConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ShopId))
	}
	if len(m.InstallmentTerms) > 0 {
		for _, msg := range m.InstallmentTerms {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInstallment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateShopConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateShopConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ShopId))
	}
	if len(m.InstallmentTerms) > 0 {
		for _, msg := range m.InstallmentTerms {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInstallment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Error.Size()))
		n9, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.IsActive {
		dAtA[i] = 0x20
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopInstallmentConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopInstallmentConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.ShopId))
	}
	if m.IsActive {
		dAtA[i] = 0x10
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.UpdatedAt))
	}
	if len(m.InstallmentTerms) > 0 {
		for _, msg := range m.InstallmentTerms {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintInstallment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InstallmentTerm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallmentTerm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.Period))
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Percent != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Percent))))
		i += 4
	}
	if m.IsActive {
		dAtA[i] = 0x20
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInstallment(dAtA, i, uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintInstallment(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VerifyListProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for _, e := range m.ProductList {
			l = e.Size()
			n += 1 + l + sovInstallment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyListProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for _, e := range m.ProductList {
			l = e.Size()
			n += 1 + l + sovInstallment(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovInstallment(uint64(m.ShopId))
	}
	if m.ProductId != 0 {
		n += 1 + sovInstallment(uint64(m.ProductId))
	}
	if m.GrandTotal != 0 {
		n += 9
	}
	if m.IsSupportInstallment {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInstallmentDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovInstallment(uint64(m.ShopId))
	}
	if m.Qty != 0 {
		n += 1 + sovInstallment(uint64(m.Qty))
	}
	if m.Period != 0 {
		n += 1 + sovInstallment(uint64(m.Period))
	}
	if m.BankId != 0 {
		n += 1 + sovInstallment(uint64(m.BankId))
	}
	if m.GrandTotal != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInstallmentDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.InstallmentDetail != nil {
		l = m.InstallmentDetail.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.Bank != nil {
		l = m.Bank.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProductDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovInstallment(uint64(m.ShopId))
	}
	if m.Amount != 0 {
		n += 9
	}
	if m.Qty != 0 {
		n += 1 + sovInstallment(uint64(m.Qty))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProductDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSupportedInstallment {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.TooltipTitle)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.TooltipContent)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.AppTooltipContent)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.InstallmentLabel)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.AppInstallmentLabel)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBanksConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovInstallment(uint64(m.ShopId))
	}
	if m.Amount != 0 {
		n += 9
	}
	if m.Qty != 0 {
		n += 1 + sovInstallment(uint64(m.Qty))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBanksConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSupportedInstallment {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	if len(m.BankList) > 0 {
		for _, e := range m.BankList {
			l = e.Size()
			n += 1 + l + sovInstallment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BankId != 0 {
		n += 1 + sovInstallment(uint64(m.BankId))
	}
	l = len(m.BankName)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.BankCode)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovInstallment(uint64(m.Sort))
	}
	if len(m.BankInstallmentTerms) > 0 {
		for _, e := range m.BankInstallmentTerms {
			l = e.Size()
			n += 1 + l + sovInstallment(uint64(l))
		}
	}
	if len(m.BanksBins) > 0 {
		for _, s := range m.BanksBins {
			l = len(s)
			n += 1 + l + sovInstallment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankInstallmentTerm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovInstallment(uint64(m.Period))
	}
	if m.InstallmentPlan != 0 {
		n += 1 + sovInstallment(uint64(m.InstallmentPlan))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.BankCharged != 0 {
		n += 1 + sovInstallment(uint64(m.BankCharged))
	}
	if m.SendoCharged != 0 {
		n += 1 + sovInstallment(uint64(m.SendoCharged))
	}
	if m.Percent != 0 {
		n += 5
	}
	if m.SendoChargedPercent != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShopConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovInstallment(uint64(m.ShopId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShopConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateShopConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovInstallment(uint64(m.ShopId))
	}
	if len(m.InstallmentTerms) > 0 {
		for _, e := range m.InstallmentTerms {
			l = e.Size()
			n += 1 + l + sovInstallment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateShopConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovInstallment(uint64(m.ShopId))
	}
	if len(m.InstallmentTerms) > 0 {
		for _, e := range m.InstallmentTerms {
			l = e.Size()
			n += 1 + l + sovInstallment(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInstallment(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopInstallmentConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovInstallment(uint64(m.ShopId))
	}
	if m.IsActive {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovInstallment(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovInstallment(uint64(m.UpdatedAt))
	}
	if len(m.InstallmentTerms) > 0 {
		for _, e := range m.InstallmentTerms {
			l = e.Size()
			n += 1 + l + sovInstallment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallmentTerm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovInstallment(uint64(m.Period))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovInstallment(uint64(l))
	}
	if m.Percent != 0 {
		n += 5
	}
	if m.IsActive {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovInstallment(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovInstallment(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInstallment(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInstallment(x uint64) (n int) {
	return sovInstallment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VerifyListProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyListProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyListProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductList = append(m.ProductList, &ProductItem{})
			if err := m.ProductList[len(m.ProductList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyListProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyListProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyListProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductList = append(m.ProductList, &ProductItem{})
			if err := m.ProductList[len(m.ProductList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: productItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: productItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GrandTotal = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupportInstallment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupportInstallment = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInstallmentDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInstallmentDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInstallmentDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			m.Qty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qty |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			m.BankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GrandTotal = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInstallmentDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInstallmentDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInstallmentDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstallmentDetail == nil {
				m.InstallmentDetail = &BankInstallmentTerm{}
			}
			if err := m.InstallmentDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bank == nil {
				m.Bank = &Bank{}
			}
			if err := m.Bank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProductDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProductDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProductDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			m.Qty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qty |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProductDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProductDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProductDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupportedInstallment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupportedInstallment = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TooltipTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TooltipTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TooltipContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TooltipContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTooltipContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTooltipContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallmentLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInstallmentLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppInstallmentLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBanksConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBanksConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBanksConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			m.Qty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qty |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBanksConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBanksConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBanksConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupportedInstallment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupportedInstallment = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankList = append(m.BankList, &Bank{})
			if err := m.BankList[len(m.BankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			m.BankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankInstallmentTerms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankInstallmentTerms = append(m.BankInstallmentTerms, &BankInstallmentTerm{})
			if err := m.BankInstallmentTerms[len(m.BankInstallmentTerms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanksBins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BanksBins = append(m.BanksBins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankInstallmentTerm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankInstallmentTerm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankInstallmentTerm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentPlan", wireType)
			}
			m.InstallmentPlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstallmentPlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCharged", wireType)
			}
			m.BankCharged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankCharged |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoCharged", wireType)
			}
			m.SendoCharged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendoCharged |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Percent = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoChargedPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SendoChargedPercent = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShopConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShopConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShopConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShopConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShopConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShopConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShopInstallmentConfig{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateShopConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateShopConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateShopConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentTerms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallmentTerms = append(m.InstallmentTerms, &InstallmentTerm{})
			if err := m.InstallmentTerms[len(m.InstallmentTerms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateShopConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateShopConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateShopConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentTerms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallmentTerms = append(m.InstallmentTerms, &InstallmentTerm{})
			if err := m.InstallmentTerms[len(m.InstallmentTerms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopInstallmentConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopInstallmentConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopInstallmentConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentTerms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallmentTerms = append(m.InstallmentTerms, &InstallmentTerm{})
			if err := m.InstallmentTerms[len(m.InstallmentTerms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallmentTerm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallmentTerm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallmentTerm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Percent = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInstallment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstallment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInstallment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInstallment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstallment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInstallment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInstallment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInstallment(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInstallment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInstallment   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("installment/installment.proto", fileDescriptor_installment_3046d304fc069012)
}

var fileDescriptor_installment_3046d304fc069012 = []byte{
	// 1280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1b, 0xd7, 0xd8, 0x79, 0xa9, 0x9f, 0x34, 0xff, 0xa6, 0xd3, 0x36, 0xdd, 0xba, 0x69, 0x6a, 0xcd,
	0xbf, 0x45, 0x26, 0x60, 0xbb, 0x4d, 0x69, 0x0f, 0x15, 0xa7, 0x16, 0x14, 0x45, 0xe2, 0x80, 0xb6,
	0x14, 0x24, 0x50, 0x65, 0x8d, 0xed, 0xa9, 0x33, 0xea, 0x7a, 0x67, 0xbb, 0x3b, 0x8e, 0x14, 0x21,
	0x2e, 0xdc, 0x10, 0xdc, 0x7a, 0x42, 0x02, 0xa4, 0x1e, 0x39, 0x22, 0x0e, 0x7c, 0x05, 0xb8, 0x21,
	0xf1, 0x05, 0x50, 0x84, 0x10, 0x1f, 0x80, 0x0f, 0x80, 0xe6, 0xd9, 0x59, 0x7b, 0xd6, 0xf6, 0xba,
	0x71, 0x55, 0xc1, 0x6d, 0xe6, 0x79, 0x9b, 0xdf, 0x3c, 0x2f, 0x3f, 0xcf, 0x1a, 0xae, 0xc8, 0x30,
	0xd1, 0x3c, 0x08, 0x06, 0x22, 0xd4, 0x2d, 0x67, 0xdd, 0x8c, 0x62, 0xa5, 0x15, 0xf5, 0x12, 0x11,
	0xf6, 0x54, 0xf3, 0xf0, 0x66, 0x93, 0x47, 0xb2, 0xe9, 0xe8, 0xab, 0x8d, 0xbe, 0xd4, 0x07, 0xc3,
	0x4e, 0xb3, 0xab, 0x06, 0xad, 0xbe, 0xea, 0xab, 0x16, 0x3a, 0x74, 0x86, 0x8f, 0x71, 0x87, 0x1b,
	0x5c, 0xa5, 0x81, 0xaa, 0x5b, 0x7d, 0xa5, 0xfa, 0x81, 0x68, 0xf1, 0x48, 0xb6, 0x78, 0x18, 0x2a,
	0xcd, 0xb5, 0x54, 0x61, 0x92, 0x6a, 0x99, 0x00, 0xef, 0x43, 0x11, 0xcb, 0xc7, 0x47, 0xef, 0xc9,
	0x44, 0xbf, 0x1f, 0xab, 0xde, 0xb0, 0xab, 0x7d, 0xf1, 0x74, 0x28, 0x12, 0x4d, 0xf7, 0xe1, 0x74,
	0x94, 0x4a, 0xda, 0x81, 0x4c, 0xb4, 0x47, 0x6a, 0xe5, 0xfa, 0xda, 0xee, 0xf5, 0x66, 0x11, 0xb2,
	0xa6, 0xb5, 0xde, 0xd7, 0x62, 0xe0, 0xe7, 0x5c, 0xd9, 0xb7, 0x04, 0x2e, 0xcd, 0x38, 0x27, 0x89,
	0x54, 0x98, 0x88, 0x57, 0x78, 0x10, 0xbd, 0x0d, 0xcb, 0x22, 0x8e, 0x55, 0xec, 0x95, 0x6a, 0xa4,
	0xbe, 0xb6, 0x7b, 0xb5, 0x38, 0xc6, 0xbb, 0xc6, 0xcc, 0x4f, 0xad, 0xd9, 0x73, 0x02, 0x6b, 0x4e,
	0x50, 0xea, 0xc1, 0x6a, 0x72, 0xa0, 0xa2, 0xb6, 0xec, 0x79, 0xa4, 0x46, 0xea, 0xeb, 0x7e, 0xb6,
	0xa5, 0xdb, 0x00, 0xd9, 0x81, 0xb2, 0x87, 0xa7, 0xac, 0xfb, 0x8e, 0x84, 0xd6, 0x60, 0xad, 0x1f,
	0xf3, 0xb0, 0xd7, 0xd6, 0x4a, 0xf3, 0xc0, 0x2b, 0xd7, 0x48, 0x9d, 0xf8, 0xae, 0x88, 0xde, 0x81,
	0x4d, 0x99, 0xb4, 0x93, 0x61, 0x14, 0xa9, 0x58, 0xb7, 0x1d, 0x48, 0xde, 0x52, 0x8d, 0xd4, 0x4f,
	0xf9, 0x05, 0x5a, 0x93, 0xc3, 0xcb, 0x7b, 0x42, 0xef, 0x8f, 0x45, 0xef, 0x08, 0xcd, 0x65, 0x90,
	0x95, 0xab, 0x18, 0xf3, 0x06, 0x94, 0x9f, 0xea, 0x23, 0x0b, 0xd6, 0x2c, 0xe9, 0x26, 0xac, 0x44,
	0x22, 0x96, 0xaa, 0x87, 0x00, 0xd7, 0x7d, 0xbb, 0x33, 0x31, 0x3a, 0x3c, 0x7c, 0x62, 0x62, 0x2c,
	0xa5, 0x31, 0xec, 0x76, 0xf2, 0x5e, 0xcb, 0x53, 0xf7, 0x62, 0x7f, 0x11, 0xd8, 0x9a, 0x8d, 0xcf,
	0x96, 0x79, 0x54, 0x1b, 0xb2, 0x48, 0x6d, 0xe8, 0x23, 0xa0, 0x8e, 0xae, 0xdd, 0xc3, 0xa0, 0xb6,
	0xbe, 0x8d, 0xe2, 0x18, 0xf7, 0x78, 0xf8, 0xc4, 0xc1, 0xf2, 0x81, 0x88, 0x07, 0xfe, 0x8c, 0x40,
	0x74, 0x17, 0x96, 0xcc, 0x1d, 0x31, 0x11, 0x6b, 0xbb, 0xdb, 0xf3, 0x03, 0xfa, 0x68, 0xcb, 0x1e,
	0xc1, 0xc5, 0x3d, 0x91, 0xb5, 0xf1, 0x49, 0xab, 0xb0, 0x09, 0x2b, 0x7c, 0xa0, 0x86, 0xa1, 0x46,
	0xec, 0xc4, 0xb7, 0xbb, 0xac, 0x3a, 0xe5, 0x51, 0x75, 0xd8, 0x8f, 0x65, 0xf0, 0xa6, 0xe3, 0xdb,
	0x2c, 0xde, 0x05, 0x6f, 0xdc, 0x20, 0xa2, 0x97, 0x6b, 0x20, 0x82, 0x0d, 0x54, 0xa8, 0x7f, 0xc9,
	0xe9, 0xa0, 0xe7, 0x61, 0x59, 0x4b, 0x1d, 0x08, 0xc4, 0x58, 0xf1, 0xd3, 0x8d, 0x91, 0x76, 0x55,
	0xa0, 0x62, 0xec, 0x94, 0x8a, 0x9f, 0x6e, 0x28, 0x85, 0x25, 0xd9, 0x55, 0x21, 0x36, 0x48, 0xc5,
	0xc7, 0x35, 0xbd, 0x06, 0xeb, 0x5a, 0xa9, 0x40, 0xcb, 0xa8, 0x9d, 0xc6, 0x59, 0x41, 0x65, 0x5e,
	0x48, 0xeb, 0x70, 0x26, 0x13, 0x74, 0x55, 0xa8, 0xcd, 0x7d, 0x56, 0xd1, 0x6e, 0x52, 0x4c, 0x6f,
	0xc0, 0x39, 0x1e, 0x45, 0xed, 0x49, 0xeb, 0x53, 0x68, 0x3d, 0x4b, 0x45, 0xdf, 0x84, 0xb3, 0x6e,
	0xe9, 0x03, 0xde, 0x11, 0x81, 0x57, 0x41, 0xfb, 0x69, 0x05, 0x7d, 0x0b, 0x2e, 0x98, 0x20, 0xd3,
	0x1e, 0x80, 0x1e, 0xb3, 0x95, 0xec, 0x13, 0xb8, 0xb0, 0x27, 0xb4, 0xe9, 0x92, 0xe4, 0xbe, 0x0a,
	0x1f, 0xcb, 0xfe, 0xab, 0x6c, 0x89, 0x5f, 0x08, 0x6c, 0x4e, 0x46, 0xff, 0xef, 0x1a, 0xe2, 0x6d,
	0xa8, 0x20, 0x2f, 0x20, 0x5b, 0x97, 0x91, 0xad, 0x5f, 0x34, 0x38, 0x63, 0x07, 0xf6, 0x65, 0x09,
	0x96, 0x8c, 0xcc, 0x65, 0x1b, 0x92, 0x67, 0x9b, 0x2d, 0x7b, 0x40, 0xc8, 0x07, 0x02, 0xb1, 0x55,
	0xfc, 0xb1, 0x60, 0xa4, 0xed, 0xaa, 0x5e, 0xd6, 0x93, 0x63, 0x81, 0xe9, 0xc0, 0x40, 0xf5, 0x95,
	0x6d, 0x4b, 0x5c, 0x1b, 0x59, 0xa2, 0x62, 0x8d, 0x5d, 0xb9, 0xee, 0xe3, 0x9a, 0x0a, 0xd8, 0x4c,
	0x8f, 0x73, 0x2a, 0xa9, 0x45, 0x3c, 0x48, 0xbc, 0x15, 0xbc, 0xd1, 0x82, 0xdc, 0x52, 0x10, 0xcc,
	0xfc, 0x60, 0x18, 0x4d, 0xd2, 0xee, 0xc8, 0x30, 0xf1, 0x56, 0x6b, 0xe5, 0x7a, 0xc5, 0x77, 0x24,
	0xec, 0x8b, 0x12, 0x9c, 0x9b, 0x11, 0xcf, 0xa1, 0x68, 0x92, 0xa3, 0xe8, 0x1d, 0xd8, 0x70, 0x0f,
	0x89, 0x02, 0x1e, 0x5a, 0x66, 0x9f, 0x92, 0x9b, 0x11, 0x4d, 0x1b, 0xd7, 0x0e, 0x6e, 0xda, 0xde,
	0x0c, 0x4e, 0xa7, 0xd9, 0x3a, 0xe0, 0x71, 0x5f, 0x64, 0x4c, 0x9f, 0x93, 0x99, 0x91, 0xc5, 0xdb,
	0x8f, 0x8c, 0xd2, 0xcc, 0xe5, 0x85, 0xa6, 0x80, 0x91, 0x88, 0xbb, 0xa6, 0xd3, 0xcc, 0x48, 0x97,
	0xfc, 0x6c, 0x6b, 0x46, 0x28, 0x67, 0xda, 0xce, 0xec, 0x56, 0xd1, 0x6e, 0xb6, 0x92, 0xdd, 0x80,
	0xf3, 0x7b, 0x42, 0x3f, 0x38, 0x50, 0xd1, 0x09, 0x27, 0x88, 0x3d, 0x23, 0x38, 0x75, 0xae, 0x8b,
	0x1d, 0x8b, 0xfb, 0xb0, 0xd4, 0xe3, 0x9a, 0xdb, 0x1f, 0x9b, 0x56, 0x71, 0x31, 0x8d, 0xaf, 0x93,
	0x7c, 0x1b, 0x06, 0x9d, 0x5f, 0xf6, 0x39, 0xf1, 0x15, 0x81, 0x8b, 0x0f, 0xa3, 0x1e, 0xd7, 0x62,
	0x81, 0xbb, 0xd0, 0x8f, 0xf2, 0x24, 0x95, 0xf6, 0x62, 0x09, 0x7b, 0xf1, 0xf5, 0xe2, 0x83, 0x27,
	0xfb, 0x70, 0x3a, 0x06, 0x3b, 0x26, 0xe0, 0x4d, 0xc3, 0xb1, 0x79, 0xfa, 0xf7, 0xf1, 0x8c, 0xb3,
	0x5a, 0x5e, 0x88, 0x75, 0xb6, 0xa0, 0x22, 0x93, 0x36, 0xef, 0x6a, 0x79, 0x28, 0xec, 0x5b, 0x69,
	0x2c, 0x60, 0xfb, 0xb0, 0x8c, 0xd6, 0x66, 0xd6, 0x91, 0x18, 0xd2, 0xdb, 0xe0, 0xda, 0x5c, 0x72,
	0x20, 0x92, 0x84, 0xf7, 0x33, 0x36, 0xc9, 0xb6, 0xc6, 0x5a, 0x1f, 0x45, 0x19, 0x8d, 0xe0, 0x9a,
	0xfd, 0x49, 0xe0, 0xc2, 0xcc, 0xae, 0x98, 0x93, 0xac, 0x1c, 0xb8, 0xd2, 0x04, 0x38, 0x43, 0x02,
	0xdd, 0x58, 0x70, 0x43, 0xbf, 0x5c, 0x5b, 0x5e, 0x77, 0x24, 0x46, 0x3f, 0xc4, 0x02, 0xa1, 0x3e,
	0x1d, 0x48, 0x47, 0x42, 0x1f, 0xce, 0x2a, 0xc5, 0xf2, 0xa2, 0xa5, 0x38, 0x93, 0x2a, 0x47, 0x21,
	0xd8, 0x4f, 0x04, 0xce, 0x9c, 0x94, 0x77, 0x46, 0x5c, 0x52, 0x72, 0xb9, 0xc4, 0x61, 0x80, 0x72,
	0x9e, 0x01, 0xe6, 0x56, 0x6b, 0x22, 0x21, 0xcb, 0x2f, 0x48, 0xc8, 0xca, 0x64, 0x42, 0x76, 0xff,
	0x5e, 0x05, 0xea, 0x20, 0x7f, 0x20, 0xe2, 0x43, 0xd9, 0x15, 0xf4, 0x1b, 0x02, 0xeb, 0x39, 0x3a,
	0xa0, 0xcd, 0xe2, 0xf4, 0xcc, 0xa2, 0x9a, 0x6a, 0xeb, 0xc4, 0xf6, 0xe9, 0xfc, 0xb0, 0x9d, 0xcf,
	0x7f, 0xfb, 0xe3, 0x59, 0xe9, 0x1a, 0x65, 0xee, 0x47, 0x5c, 0xcb, 0xb4, 0x45, 0xa3, 0x8b, 0x96,
	0xad, 0x4f, 0x6d, 0x8f, 0x7c, 0x46, 0xbf, 0x23, 0xb0, 0x31, 0x39, 0x88, 0xf4, 0x66, 0xf1, 0x89,
	0x05, 0x1c, 0x52, 0xdd, 0x5d, 0xc4, 0xc5, 0xe2, 0xfc, 0x3f, 0xe2, 0xbc, 0xc2, 0xbc, 0x22, 0x9c,
	0x77, 0xc9, 0x0e, 0x7d, 0x4e, 0x60, 0x63, 0xf2, 0xe5, 0x39, 0x0f, 0x60, 0xc1, 0x2b, 0x78, 0x1e,
	0xc0, 0xa2, 0x87, 0x2d, 0x7b, 0x0d, 0x01, 0xd6, 0xd8, 0xe5, 0x1c, 0x40, 0xfb, 0x69, 0xd5, 0x48,
	0x5f, 0xeb, 0x06, 0xe3, 0xd7, 0x04, 0xfe, 0x97, 0x7f, 0x0a, 0xd1, 0xf9, 0x45, 0x9b, 0x7e, 0x92,
	0x55, 0x6f, 0x9c, 0xdc, 0xc1, 0xa2, 0xbb, 0x86, 0xe8, 0xb6, 0xd9, 0xa5, 0x1c, 0x3a, 0xfc, 0x1d,
	0x77, 0xf2, 0xf7, 0x03, 0xc1, 0x5f, 0xb0, 0xa9, 0x6f, 0x20, 0x7a, 0x7b, 0xee, 0x81, 0x45, 0xdf,
	0x74, 0xd5, 0x3b, 0x8b, 0xba, 0xe5, 0x9b, 0x92, 0x5d, 0x6d, 0x15, 0xfc, 0xcb, 0xe0, 0xe4, 0xf3,
	0x7b, 0x02, 0x67, 0xa7, 0xbe, 0xcd, 0xe9, 0x9c, 0x0a, 0x16, 0xfd, 0x61, 0x50, 0xbd, 0xb5, 0x90,
	0x8f, 0x85, 0xfa, 0x06, 0x42, 0xbd, 0xce, 0x6a, 0x39, 0xa8, 0x87, 0x68, 0xdf, 0x30, 0xef, 0xc5,
	0x86, 0x6d, 0x81, 0xbb, 0x64, 0xe7, 0xde, 0xfd, 0x9f, 0x8f, 0xb7, 0xc9, 0xaf, 0xc7, 0xdb, 0xe4,
	0xf7, 0xe3, 0x6d, 0xf2, 0xf1, 0xed, 0xbe, 0xd4, 0x01, 0xef, 0x64, 0xa7, 0x86, 0xe3, 0x7f, 0x42,
	0x64, 0xa8, 0x45, 0x1c, 0xf2, 0xa0, 0xc1, 0x23, 0x99, 0x34, 0xfa, 0xca, 0x8d, 0xdd, 0x59, 0x41,
	0xb3, 0x5b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x34, 0x63, 0xc7, 0xf2, 0x82, 0x11, 0x00, 0x00,
}
