// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: installment/installment.proto

package installment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on VerifyListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyListProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetProductList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductList[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// VerifyListProductRequestValidationError is the validation error returned by
// VerifyListProductRequest.Validate if the designated constraints aren't met.
type VerifyListProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyListProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyListProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyListProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyListProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyListProductRequestValidationError) ErrorName() string {
	return "VerifyListProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyListProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyListProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyListProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyListProductRequestValidationError{}

// Validate checks the field values on VerifyListProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyListProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetProductList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductList[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// VerifyListProductResponseValidationError is the validation error returned by
// VerifyListProductResponse.Validate if the designated constraints aren't met.
type VerifyListProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyListProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyListProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyListProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyListProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyListProductResponseValidationError) ErrorName() string {
	return "VerifyListProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyListProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyListProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyListProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyListProductResponseValidationError{}

// Validate checks the field values on ProductItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductItem) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	// no validation rules for ProductId

	// no validation rules for GrandTotal

	// no validation rules for IsSupportInstallment

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductItemValidationError is the validation error returned by
// ProductItem.Validate if the designated constraints aren't met.
type ProductItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductItemValidationError) ErrorName() string { return "ProductItemValidationError" }

// Error satisfies the builtin error interface
func (e ProductItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductItemValidationError{}

// Validate checks the field values on GetInstallmentDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInstallmentDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	// no validation rules for Qty

	// no validation rules for Period

	// no validation rules for BankId

	// no validation rules for GrandTotal

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetInstallmentDetailRequestValidationError is the validation error returned
// by GetInstallmentDetailRequest.Validate if the designated constraints
// aren't met.
type GetInstallmentDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstallmentDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstallmentDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstallmentDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstallmentDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstallmentDetailRequestValidationError) ErrorName() string {
	return "GetInstallmentDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstallmentDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstallmentDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstallmentDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstallmentDetailRequestValidationError{}

// Validate checks the field values on GetInstallmentDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInstallmentDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetInstallmentDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("InstallmentDetail", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetBank()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Bank", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetInstallmentDetailResponseValidationError is the validation error returned
// by GetInstallmentDetailResponse.Validate if the designated constraints
// aren't met.
type GetInstallmentDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstallmentDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstallmentDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstallmentDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstallmentDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstallmentDetailResponseValidationError) ErrorName() string {
	return "GetInstallmentDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstallmentDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstallmentDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstallmentDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstallmentDetailResponseValidationError{}

// Validate checks the field values on GetProductDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	// no validation rules for Amount

	// no validation rules for Qty

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetProductDetailRequestValidationError is the validation error returned by
// GetProductDetailRequest.Validate if the designated constraints aren't met.
type GetProductDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductDetailRequestValidationError) ErrorName() string {
	return "GetProductDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductDetailRequestValidationError{}

// Validate checks the field values on GetProductDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IsSupportedInstallment

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	// no validation rules for Title

	// no validation rules for Color

	// no validation rules for Icon

	// no validation rules for TooltipTitle

	// no validation rules for TooltipContent

	// no validation rules for AppTooltipContent

	// no validation rules for InstallmentLabel

	// no validation rules for AppInstallmentLabel

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetProductDetailResponseValidationError is the validation error returned by
// GetProductDetailResponse.Validate if the designated constraints aren't met.
type GetProductDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductDetailResponseValidationError) ErrorName() string {
	return "GetProductDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductDetailResponseValidationError{}

// Validate checks the field values on GetBanksConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBanksConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	// no validation rules for Amount

	// no validation rules for Qty

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetBanksConfigRequestValidationError is the validation error returned by
// GetBanksConfigRequest.Validate if the designated constraints aren't met.
type GetBanksConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanksConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanksConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanksConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanksConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanksConfigRequestValidationError) ErrorName() string {
	return "GetBanksConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBanksConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanksConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanksConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanksConfigRequestValidationError{}

// Validate checks the field values on GetBanksConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBanksConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IsSupportedInstallment

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetBankList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("BankList[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetBanksConfigResponseValidationError is the validation error returned by
// GetBanksConfigResponse.Validate if the designated constraints aren't met.
type GetBanksConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanksConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanksConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanksConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanksConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanksConfigResponseValidationError) ErrorName() string {
	return "GetBanksConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBanksConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanksConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanksConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanksConfigResponseValidationError{}

// Validate checks the field values on Bank with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Bank) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BankId

	// no validation rules for BankName

	// no validation rules for BankCode

	// no validation rules for Logo

	// no validation rules for Sort

	for idx, item := range m.GetBankInstallmentTerms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("BankInstallmentTerms[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BankValidationError is the validation error returned by Bank.Validate if the
// designated constraints aren't met.
type BankValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankValidationError) ErrorName() string { return "BankValidationError" }

// Error satisfies the builtin error interface
func (e BankValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBank.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankValidationError{}

// Validate checks the field values on BankInstallmentTerm with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BankInstallmentTerm) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Period

	// no validation rules for InstallmentPlan

	// no validation rules for Label

	// no validation rules for BankCharged

	// no validation rules for SendoCharged

	// no validation rules for Percent

	// no validation rules for SendoChargedPercent

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BankInstallmentTermValidationError is the validation error returned by
// BankInstallmentTerm.Validate if the designated constraints aren't met.
type BankInstallmentTermValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankInstallmentTermValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankInstallmentTermValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankInstallmentTermValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankInstallmentTermValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankInstallmentTermValidationError) ErrorName() string {
	return "BankInstallmentTermValidationError"
}

// Error satisfies the builtin error interface
func (e BankInstallmentTermValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBankInstallmentTerm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankInstallmentTermValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankInstallmentTermValidationError{}

// Validate checks the field values on GetShopConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetShopConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetShopConfigRequestValidationError is the validation error returned by
// GetShopConfigRequest.Validate if the designated constraints aren't met.
type GetShopConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopConfigRequestValidationError) ErrorName() string {
	return "GetShopConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShopConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopConfigRequestValidationError{}

// Validate checks the field values on GetShopConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetShopConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetShopConfigResponseValidationError is the validation error returned by
// GetShopConfigResponse.Validate if the designated constraints aren't met.
type GetShopConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopConfigResponseValidationError) ErrorName() string {
	return "GetShopConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShopConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopConfigResponseValidationError{}

// Validate checks the field values on UpdateShopConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateShopConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	for idx, item := range m.GetInstallmentTerms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("InstallmentTerms[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateShopConfigRequestValidationError is the validation error returned by
// UpdateShopConfigRequest.Validate if the designated constraints aren't met.
type UpdateShopConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShopConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShopConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShopConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShopConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShopConfigRequestValidationError) ErrorName() string {
	return "UpdateShopConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShopConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShopConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShopConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShopConfigRequestValidationError{}

// Validate checks the field values on UpdateShopConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateShopConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	for idx, item := range m.GetInstallmentTerms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("InstallmentTerms[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	// no validation rules for IsActive

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateShopConfigResponseValidationError is the validation error returned by
// UpdateShopConfigResponse.Validate if the designated constraints aren't met.
type UpdateShopConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShopConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShopConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShopConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShopConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShopConfigResponseValidationError) ErrorName() string {
	return "UpdateShopConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShopConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShopConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShopConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShopConfigResponseValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Error) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on ShopInstallmentConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShopInstallmentConfig) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	// no validation rules for IsActive

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetInstallmentTerms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("InstallmentTerms[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShopInstallmentConfigValidationError is the validation error returned by
// ShopInstallmentConfig.Validate if the designated constraints aren't met.
type ShopInstallmentConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopInstallmentConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopInstallmentConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopInstallmentConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopInstallmentConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopInstallmentConfigValidationError) ErrorName() string {
	return "ShopInstallmentConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ShopInstallmentConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopInstallmentConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopInstallmentConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopInstallmentConfigValidationError{}

// Validate checks the field values on InstallmentTerm with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *InstallmentTerm) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Period

	// no validation rules for Label

	// no validation rules for Percent

	// no validation rules for IsActive

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// InstallmentTermValidationError is the validation error returned by
// InstallmentTerm.Validate if the designated constraints aren't met.
type InstallmentTermValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallmentTermValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallmentTermValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallmentTermValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallmentTermValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallmentTermValidationError) ErrorName() string { return "InstallmentTermValidationError" }

// Error satisfies the builtin error interface
func (e InstallmentTermValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallmentTerm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallmentTermValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallmentTermValidationError{}
