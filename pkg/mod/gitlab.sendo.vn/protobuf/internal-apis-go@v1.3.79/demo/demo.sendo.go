// Code generated by protoc-gen-sendo. DO NOT EDIT.
// Author: Viet Tran. Software Architect - DC1
// source: demo/demo.proto

/*
Package demo is a generated protocol buffer package.

It is generated from these files:
	demo/demo.proto

It has these top-level messages:
	DeleteReq
	DeleteRes
	Note
	Notes
	NoteAddReq
	NoteListReq
	NoteFilter
	NoteChangedEvent
*/
package demo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "gitlab.sendo.vn/protobuf/internal-apis-go/base"

import (
	context "context"
	sendo "gitlab.sendo.vn/core/golang-sdk/new"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for NoteService service

type NoteService interface {
	// add new note
	Add(sdCtx sendo.ServiceContext, ctx context.Context, in *NoteAddReq) (*Note, error)
	// list note
	List(sdCtx sendo.ServiceContext, ctx context.Context, in *NoteListReq) (*Notes, error)
	// update existing note
	Update(sdCtx sendo.ServiceContext, ctx context.Context, in *Note) (*Note, error)
	// delete existing note
	Delete(sdCtx sendo.ServiceContext, ctx context.Context, in *DeleteReq) (*DeleteRes, error)
	// send back Note that inserted/updated
	NotifyChanged(sdCtx sendo.ServiceContext, in *NoteFilter, streamServer NoteService_NotifyChangedServer) error
}

type sDNoteServiceServer struct {
	ctx sendo.ServiceContext
	sv  NoteService
}

func NewSDNoteServiceServer(ctx sendo.ServiceContext, sv NoteService) *sDNoteServiceServer {
	return &sDNoteServiceServer{
		sv:  sv,
		ctx: ctx,
	}
}

func (h *sDNoteServiceServer) Add(ctx context.Context, in *NoteAddReq) (*Note, error) {
	return h.sv.Add(h.ctx, ctx, in)
}

func (h *sDNoteServiceServer) List(ctx context.Context, in *NoteListReq) (*Notes, error) {
	return h.sv.List(h.ctx, ctx, in)
}

func (h *sDNoteServiceServer) Update(ctx context.Context, in *Note) (*Note, error) {
	return h.sv.Update(h.ctx, ctx, in)
}

func (h *sDNoteServiceServer) Delete(ctx context.Context, in *DeleteReq) (*DeleteRes, error) {
	return h.sv.Delete(h.ctx, ctx, in)
}

func (h *sDNoteServiceServer) NotifyChanged(in *NoteFilter, streamSV NoteService_NotifyChangedServer) error {
	return h.sv.NotifyChanged(h.ctx, in, streamSV)
}

func AddNoteServiceHandler(service sendo.Service, sv NoteService) {
	service.Server().AddHandler(func(gRPC *grpc.Server) {
		RegisterNoteServiceServer(gRPC, NewSDNoteServiceServer(service, sv))
	})
}
