// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: brand/brand.proto

package category_attribute // import "gitlab.sendo.vn/protobuf/internal-apis-go/category_attribute"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"
import base "gitlab.sendo.vn/protobuf/internal-apis-go/base"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BrandShopType int32

const (
	BrandShopType_NOBRAND     BrandShopType = 0
	BrandShopType_GLOBALBRAND BrandShopType = 1
	BrandShopType_VIETBRAND   BrandShopType = 2
	BrandShopType_ALL         BrandShopType = 3
)

var BrandShopType_name = map[int32]string{
	0: "NOBRAND",
	1: "GLOBALBRAND",
	2: "VIETBRAND",
	3: "ALL",
}
var BrandShopType_value = map[string]int32{
	"NOBRAND":     0,
	"GLOBALBRAND": 1,
	"VIETBRAND":   2,
	"ALL":         3,
}

func (x BrandShopType) String() string {
	return proto.EnumName(BrandShopType_name, int32(x))
}
func (BrandShopType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{0}
}

type BrandFilters_StatusActive int32

const (
	BrandFilters_ALL      BrandFilters_StatusActive = 0
	BrandFilters_ACTIVE   BrandFilters_StatusActive = 1
	BrandFilters_DEACTIVE BrandFilters_StatusActive = 2
)

var BrandFilters_StatusActive_name = map[int32]string{
	0: "ALL",
	1: "ACTIVE",
	2: "DEACTIVE",
}
var BrandFilters_StatusActive_value = map[string]int32{
	"ALL":      0,
	"ACTIVE":   1,
	"DEACTIVE": 2,
}

func (x BrandFilters_StatusActive) String() string {
	return proto.EnumName(BrandFilters_StatusActive_name, int32(x))
}
func (BrandFilters_StatusActive) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{5, 0}
}

type BrandFilters_StatusDelete int32

const (
	BrandFilters_ALL_STATUS_DELETE BrandFilters_StatusDelete = 0
	BrandFilters_DELETED           BrandFilters_StatusDelete = 1
	BrandFilters_UNDELETED         BrandFilters_StatusDelete = 2
)

var BrandFilters_StatusDelete_name = map[int32]string{
	0: "ALL_STATUS_DELETE",
	1: "DELETED",
	2: "UNDELETED",
}
var BrandFilters_StatusDelete_value = map[string]int32{
	"ALL_STATUS_DELETE": 0,
	"DELETED":           1,
	"UNDELETED":         2,
}

func (x BrandFilters_StatusDelete) String() string {
	return proto.EnumName(BrandFilters_StatusDelete_name, int32(x))
}
func (BrandFilters_StatusDelete) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{5, 1}
}

type Status struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type BrandMetaData struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrandMetaData) Reset()         { *m = BrandMetaData{} }
func (m *BrandMetaData) String() string { return proto.CompactTextString(m) }
func (*BrandMetaData) ProtoMessage()    {}
func (*BrandMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{1}
}
func (m *BrandMetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandMetaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BrandMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandMetaData.Merge(dst, src)
}
func (m *BrandMetaData) XXX_Size() int {
	return m.Size()
}
func (m *BrandMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_BrandMetaData proto.InternalMessageInfo

func (m *BrandMetaData) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Brand struct {
	BrandId                   int32            `protobuf:"varint,1,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	Name                      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UrlKey                    string           `protobuf:"bytes,3,opt,name=url_key,proto3" json:"url_key,omitempty"`
	UrlLogo                   string           `protobuf:"bytes,4,opt,name=url_logo,proto3" json:"url_logo,omitempty"`
	CreatedUser               string           `protobuf:"bytes,5,opt,name=created_user,proto3" json:"created_user,omitempty"`
	UpdatedUser               string           `protobuf:"bytes,6,opt,name=updated_user,proto3" json:"updated_user,omitempty"`
	CreatedDate               int64            `protobuf:"varint,7,opt,name=created_date,proto3" json:"created_date,omitempty"`
	UpdatedDate               int64            `protobuf:"varint,8,opt,name=updated_date,proto3" json:"updated_date,omitempty"`
	VersionNo                 int64            `protobuf:"varint,9,opt,name=version_no,proto3" json:"version_no,omitempty"`
	IsActive                  bool             `protobuf:"varint,10,opt,name=is_active,proto3" json:"is_active,omitempty"`
	Content                   string           `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`
	Order                     int32            `protobuf:"varint,12,opt,name=order,proto3" json:"order,omitempty"`
	CoverUrl                  string           `protobuf:"bytes,13,opt,name=cover_url,proto3" json:"cover_url,omitempty"`
	IsRequiredCertificateFile bool             `protobuf:"varint,14,opt,name=is_required_certificate_file,proto3" json:"is_required_certificate_file,omitempty"`
	SenmallDescription        string           `protobuf:"bytes,15,opt,name=senmall_description,proto3" json:"senmall_description,omitempty"`
	Categories                []*CategoryBrand `protobuf:"bytes,16,rep,name=categories" json:"categories,omitempty"`
	IsDeleted                 bool             `protobuf:"varint,17,opt,name=is_deleted,proto3" json:"is_deleted,omitempty"`
	DeletedDate               int64            `protobuf:"varint,18,opt,name=deleted_date,proto3" json:"deleted_date,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}         `json:"-"`
	XXX_unrecognized          []byte           `json:"-"`
	XXX_sizecache             int32            `json:"-"`
}

func (m *Brand) Reset()         { *m = Brand{} }
func (m *Brand) String() string { return proto.CompactTextString(m) }
func (*Brand) ProtoMessage()    {}
func (*Brand) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{2}
}
func (m *Brand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Brand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Brand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Brand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Brand.Merge(dst, src)
}
func (m *Brand) XXX_Size() int {
	return m.Size()
}
func (m *Brand) XXX_DiscardUnknown() {
	xxx_messageInfo_Brand.DiscardUnknown(m)
}

var xxx_messageInfo_Brand proto.InternalMessageInfo

func (m *Brand) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *Brand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Brand) GetUrlKey() string {
	if m != nil {
		return m.UrlKey
	}
	return ""
}

func (m *Brand) GetUrlLogo() string {
	if m != nil {
		return m.UrlLogo
	}
	return ""
}

func (m *Brand) GetCreatedUser() string {
	if m != nil {
		return m.CreatedUser
	}
	return ""
}

func (m *Brand) GetUpdatedUser() string {
	if m != nil {
		return m.UpdatedUser
	}
	return ""
}

func (m *Brand) GetCreatedDate() int64 {
	if m != nil {
		return m.CreatedDate
	}
	return 0
}

func (m *Brand) GetUpdatedDate() int64 {
	if m != nil {
		return m.UpdatedDate
	}
	return 0
}

func (m *Brand) GetVersionNo() int64 {
	if m != nil {
		return m.VersionNo
	}
	return 0
}

func (m *Brand) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Brand) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Brand) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Brand) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *Brand) GetIsRequiredCertificateFile() bool {
	if m != nil {
		return m.IsRequiredCertificateFile
	}
	return false
}

func (m *Brand) GetSenmallDescription() string {
	if m != nil {
		return m.SenmallDescription
	}
	return ""
}

func (m *Brand) GetCategories() []*CategoryBrand {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Brand) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Brand) GetDeletedDate() int64 {
	if m != nil {
		return m.DeletedDate
	}
	return 0
}

type CategoryBrand struct {
	BrandCategoryId      int32    `protobuf:"varint,1,opt,name=brand_category_id,proto3" json:"brand_category_id,omitempty"`
	CategoryId           int32    `protobuf:"varint,2,opt,name=category_id,proto3" json:"category_id,omitempty"`
	CategoryPath         string   `protobuf:"bytes,3,opt,name=category_path,proto3" json:"category_path,omitempty"`
	BrandId              int32    `protobuf:"varint,4,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	UrlCover             string   `protobuf:"bytes,5,opt,name=url_cover,proto3" json:"url_cover,omitempty"`
	CreatedUser          string   `protobuf:"bytes,6,opt,name=created_user,proto3" json:"created_user,omitempty"`
	UpdatedUser          string   `protobuf:"bytes,7,opt,name=updated_user,proto3" json:"updated_user,omitempty"`
	CreatedDate          int64    `protobuf:"varint,8,opt,name=created_date,proto3" json:"created_date,omitempty"`
	UpdatedDate          int64    `protobuf:"varint,9,opt,name=updated_date,proto3" json:"updated_date,omitempty"`
	VersionNo            int64    `protobuf:"varint,10,opt,name=version_no,proto3" json:"version_no,omitempty"`
	IsActive             bool     `protobuf:"varint,11,opt,name=is_active,proto3" json:"is_active,omitempty"`
	IsAdded              bool     `protobuf:"varint,12,opt,name=is_added,proto3" json:"is_added,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CategoryBrand) Reset()         { *m = CategoryBrand{} }
func (m *CategoryBrand) String() string { return proto.CompactTextString(m) }
func (*CategoryBrand) ProtoMessage()    {}
func (*CategoryBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{3}
}
func (m *CategoryBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CategoryBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryBrand.Merge(dst, src)
}
func (m *CategoryBrand) XXX_Size() int {
	return m.Size()
}
func (m *CategoryBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryBrand.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryBrand proto.InternalMessageInfo

func (m *CategoryBrand) GetBrandCategoryId() int32 {
	if m != nil {
		return m.BrandCategoryId
	}
	return 0
}

func (m *CategoryBrand) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *CategoryBrand) GetCategoryPath() string {
	if m != nil {
		return m.CategoryPath
	}
	return ""
}

func (m *CategoryBrand) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *CategoryBrand) GetUrlCover() string {
	if m != nil {
		return m.UrlCover
	}
	return ""
}

func (m *CategoryBrand) GetCreatedUser() string {
	if m != nil {
		return m.CreatedUser
	}
	return ""
}

func (m *CategoryBrand) GetUpdatedUser() string {
	if m != nil {
		return m.UpdatedUser
	}
	return ""
}

func (m *CategoryBrand) GetCreatedDate() int64 {
	if m != nil {
		return m.CreatedDate
	}
	return 0
}

func (m *CategoryBrand) GetUpdatedDate() int64 {
	if m != nil {
		return m.UpdatedDate
	}
	return 0
}

func (m *CategoryBrand) GetVersionNo() int64 {
	if m != nil {
		return m.VersionNo
	}
	return 0
}

func (m *CategoryBrand) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *CategoryBrand) GetIsAdded() bool {
	if m != nil {
		return m.IsAdded
	}
	return false
}

type TimeBetween struct {
	From                 int64    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   int64    `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeBetween) Reset()         { *m = TimeBetween{} }
func (m *TimeBetween) String() string { return proto.CompactTextString(m) }
func (*TimeBetween) ProtoMessage()    {}
func (*TimeBetween) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{4}
}
func (m *TimeBetween) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeBetween) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeBetween.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TimeBetween) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeBetween.Merge(dst, src)
}
func (m *TimeBetween) XXX_Size() int {
	return m.Size()
}
func (m *TimeBetween) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeBetween.DiscardUnknown(m)
}

var xxx_messageInfo_TimeBetween proto.InternalMessageInfo

func (m *TimeBetween) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *TimeBetween) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

type BrandFilters struct {
	CategoryId           uint32                    `protobuf:"varint,1,opt,name=category_id,proto3" json:"category_id,omitempty"`
	BrandShopType        BrandShopType             `protobuf:"varint,2,opt,name=brand_shop_type,proto3,enum=sendo.v1.api.brand.BrandShopType" json:"brand_shop_type,omitempty"`
	Name                 string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedUser          string                    `protobuf:"bytes,4,opt,name=created_user,proto3" json:"created_user,omitempty"`
	CreatedDate          *TimeBetween              `protobuf:"bytes,5,opt,name=created_date" json:"created_date,omitempty"`
	UpdatedDate          *TimeBetween              `protobuf:"bytes,6,opt,name=updated_date" json:"updated_date,omitempty"`
	Status               BrandFilters_StatusActive `protobuf:"varint,7,opt,name=status,proto3,enum=sendo.v1.api.brand.BrandFilters_StatusActive" json:"status,omitempty"`
	BrandIds             []uint32                  `protobuf:"varint,8,rep,packed,name=brand_ids" json:"brand_ids,omitempty"`
	StatusDelete         BrandFilters_StatusDelete `protobuf:"varint,9,opt,name=status_delete,proto3,enum=sendo.v1.api.brand.BrandFilters_StatusDelete" json:"status_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *BrandFilters) Reset()         { *m = BrandFilters{} }
func (m *BrandFilters) String() string { return proto.CompactTextString(m) }
func (*BrandFilters) ProtoMessage()    {}
func (*BrandFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{5}
}
func (m *BrandFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BrandFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandFilters.Merge(dst, src)
}
func (m *BrandFilters) XXX_Size() int {
	return m.Size()
}
func (m *BrandFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandFilters.DiscardUnknown(m)
}

var xxx_messageInfo_BrandFilters proto.InternalMessageInfo

func (m *BrandFilters) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *BrandFilters) GetBrandShopType() BrandShopType {
	if m != nil {
		return m.BrandShopType
	}
	return BrandShopType_NOBRAND
}

func (m *BrandFilters) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BrandFilters) GetCreatedUser() string {
	if m != nil {
		return m.CreatedUser
	}
	return ""
}

func (m *BrandFilters) GetCreatedDate() *TimeBetween {
	if m != nil {
		return m.CreatedDate
	}
	return nil
}

func (m *BrandFilters) GetUpdatedDate() *TimeBetween {
	if m != nil {
		return m.UpdatedDate
	}
	return nil
}

func (m *BrandFilters) GetStatus() BrandFilters_StatusActive {
	if m != nil {
		return m.Status
	}
	return BrandFilters_ALL
}

func (m *BrandFilters) GetBrandIds() []uint32 {
	if m != nil {
		return m.BrandIds
	}
	return nil
}

func (m *BrandFilters) GetStatusDelete() BrandFilters_StatusDelete {
	if m != nil {
		return m.StatusDelete
	}
	return BrandFilters_ALL_STATUS_DELETE
}

type ListBrandsRequest struct {
	Filters              *BrandFilters    `protobuf:"bytes,1,opt,name=filters" json:"filters,omitempty"`
	Sorts                []string         `protobuf:"bytes,2,rep,name=sorts" json:"sorts,omitempty"`
	Pagination           *base.Pagination `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
	Fields               *types.FieldMask `protobuf:"bytes,4,opt,name=fields" json:"fields,omitempty"`
	MetaData             bool             `protobuf:"varint,5,opt,name=meta_data,proto3" json:"meta_data,omitempty"`
	ViewMap              bool             `protobuf:"varint,6,opt,name=view_map,proto3" json:"view_map,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListBrandsRequest) Reset()         { *m = ListBrandsRequest{} }
func (m *ListBrandsRequest) String() string { return proto.CompactTextString(m) }
func (*ListBrandsRequest) ProtoMessage()    {}
func (*ListBrandsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{6}
}
func (m *ListBrandsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBrandsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBrandsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListBrandsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBrandsRequest.Merge(dst, src)
}
func (m *ListBrandsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBrandsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBrandsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBrandsRequest proto.InternalMessageInfo

func (m *ListBrandsRequest) GetFilters() *BrandFilters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListBrandsRequest) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *ListBrandsRequest) GetPagination() *base.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListBrandsRequest) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListBrandsRequest) GetMetaData() bool {
	if m != nil {
		return m.MetaData
	}
	return false
}

func (m *ListBrandsRequest) GetViewMap() bool {
	if m != nil {
		return m.ViewMap
	}
	return false
}

type ListBrandsResponse struct {
	List                 []*Brand         `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Map                  map[int32]*Brand `protobuf:"bytes,2,rep,name=map" json:"map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	MetaData             *BrandMetaData   `protobuf:"bytes,3,opt,name=meta_data" json:"meta_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListBrandsResponse) Reset()         { *m = ListBrandsResponse{} }
func (m *ListBrandsResponse) String() string { return proto.CompactTextString(m) }
func (*ListBrandsResponse) ProtoMessage()    {}
func (*ListBrandsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{7}
}
func (m *ListBrandsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBrandsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBrandsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListBrandsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBrandsResponse.Merge(dst, src)
}
func (m *ListBrandsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBrandsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBrandsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBrandsResponse proto.InternalMessageInfo

func (m *ListBrandsResponse) GetList() []*Brand {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ListBrandsResponse) GetMap() map[int32]*Brand {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *ListBrandsResponse) GetMetaData() *BrandMetaData {
	if m != nil {
		return m.MetaData
	}
	return nil
}

type ValidateFilters struct {
	BrandId              int32         `protobuf:"varint,1,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	CategoryId           int32         `protobuf:"varint,2,opt,name=category_id,proto3" json:"category_id,omitempty"`
	BrandShopType        BrandShopType `protobuf:"varint,3,opt,name=brand_shop_type,proto3,enum=sendo.v1.api.brand.BrandShopType" json:"brand_shop_type,omitempty"`
	CountCertificateFile int32         `protobuf:"varint,4,opt,name=count_certificate_file,proto3" json:"count_certificate_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ValidateFilters) Reset()         { *m = ValidateFilters{} }
func (m *ValidateFilters) String() string { return proto.CompactTextString(m) }
func (*ValidateFilters) ProtoMessage()    {}
func (*ValidateFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{8}
}
func (m *ValidateFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ValidateFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateFilters.Merge(dst, src)
}
func (m *ValidateFilters) XXX_Size() int {
	return m.Size()
}
func (m *ValidateFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateFilters.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateFilters proto.InternalMessageInfo

func (m *ValidateFilters) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *ValidateFilters) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *ValidateFilters) GetBrandShopType() BrandShopType {
	if m != nil {
		return m.BrandShopType
	}
	return BrandShopType_NOBRAND
}

func (m *ValidateFilters) GetCountCertificateFile() int32 {
	if m != nil {
		return m.CountCertificateFile
	}
	return 0
}

type ValidateRequest struct {
	Filters              *ValidateFilters `protobuf:"bytes,1,opt,name=filters" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ValidateRequest) Reset()         { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()    {}
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{9}
}
func (m *ValidateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ValidateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRequest.Merge(dst, src)
}
func (m *ValidateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRequest proto.InternalMessageInfo

func (m *ValidateRequest) GetFilters() *ValidateFilters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type ValidateResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateResponse) Reset()         { *m = ValidateResponse{} }
func (m *ValidateResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateResponse) ProtoMessage()    {}
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{10}
}
func (m *ValidateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ValidateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateResponse.Merge(dst, src)
}
func (m *ValidateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateResponse proto.InternalMessageInfo

func (m *ValidateResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ValidateResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ValidateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetBrandRequest struct {
	BrandId              uint32           `protobuf:"varint,1,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	Fields               *types.FieldMask `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetBrandRequest) Reset()         { *m = GetBrandRequest{} }
func (m *GetBrandRequest) String() string { return proto.CompactTextString(m) }
func (*GetBrandRequest) ProtoMessage()    {}
func (*GetBrandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{11}
}
func (m *GetBrandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBrandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrandRequest.Merge(dst, src)
}
func (m *GetBrandRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBrandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrandRequest proto.InternalMessageInfo

func (m *GetBrandRequest) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *GetBrandRequest) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type DeleteBrandRequest struct {
	BrandId              uint32   `protobuf:"varint,1,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBrandRequest) Reset()         { *m = DeleteBrandRequest{} }
func (m *DeleteBrandRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBrandRequest) ProtoMessage()    {}
func (*DeleteBrandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{12}
}
func (m *DeleteBrandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBrandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBrandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteBrandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBrandRequest.Merge(dst, src)
}
func (m *DeleteBrandRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBrandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBrandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBrandRequest proto.InternalMessageInfo

func (m *DeleteBrandRequest) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

type AddBrandRequest struct {
	Data                 *Brand   `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddBrandRequest) Reset()         { *m = AddBrandRequest{} }
func (m *AddBrandRequest) String() string { return proto.CompactTextString(m) }
func (*AddBrandRequest) ProtoMessage()    {}
func (*AddBrandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{13}
}
func (m *AddBrandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBrandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBrandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddBrandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBrandRequest.Merge(dst, src)
}
func (m *AddBrandRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddBrandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBrandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddBrandRequest proto.InternalMessageInfo

func (m *AddBrandRequest) GetData() *Brand {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddBrandResponse struct {
	BrandId              int32    `protobuf:"varint,1,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	CreatedDate          int64    `protobuf:"varint,2,opt,name=created_date,proto3" json:"created_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddBrandResponse) Reset()         { *m = AddBrandResponse{} }
func (m *AddBrandResponse) String() string { return proto.CompactTextString(m) }
func (*AddBrandResponse) ProtoMessage()    {}
func (*AddBrandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{14}
}
func (m *AddBrandResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBrandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBrandResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddBrandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBrandResponse.Merge(dst, src)
}
func (m *AddBrandResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddBrandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBrandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddBrandResponse proto.InternalMessageInfo

func (m *AddBrandResponse) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *AddBrandResponse) GetCreatedDate() int64 {
	if m != nil {
		return m.CreatedDate
	}
	return 0
}

type UpdateBrandRequest struct {
	BrandId              int32            `protobuf:"varint,1,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	Data                 *Brand           `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Fields               *types.FieldMask `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateBrandRequest) Reset()         { *m = UpdateBrandRequest{} }
func (m *UpdateBrandRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBrandRequest) ProtoMessage()    {}
func (*UpdateBrandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{15}
}
func (m *UpdateBrandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBrandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBrandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateBrandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBrandRequest.Merge(dst, src)
}
func (m *UpdateBrandRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBrandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBrandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBrandRequest proto.InternalMessageInfo

func (m *UpdateBrandRequest) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *UpdateBrandRequest) GetData() *Brand {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateBrandRequest) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateBrandResponse struct {
	BrandId              int32    `protobuf:"varint,1,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	UpdatedDate          int64    `protobuf:"varint,2,opt,name=updated_date,proto3" json:"updated_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBrandResponse) Reset()         { *m = UpdateBrandResponse{} }
func (m *UpdateBrandResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBrandResponse) ProtoMessage()    {}
func (*UpdateBrandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{16}
}
func (m *UpdateBrandResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBrandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBrandResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateBrandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBrandResponse.Merge(dst, src)
}
func (m *UpdateBrandResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBrandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBrandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBrandResponse proto.InternalMessageInfo

func (m *UpdateBrandResponse) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *UpdateBrandResponse) GetUpdatedDate() int64 {
	if m != nil {
		return m.UpdatedDate
	}
	return 0
}

type DeleteBrandResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBrandResponse) Reset()         { *m = DeleteBrandResponse{} }
func (m *DeleteBrandResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteBrandResponse) ProtoMessage()    {}
func (*DeleteBrandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_brand_0f788b228ee4ce30, []int{17}
}
func (m *DeleteBrandResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBrandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBrandResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteBrandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBrandResponse.Merge(dst, src)
}
func (m *DeleteBrandResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBrandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBrandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBrandResponse proto.InternalMessageInfo

func (m *DeleteBrandResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Status)(nil), "sendo.v1.api.brand.Status")
	proto.RegisterType((*BrandMetaData)(nil), "sendo.v1.api.brand.BrandMetaData")
	proto.RegisterType((*Brand)(nil), "sendo.v1.api.brand.Brand")
	proto.RegisterType((*CategoryBrand)(nil), "sendo.v1.api.brand.CategoryBrand")
	proto.RegisterType((*TimeBetween)(nil), "sendo.v1.api.brand.TimeBetween")
	proto.RegisterType((*BrandFilters)(nil), "sendo.v1.api.brand.BrandFilters")
	proto.RegisterType((*ListBrandsRequest)(nil), "sendo.v1.api.brand.ListBrandsRequest")
	proto.RegisterType((*ListBrandsResponse)(nil), "sendo.v1.api.brand.ListBrandsResponse")
	proto.RegisterMapType((map[int32]*Brand)(nil), "sendo.v1.api.brand.ListBrandsResponse.MapEntry")
	proto.RegisterType((*ValidateFilters)(nil), "sendo.v1.api.brand.ValidateFilters")
	proto.RegisterType((*ValidateRequest)(nil), "sendo.v1.api.brand.ValidateRequest")
	proto.RegisterType((*ValidateResponse)(nil), "sendo.v1.api.brand.ValidateResponse")
	proto.RegisterType((*GetBrandRequest)(nil), "sendo.v1.api.brand.GetBrandRequest")
	proto.RegisterType((*DeleteBrandRequest)(nil), "sendo.v1.api.brand.DeleteBrandRequest")
	proto.RegisterType((*AddBrandRequest)(nil), "sendo.v1.api.brand.AddBrandRequest")
	proto.RegisterType((*AddBrandResponse)(nil), "sendo.v1.api.brand.AddBrandResponse")
	proto.RegisterType((*UpdateBrandRequest)(nil), "sendo.v1.api.brand.UpdateBrandRequest")
	proto.RegisterType((*UpdateBrandResponse)(nil), "sendo.v1.api.brand.UpdateBrandResponse")
	proto.RegisterType((*DeleteBrandResponse)(nil), "sendo.v1.api.brand.DeleteBrandResponse")
	proto.RegisterEnum("sendo.v1.api.brand.BrandShopType", BrandShopType_name, BrandShopType_value)
	proto.RegisterEnum("sendo.v1.api.brand.BrandFilters_StatusActive", BrandFilters_StatusActive_name, BrandFilters_StatusActive_value)
	proto.RegisterEnum("sendo.v1.api.brand.BrandFilters_StatusDelete", BrandFilters_StatusDelete_name, BrandFilters_StatusDelete_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BrandServiceClient is the client API for BrandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrandServiceClient interface {
	AddBrand(ctx context.Context, in *AddBrandRequest, opts ...grpc.CallOption) (*AddBrandResponse, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*UpdateBrandResponse, error)
	ListBrands(ctx context.Context, in *ListBrandsRequest, opts ...grpc.CallOption) (*ListBrandsResponse, error)
	GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*Brand, error)
	DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*DeleteBrandResponse, error)
	ValidateCategoryBrand(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type brandServiceClient struct {
	cc *grpc.ClientConn
}

func NewBrandServiceClient(cc *grpc.ClientConn) BrandServiceClient {
	return &brandServiceClient{cc}
}

func (c *brandServiceClient) AddBrand(ctx context.Context, in *AddBrandRequest, opts ...grpc.CallOption) (*AddBrandResponse, error) {
	out := new(AddBrandResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.brand.BrandService/AddBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*UpdateBrandResponse, error) {
	out := new(UpdateBrandResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.brand.BrandService/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) ListBrands(ctx context.Context, in *ListBrandsRequest, opts ...grpc.CallOption) (*ListBrandsResponse, error) {
	out := new(ListBrandsResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.brand.BrandService/ListBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.brand.BrandService/GetBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*DeleteBrandResponse, error) {
	out := new(DeleteBrandResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.brand.BrandService/DeleteBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) ValidateCategoryBrand(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.brand.BrandService/ValidateCategoryBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandServiceServer is the server API for BrandService service.
type BrandServiceServer interface {
	AddBrand(context.Context, *AddBrandRequest) (*AddBrandResponse, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*UpdateBrandResponse, error)
	ListBrands(context.Context, *ListBrandsRequest) (*ListBrandsResponse, error)
	GetBrand(context.Context, *GetBrandRequest) (*Brand, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*DeleteBrandResponse, error)
	ValidateCategoryBrand(context.Context, *ValidateRequest) (*ValidateResponse, error)
}

func RegisterBrandServiceServer(s *grpc.Server, srv BrandServiceServer) {
	s.RegisterService(&_BrandService_serviceDesc, srv)
}

func _BrandService_AddBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).AddBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.brand.BrandService/AddBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).AddBrand(ctx, req.(*AddBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.brand.BrandService/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).UpdateBrand(ctx, req.(*UpdateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_ListBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).ListBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.brand.BrandService/ListBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).ListBrands(ctx, req.(*ListBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.brand.BrandService/GetBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).GetBrand(ctx, req.(*GetBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.brand.BrandService/DeleteBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).DeleteBrand(ctx, req.(*DeleteBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_ValidateCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).ValidateCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.brand.BrandService/ValidateCategoryBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).ValidateCategoryBrand(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.brand.BrandService",
	HandlerType: (*BrandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBrand",
			Handler:    _BrandService_AddBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _BrandService_UpdateBrand_Handler,
		},
		{
			MethodName: "ListBrands",
			Handler:    _BrandService_ListBrands_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _BrandService_GetBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _BrandService_DeleteBrand_Handler,
		},
		{
			MethodName: "ValidateCategoryBrand",
			Handler:    _BrandService_ValidateCategoryBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brand/brand.proto",
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrandMetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandMetaData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Brand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Brand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.UrlKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.UrlKey)))
		i += copy(dAtA[i:], m.UrlKey)
	}
	if len(m.UrlLogo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.UrlLogo)))
		i += copy(dAtA[i:], m.UrlLogo)
	}
	if len(m.CreatedUser) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.CreatedUser)))
		i += copy(dAtA[i:], m.CreatedUser)
	}
	if len(m.UpdatedUser) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.UpdatedUser)))
		i += copy(dAtA[i:], m.UpdatedUser)
	}
	if m.CreatedDate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.CreatedDate))
	}
	if m.UpdatedDate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.UpdatedDate))
	}
	if m.VersionNo != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.VersionNo))
	}
	if m.IsActive {
		dAtA[i] = 0x50
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Order != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Order))
	}
	if len(m.CoverUrl) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.CoverUrl)))
		i += copy(dAtA[i:], m.CoverUrl)
	}
	if m.IsRequiredCertificateFile {
		dAtA[i] = 0x70
		i++
		if m.IsRequiredCertificateFile {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SenmallDescription) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.SenmallDescription)))
		i += copy(dAtA[i:], m.SenmallDescription)
	}
	if len(m.Categories) > 0 {
		for _, msg := range m.Categories {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintBrand(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsDeleted {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeletedDate != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.DeletedDate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CategoryBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryBrand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandCategoryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandCategoryId))
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.CategoryId))
	}
	if len(m.CategoryPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.CategoryPath)))
		i += copy(dAtA[i:], m.CategoryPath)
	}
	if m.BrandId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandId))
	}
	if len(m.UrlCover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.UrlCover)))
		i += copy(dAtA[i:], m.UrlCover)
	}
	if len(m.CreatedUser) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.CreatedUser)))
		i += copy(dAtA[i:], m.CreatedUser)
	}
	if len(m.UpdatedUser) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.UpdatedUser)))
		i += copy(dAtA[i:], m.UpdatedUser)
	}
	if m.CreatedDate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.CreatedDate))
	}
	if m.UpdatedDate != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.UpdatedDate))
	}
	if m.VersionNo != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.VersionNo))
	}
	if m.IsActive {
		dAtA[i] = 0x58
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdded {
		dAtA[i] = 0x60
		i++
		if m.IsAdded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TimeBetween) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeBetween) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.To))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrandFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CategoryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.CategoryId))
	}
	if m.BrandShopType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandShopType))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.CreatedUser) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.CreatedUser)))
		i += copy(dAtA[i:], m.CreatedUser)
	}
	if m.CreatedDate != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.CreatedDate.Size()))
		n1, err := m.CreatedDate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedDate != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.UpdatedDate.Size()))
		n2, err := m.UpdatedDate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Status))
	}
	if len(m.BrandIds) > 0 {
		dAtA4 := make([]byte, len(m.BrandIds)*10)
		var j3 int
		for _, num := range m.BrandIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintBrand(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.StatusDelete != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.StatusDelete))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListBrandsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBrandsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Filters != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Filters.Size()))
		n5, err := m.Filters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Pagination != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Pagination.Size()))
		n6, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Fields != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Fields.Size()))
		n7, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.MetaData {
		dAtA[i] = 0x28
		i++
		if m.MetaData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ViewMap {
		dAtA[i] = 0x30
		i++
		if m.ViewMap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListBrandsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBrandsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBrand(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Map) > 0 {
		for k, _ := range m.Map {
			dAtA[i] = 0x12
			i++
			v := m.Map[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBrand(uint64(msgSize))
			}
			mapSize := 1 + sovBrand(uint64(k)) + msgSize
			i = encodeVarintBrand(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintBrand(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBrand(dAtA, i, uint64(v.Size()))
				n8, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n8
			}
		}
	}
	if m.MetaData != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.MetaData.Size()))
		n9, err := m.MetaData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidateFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandId))
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.CategoryId))
	}
	if m.BrandShopType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandShopType))
	}
	if m.CountCertificateFile != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.CountCertificateFile))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Filters != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Filters.Size()))
		n10, err := m.Filters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBrandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrandRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandId))
	}
	if m.Fields != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Fields.Size()))
		n11, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteBrandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBrandRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddBrandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBrandRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Data.Size()))
		n12, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddBrandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBrandResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandId))
	}
	if m.CreatedDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.CreatedDate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateBrandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBrandRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandId))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Data.Size()))
		n13, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Fields != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.Fields.Size()))
		n14, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateBrandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBrandResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.BrandId))
	}
	if m.UpdatedDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBrand(dAtA, i, uint64(m.UpdatedDate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteBrandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBrandResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBrand(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBrand(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrandMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovBrand(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Brand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovBrand(uint64(m.BrandId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.UrlKey)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.UrlLogo)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.CreatedUser)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.UpdatedUser)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.CreatedDate != 0 {
		n += 1 + sovBrand(uint64(m.CreatedDate))
	}
	if m.UpdatedDate != 0 {
		n += 1 + sovBrand(uint64(m.UpdatedDate))
	}
	if m.VersionNo != 0 {
		n += 1 + sovBrand(uint64(m.VersionNo))
	}
	if m.IsActive {
		n += 2
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.Order != 0 {
		n += 1 + sovBrand(uint64(m.Order))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.IsRequiredCertificateFile {
		n += 2
	}
	l = len(m.SenmallDescription)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if len(m.Categories) > 0 {
		for _, e := range m.Categories {
			l = e.Size()
			n += 2 + l + sovBrand(uint64(l))
		}
	}
	if m.IsDeleted {
		n += 3
	}
	if m.DeletedDate != 0 {
		n += 2 + sovBrand(uint64(m.DeletedDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CategoryBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandCategoryId != 0 {
		n += 1 + sovBrand(uint64(m.BrandCategoryId))
	}
	if m.CategoryId != 0 {
		n += 1 + sovBrand(uint64(m.CategoryId))
	}
	l = len(m.CategoryPath)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.BrandId != 0 {
		n += 1 + sovBrand(uint64(m.BrandId))
	}
	l = len(m.UrlCover)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.CreatedUser)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.UpdatedUser)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.CreatedDate != 0 {
		n += 1 + sovBrand(uint64(m.CreatedDate))
	}
	if m.UpdatedDate != 0 {
		n += 1 + sovBrand(uint64(m.UpdatedDate))
	}
	if m.VersionNo != 0 {
		n += 1 + sovBrand(uint64(m.VersionNo))
	}
	if m.IsActive {
		n += 2
	}
	if m.IsAdded {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimeBetween) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovBrand(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovBrand(uint64(m.To))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrandFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CategoryId != 0 {
		n += 1 + sovBrand(uint64(m.CategoryId))
	}
	if m.BrandShopType != 0 {
		n += 1 + sovBrand(uint64(m.BrandShopType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.CreatedUser)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.CreatedDate != nil {
		l = m.CreatedDate.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.UpdatedDate != nil {
		l = m.UpdatedDate.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBrand(uint64(m.Status))
	}
	if len(m.BrandIds) > 0 {
		l = 0
		for _, e := range m.BrandIds {
			l += sovBrand(uint64(e))
		}
		n += 1 + sovBrand(uint64(l)) + l
	}
	if m.StatusDelete != 0 {
		n += 1 + sovBrand(uint64(m.StatusDelete))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBrandsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovBrand(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.MetaData {
		n += 2
	}
	if m.ViewMap {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBrandsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrand(uint64(l))
		}
	}
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBrand(uint64(l))
			}
			mapEntrySize := 1 + sovBrand(uint64(k)) + l
			n += mapEntrySize + 1 + sovBrand(uint64(mapEntrySize))
		}
	}
	if m.MetaData != nil {
		l = m.MetaData.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovBrand(uint64(m.BrandId))
	}
	if m.CategoryId != 0 {
		n += 1 + sovBrand(uint64(m.CategoryId))
	}
	if m.BrandShopType != 0 {
		n += 1 + sovBrand(uint64(m.BrandShopType))
	}
	if m.CountCertificateFile != 0 {
		n += 1 + sovBrand(uint64(m.CountCertificateFile))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBrandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovBrand(uint64(m.BrandId))
	}
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBrandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovBrand(uint64(m.BrandId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddBrandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddBrandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovBrand(uint64(m.BrandId))
	}
	if m.CreatedDate != 0 {
		n += 1 + sovBrand(uint64(m.CreatedDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBrandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovBrand(uint64(m.BrandId))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovBrand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBrandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovBrand(uint64(m.BrandId))
	}
	if m.UpdatedDate != 0 {
		n += 1 + sovBrand(uint64(m.UpdatedDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBrandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBrand(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBrand(x uint64) (n int) {
	return sovBrand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandMetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandMetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandMetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Brand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Brand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Brand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			m.CreatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedDate", wireType)
			}
			m.UpdatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNo", wireType)
			}
			m.VersionNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRequiredCertificateFile", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRequiredCertificateFile = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenmallDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenmallDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, &CategoryBrand{})
			if err := m.Categories[len(m.Categories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedDate", wireType)
			}
			m.DeletedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandCategoryId", wireType)
			}
			m.BrandCategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandCategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			m.CreatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedDate", wireType)
			}
			m.UpdatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNo", wireType)
			}
			m.VersionNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeBetween) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeBetween: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeBetween: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandShopType", wireType)
			}
			m.BrandShopType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandShopType |= (BrandShopType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedDate == nil {
				m.CreatedDate = &TimeBetween{}
			}
			if err := m.CreatedDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedDate == nil {
				m.UpdatedDate = &TimeBetween{}
			}
			if err := m.UpdatedDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (BrandFilters_StatusActive(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BrandIds = append(m.BrandIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrand
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BrandIds) == 0 {
					m.BrandIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BrandIds = append(m.BrandIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandIds", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusDelete", wireType)
			}
			m.StatusDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusDelete |= (BrandFilters_StatusDelete(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBrandsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBrandsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBrandsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &BrandFilters{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &base.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MetaData = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewMap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewMap = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBrandsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBrandsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBrandsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Brand{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[int32]*Brand)
			}
			var mapkey int32
			var mapvalue *Brand
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBrand
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBrand
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Brand{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBrand(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBrand
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = &BrandMetaData{}
			}
			if err := m.MetaData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandShopType", wireType)
			}
			m.BrandShopType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandShopType |= (BrandShopType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountCertificateFile", wireType)
			}
			m.CountCertificateFile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountCertificateFile |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &ValidateFilters{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBrandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBrandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBrandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddBrandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBrandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBrandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Brand{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddBrandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBrandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBrandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			m.CreatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBrandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBrandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBrandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Brand{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBrandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBrandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBrandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedDate", wireType)
			}
			m.UpdatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBrandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBrandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBrandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBrand
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBrand
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBrand(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBrand = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrand   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("brand/brand.proto", fileDescriptor_brand_0f788b228ee4ce30) }

var fileDescriptor_brand_0f788b228ee4ce30 = []byte{
	// 1536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x0f, 0x49, 0x5b, 0x96, 0x47, 0x96, 0x2d, 0x6f, 0xbe, 0x04, 0x8c, 0xe0, 0xcf, 0x9f, 0x3e,
	0xc6, 0x49, 0x1d, 0x23, 0x96, 0x12, 0x15, 0x0d, 0x8a, 0xa0, 0x41, 0x2b, 0xdb, 0x4a, 0x90, 0x56,
	0xf9, 0x53, 0xda, 0x0e, 0x8a, 0x5e, 0x88, 0xb5, 0xb8, 0x56, 0x16, 0xa1, 0x48, 0x86, 0xbb, 0x52,
	0x6a, 0x04, 0xbd, 0xf4, 0x90, 0x53, 0x81, 0x02, 0xcd, 0xa9, 0x7d, 0x83, 0xbe, 0x49, 0x81, 0x5e,
	0x0a, 0xb4, 0x0f, 0x50, 0x04, 0xbd, 0xf7, 0x15, 0x8a, 0xdd, 0x25, 0x25, 0x8a, 0xfa, 0x63, 0x21,
	0x17, 0x83, 0x33, 0x3b, 0x3b, 0x33, 0x3b, 0xf3, 0x9b, 0x3f, 0x32, 0xac, 0x9f, 0x44, 0xd8, 0x77,
	0x6b, 0xf2, 0x6f, 0x35, 0x8c, 0x02, 0x1e, 0x20, 0xc4, 0x88, 0xef, 0x06, 0xd5, 0xfe, 0xed, 0x2a,
	0x0e, 0x69, 0x55, 0x9e, 0x94, 0x37, 0x3a, 0x41, 0xd0, 0xf1, 0x48, 0x0d, 0x87, 0xb4, 0x86, 0x7d,
	0x3f, 0xe0, 0x98, 0xd3, 0xc0, 0x67, 0xea, 0x46, 0xb9, 0x12, 0x9f, 0x4a, 0xea, 0xa4, 0x77, 0x5a,
	0x3b, 0xa5, 0xc4, 0x73, 0x9d, 0x2e, 0x66, 0x2f, 0x62, 0x89, 0xb5, 0x13, 0xcc, 0x48, 0x4d, 0xfc,
	0x51, 0x0c, 0xeb, 0x0e, 0xe4, 0x0e, 0x39, 0xe6, 0x3d, 0x86, 0x10, 0x2c, 0xb4, 0x03, 0x97, 0x98,
	0x5a, 0x45, 0xdb, 0x5e, 0xb4, 0xe5, 0x37, 0x32, 0x61, 0xa9, 0x4b, 0x18, 0xc3, 0x1d, 0x62, 0xea,
	0x15, 0x6d, 0x7b, 0xd9, 0x4e, 0x48, 0xeb, 0x1a, 0x14, 0xf7, 0x84, 0x47, 0x8f, 0x08, 0xc7, 0x07,
	0x98, 0x63, 0xf4, 0x1f, 0x58, 0xe4, 0x01, 0xc7, 0x5e, 0x7c, 0x5f, 0x11, 0xd6, 0x9b, 0x45, 0x58,
	0x94, 0x72, 0xa8, 0x0c, 0x79, 0xf9, 0x04, 0x87, 0xba, 0xb1, 0xc8, 0x80, 0x16, 0xa6, 0x7d, 0xdc,
	0x4d, 0x6c, 0xc8, 0x6f, 0x61, 0xba, 0x17, 0x79, 0xce, 0x0b, 0x72, 0x66, 0x1a, 0xca, 0x74, 0x4c,
	0x0a, 0x4d, 0xe2, 0xd3, 0x0b, 0x3a, 0x81, 0xb9, 0x20, 0x8f, 0x06, 0x34, 0xb2, 0x60, 0xa5, 0x1d,
	0x11, 0xcc, 0x89, 0xeb, 0xf4, 0x18, 0x89, 0xcc, 0x45, 0x79, 0x3e, 0xc2, 0x13, 0x32, 0xbd, 0xd0,
	0x1d, 0xca, 0xe4, 0x94, 0x4c, 0x9a, 0x97, 0xd6, 0x23, 0xb8, 0xe6, 0x52, 0x45, 0xdb, 0x36, 0xec,
	0x11, 0x5e, 0x5a, 0x8f, 0x94, 0xc9, 0x2b, 0x99, 0x34, 0x0f, 0x6d, 0x02, 0xf4, 0x49, 0xc4, 0x68,
	0xe0, 0x3b, 0x7e, 0x60, 0x2e, 0x4b, 0x89, 0x14, 0x07, 0x6d, 0xc0, 0x32, 0x65, 0x0e, 0x6e, 0x73,
	0xda, 0x27, 0x26, 0x54, 0xb4, 0xed, 0xbc, 0x3d, 0x64, 0x88, 0x18, 0xb4, 0x03, 0x9f, 0x13, 0x9f,
	0x9b, 0x05, 0x15, 0x83, 0x98, 0x14, 0xd1, 0x0e, 0x22, 0x97, 0x44, 0xe6, 0x8a, 0x8a, 0xb6, 0x24,
	0x84, 0xb6, 0x76, 0xd0, 0x27, 0x91, 0xd3, 0x8b, 0x3c, 0xb3, 0x28, 0x6f, 0x0c, 0x19, 0x68, 0x0f,
	0x36, 0x28, 0x73, 0x22, 0xf2, 0xb2, 0x47, 0x23, 0xe2, 0x3a, 0x6d, 0x12, 0x71, 0x7a, 0x4a, 0xdb,
	0x98, 0x13, 0xe7, 0x94, 0x7a, 0xc4, 0x5c, 0x95, 0xe6, 0x67, 0xca, 0xa0, 0x5b, 0x70, 0x91, 0x11,
	0xbf, 0x8b, 0x3d, 0xcf, 0x71, 0x09, 0x6b, 0x47, 0x34, 0x14, 0xf8, 0x33, 0xd7, 0xa4, 0xad, 0x49,
	0x47, 0xa8, 0x01, 0x20, 0xae, 0x77, 0x82, 0x88, 0x12, 0x66, 0x96, 0x2a, 0xc6, 0x76, 0xa1, 0xfe,
	0xff, 0xea, 0x38, 0xb4, 0xab, 0xfb, 0x4a, 0xea, 0x4c, 0xc2, 0xc5, 0x4e, 0x5d, 0x12, 0x41, 0xa4,
	0xcc, 0x71, 0x89, 0x47, 0x38, 0x71, 0xcd, 0x75, 0xe9, 0x66, 0x8a, 0x23, 0x12, 0x11, 0x7f, 0xaa,
	0x44, 0x20, 0x95, 0x88, 0x34, 0xcf, 0xfa, 0xc5, 0x80, 0xe2, 0x88, 0x05, 0x74, 0x33, 0xae, 0x39,
	0x27, 0xb6, 0x74, 0x36, 0x44, 0xe6, 0xf8, 0x01, 0xaa, 0x40, 0x21, 0x2d, 0xa7, 0x4b, 0xb9, 0x34,
	0x0b, 0x6d, 0x41, 0x71, 0x40, 0x86, 0x98, 0x3f, 0x8f, 0x61, 0x3b, 0xca, 0x1c, 0x29, 0x83, 0x85,
	0x4c, 0x19, 0x6c, 0xc0, 0xb2, 0x00, 0xb2, 0xcc, 0x58, 0x8c, 0xdc, 0x21, 0x63, 0x0c, 0xda, 0xb9,
	0x39, 0xa0, 0xbd, 0x34, 0x07, 0xb4, 0xf3, 0x73, 0x40, 0x7b, 0xf9, 0x5c, 0x68, 0xc3, 0x6c, 0x68,
	0x17, 0xb2, 0xd0, 0x2e, 0x43, 0x5e, 0x10, 0xae, 0x4b, 0x5c, 0x89, 0xe1, 0xbc, 0x3d, 0xa0, 0xad,
	0xdb, 0x50, 0x38, 0xa2, 0x5d, 0xb2, 0x47, 0xf8, 0x2b, 0x42, 0x7c, 0xd1, 0x1d, 0x4e, 0xa3, 0xa0,
	0x2b, 0x73, 0x63, 0xd8, 0xf2, 0x1b, 0xad, 0x82, 0xce, 0x03, 0x99, 0x05, 0xc3, 0xd6, 0x79, 0x60,
	0xfd, 0xb3, 0x00, 0x2b, 0x32, 0xad, 0xf7, 0xa9, 0xc7, 0x49, 0xc4, 0xb2, 0xf9, 0x12, 0x77, 0x8b,
	0xa3, 0xf9, 0xfa, 0x02, 0xd6, 0x54, 0xe4, 0xd9, 0xf3, 0x20, 0x74, 0xf8, 0x59, 0xa8, 0xfa, 0xcf,
	0xea, 0x64, 0x74, 0x4a, 0xe5, 0x87, 0xcf, 0x83, 0xf0, 0xe8, 0x2c, 0x24, 0x76, 0xf6, 0xe6, 0xa0,
	0x83, 0x19, 0xa9, 0x0e, 0x96, 0x4d, 0xd8, 0xc2, 0x84, 0x84, 0xed, 0x67, 0x92, 0x21, 0xb2, 0x5e,
	0xa8, 0xff, 0x6f, 0x92, 0x07, 0xa9, 0x90, 0x64, 0xb2, 0xb5, 0x9f, 0xc9, 0x56, 0x6e, 0x4e, 0x25,
	0x23, 0xe9, 0x6c, 0x42, 0x8e, 0xc9, 0x41, 0x20, 0x41, 0xb3, 0x5a, 0xdf, 0x9d, 0x1a, 0x85, 0x38,
	0xc4, 0x55, 0x35, 0x37, 0x1a, 0x32, 0x9f, 0x76, 0x7c, 0x59, 0x64, 0x3d, 0xc1, 0x33, 0x33, 0xf3,
	0x15, 0x63, 0xbb, 0x68, 0x0f, 0x19, 0xe8, 0x10, 0x8a, 0x4a, 0x2e, 0xae, 0x5d, 0x09, 0xac, 0xf9,
	0x6d, 0x1d, 0xc8, 0x4b, 0xf6, 0xa8, 0x0e, 0xeb, 0x36, 0xac, 0xa4, 0x5d, 0x41, 0x4b, 0x60, 0x34,
	0x5a, 0xad, 0xd2, 0x05, 0x04, 0x90, 0x6b, 0xec, 0x1f, 0x3d, 0x7c, 0xd6, 0x2c, 0x69, 0x68, 0x05,
	0xf2, 0x07, 0xcd, 0x98, 0xd2, 0xad, 0x46, 0x72, 0x45, 0x69, 0x44, 0x97, 0x60, 0xbd, 0xd1, 0x6a,
	0x39, 0x87, 0x47, 0x8d, 0xa3, 0xe3, 0x43, 0xe7, 0xa0, 0xd9, 0x6a, 0x1e, 0x35, 0x4b, 0x17, 0x50,
	0x01, 0x96, 0xd4, 0xf7, 0x41, 0x49, 0x43, 0x45, 0x58, 0x3e, 0x7e, 0x9c, 0x90, 0xba, 0xf5, 0xa3,
	0x0e, 0xeb, 0x2d, 0xca, 0xb8, 0x74, 0x93, 0xd9, 0xe4, 0x65, 0x8f, 0x30, 0x8e, 0xee, 0xc2, 0xd2,
	0xa9, 0x72, 0x59, 0x42, 0xae, 0x50, 0xaf, 0x9c, 0xf7, 0x34, 0x3b, 0xb9, 0x20, 0x7a, 0x3a, 0x0b,
	0x22, 0xce, 0x4c, 0xbd, 0x62, 0x6c, 0x2f, 0xdb, 0x8a, 0x40, 0xf7, 0x00, 0x42, 0xdc, 0xa1, 0xbe,
	0x1c, 0xf4, 0x12, 0x5f, 0x85, 0xfa, 0x7f, 0x33, 0x4a, 0xc5, 0x38, 0x7f, 0x3a, 0x10, 0xb2, 0x53,
	0x17, 0x50, 0x1d, 0x72, 0x72, 0x09, 0x60, 0x12, 0x7e, 0x85, 0x7a, 0xb9, 0xaa, 0x76, 0x84, 0x6a,
	0xb2, 0x23, 0x54, 0xef, 0x8b, 0xe3, 0x47, 0x98, 0xbd, 0xb0, 0x63, 0x49, 0x91, 0xc3, 0x2e, 0xe1,
	0x58, 0xe0, 0x02, 0x4b, 0x44, 0xe6, 0xed, 0x21, 0x43, 0x54, 0x6e, 0x9f, 0x92, 0x57, 0x4e, 0x17,
	0x87, 0x12, 0x69, 0x79, 0x7b, 0x40, 0x5b, 0x3f, 0xeb, 0x80, 0xd2, 0x41, 0x61, 0x61, 0xe0, 0x33,
	0x82, 0x76, 0x61, 0xc1, 0xa3, 0x8c, 0x9b, 0x9a, 0xec, 0xfe, 0x57, 0xa6, 0x86, 0xc4, 0x96, 0x62,
	0xa8, 0x01, 0x86, 0x50, 0xae, 0x4b, 0xe9, 0xda, 0x24, 0xe9, 0x71, 0x1b, 0xd5, 0x47, 0x38, 0x6c,
	0xfa, 0x3c, 0x3a, 0xb3, 0xc5, 0x5d, 0xf4, 0x69, 0xfa, 0x09, 0x2a, 0x68, 0xd3, 0xcb, 0x3a, 0xd9,
	0x61, 0x52, 0xaf, 0x2c, 0x7f, 0x09, 0xf9, 0x44, 0x23, 0x2a, 0x81, 0x21, 0xd6, 0x10, 0x35, 0x1b,
	0xc4, 0x27, 0xaa, 0xc1, 0x62, 0x1f, 0x7b, 0x3d, 0xd5, 0x31, 0x66, 0xbe, 0x48, 0xc9, 0xdd, 0xd5,
	0x3f, 0xd6, 0xac, 0x3f, 0x35, 0x58, 0x7b, 0x86, 0x3d, 0x2a, 0xca, 0x2d, 0x69, 0x53, 0xb3, 0xb6,
	0xa2, 0xf3, 0x47, 0xce, 0x84, 0x16, 0x66, 0xbc, 0x77, 0x0b, 0xbb, 0x03, 0x97, 0xdb, 0x41, 0xcf,
	0xe7, 0xe3, 0x8b, 0x81, 0x9a, 0x53, 0x53, 0x4e, 0xad, 0xa7, 0xc3, 0x57, 0x25, 0x55, 0x70, 0x2f,
	0x5b, 0x05, 0x57, 0x27, 0xf9, 0x93, 0x89, 0xc5, 0xa0, 0x10, 0xac, 0xaf, 0xa0, 0x34, 0xd4, 0x18,
	0x43, 0xe8, 0xf2, 0xa0, 0x3d, 0x69, 0x12, 0x73, 0x49, 0xbf, 0x49, 0xb6, 0xd6, 0x78, 0x75, 0xcc,
	0x6e, 0xad, 0xc6, 0xe8, 0xd6, 0x8a, 0x61, 0xed, 0x01, 0x51, 0xc8, 0x49, 0x7c, 0xcd, 0x66, 0xa0,
	0x98, 0xca, 0xc0, 0xb0, 0x78, 0x8c, 0x79, 0x8b, 0xc7, 0xba, 0x05, 0x48, 0x35, 0x95, 0x79, 0xad,
	0x58, 0x9f, 0xc1, 0x5a, 0xc3, 0x75, 0x47, 0xc4, 0x77, 0x61, 0x41, 0x22, 0x57, 0x3b, 0x0f, 0x5e,
	0x52, 0xcc, 0xb2, 0xa1, 0x34, 0xd4, 0x10, 0x07, 0x6c, 0x16, 0xb2, 0xb2, 0x2b, 0x80, 0x3e, 0xbe,
	0x02, 0x58, 0x6f, 0x35, 0x40, 0xc7, 0x72, 0x40, 0xcc, 0x7c, 0x48, 0x5a, 0x6d, 0xe2, 0xb5, 0x3e,
	0x97, 0xd7, 0xef, 0x15, 0xdd, 0x63, 0xb8, 0x38, 0xe2, 0xd4, 0x7c, 0x8f, 0x1d, 0x99, 0x8e, 0xfa,
	0xf8, 0x2e, 0x63, 0xd5, 0xe0, 0xe2, 0x48, 0xd2, 0x62, 0xb5, 0x26, 0x2c, 0xb1, 0x5e, 0xbb, 0x4d,
	0x58, 0x82, 0xba, 0x84, 0xdc, 0x69, 0xc6, 0x3f, 0x7f, 0x92, 0x72, 0x12, 0xa3, 0xe2, 0xf1, 0x93,
	0x3d, 0xbb, 0xf1, 0xf8, 0xa0, 0x74, 0x01, 0xad, 0x41, 0xe1, 0x41, 0xeb, 0xc9, 0x5e, 0xa3, 0xa5,
	0x18, 0x72, 0x76, 0x3c, 0x7b, 0xd8, 0x3c, 0x52, 0xa4, 0x9e, 0x4c, 0x28, 0xa3, 0xfe, 0x5b, 0x2e,
	0x5e, 0x5b, 0x0e, 0x49, 0xd4, 0xa7, 0x6d, 0x82, 0x5e, 0x43, 0x3e, 0xc9, 0x24, 0x9a, 0x58, 0x34,
	0x19, 0xa4, 0x94, 0xb7, 0x66, 0x0b, 0xa9, 0x87, 0x58, 0x5b, 0xdf, 0xfd, 0xf1, 0xf7, 0x5b, 0x7d,
	0xd3, 0xba, 0x52, 0x4b, 0xda, 0xc7, 0x2e, 0xe6, 0x3c, 0xa2, 0x27, 0x3d, 0x4e, 0xd4, 0x6f, 0xce,
	0xbb, 0xda, 0x0e, 0xfa, 0x41, 0x83, 0x42, 0x2a, 0xba, 0xe8, 0xfa, 0x24, 0xdd, 0xe3, 0x98, 0x28,
	0x7f, 0x70, 0xae, 0x5c, 0xec, 0x46, 0x4d, 0xba, 0x71, 0xa3, 0xbc, 0x35, 0xd5, 0x8d, 0xda, 0xeb,
	0x24, 0x6f, 0xdf, 0x0a, 0x8f, 0xde, 0x68, 0x00, 0xc3, 0x5e, 0x8f, 0xae, 0x9d, 0x37, 0x0b, 0x94,
	0x3f, 0xd7, 0xe7, 0x1b, 0x19, 0xd6, 0x0d, 0xe9, 0xce, 0x55, 0x6b, 0x73, 0xba, 0x3b, 0x62, 0x1e,
	0x09, 0x47, 0xbe, 0x81, 0x7c, 0xd2, 0x38, 0x26, 0xe7, 0x25, 0xd3, 0x56, 0xca, 0xd3, 0xd1, 0x6f,
	0xdd, 0x94, 0x66, 0xaf, 0xa3, 0xb9, 0xa2, 0x80, 0xbe, 0xd7, 0xa0, 0x90, 0xc2, 0xe6, 0xe4, 0xa4,
	0x8c, 0x77, 0x9c, 0xc9, 0x49, 0x99, 0x00, 0xf2, 0xc4, 0x9d, 0x9d, 0xf9, 0xdc, 0xf9, 0x49, 0x83,
	0x4b, 0x49, 0x73, 0x1e, 0xfd, 0x3d, 0x35, 0xb3, 0xc7, 0xcf, 0x84, 0x6b, 0xb6, 0xd9, 0x5b, 0x1f,
	0x49, 0x97, 0x6a, 0xd6, 0xce, 0x74, 0x97, 0xfa, 0xf1, 0x9d, 0xdd, 0x30, 0x0a, 0xdc, 0x5e, 0x5b,
	0x24, 0x69, 0xef, 0xf3, 0x5f, 0xdf, 0x6d, 0x6a, 0xbf, 0xbf, 0xdb, 0xd4, 0xfe, 0x7a, 0xb7, 0xa9,
	0x7d, 0xfd, 0x49, 0x87, 0x72, 0x0f, 0x9f, 0x24, 0x06, 0xfd, 0xe1, 0x7f, 0x45, 0xa8, 0xcf, 0x49,
	0xe4, 0x63, 0x6f, 0x17, 0x87, 0x94, 0xed, 0x76, 0x82, 0x81, 0x15, 0x67, 0x60, 0xe5, 0x24, 0x27,
	0xa5, 0x3f, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x20, 0x30, 0x5c, 0xed, 0x98, 0x11, 0x00, 0x00,
}
