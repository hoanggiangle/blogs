// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: brand/brand.proto

package category_attribute

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Status) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Code

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

// Validate checks the field values on BrandMetaData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BrandMetaData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BrandMetaDataValidationError is the validation error returned by
// BrandMetaData.Validate if the designated constraints aren't met.
type BrandMetaDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandMetaDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandMetaDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandMetaDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandMetaDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandMetaDataValidationError) ErrorName() string { return "BrandMetaDataValidationError" }

// Error satisfies the builtin error interface
func (e BrandMetaDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandMetaData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandMetaDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandMetaDataValidationError{}

// Validate checks the field values on Brand with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Brand) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BrandId

	// no validation rules for Name

	// no validation rules for UrlKey

	// no validation rules for UrlLogo

	// no validation rules for CreatedUser

	// no validation rules for UpdatedUser

	// no validation rules for CreatedDate

	// no validation rules for UpdatedDate

	// no validation rules for VersionNo

	// no validation rules for IsActive

	// no validation rules for Content

	// no validation rules for Order

	// no validation rules for CoverUrl

	// no validation rules for IsRequiredCertificateFile

	// no validation rules for SenmallDescription

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Categories[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for IsDeleted

	// no validation rules for DeletedDate

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BrandValidationError is the validation error returned by Brand.Validate if
// the designated constraints aren't met.
type BrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandValidationError) ErrorName() string { return "BrandValidationError" }

// Error satisfies the builtin error interface
func (e BrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandValidationError{}

// Validate checks the field values on CategoryBrand with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CategoryBrand) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BrandCategoryId

	// no validation rules for CategoryId

	// no validation rules for CategoryPath

	// no validation rules for BrandId

	// no validation rules for UrlCover

	// no validation rules for CreatedUser

	// no validation rules for UpdatedUser

	// no validation rules for CreatedDate

	// no validation rules for UpdatedDate

	// no validation rules for VersionNo

	// no validation rules for IsActive

	// no validation rules for IsAdded

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CategoryBrandValidationError is the validation error returned by
// CategoryBrand.Validate if the designated constraints aren't met.
type CategoryBrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryBrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryBrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryBrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryBrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryBrandValidationError) ErrorName() string { return "CategoryBrandValidationError" }

// Error satisfies the builtin error interface
func (e CategoryBrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryBrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryBrandValidationError{}

// Validate checks the field values on TimeBetween with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimeBetween) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for From

	// no validation rules for To

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TimeBetweenValidationError is the validation error returned by
// TimeBetween.Validate if the designated constraints aren't met.
type TimeBetweenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeBetweenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeBetweenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeBetweenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeBetweenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeBetweenValidationError) ErrorName() string { return "TimeBetweenValidationError" }

// Error satisfies the builtin error interface
func (e TimeBetweenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeBetween.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeBetweenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeBetweenValidationError{}

// Validate checks the field values on BrandFilters with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BrandFilters) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CategoryId

	// no validation rules for BrandShopType

	// no validation rules for Name

	// no validation rules for CreatedUser

	if v, ok := interface{}(m.GetCreatedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CreatedDate", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetUpdatedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("UpdatedDate", "embedded message failed validation"))
		}
	}

	// no validation rules for Status

	// no validation rules for StatusDelete

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BrandFiltersValidationError is the validation error returned by
// BrandFilters.Validate if the designated constraints aren't met.
type BrandFiltersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandFiltersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandFiltersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandFiltersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandFiltersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandFiltersValidationError) ErrorName() string { return "BrandFiltersValidationError" }

// Error satisfies the builtin error interface
func (e BrandFiltersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandFilters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandFiltersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandFiltersValidationError{}

// Validate checks the field values on ListBrandsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListBrandsRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Filters", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Pagination", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	// no validation rules for MetaData

	// no validation rules for ViewMap

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListBrandsRequestValidationError is the validation error returned by
// ListBrandsRequest.Validate if the designated constraints aren't met.
type ListBrandsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrandsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrandsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrandsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrandsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrandsRequestValidationError) ErrorName() string {
	return "ListBrandsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBrandsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrandsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrandsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrandsRequestValidationError{}

// Validate checks the field values on ListBrandsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListBrandsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("List[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Map

	if v, ok := interface{}(m.GetMetaData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("MetaData", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListBrandsResponseValidationError is the validation error returned by
// ListBrandsResponse.Validate if the designated constraints aren't met.
type ListBrandsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrandsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrandsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrandsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrandsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrandsResponseValidationError) ErrorName() string {
	return "ListBrandsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBrandsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrandsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrandsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrandsResponseValidationError{}

// Validate checks the field values on ValidateFilters with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ValidateFilters) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BrandId

	// no validation rules for CategoryId

	// no validation rules for BrandShopType

	// no validation rules for CountCertificateFile

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ValidateFiltersValidationError is the validation error returned by
// ValidateFilters.Validate if the designated constraints aren't met.
type ValidateFiltersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateFiltersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateFiltersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateFiltersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateFiltersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateFiltersValidationError) ErrorName() string { return "ValidateFiltersValidationError" }

// Error satisfies the builtin error interface
func (e ValidateFiltersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateFilters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateFiltersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateFiltersValidationError{}

// Validate checks the field values on ValidateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ValidateRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Filters", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ValidateRequestValidationError is the validation error returned by
// ValidateRequest.Validate if the designated constraints aren't met.
type ValidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateRequestValidationError) ErrorName() string { return "ValidateRequestValidationError" }

// Error satisfies the builtin error interface
func (e ValidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateRequestValidationError{}

// Validate checks the field values on ValidateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ValidateResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	// no validation rules for Code

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ValidateResponseValidationError is the validation error returned by
// ValidateResponse.Validate if the designated constraints aren't met.
type ValidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateResponseValidationError) ErrorName() string { return "ValidateResponseValidationError" }

// Error satisfies the builtin error interface
func (e ValidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateResponseValidationError{}

// Validate checks the field values on GetBrandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBrandRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BrandId

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetBrandRequestValidationError is the validation error returned by
// GetBrandRequest.Validate if the designated constraints aren't met.
type GetBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandRequestValidationError) ErrorName() string { return "GetBrandRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandRequestValidationError{}

// Validate checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteBrandRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BrandId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteBrandRequestValidationError is the validation error returned by
// DeleteBrandRequest.Validate if the designated constraints aren't met.
type DeleteBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandRequestValidationError) ErrorName() string {
	return "DeleteBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandRequestValidationError{}

// Validate checks the field values on AddBrandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddBrandRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddBrandRequestValidationError is the validation error returned by
// AddBrandRequest.Validate if the designated constraints aren't met.
type AddBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBrandRequestValidationError) ErrorName() string { return "AddBrandRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBrandRequestValidationError{}

// Validate checks the field values on AddBrandResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddBrandResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BrandId

	// no validation rules for CreatedDate

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddBrandResponseValidationError is the validation error returned by
// AddBrandResponse.Validate if the designated constraints aren't met.
type AddBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBrandResponseValidationError) ErrorName() string { return "AddBrandResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBrandResponseValidationError{}

// Validate checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateBrandRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BrandId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateBrandRequestValidationError is the validation error returned by
// UpdateBrandRequest.Validate if the designated constraints aren't met.
type UpdateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandRequestValidationError) ErrorName() string {
	return "UpdateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandRequestValidationError{}

// Validate checks the field values on UpdateBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateBrandResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BrandId

	// no validation rules for UpdatedDate

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateBrandResponseValidationError is the validation error returned by
// UpdateBrandResponse.Validate if the designated constraints aren't met.
type UpdateBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandResponseValidationError) ErrorName() string {
	return "UpdateBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandResponseValidationError{}

// Validate checks the field values on DeleteBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteBrandResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Success

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteBrandResponseValidationError is the validation error returned by
// DeleteBrandResponse.Validate if the designated constraints aren't met.
type DeleteBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandResponseValidationError) ErrorName() string {
	return "DeleteBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandResponseValidationError{}
