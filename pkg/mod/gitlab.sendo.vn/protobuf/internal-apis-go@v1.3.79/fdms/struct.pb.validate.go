// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fdms/struct.proto

package fdms

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on ListOrdersBySellerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrdersBySellerReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for SellerAccountId

	if v, ok := interface{}(m.GetReqParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ReqParams", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListOrdersBySellerReqValidationError is the validation error returned by
// ListOrdersBySellerReq.Validate if the designated constraints aren't met.
type ListOrdersBySellerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersBySellerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersBySellerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersBySellerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersBySellerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersBySellerReqValidationError) ErrorName() string {
	return "ListOrdersBySellerReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersBySellerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersBySellerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersBySellerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersBySellerReqValidationError{}

// Validate checks the field values on ListOrdersBySellerRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrdersBySellerRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Total

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListOrdersBySellerResValidationError is the validation error returned by
// ListOrdersBySellerRes.Validate if the designated constraints aren't met.
type ListOrdersBySellerResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersBySellerResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersBySellerResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersBySellerResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersBySellerResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersBySellerResValidationError) ErrorName() string {
	return "ListOrdersBySellerResValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersBySellerResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersBySellerRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersBySellerResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersBySellerResValidationError{}

// Validate checks the field values on ListOrdersByBuyerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrdersByBuyerReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BuyerAccountId

	if v, ok := interface{}(m.GetReqParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ReqParams", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListOrdersByBuyerReqValidationError is the validation error returned by
// ListOrdersByBuyerReq.Validate if the designated constraints aren't met.
type ListOrdersByBuyerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersByBuyerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersByBuyerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersByBuyerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersByBuyerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersByBuyerReqValidationError) ErrorName() string {
	return "ListOrdersByBuyerReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersByBuyerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersByBuyerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersByBuyerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersByBuyerReqValidationError{}

// Validate checks the field values on ListOrdersByBuyerRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrdersByBuyerRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Total

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListOrdersByBuyerResValidationError is the validation error returned by
// ListOrdersByBuyerRes.Validate if the designated constraints aren't met.
type ListOrdersByBuyerResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersByBuyerResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersByBuyerResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersByBuyerResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersByBuyerResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersByBuyerResValidationError) ErrorName() string {
	return "ListOrdersByBuyerResValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersByBuyerResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersByBuyerRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersByBuyerResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersByBuyerResValidationError{}

// Validate checks the field values on ReqParams with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ReqParams) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for From

	// no validation rules for To

	// no validation rules for SortBy

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ReqParamsValidationError is the validation error returned by
// ReqParams.Validate if the designated constraints aren't met.
type ReqParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReqParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReqParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReqParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReqParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReqParamsValidationError) ErrorName() string { return "ReqParamsValidationError" }

// Error satisfies the builtin error interface
func (e ReqParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReqParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReqParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReqParamsValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Order) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderId

	// no validation rules for RemoteIp

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for GrandTotal

	// no validation rules for SubTotal

	// no validation rules for CancelBy

	// no validation rules for PaymentMethod

	if v, ok := interface{}(m.GetFraudInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("FraudInfo", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetShippingAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ShippingAddress", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetWarehouseAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("WarehouseAddress", "embedded message failed validation"))
		}
	}

	// no validation rules for SendoShippingDiscount

	// no validation rules for BuyerAgent

	// no validation rules for BuyerDevice

	if v, ok := interface{}(m.GetBuyer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Buyer", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetSeller()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Seller", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetVoucher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Voucher", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetRating()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Rating", "embedded message failed validation"))
		}
	}

	// no validation rules for CompletedAt

	// no validation rules for CarriedId

	// no validation rules for AffiliateAmount

	// no validation rules for SendoSupportFee

	// no validation rules for SenpaySupportFee

	// no validation rules for LoyaltyAmount

	// no validation rules for Weight

	// no validation rules for IsFreeShipping

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Products[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on Buyer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Buyer) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Account", "embedded message failed validation"))
		}
	}

	// no validation rules for IsBadBuyer

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BuyerValidationError is the validation error returned by Buyer.Validate if
// the designated constraints aren't met.
type BuyerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyerValidationError) ErrorName() string { return "BuyerValidationError" }

// Error satisfies the builtin error interface
func (e BuyerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyerValidationError{}

// Validate checks the field values on Seller with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Seller) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Account", "embedded message failed validation"))
		}
	}

	// no validation rules for ShopId

	// no validation rules for ShopLevel

	// no validation rules for ShopCreatedAt

	// no validation rules for ShopUpdatedAt

	// no validation rules for ShopTotalOrders

	// no validation rules for ShopTotalProducts

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// SellerValidationError is the validation error returned by Seller.Validate if
// the designated constraints aren't met.
type SellerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SellerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SellerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SellerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SellerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SellerValidationError) ErrorName() string { return "SellerValidationError" }

// Error satisfies the builtin error interface
func (e SellerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeller.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SellerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SellerValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Account) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for RemoteIp

	if v, ok := interface{}(m.GetContactAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ContactAddress", "embedded message failed validation"))
		}
	}

	// no validation rules for CreatedAt

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for CategoryPath

	// no validation rules for Gerne

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on Voucher with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Voucher) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for VoucherCode

	// no validation rules for Amount

	// no validation rules for VoucherCampaign

	// no validation rules for IsVoucherShop

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// VoucherValidationError is the validation error returned by Voucher.Validate
// if the designated constraints aren't met.
type VoucherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoucherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoucherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoucherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoucherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoucherValidationError) ErrorName() string { return "VoucherValidationError" }

// Error satisfies the builtin error interface
func (e VoucherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoucher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoucherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoucherValidationError{}

// Validate checks the field values on Fraud with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fraud) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IsFraud

	// no validation rules for Weight

	// no validation rules for Type

	// no validation rules for IsOverrided

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// FraudValidationError is the validation error returned by Fraud.Validate if
// the designated constraints aren't met.
type FraudValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FraudValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FraudValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FraudValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FraudValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FraudValidationError) ErrorName() string { return "FraudValidationError" }

// Error satisfies the builtin error interface
func (e FraudValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFraud.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FraudValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FraudValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Address) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for RegionId

	// no validation rules for RegionName

	// no validation rules for DistrictId

	// no validation rules for DistrictName

	// no validation rules for WardId

	// no validation rules for WardName

	// no validation rules for Street

	// no validation rules for Phone

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on Rating with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Rating) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Score

	// no validation rules for Text

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RatingValidationError is the validation error returned by Rating.Validate if
// the designated constraints aren't met.
type RatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingValidationError) ErrorName() string { return "RatingValidationError" }

// Error satisfies the builtin error interface
func (e RatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Error) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Code

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}
