// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rating/rating.proto

package rating // import "gitlab.sendo.vn/protobuf/internal-apis-go/rating"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import base "gitlab.sendo.vn/protobuf/internal-apis-go/base"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RatingSource int32

const (
	RatingSource_WEB     RatingSource = 0
	RatingSource_MOB     RatingSource = 1
	RatingSource_WAP     RatingSource = 2
	RatingSource_SETTING RatingSource = 3
	RatingSource_EMAIL   RatingSource = 4
)

var RatingSource_name = map[int32]string{
	0: "WEB",
	1: "MOB",
	2: "WAP",
	3: "SETTING",
	4: "EMAIL",
}
var RatingSource_value = map[string]int32{
	"WEB":     0,
	"MOB":     1,
	"WAP":     2,
	"SETTING": 3,
	"EMAIL":   4,
}

func (x RatingSource) String() string {
	return proto.EnumName(RatingSource_name, int32(x))
}
func (RatingSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{0}
}

type RestResponseWithData struct {
	StatusCode           int64    `protobuf:"varint,1,opt,name=status_code,proto3" json:"status_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestResponseWithData) Reset()         { *m = RestResponseWithData{} }
func (m *RestResponseWithData) String() string { return proto.CompactTextString(m) }
func (*RestResponseWithData) ProtoMessage()    {}
func (*RestResponseWithData) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{0}
}
func (m *RestResponseWithData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestResponseWithData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestResponseWithData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RestResponseWithData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestResponseWithData.Merge(dst, src)
}
func (m *RestResponseWithData) XXX_Size() int {
	return m.Size()
}
func (m *RestResponseWithData) XXX_DiscardUnknown() {
	xxx_messageInfo_RestResponseWithData.DiscardUnknown(m)
}

var xxx_messageInfo_RestResponseWithData proto.InternalMessageInfo

func (m *RestResponseWithData) GetStatusCode() int64 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RestResponseWithData) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RestResponseNonData struct {
	ErrorStatus          bool     `protobuf:"varint,1,opt,name=error_status,proto3" json:"error_status,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestResponseNonData) Reset()         { *m = RestResponseNonData{} }
func (m *RestResponseNonData) String() string { return proto.CompactTextString(m) }
func (*RestResponseNonData) ProtoMessage()    {}
func (*RestResponseNonData) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{1}
}
func (m *RestResponseNonData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestResponseNonData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestResponseNonData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RestResponseNonData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestResponseNonData.Merge(dst, src)
}
func (m *RestResponseNonData) XXX_Size() int {
	return m.Size()
}
func (m *RestResponseNonData) XXX_DiscardUnknown() {
	xxx_messageInfo_RestResponseNonData.DiscardUnknown(m)
}

var xxx_messageInfo_RestResponseNonData proto.InternalMessageInfo

func (m *RestResponseNonData) GetErrorStatus() bool {
	if m != nil {
		return m.ErrorStatus
	}
	return false
}

func (m *RestResponseNonData) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type RatingComment struct {
	CommentId            string   `protobuf:"bytes,1,opt,name=comment_id,proto3" json:"comment_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	CommentDescription   string   `protobuf:"bytes,3,opt,name=comment_description,proto3" json:"comment_description,omitempty"`
	CreateAt             int64    `protobuf:"varint,4,opt,name=create_at,proto3" json:"create_at,omitempty"`
	MerchantId           int64    `protobuf:"varint,5,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatingComment) Reset()         { *m = RatingComment{} }
func (m *RatingComment) String() string { return proto.CompactTextString(m) }
func (*RatingComment) ProtoMessage()    {}
func (*RatingComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{2}
}
func (m *RatingComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatingComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatingComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RatingComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatingComment.Merge(dst, src)
}
func (m *RatingComment) XXX_Size() int {
	return m.Size()
}
func (m *RatingComment) XXX_DiscardUnknown() {
	xxx_messageInfo_RatingComment.DiscardUnknown(m)
}

var xxx_messageInfo_RatingComment proto.InternalMessageInfo

func (m *RatingComment) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *RatingComment) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RatingComment) GetCommentDescription() string {
	if m != nil {
		return m.CommentDescription
	}
	return ""
}

func (m *RatingComment) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *RatingComment) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

type RatingContent struct {
	RatingId             int64    `protobuf:"varint,1,opt,name=rating_id,proto3" json:"rating_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	RatingDescription    string   `protobuf:"bytes,3,opt,name=rating_description,json=ratingDescription,proto3" json:"rating_description,omitempty"`
	Star                 int64    `protobuf:"varint,4,opt,name=star,proto3" json:"star,omitempty"`
	Score                int64    `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Address              string   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	RatingOption         string   `protobuf:"bytes,7,opt,name=rating_option,proto3" json:"rating_option,omitempty"`
	CreateAt             int64    `protobuf:"varint,8,opt,name=create_at,proto3" json:"create_at,omitempty"`
	LikeCount            int64    `protobuf:"varint,9,opt,name=like_count,proto3" json:"like_count,omitempty"`
	TotalComment         int64    `protobuf:"varint,10,opt,name=total_comment,proto3" json:"total_comment,omitempty"`
	ProductId            int64    `protobuf:"varint,11,opt,name=product_id,proto3" json:"product_id,omitempty"`
	ImageUrls            []string `protobuf:"bytes,12,rep,name=image_urls" json:"image_urls,omitempty"`
	ReviewComments       string   `protobuf:"bytes,13,opt,name=review_comments,proto3" json:"review_comments,omitempty"`
	IsRatingAgain        int64    `protobuf:"varint,14,opt,name=is_rating_again,proto3" json:"is_rating_again,omitempty"`
	Rc                   int64    `protobuf:"varint,15,opt,name=rc,proto3" json:"rc,omitempty"`
	IsLike               bool     `protobuf:"varint,16,opt,name=is_like,proto3" json:"is_like,omitempty"`
	MerchantId           int64    `protobuf:"varint,17,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	NotValidate          int64    `protobuf:"varint,18,opt,name=not_validate,proto3" json:"not_validate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatingContent) Reset()         { *m = RatingContent{} }
func (m *RatingContent) String() string { return proto.CompactTextString(m) }
func (*RatingContent) ProtoMessage()    {}
func (*RatingContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{3}
}
func (m *RatingContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatingContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatingContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RatingContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatingContent.Merge(dst, src)
}
func (m *RatingContent) XXX_Size() int {
	return m.Size()
}
func (m *RatingContent) XXX_DiscardUnknown() {
	xxx_messageInfo_RatingContent.DiscardUnknown(m)
}

var xxx_messageInfo_RatingContent proto.InternalMessageInfo

func (m *RatingContent) GetRatingId() int64 {
	if m != nil {
		return m.RatingId
	}
	return 0
}

func (m *RatingContent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RatingContent) GetRatingDescription() string {
	if m != nil {
		return m.RatingDescription
	}
	return ""
}

func (m *RatingContent) GetStar() int64 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *RatingContent) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RatingContent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RatingContent) GetRatingOption() string {
	if m != nil {
		return m.RatingOption
	}
	return ""
}

func (m *RatingContent) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *RatingContent) GetLikeCount() int64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *RatingContent) GetTotalComment() int64 {
	if m != nil {
		return m.TotalComment
	}
	return 0
}

func (m *RatingContent) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *RatingContent) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *RatingContent) GetReviewComments() string {
	if m != nil {
		return m.ReviewComments
	}
	return ""
}

func (m *RatingContent) GetIsRatingAgain() int64 {
	if m != nil {
		return m.IsRatingAgain
	}
	return 0
}

func (m *RatingContent) GetRc() int64 {
	if m != nil {
		return m.Rc
	}
	return 0
}

func (m *RatingContent) GetIsLike() bool {
	if m != nil {
		return m.IsLike
	}
	return false
}

func (m *RatingContent) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *RatingContent) GetNotValidate() int64 {
	if m != nil {
		return m.NotValidate
	}
	return 0
}

type DataGetRatingByProduct struct {
	Count                int64            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	ProductId            int64            `protobuf:"varint,2,opt,name=product_id,proto3" json:"product_id,omitempty"`
	Ratings              []*RatingContent `protobuf:"bytes,3,rep,name=ratings" json:"ratings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DataGetRatingByProduct) Reset()         { *m = DataGetRatingByProduct{} }
func (m *DataGetRatingByProduct) String() string { return proto.CompactTextString(m) }
func (*DataGetRatingByProduct) ProtoMessage()    {}
func (*DataGetRatingByProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{4}
}
func (m *DataGetRatingByProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGetRatingByProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataGetRatingByProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataGetRatingByProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGetRatingByProduct.Merge(dst, src)
}
func (m *DataGetRatingByProduct) XXX_Size() int {
	return m.Size()
}
func (m *DataGetRatingByProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGetRatingByProduct.DiscardUnknown(m)
}

var xxx_messageInfo_DataGetRatingByProduct proto.InternalMessageInfo

func (m *DataGetRatingByProduct) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DataGetRatingByProduct) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *DataGetRatingByProduct) GetRatings() []*RatingContent {
	if m != nil {
		return m.Ratings
	}
	return nil
}

type DataGetComments struct {
	Total                int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	RatingId             int64            `protobuf:"varint,2,opt,name=rating_id,proto3" json:"rating_id,omitempty"`
	MerchantId           int64            `protobuf:"varint,3,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	Comments             []*RatingComment `protobuf:"bytes,4,rep,name=comments" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DataGetComments) Reset()         { *m = DataGetComments{} }
func (m *DataGetComments) String() string { return proto.CompactTextString(m) }
func (*DataGetComments) ProtoMessage()    {}
func (*DataGetComments) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{5}
}
func (m *DataGetComments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGetComments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataGetComments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataGetComments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGetComments.Merge(dst, src)
}
func (m *DataGetComments) XXX_Size() int {
	return m.Size()
}
func (m *DataGetComments) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGetComments.DiscardUnknown(m)
}

var xxx_messageInfo_DataGetComments proto.InternalMessageInfo

func (m *DataGetComments) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *DataGetComments) GetRatingId() int64 {
	if m != nil {
		return m.RatingId
	}
	return 0
}

func (m *DataGetComments) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *DataGetComments) GetComments() []*RatingComment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type DataGetRatingByMerchant struct {
	Count                int64            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	MerchantId           int64            `protobuf:"varint,2,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	Ratings              []*RatingContent `protobuf:"bytes,3,rep,name=ratings" json:"ratings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DataGetRatingByMerchant) Reset()         { *m = DataGetRatingByMerchant{} }
func (m *DataGetRatingByMerchant) String() string { return proto.CompactTextString(m) }
func (*DataGetRatingByMerchant) ProtoMessage()    {}
func (*DataGetRatingByMerchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{6}
}
func (m *DataGetRatingByMerchant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGetRatingByMerchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataGetRatingByMerchant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataGetRatingByMerchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGetRatingByMerchant.Merge(dst, src)
}
func (m *DataGetRatingByMerchant) XXX_Size() int {
	return m.Size()
}
func (m *DataGetRatingByMerchant) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGetRatingByMerchant.DiscardUnknown(m)
}

var xxx_messageInfo_DataGetRatingByMerchant proto.InternalMessageInfo

func (m *DataGetRatingByMerchant) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DataGetRatingByMerchant) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *DataGetRatingByMerchant) GetRatings() []*RatingContent {
	if m != nil {
		return m.Ratings
	}
	return nil
}

type DataGetRatingByOrder struct {
	Count                int64            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	OrderId              int64            `protobuf:"varint,2,opt,name=order_id,proto3" json:"order_id,omitempty"`
	Ratings              []*RatingContent `protobuf:"bytes,3,rep,name=ratings" json:"ratings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DataGetRatingByOrder) Reset()         { *m = DataGetRatingByOrder{} }
func (m *DataGetRatingByOrder) String() string { return proto.CompactTextString(m) }
func (*DataGetRatingByOrder) ProtoMessage()    {}
func (*DataGetRatingByOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{7}
}
func (m *DataGetRatingByOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGetRatingByOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataGetRatingByOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataGetRatingByOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGetRatingByOrder.Merge(dst, src)
}
func (m *DataGetRatingByOrder) XXX_Size() int {
	return m.Size()
}
func (m *DataGetRatingByOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGetRatingByOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DataGetRatingByOrder proto.InternalMessageInfo

func (m *DataGetRatingByOrder) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DataGetRatingByOrder) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *DataGetRatingByOrder) GetRatings() []*RatingContent {
	if m != nil {
		return m.Ratings
	}
	return nil
}

type DataGetRatingImageByProduct struct {
	Count                int64          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	ProductId            int64          `protobuf:"varint,2,opt,name=product_id,proto3" json:"product_id,omitempty"`
	ImageArray           []*ImageRating `protobuf:"bytes,3,rep,name=image_array" json:"image_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DataGetRatingImageByProduct) Reset()         { *m = DataGetRatingImageByProduct{} }
func (m *DataGetRatingImageByProduct) String() string { return proto.CompactTextString(m) }
func (*DataGetRatingImageByProduct) ProtoMessage()    {}
func (*DataGetRatingImageByProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{8}
}
func (m *DataGetRatingImageByProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGetRatingImageByProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataGetRatingImageByProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataGetRatingImageByProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGetRatingImageByProduct.Merge(dst, src)
}
func (m *DataGetRatingImageByProduct) XXX_Size() int {
	return m.Size()
}
func (m *DataGetRatingImageByProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGetRatingImageByProduct.DiscardUnknown(m)
}

var xxx_messageInfo_DataGetRatingImageByProduct proto.InternalMessageInfo

func (m *DataGetRatingImageByProduct) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DataGetRatingImageByProduct) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *DataGetRatingImageByProduct) GetImageArray() []*ImageRating {
	if m != nil {
		return m.ImageArray
	}
	return nil
}

type ImageRating struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	ImageUrls            string   `protobuf:"bytes,3,opt,name=image_urls,proto3" json:"image_urls,omitempty"`
	CreateTime           int64    `protobuf:"varint,4,opt,name=create_time,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageRating) Reset()         { *m = ImageRating{} }
func (m *ImageRating) String() string { return proto.CompactTextString(m) }
func (*ImageRating) ProtoMessage()    {}
func (*ImageRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{9}
}
func (m *ImageRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImageRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRating.Merge(dst, src)
}
func (m *ImageRating) XXX_Size() int {
	return m.Size()
}
func (m *ImageRating) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRating.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRating proto.InternalMessageInfo

func (m *ImageRating) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImageRating) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ImageRating) GetImageUrls() string {
	if m != nil {
		return m.ImageUrls
	}
	return ""
}

func (m *ImageRating) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type DataGetRatingImageByMerchant struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	MerchantId           int64    `protobuf:"varint,2,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	ImageUrls            []string `protobuf:"bytes,3,rep,name=image_urls" json:"image_urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataGetRatingImageByMerchant) Reset()         { *m = DataGetRatingImageByMerchant{} }
func (m *DataGetRatingImageByMerchant) String() string { return proto.CompactTextString(m) }
func (*DataGetRatingImageByMerchant) ProtoMessage()    {}
func (*DataGetRatingImageByMerchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{10}
}
func (m *DataGetRatingImageByMerchant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGetRatingImageByMerchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataGetRatingImageByMerchant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataGetRatingImageByMerchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGetRatingImageByMerchant.Merge(dst, src)
}
func (m *DataGetRatingImageByMerchant) XXX_Size() int {
	return m.Size()
}
func (m *DataGetRatingImageByMerchant) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGetRatingImageByMerchant.DiscardUnknown(m)
}

var xxx_messageInfo_DataGetRatingImageByMerchant proto.InternalMessageInfo

func (m *DataGetRatingImageByMerchant) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DataGetRatingImageByMerchant) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *DataGetRatingImageByMerchant) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

type DataGetRatingCommentByRating struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	RatingId             int64    `protobuf:"varint,2,opt,name=rating_id,proto3" json:"rating_id,omitempty"`
	CommentId            []string `protobuf:"bytes,3,rep,name=comment_id" json:"comment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataGetRatingCommentByRating) Reset()         { *m = DataGetRatingCommentByRating{} }
func (m *DataGetRatingCommentByRating) String() string { return proto.CompactTextString(m) }
func (*DataGetRatingCommentByRating) ProtoMessage()    {}
func (*DataGetRatingCommentByRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{11}
}
func (m *DataGetRatingCommentByRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGetRatingCommentByRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataGetRatingCommentByRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataGetRatingCommentByRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGetRatingCommentByRating.Merge(dst, src)
}
func (m *DataGetRatingCommentByRating) XXX_Size() int {
	return m.Size()
}
func (m *DataGetRatingCommentByRating) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGetRatingCommentByRating.DiscardUnknown(m)
}

var xxx_messageInfo_DataGetRatingCommentByRating proto.InternalMessageInfo

func (m *DataGetRatingCommentByRating) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DataGetRatingCommentByRating) GetRatingId() int64 {
	if m != nil {
		return m.RatingId
	}
	return 0
}

func (m *DataGetRatingCommentByRating) GetCommentId() []string {
	if m != nil {
		return m.CommentId
	}
	return nil
}

type RatingInfoContent struct {
	Star_1               int64    `protobuf:"varint,1,opt,name=star_1,proto3" json:"star_1,omitempty"`
	Star_2               int64    `protobuf:"varint,2,opt,name=star_2,proto3" json:"star_2,omitempty"`
	Star_3               int64    `protobuf:"varint,3,opt,name=star_3,proto3" json:"star_3,omitempty"`
	Star_4               int64    `protobuf:"varint,4,opt,name=star_4,proto3" json:"star_4,omitempty"`
	Star_5               int64    `protobuf:"varint,5,opt,name=star_5,proto3" json:"star_5,omitempty"`
	TotalStar            int64    `protobuf:"varint,6,opt,name=total_star,proto3" json:"total_star,omitempty"`
	TotalRate            int64    `protobuf:"varint,7,opt,name=total_rate,proto3" json:"total_rate,omitempty"`
	RatePercent          float32  `protobuf:"fixed32,8,opt,name=rate_percent,proto3" json:"rate_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatingInfoContent) Reset()         { *m = RatingInfoContent{} }
func (m *RatingInfoContent) String() string { return proto.CompactTextString(m) }
func (*RatingInfoContent) ProtoMessage()    {}
func (*RatingInfoContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{12}
}
func (m *RatingInfoContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatingInfoContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatingInfoContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RatingInfoContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatingInfoContent.Merge(dst, src)
}
func (m *RatingInfoContent) XXX_Size() int {
	return m.Size()
}
func (m *RatingInfoContent) XXX_DiscardUnknown() {
	xxx_messageInfo_RatingInfoContent.DiscardUnknown(m)
}

var xxx_messageInfo_RatingInfoContent proto.InternalMessageInfo

func (m *RatingInfoContent) GetStar_1() int64 {
	if m != nil {
		return m.Star_1
	}
	return 0
}

func (m *RatingInfoContent) GetStar_2() int64 {
	if m != nil {
		return m.Star_2
	}
	return 0
}

func (m *RatingInfoContent) GetStar_3() int64 {
	if m != nil {
		return m.Star_3
	}
	return 0
}

func (m *RatingInfoContent) GetStar_4() int64 {
	if m != nil {
		return m.Star_4
	}
	return 0
}

func (m *RatingInfoContent) GetStar_5() int64 {
	if m != nil {
		return m.Star_5
	}
	return 0
}

func (m *RatingInfoContent) GetTotalStar() int64 {
	if m != nil {
		return m.TotalStar
	}
	return 0
}

func (m *RatingInfoContent) GetTotalRate() int64 {
	if m != nil {
		return m.TotalRate
	}
	return 0
}

func (m *RatingInfoContent) GetRatePercent() float32 {
	if m != nil {
		return m.RatePercent
	}
	return 0
}

type FilterSubject struct {
	NameFilter           string   `protobuf:"bytes,1,opt,name=name_filter,proto3" json:"name_filter,omitempty"`
	DataFilter           string   `protobuf:"bytes,2,opt,name=data_filter,proto3" json:"data_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilterSubject) Reset()         { *m = FilterSubject{} }
func (m *FilterSubject) String() string { return proto.CompactTextString(m) }
func (*FilterSubject) ProtoMessage()    {}
func (*FilterSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{13}
}
func (m *FilterSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FilterSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterSubject.Merge(dst, src)
}
func (m *FilterSubject) XXX_Size() int {
	return m.Size()
}
func (m *FilterSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterSubject.DiscardUnknown(m)
}

var xxx_messageInfo_FilterSubject proto.InternalMessageInfo

func (m *FilterSubject) GetNameFilter() string {
	if m != nil {
		return m.NameFilter
	}
	return ""
}

func (m *FilterSubject) GetDataFilter() string {
	if m != nil {
		return m.DataFilter
	}
	return ""
}

type RatingContentRequest struct {
	ProductId            int64    `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	Star                 int64    `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	Score                int64    `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	RatingDescription    string   `protobuf:"bytes,4,opt,name=rating_description,proto3" json:"rating_description,omitempty"`
	RatingOption         string   `protobuf:"bytes,5,opt,name=rating_option,proto3" json:"rating_option,omitempty"`
	ImageUrls            []string `protobuf:"bytes,6,rep,name=image_urls" json:"image_urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatingContentRequest) Reset()         { *m = RatingContentRequest{} }
func (m *RatingContentRequest) String() string { return proto.CompactTextString(m) }
func (*RatingContentRequest) ProtoMessage()    {}
func (*RatingContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{14}
}
func (m *RatingContentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatingContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatingContentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RatingContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatingContentRequest.Merge(dst, src)
}
func (m *RatingContentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RatingContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RatingContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RatingContentRequest proto.InternalMessageInfo

func (m *RatingContentRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *RatingContentRequest) GetStar() int64 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *RatingContentRequest) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RatingContentRequest) GetRatingDescription() string {
	if m != nil {
		return m.RatingDescription
	}
	return ""
}

func (m *RatingContentRequest) GetRatingOption() string {
	if m != nil {
		return m.RatingOption
	}
	return ""
}

func (m *RatingContentRequest) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

type RatingContentUpdateRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Star                 int64    `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	Score                int64    `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	RatingDescription    string   `protobuf:"bytes,4,opt,name=rating_description,proto3" json:"rating_description,omitempty"`
	RatingOption         string   `protobuf:"bytes,5,opt,name=rating_option,proto3" json:"rating_option,omitempty"`
	ImageUrls            []string `protobuf:"bytes,6,rep,name=image_urls" json:"image_urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatingContentUpdateRequest) Reset()         { *m = RatingContentUpdateRequest{} }
func (m *RatingContentUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RatingContentUpdateRequest) ProtoMessage()    {}
func (*RatingContentUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{15}
}
func (m *RatingContentUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatingContentUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatingContentUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RatingContentUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatingContentUpdateRequest.Merge(dst, src)
}
func (m *RatingContentUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RatingContentUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RatingContentUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RatingContentUpdateRequest proto.InternalMessageInfo

func (m *RatingContentUpdateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RatingContentUpdateRequest) GetStar() int64 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *RatingContentUpdateRequest) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RatingContentUpdateRequest) GetRatingDescription() string {
	if m != nil {
		return m.RatingDescription
	}
	return ""
}

func (m *RatingContentUpdateRequest) GetRatingOption() string {
	if m != nil {
		return m.RatingOption
	}
	return ""
}

func (m *RatingContentUpdateRequest) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

type ProductInfoRating struct {
	ProductId            int64    `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	ProductName          string   `protobuf:"bytes,2,opt,name=product_name,proto3" json:"product_name,omitempty"`
	ProductUrl           string   `protobuf:"bytes,3,opt,name=product_url,proto3" json:"product_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductInfoRating) Reset()         { *m = ProductInfoRating{} }
func (m *ProductInfoRating) String() string { return proto.CompactTextString(m) }
func (*ProductInfoRating) ProtoMessage()    {}
func (*ProductInfoRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{16}
}
func (m *ProductInfoRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductInfoRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductInfoRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductInfoRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductInfoRating.Merge(dst, src)
}
func (m *ProductInfoRating) XXX_Size() int {
	return m.Size()
}
func (m *ProductInfoRating) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductInfoRating.DiscardUnknown(m)
}

var xxx_messageInfo_ProductInfoRating proto.InternalMessageInfo

func (m *ProductInfoRating) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductInfoRating) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ProductInfoRating) GetProductUrl() string {
	if m != nil {
		return m.ProductUrl
	}
	return ""
}

type AddRatingRequest struct {
	IncrementId          int64                   `protobuf:"varint,1,opt,name=increment_id,proto3" json:"increment_id,omitempty"`
	UserId               int64                   `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	MerchantId           int64                   `protobuf:"varint,3,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	Address              string                  `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	RatingSource         RatingSource            `protobuf:"varint,5,opt,name=rating_source,proto3,enum=sendo.v1.api.rating.RatingSource" json:"rating_source,omitempty"`
	RatingContents       []*RatingContentRequest `protobuf:"bytes,6,rep,name=rating_contents" json:"rating_contents,omitempty"`
	FptId                int64                   `protobuf:"varint,7,opt,name=fpt_id,proto3" json:"fpt_id,omitempty"`
	RatingOwnerName      string                  `protobuf:"bytes,8,opt,name=rating_owner_name,proto3" json:"rating_owner_name,omitempty"`
	ProductInfo          []*ProductInfoRating    `protobuf:"bytes,9,rep,name=product_info" json:"product_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AddRatingRequest) Reset()         { *m = AddRatingRequest{} }
func (m *AddRatingRequest) String() string { return proto.CompactTextString(m) }
func (*AddRatingRequest) ProtoMessage()    {}
func (*AddRatingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{17}
}
func (m *AddRatingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRatingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRatingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddRatingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRatingRequest.Merge(dst, src)
}
func (m *AddRatingRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRatingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRatingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRatingRequest proto.InternalMessageInfo

func (m *AddRatingRequest) GetIncrementId() int64 {
	if m != nil {
		return m.IncrementId
	}
	return 0
}

func (m *AddRatingRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddRatingRequest) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *AddRatingRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddRatingRequest) GetRatingSource() RatingSource {
	if m != nil {
		return m.RatingSource
	}
	return RatingSource_WEB
}

func (m *AddRatingRequest) GetRatingContents() []*RatingContentRequest {
	if m != nil {
		return m.RatingContents
	}
	return nil
}

func (m *AddRatingRequest) GetFptId() int64 {
	if m != nil {
		return m.FptId
	}
	return 0
}

func (m *AddRatingRequest) GetRatingOwnerName() string {
	if m != nil {
		return m.RatingOwnerName
	}
	return ""
}

func (m *AddRatingRequest) GetProductInfo() []*ProductInfoRating {
	if m != nil {
		return m.ProductInfo
	}
	return nil
}

type AddRatingAgainRequest struct {
	IncrementId          int64                         `protobuf:"varint,1,opt,name=increment_id,proto3" json:"increment_id,omitempty"`
	UserId               int64                         `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	RatingSource         RatingSource                  `protobuf:"varint,3,opt,name=rating_source,proto3,enum=sendo.v1.api.rating.RatingSource" json:"rating_source,omitempty"`
	RatingContents       []*RatingContentUpdateRequest `protobuf:"bytes,4,rep,name=rating_contents" json:"rating_contents,omitempty"`
	FptId                int64                         `protobuf:"varint,5,opt,name=fpt_id,proto3" json:"fpt_id,omitempty"`
	RatingOwnerName      string                        `protobuf:"bytes,6,opt,name=rating_owner_name,proto3" json:"rating_owner_name,omitempty"`
	ProductInfo          []*ProductInfoRating          `protobuf:"bytes,7,rep,name=product_info" json:"product_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AddRatingAgainRequest) Reset()         { *m = AddRatingAgainRequest{} }
func (m *AddRatingAgainRequest) String() string { return proto.CompactTextString(m) }
func (*AddRatingAgainRequest) ProtoMessage()    {}
func (*AddRatingAgainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{18}
}
func (m *AddRatingAgainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRatingAgainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRatingAgainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddRatingAgainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRatingAgainRequest.Merge(dst, src)
}
func (m *AddRatingAgainRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRatingAgainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRatingAgainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRatingAgainRequest proto.InternalMessageInfo

func (m *AddRatingAgainRequest) GetIncrementId() int64 {
	if m != nil {
		return m.IncrementId
	}
	return 0
}

func (m *AddRatingAgainRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddRatingAgainRequest) GetRatingSource() RatingSource {
	if m != nil {
		return m.RatingSource
	}
	return RatingSource_WEB
}

func (m *AddRatingAgainRequest) GetRatingContents() []*RatingContentUpdateRequest {
	if m != nil {
		return m.RatingContents
	}
	return nil
}

func (m *AddRatingAgainRequest) GetFptId() int64 {
	if m != nil {
		return m.FptId
	}
	return 0
}

func (m *AddRatingAgainRequest) GetRatingOwnerName() string {
	if m != nil {
		return m.RatingOwnerName
	}
	return ""
}

func (m *AddRatingAgainRequest) GetProductInfo() []*ProductInfoRating {
	if m != nil {
		return m.ProductInfo
	}
	return nil
}

type UpdateRatingRequest struct {
	IncrementId          int64                         `protobuf:"varint,1,opt,name=increment_id,proto3" json:"increment_id,omitempty"`
	UserId               int64                         `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	RatingSource         RatingSource                  `protobuf:"varint,3,opt,name=rating_source,proto3,enum=sendo.v1.api.rating.RatingSource" json:"rating_source,omitempty"`
	RatingContents       []*RatingContentUpdateRequest `protobuf:"bytes,4,rep,name=rating_contents" json:"rating_contents,omitempty"`
	FptId                int64                         `protobuf:"varint,5,opt,name=fpt_id,proto3" json:"fpt_id,omitempty"`
	RatingOwnerName      string                        `protobuf:"bytes,6,opt,name=rating_owner_name,proto3" json:"rating_owner_name,omitempty"`
	ProductInfo          []*ProductInfoRating          `protobuf:"bytes,7,rep,name=product_info" json:"product_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UpdateRatingRequest) Reset()         { *m = UpdateRatingRequest{} }
func (m *UpdateRatingRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRatingRequest) ProtoMessage()    {}
func (*UpdateRatingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{19}
}
func (m *UpdateRatingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRatingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRatingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateRatingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRatingRequest.Merge(dst, src)
}
func (m *UpdateRatingRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRatingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRatingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRatingRequest proto.InternalMessageInfo

func (m *UpdateRatingRequest) GetIncrementId() int64 {
	if m != nil {
		return m.IncrementId
	}
	return 0
}

func (m *UpdateRatingRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateRatingRequest) GetRatingSource() RatingSource {
	if m != nil {
		return m.RatingSource
	}
	return RatingSource_WEB
}

func (m *UpdateRatingRequest) GetRatingContents() []*RatingContentUpdateRequest {
	if m != nil {
		return m.RatingContents
	}
	return nil
}

func (m *UpdateRatingRequest) GetFptId() int64 {
	if m != nil {
		return m.FptId
	}
	return 0
}

func (m *UpdateRatingRequest) GetRatingOwnerName() string {
	if m != nil {
		return m.RatingOwnerName
	}
	return ""
}

func (m *UpdateRatingRequest) GetProductInfo() []*ProductInfoRating {
	if m != nil {
		return m.ProductInfo
	}
	return nil
}

type DeleteRatingRequest struct {
	IncrementId          int64                         `protobuf:"varint,1,opt,name=increment_id,proto3" json:"increment_id,omitempty"`
	RatingSource         RatingSource                  `protobuf:"varint,3,opt,name=rating_source,proto3,enum=sendo.v1.api.rating.RatingSource" json:"rating_source,omitempty"`
	RatingContents       []*RatingContentUpdateRequest `protobuf:"bytes,4,rep,name=rating_contents" json:"rating_contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DeleteRatingRequest) Reset()         { *m = DeleteRatingRequest{} }
func (m *DeleteRatingRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRatingRequest) ProtoMessage()    {}
func (*DeleteRatingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{20}
}
func (m *DeleteRatingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRatingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRatingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteRatingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRatingRequest.Merge(dst, src)
}
func (m *DeleteRatingRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRatingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRatingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRatingRequest proto.InternalMessageInfo

func (m *DeleteRatingRequest) GetIncrementId() int64 {
	if m != nil {
		return m.IncrementId
	}
	return 0
}

func (m *DeleteRatingRequest) GetRatingSource() RatingSource {
	if m != nil {
		return m.RatingSource
	}
	return RatingSource_WEB
}

func (m *DeleteRatingRequest) GetRatingContents() []*RatingContentUpdateRequest {
	if m != nil {
		return m.RatingContents
	}
	return nil
}

type GetRatingByProductRequest struct {
	ProductId            int64            `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	UserId               int64            `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Limit                int64            `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64            `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Sort                 string           `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Filters              []*FilterSubject `protobuf:"bytes,6,rep,name=filters" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetRatingByProductRequest) Reset()         { *m = GetRatingByProductRequest{} }
func (m *GetRatingByProductRequest) String() string { return proto.CompactTextString(m) }
func (*GetRatingByProductRequest) ProtoMessage()    {}
func (*GetRatingByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{21}
}
func (m *GetRatingByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingByProductRequest.Merge(dst, src)
}
func (m *GetRatingByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingByProductRequest proto.InternalMessageInfo

func (m *GetRatingByProductRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetRatingByProductRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetRatingByProductRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetRatingByProductRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetRatingByProductRequest) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *GetRatingByProductRequest) GetFilters() []*FilterSubject {
	if m != nil {
		return m.Filters
	}
	return nil
}

type GetRatingImagesByProductRequest struct {
	ProductId            int64    `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRatingImagesByProductRequest) Reset()         { *m = GetRatingImagesByProductRequest{} }
func (m *GetRatingImagesByProductRequest) String() string { return proto.CompactTextString(m) }
func (*GetRatingImagesByProductRequest) ProtoMessage()    {}
func (*GetRatingImagesByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{22}
}
func (m *GetRatingImagesByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingImagesByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingImagesByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingImagesByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingImagesByProductRequest.Merge(dst, src)
}
func (m *GetRatingImagesByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingImagesByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingImagesByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingImagesByProductRequest proto.InternalMessageInfo

func (m *GetRatingImagesByProductRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetRatingImagesByProductRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetRatingImagesByProductRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetRatingByMerchantRequest struct {
	MerchantId           int64    `protobuf:"varint,1,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRatingByMerchantRequest) Reset()         { *m = GetRatingByMerchantRequest{} }
func (m *GetRatingByMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*GetRatingByMerchantRequest) ProtoMessage()    {}
func (*GetRatingByMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{23}
}
func (m *GetRatingByMerchantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingByMerchantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingByMerchantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingByMerchantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingByMerchantRequest.Merge(dst, src)
}
func (m *GetRatingByMerchantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingByMerchantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingByMerchantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingByMerchantRequest proto.InternalMessageInfo

func (m *GetRatingByMerchantRequest) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *GetRatingByMerchantRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetRatingByMerchantRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetRatingByMerchantRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetRatingImagesByMerchantRequest struct {
	MerchantId           int64    `protobuf:"varint,1,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRatingImagesByMerchantRequest) Reset()         { *m = GetRatingImagesByMerchantRequest{} }
func (m *GetRatingImagesByMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*GetRatingImagesByMerchantRequest) ProtoMessage()    {}
func (*GetRatingImagesByMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{24}
}
func (m *GetRatingImagesByMerchantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingImagesByMerchantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingImagesByMerchantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingImagesByMerchantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingImagesByMerchantRequest.Merge(dst, src)
}
func (m *GetRatingImagesByMerchantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingImagesByMerchantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingImagesByMerchantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingImagesByMerchantRequest proto.InternalMessageInfo

func (m *GetRatingImagesByMerchantRequest) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *GetRatingImagesByMerchantRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetRatingImagesByMerchantRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetRatingByOrderRequest struct {
	IncrementId          int64    `protobuf:"varint,1,opt,name=increment_id,proto3" json:"increment_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRatingByOrderRequest) Reset()         { *m = GetRatingByOrderRequest{} }
func (m *GetRatingByOrderRequest) String() string { return proto.CompactTextString(m) }
func (*GetRatingByOrderRequest) ProtoMessage()    {}
func (*GetRatingByOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{25}
}
func (m *GetRatingByOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingByOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingByOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingByOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingByOrderRequest.Merge(dst, src)
}
func (m *GetRatingByOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingByOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingByOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingByOrderRequest proto.InternalMessageInfo

func (m *GetRatingByOrderRequest) GetIncrementId() int64 {
	if m != nil {
		return m.IncrementId
	}
	return 0
}

func (m *GetRatingByOrderRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetRatingByOrderRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetRatingByOrderRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetRatingInfoByProductRequest struct {
	ProductId            int64    `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRatingInfoByProductRequest) Reset()         { *m = GetRatingInfoByProductRequest{} }
func (m *GetRatingInfoByProductRequest) String() string { return proto.CompactTextString(m) }
func (*GetRatingInfoByProductRequest) ProtoMessage()    {}
func (*GetRatingInfoByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{26}
}
func (m *GetRatingInfoByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingInfoByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingInfoByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingInfoByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingInfoByProductRequest.Merge(dst, src)
}
func (m *GetRatingInfoByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingInfoByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingInfoByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingInfoByProductRequest proto.InternalMessageInfo

func (m *GetRatingInfoByProductRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

type GetRatingInfoByMerchantRequest struct {
	MerchantId           int64    `protobuf:"varint,1,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRatingInfoByMerchantRequest) Reset()         { *m = GetRatingInfoByMerchantRequest{} }
func (m *GetRatingInfoByMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*GetRatingInfoByMerchantRequest) ProtoMessage()    {}
func (*GetRatingInfoByMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{27}
}
func (m *GetRatingInfoByMerchantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingInfoByMerchantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingInfoByMerchantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingInfoByMerchantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingInfoByMerchantRequest.Merge(dst, src)
}
func (m *GetRatingInfoByMerchantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingInfoByMerchantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingInfoByMerchantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingInfoByMerchantRequest proto.InternalMessageInfo

func (m *GetRatingInfoByMerchantRequest) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

type GetRatingCommentByRatingIdRequest struct {
	RatingId             int64    `protobuf:"varint,1,opt,name=rating_id,proto3" json:"rating_id,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRatingCommentByRatingIdRequest) Reset()         { *m = GetRatingCommentByRatingIdRequest{} }
func (m *GetRatingCommentByRatingIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetRatingCommentByRatingIdRequest) ProtoMessage()    {}
func (*GetRatingCommentByRatingIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{28}
}
func (m *GetRatingCommentByRatingIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingCommentByRatingIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingCommentByRatingIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingCommentByRatingIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingCommentByRatingIdRequest.Merge(dst, src)
}
func (m *GetRatingCommentByRatingIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingCommentByRatingIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingCommentByRatingIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingCommentByRatingIdRequest proto.InternalMessageInfo

func (m *GetRatingCommentByRatingIdRequest) GetRatingId() int64 {
	if m != nil {
		return m.RatingId
	}
	return 0
}

func (m *GetRatingCommentByRatingIdRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetRatingCommentByRatingIdRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type MigrateRatingFromMongoDbRequest struct {
	TypeMigrate          int64    `protobuf:"varint,1,opt,name=type_migrate,proto3" json:"type_migrate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MigrateRatingFromMongoDbRequest) Reset()         { *m = MigrateRatingFromMongoDbRequest{} }
func (m *MigrateRatingFromMongoDbRequest) String() string { return proto.CompactTextString(m) }
func (*MigrateRatingFromMongoDbRequest) ProtoMessage()    {}
func (*MigrateRatingFromMongoDbRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{29}
}
func (m *MigrateRatingFromMongoDbRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigrateRatingFromMongoDbRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigrateRatingFromMongoDbRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MigrateRatingFromMongoDbRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrateRatingFromMongoDbRequest.Merge(dst, src)
}
func (m *MigrateRatingFromMongoDbRequest) XXX_Size() int {
	return m.Size()
}
func (m *MigrateRatingFromMongoDbRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrateRatingFromMongoDbRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MigrateRatingFromMongoDbRequest proto.InternalMessageInfo

func (m *MigrateRatingFromMongoDbRequest) GetTypeMigrate() int64 {
	if m != nil {
		return m.TypeMigrate
	}
	return 0
}

type MigrateRatingAgainFromMongoDbRequest struct {
	StartDate            int64    `protobuf:"varint,1,opt,name=start_date,proto3" json:"start_date,omitempty"`
	EndDate              int64    `protobuf:"varint,2,opt,name=end_date,proto3" json:"end_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MigrateRatingAgainFromMongoDbRequest) Reset()         { *m = MigrateRatingAgainFromMongoDbRequest{} }
func (m *MigrateRatingAgainFromMongoDbRequest) String() string { return proto.CompactTextString(m) }
func (*MigrateRatingAgainFromMongoDbRequest) ProtoMessage()    {}
func (*MigrateRatingAgainFromMongoDbRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{30}
}
func (m *MigrateRatingAgainFromMongoDbRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigrateRatingAgainFromMongoDbRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigrateRatingAgainFromMongoDbRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MigrateRatingAgainFromMongoDbRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrateRatingAgainFromMongoDbRequest.Merge(dst, src)
}
func (m *MigrateRatingAgainFromMongoDbRequest) XXX_Size() int {
	return m.Size()
}
func (m *MigrateRatingAgainFromMongoDbRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrateRatingAgainFromMongoDbRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MigrateRatingAgainFromMongoDbRequest proto.InternalMessageInfo

func (m *MigrateRatingAgainFromMongoDbRequest) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *MigrateRatingAgainFromMongoDbRequest) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

type CronUpdateDataRequest struct {
	TypeCron             int64    `protobuf:"varint,1,opt,name=type_cron,proto3" json:"type_cron,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronUpdateDataRequest) Reset()         { *m = CronUpdateDataRequest{} }
func (m *CronUpdateDataRequest) String() string { return proto.CompactTextString(m) }
func (*CronUpdateDataRequest) ProtoMessage()    {}
func (*CronUpdateDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{31}
}
func (m *CronUpdateDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronUpdateDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronUpdateDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CronUpdateDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronUpdateDataRequest.Merge(dst, src)
}
func (m *CronUpdateDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *CronUpdateDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CronUpdateDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CronUpdateDataRequest proto.InternalMessageInfo

func (m *CronUpdateDataRequest) GetTypeCron() int64 {
	if m != nil {
		return m.TypeCron
	}
	return 0
}

type LikeDataRequest struct {
	TypeLike             int64    `protobuf:"varint,1,opt,name=type_like,proto3" json:"type_like,omitempty"`
	RatingId             int64    `protobuf:"varint,2,opt,name=rating_id,proto3" json:"rating_id,omitempty"`
	UserId               int64    `protobuf:"varint,3,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	FptId                int64    `protobuf:"varint,5,opt,name=fpt_id,proto3" json:"fpt_id,omitempty"`
	ProductUrl           string   `protobuf:"bytes,6,opt,name=product_url,proto3" json:"product_url,omitempty"`
	ProductName          string   `protobuf:"bytes,7,opt,name=product_name,proto3" json:"product_name,omitempty"`
	ImageUrl             string   `protobuf:"bytes,8,opt,name=image_url,proto3" json:"image_url,omitempty"`
	IsShop               bool     `protobuf:"varint,9,opt,name=is_shop,proto3" json:"is_shop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeDataRequest) Reset()         { *m = LikeDataRequest{} }
func (m *LikeDataRequest) String() string { return proto.CompactTextString(m) }
func (*LikeDataRequest) ProtoMessage()    {}
func (*LikeDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{32}
}
func (m *LikeDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LikeDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeDataRequest.Merge(dst, src)
}
func (m *LikeDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *LikeDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LikeDataRequest proto.InternalMessageInfo

func (m *LikeDataRequest) GetTypeLike() int64 {
	if m != nil {
		return m.TypeLike
	}
	return 0
}

func (m *LikeDataRequest) GetRatingId() int64 {
	if m != nil {
		return m.RatingId
	}
	return 0
}

func (m *LikeDataRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LikeDataRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LikeDataRequest) GetFptId() int64 {
	if m != nil {
		return m.FptId
	}
	return 0
}

func (m *LikeDataRequest) GetProductUrl() string {
	if m != nil {
		return m.ProductUrl
	}
	return ""
}

func (m *LikeDataRequest) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *LikeDataRequest) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *LikeDataRequest) GetIsShop() bool {
	if m != nil {
		return m.IsShop
	}
	return false
}

type AddCommentRequest struct {
	CommentDescription   string   `protobuf:"bytes,1,opt,name=comment_description,proto3" json:"comment_description,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	RatingId             int64    `protobuf:"varint,3,opt,name=rating_id,proto3" json:"rating_id,omitempty"`
	MerchantId           int64    `protobuf:"varint,4,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	CommentId            string   `protobuf:"bytes,5,opt,name=comment_id,proto3" json:"comment_id,omitempty"`
	ProductUrl           string   `protobuf:"bytes,6,opt,name=product_url,proto3" json:"product_url,omitempty"`
	ProductName          string   `protobuf:"bytes,7,opt,name=product_name,proto3" json:"product_name,omitempty"`
	FptId                int64    `protobuf:"varint,8,opt,name=fpt_id,proto3" json:"fpt_id,omitempty"`
	CommentAuthorName    string   `protobuf:"bytes,9,opt,name=comment_author_name,proto3" json:"comment_author_name,omitempty"`
	IsShop               bool     `protobuf:"varint,10,opt,name=is_shop,proto3" json:"is_shop,omitempty"`
	ImageUrl             string   `protobuf:"bytes,11,opt,name=image_url,proto3" json:"image_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCommentRequest) Reset()         { *m = AddCommentRequest{} }
func (m *AddCommentRequest) String() string { return proto.CompactTextString(m) }
func (*AddCommentRequest) ProtoMessage()    {}
func (*AddCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{33}
}
func (m *AddCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCommentRequest.Merge(dst, src)
}
func (m *AddCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCommentRequest proto.InternalMessageInfo

func (m *AddCommentRequest) GetCommentDescription() string {
	if m != nil {
		return m.CommentDescription
	}
	return ""
}

func (m *AddCommentRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddCommentRequest) GetRatingId() int64 {
	if m != nil {
		return m.RatingId
	}
	return 0
}

func (m *AddCommentRequest) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *AddCommentRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *AddCommentRequest) GetProductUrl() string {
	if m != nil {
		return m.ProductUrl
	}
	return ""
}

func (m *AddCommentRequest) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *AddCommentRequest) GetFptId() int64 {
	if m != nil {
		return m.FptId
	}
	return 0
}

func (m *AddCommentRequest) GetCommentAuthorName() string {
	if m != nil {
		return m.CommentAuthorName
	}
	return ""
}

func (m *AddCommentRequest) GetIsShop() bool {
	if m != nil {
		return m.IsShop
	}
	return false
}

func (m *AddCommentRequest) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

type DeleteCommentRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
	CommentId            string   `protobuf:"bytes,2,opt,name=comment_id,proto3" json:"comment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCommentRequest) Reset()         { *m = DeleteCommentRequest{} }
func (m *DeleteCommentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCommentRequest) ProtoMessage()    {}
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{34}
}
func (m *DeleteCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommentRequest.Merge(dst, src)
}
func (m *DeleteCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommentRequest proto.InternalMessageInfo

func (m *DeleteCommentRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteCommentRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

type DeleteCommentByAdminRequest struct {
	CommentId            string   `protobuf:"bytes,1,opt,name=comment_id,proto3" json:"comment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCommentByAdminRequest) Reset()         { *m = DeleteCommentByAdminRequest{} }
func (m *DeleteCommentByAdminRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCommentByAdminRequest) ProtoMessage()    {}
func (*DeleteCommentByAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{35}
}
func (m *DeleteCommentByAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCommentByAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCommentByAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCommentByAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommentByAdminRequest.Merge(dst, src)
}
func (m *DeleteCommentByAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCommentByAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommentByAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommentByAdminRequest proto.InternalMessageInfo

func (m *DeleteCommentByAdminRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

// Define format response for apis
type AddCommentResponse struct {
	Status               *RestResponseWithData `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *RatingComment        `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AddCommentResponse) Reset()         { *m = AddCommentResponse{} }
func (m *AddCommentResponse) String() string { return proto.CompactTextString(m) }
func (*AddCommentResponse) ProtoMessage()    {}
func (*AddCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{36}
}
func (m *AddCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCommentResponse.Merge(dst, src)
}
func (m *AddCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCommentResponse proto.InternalMessageInfo

func (m *AddCommentResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AddCommentResponse) GetData() *RatingComment {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRatingByProductResponse struct {
	Status               *RestResponseWithData   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *DataGetRatingByProduct `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetRatingByProductResponse) Reset()         { *m = GetRatingByProductResponse{} }
func (m *GetRatingByProductResponse) String() string { return proto.CompactTextString(m) }
func (*GetRatingByProductResponse) ProtoMessage()    {}
func (*GetRatingByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{37}
}
func (m *GetRatingByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingByProductResponse.Merge(dst, src)
}
func (m *GetRatingByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingByProductResponse proto.InternalMessageInfo

func (m *GetRatingByProductResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetRatingByProductResponse) GetData() *DataGetRatingByProduct {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetCommentsResponse struct {
	Status               *RestResponseWithData `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *DataGetComments      `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetCommentsResponse) Reset()         { *m = GetCommentsResponse{} }
func (m *GetCommentsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCommentsResponse) ProtoMessage()    {}
func (*GetCommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{38}
}
func (m *GetCommentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCommentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentsResponse.Merge(dst, src)
}
func (m *GetCommentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCommentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentsResponse proto.InternalMessageInfo

func (m *GetCommentsResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetCommentsResponse) GetData() *DataGetComments {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRatingImagesByProductResponse struct {
	Status               *RestResponseWithData        `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *DataGetRatingImageByProduct `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetRatingImagesByProductResponse) Reset()         { *m = GetRatingImagesByProductResponse{} }
func (m *GetRatingImagesByProductResponse) String() string { return proto.CompactTextString(m) }
func (*GetRatingImagesByProductResponse) ProtoMessage()    {}
func (*GetRatingImagesByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{39}
}
func (m *GetRatingImagesByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingImagesByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingImagesByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingImagesByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingImagesByProductResponse.Merge(dst, src)
}
func (m *GetRatingImagesByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingImagesByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingImagesByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingImagesByProductResponse proto.InternalMessageInfo

func (m *GetRatingImagesByProductResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetRatingImagesByProductResponse) GetData() *DataGetRatingImageByProduct {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRatingByMerchantResponse struct {
	Status               *RestResponseWithData    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *DataGetRatingByMerchant `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetRatingByMerchantResponse) Reset()         { *m = GetRatingByMerchantResponse{} }
func (m *GetRatingByMerchantResponse) String() string { return proto.CompactTextString(m) }
func (*GetRatingByMerchantResponse) ProtoMessage()    {}
func (*GetRatingByMerchantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{40}
}
func (m *GetRatingByMerchantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingByMerchantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingByMerchantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingByMerchantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingByMerchantResponse.Merge(dst, src)
}
func (m *GetRatingByMerchantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingByMerchantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingByMerchantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingByMerchantResponse proto.InternalMessageInfo

func (m *GetRatingByMerchantResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetRatingByMerchantResponse) GetData() *DataGetRatingByMerchant {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRatingImagesByMerchantResponse struct {
	Status               *RestResponseWithData         `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *DataGetRatingImageByMerchant `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetRatingImagesByMerchantResponse) Reset()         { *m = GetRatingImagesByMerchantResponse{} }
func (m *GetRatingImagesByMerchantResponse) String() string { return proto.CompactTextString(m) }
func (*GetRatingImagesByMerchantResponse) ProtoMessage()    {}
func (*GetRatingImagesByMerchantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{41}
}
func (m *GetRatingImagesByMerchantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingImagesByMerchantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingImagesByMerchantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingImagesByMerchantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingImagesByMerchantResponse.Merge(dst, src)
}
func (m *GetRatingImagesByMerchantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingImagesByMerchantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingImagesByMerchantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingImagesByMerchantResponse proto.InternalMessageInfo

func (m *GetRatingImagesByMerchantResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetRatingImagesByMerchantResponse) GetData() *DataGetRatingImageByMerchant {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRatingByOrderResponse struct {
	Status               *RestResponseWithData `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *DataGetRatingByOrder `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetRatingByOrderResponse) Reset()         { *m = GetRatingByOrderResponse{} }
func (m *GetRatingByOrderResponse) String() string { return proto.CompactTextString(m) }
func (*GetRatingByOrderResponse) ProtoMessage()    {}
func (*GetRatingByOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{42}
}
func (m *GetRatingByOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingByOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingByOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingByOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingByOrderResponse.Merge(dst, src)
}
func (m *GetRatingByOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingByOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingByOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingByOrderResponse proto.InternalMessageInfo

func (m *GetRatingByOrderResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetRatingByOrderResponse) GetData() *DataGetRatingByOrder {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRatingInfoByProductResponse struct {
	Status               *RestResponseWithData                `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *GetRatingInfoByProductResponse_Data `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *GetRatingInfoByProductResponse) Reset()         { *m = GetRatingInfoByProductResponse{} }
func (m *GetRatingInfoByProductResponse) String() string { return proto.CompactTextString(m) }
func (*GetRatingInfoByProductResponse) ProtoMessage()    {}
func (*GetRatingInfoByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{43}
}
func (m *GetRatingInfoByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingInfoByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingInfoByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingInfoByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingInfoByProductResponse.Merge(dst, src)
}
func (m *GetRatingInfoByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingInfoByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingInfoByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingInfoByProductResponse proto.InternalMessageInfo

func (m *GetRatingInfoByProductResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetRatingInfoByProductResponse) GetData() *GetRatingInfoByProductResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRatingInfoByProductResponse_Data struct {
	ProductId            int64              `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	RatingInfo           *RatingInfoContent `protobuf:"bytes,2,opt,name=rating_info" json:"rating_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetRatingInfoByProductResponse_Data) Reset()         { *m = GetRatingInfoByProductResponse_Data{} }
func (m *GetRatingInfoByProductResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetRatingInfoByProductResponse_Data) ProtoMessage()    {}
func (*GetRatingInfoByProductResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{43, 0}
}
func (m *GetRatingInfoByProductResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingInfoByProductResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingInfoByProductResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingInfoByProductResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingInfoByProductResponse_Data.Merge(dst, src)
}
func (m *GetRatingInfoByProductResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingInfoByProductResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingInfoByProductResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingInfoByProductResponse_Data proto.InternalMessageInfo

func (m *GetRatingInfoByProductResponse_Data) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetRatingInfoByProductResponse_Data) GetRatingInfo() *RatingInfoContent {
	if m != nil {
		return m.RatingInfo
	}
	return nil
}

type GetRatingInfoByMerchantResponse struct {
	Status               *RestResponseWithData                 `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *GetRatingInfoByMerchantResponse_Data `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GetRatingInfoByMerchantResponse) Reset()         { *m = GetRatingInfoByMerchantResponse{} }
func (m *GetRatingInfoByMerchantResponse) String() string { return proto.CompactTextString(m) }
func (*GetRatingInfoByMerchantResponse) ProtoMessage()    {}
func (*GetRatingInfoByMerchantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{44}
}
func (m *GetRatingInfoByMerchantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingInfoByMerchantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingInfoByMerchantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingInfoByMerchantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingInfoByMerchantResponse.Merge(dst, src)
}
func (m *GetRatingInfoByMerchantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingInfoByMerchantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingInfoByMerchantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingInfoByMerchantResponse proto.InternalMessageInfo

func (m *GetRatingInfoByMerchantResponse) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetRatingInfoByMerchantResponse) GetData() *GetRatingInfoByMerchantResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRatingInfoByMerchantResponse_Data struct {
	MerchantId           int64              `protobuf:"varint,1,opt,name=merchant_id,proto3" json:"merchant_id,omitempty"`
	RatingInfo           *RatingInfoContent `protobuf:"bytes,2,opt,name=rating_info" json:"rating_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetRatingInfoByMerchantResponse_Data) Reset()         { *m = GetRatingInfoByMerchantResponse_Data{} }
func (m *GetRatingInfoByMerchantResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetRatingInfoByMerchantResponse_Data) ProtoMessage()    {}
func (*GetRatingInfoByMerchantResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{44, 0}
}
func (m *GetRatingInfoByMerchantResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRatingInfoByMerchantResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRatingInfoByMerchantResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRatingInfoByMerchantResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRatingInfoByMerchantResponse_Data.Merge(dst, src)
}
func (m *GetRatingInfoByMerchantResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *GetRatingInfoByMerchantResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRatingInfoByMerchantResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GetRatingInfoByMerchantResponse_Data proto.InternalMessageInfo

func (m *GetRatingInfoByMerchantResponse_Data) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *GetRatingInfoByMerchantResponse_Data) GetRatingInfo() *RatingInfoContent {
	if m != nil {
		return m.RatingInfo
	}
	return nil
}

type ListAppResponse struct {
	// number of comments
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// subset of comments, based on pagination
	Comments             []*base.Comment `protobuf:"bytes,2,rep,name=comments" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListAppResponse) Reset()         { *m = ListAppResponse{} }
func (m *ListAppResponse) String() string { return proto.CompactTextString(m) }
func (*ListAppResponse) ProtoMessage()    {}
func (*ListAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{45}
}
func (m *ListAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppResponse.Merge(dst, src)
}
func (m *ListAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppResponse proto.InternalMessageInfo

func (m *ListAppResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListAppResponse) GetComments() []*base.Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type DataGetCommentByRatingId struct {
	Status               *RestResponseWithData `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *DataGetComments      `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	ProductId            int64                 `protobuf:"varint,3,opt,name=product_id,proto3" json:"product_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DataGetCommentByRatingId) Reset()         { *m = DataGetCommentByRatingId{} }
func (m *DataGetCommentByRatingId) String() string { return proto.CompactTextString(m) }
func (*DataGetCommentByRatingId) ProtoMessage()    {}
func (*DataGetCommentByRatingId) Descriptor() ([]byte, []int) {
	return fileDescriptor_rating_aab4f5f207432c17, []int{46}
}
func (m *DataGetCommentByRatingId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGetCommentByRatingId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataGetCommentByRatingId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataGetCommentByRatingId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGetCommentByRatingId.Merge(dst, src)
}
func (m *DataGetCommentByRatingId) XXX_Size() int {
	return m.Size()
}
func (m *DataGetCommentByRatingId) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGetCommentByRatingId.DiscardUnknown(m)
}

var xxx_messageInfo_DataGetCommentByRatingId proto.InternalMessageInfo

func (m *DataGetCommentByRatingId) GetStatus() *RestResponseWithData {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DataGetCommentByRatingId) GetData() *DataGetComments {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataGetCommentByRatingId) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func init() {
	proto.RegisterType((*RestResponseWithData)(nil), "sendo.v1.api.rating.RestResponseWithData")
	proto.RegisterType((*RestResponseNonData)(nil), "sendo.v1.api.rating.RestResponseNonData")
	proto.RegisterType((*RatingComment)(nil), "sendo.v1.api.rating.RatingComment")
	proto.RegisterType((*RatingContent)(nil), "sendo.v1.api.rating.RatingContent")
	proto.RegisterType((*DataGetRatingByProduct)(nil), "sendo.v1.api.rating.DataGetRatingByProduct")
	proto.RegisterType((*DataGetComments)(nil), "sendo.v1.api.rating.DataGetComments")
	proto.RegisterType((*DataGetRatingByMerchant)(nil), "sendo.v1.api.rating.DataGetRatingByMerchant")
	proto.RegisterType((*DataGetRatingByOrder)(nil), "sendo.v1.api.rating.DataGetRatingByOrder")
	proto.RegisterType((*DataGetRatingImageByProduct)(nil), "sendo.v1.api.rating.DataGetRatingImageByProduct")
	proto.RegisterType((*ImageRating)(nil), "sendo.v1.api.rating.ImageRating")
	proto.RegisterType((*DataGetRatingImageByMerchant)(nil), "sendo.v1.api.rating.DataGetRatingImageByMerchant")
	proto.RegisterType((*DataGetRatingCommentByRating)(nil), "sendo.v1.api.rating.DataGetRatingCommentByRating")
	proto.RegisterType((*RatingInfoContent)(nil), "sendo.v1.api.rating.RatingInfoContent")
	proto.RegisterType((*FilterSubject)(nil), "sendo.v1.api.rating.FilterSubject")
	proto.RegisterType((*RatingContentRequest)(nil), "sendo.v1.api.rating.RatingContentRequest")
	proto.RegisterType((*RatingContentUpdateRequest)(nil), "sendo.v1.api.rating.RatingContentUpdateRequest")
	proto.RegisterType((*ProductInfoRating)(nil), "sendo.v1.api.rating.ProductInfoRating")
	proto.RegisterType((*AddRatingRequest)(nil), "sendo.v1.api.rating.AddRatingRequest")
	proto.RegisterType((*AddRatingAgainRequest)(nil), "sendo.v1.api.rating.AddRatingAgainRequest")
	proto.RegisterType((*UpdateRatingRequest)(nil), "sendo.v1.api.rating.UpdateRatingRequest")
	proto.RegisterType((*DeleteRatingRequest)(nil), "sendo.v1.api.rating.DeleteRatingRequest")
	proto.RegisterType((*GetRatingByProductRequest)(nil), "sendo.v1.api.rating.GetRatingByProductRequest")
	proto.RegisterType((*GetRatingImagesByProductRequest)(nil), "sendo.v1.api.rating.GetRatingImagesByProductRequest")
	proto.RegisterType((*GetRatingByMerchantRequest)(nil), "sendo.v1.api.rating.GetRatingByMerchantRequest")
	proto.RegisterType((*GetRatingImagesByMerchantRequest)(nil), "sendo.v1.api.rating.GetRatingImagesByMerchantRequest")
	proto.RegisterType((*GetRatingByOrderRequest)(nil), "sendo.v1.api.rating.GetRatingByOrderRequest")
	proto.RegisterType((*GetRatingInfoByProductRequest)(nil), "sendo.v1.api.rating.GetRatingInfoByProductRequest")
	proto.RegisterType((*GetRatingInfoByMerchantRequest)(nil), "sendo.v1.api.rating.GetRatingInfoByMerchantRequest")
	proto.RegisterType((*GetRatingCommentByRatingIdRequest)(nil), "sendo.v1.api.rating.GetRatingCommentByRatingIdRequest")
	proto.RegisterType((*MigrateRatingFromMongoDbRequest)(nil), "sendo.v1.api.rating.MigrateRatingFromMongoDbRequest")
	proto.RegisterType((*MigrateRatingAgainFromMongoDbRequest)(nil), "sendo.v1.api.rating.MigrateRatingAgainFromMongoDbRequest")
	proto.RegisterType((*CronUpdateDataRequest)(nil), "sendo.v1.api.rating.CronUpdateDataRequest")
	proto.RegisterType((*LikeDataRequest)(nil), "sendo.v1.api.rating.LikeDataRequest")
	proto.RegisterType((*AddCommentRequest)(nil), "sendo.v1.api.rating.AddCommentRequest")
	proto.RegisterType((*DeleteCommentRequest)(nil), "sendo.v1.api.rating.DeleteCommentRequest")
	proto.RegisterType((*DeleteCommentByAdminRequest)(nil), "sendo.v1.api.rating.DeleteCommentByAdminRequest")
	proto.RegisterType((*AddCommentResponse)(nil), "sendo.v1.api.rating.AddCommentResponse")
	proto.RegisterType((*GetRatingByProductResponse)(nil), "sendo.v1.api.rating.GetRatingByProductResponse")
	proto.RegisterType((*GetCommentsResponse)(nil), "sendo.v1.api.rating.GetCommentsResponse")
	proto.RegisterType((*GetRatingImagesByProductResponse)(nil), "sendo.v1.api.rating.GetRatingImagesByProductResponse")
	proto.RegisterType((*GetRatingByMerchantResponse)(nil), "sendo.v1.api.rating.GetRatingByMerchantResponse")
	proto.RegisterType((*GetRatingImagesByMerchantResponse)(nil), "sendo.v1.api.rating.GetRatingImagesByMerchantResponse")
	proto.RegisterType((*GetRatingByOrderResponse)(nil), "sendo.v1.api.rating.GetRatingByOrderResponse")
	proto.RegisterType((*GetRatingInfoByProductResponse)(nil), "sendo.v1.api.rating.GetRatingInfoByProductResponse")
	proto.RegisterType((*GetRatingInfoByProductResponse_Data)(nil), "sendo.v1.api.rating.GetRatingInfoByProductResponse.Data")
	proto.RegisterType((*GetRatingInfoByMerchantResponse)(nil), "sendo.v1.api.rating.GetRatingInfoByMerchantResponse")
	proto.RegisterType((*GetRatingInfoByMerchantResponse_Data)(nil), "sendo.v1.api.rating.GetRatingInfoByMerchantResponse.Data")
	proto.RegisterType((*ListAppResponse)(nil), "sendo.v1.api.rating.ListAppResponse")
	proto.RegisterType((*DataGetCommentByRatingId)(nil), "sendo.v1.api.rating.DataGetCommentByRatingId")
	proto.RegisterEnum("sendo.v1.api.rating.RatingSource", RatingSource_name, RatingSource_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RatingServiceClient interface {
	// Add rating for user
	AddRating(ctx context.Context, in *AddRatingRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	// Update rating for user
	AddRatingAgain(ctx context.Context, in *AddRatingAgainRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	// Comment for 1 rating
	AddRatingComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	// Update rating for admin
	UpdateRating(ctx context.Context, in *UpdateRatingRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	// Delete specified rating
	DeleteRating(ctx context.Context, in *DeleteRatingRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	// Get rating list in product detail
	GetRatingByProduct(ctx context.Context, in *GetRatingByProductRequest, opts ...grpc.CallOption) (*GetRatingByProductResponse, error)
	// Get rating image list in product detail
	GetRatingImageByProduct(ctx context.Context, in *GetRatingImagesByProductRequest, opts ...grpc.CallOption) (*GetRatingImagesByProductResponse, error)
	// Get rating list in shop detail
	GetRatingByMerchant(ctx context.Context, in *GetRatingByMerchantRequest, opts ...grpc.CallOption) (*GetRatingByMerchantResponse, error)
	// Get rating image list in shop detail
	GetRatingImageByMerchant(ctx context.Context, in *GetRatingImagesByMerchantRequest, opts ...grpc.CallOption) (*GetRatingImagesByMerchantResponse, error)
	// Get rating list in profile page
	GetRatingByOrder(ctx context.Context, in *GetRatingByOrderRequest, opts ...grpc.CallOption) (*GetRatingByOrderResponse, error)
	// Get rating info in product detail
	GetRatingInfoByProduct(ctx context.Context, in *GetRatingInfoByProductRequest, opts ...grpc.CallOption) (*GetRatingInfoByProductResponse, error)
	// Get rating info in shop detail
	GetRatingInfoByMerchant(ctx context.Context, in *GetRatingInfoByMerchantRequest, opts ...grpc.CallOption) (*GetRatingInfoByMerchantResponse, error)
	// Get comment for rating id
	GetRatingCommentByRatingId(ctx context.Context, in *GetRatingCommentByRatingIdRequest, opts ...grpc.CallOption) (*DataGetCommentByRatingId, error)
	// Delete comment for user
	DeleteCommentRatingComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	// Delete comment for admin
	DeleteCommentByAdminRatingComment(ctx context.Context, in *DeleteCommentByAdminRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	MigrateRatingFromMongoDb(ctx context.Context, in *MigrateRatingFromMongoDbRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	MigrateRatingAgainFromMongoDb(ctx context.Context, in *MigrateRatingAgainFromMongoDbRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	MigrateRatingMerchantScoreFromMongoDb(ctx context.Context, in *MigrateRatingFromMongoDbRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	CronUpdateData(ctx context.Context, in *CronUpdateDataRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
	// Like and Unlike for user
	LikeUnLike(ctx context.Context, in *LikeDataRequest, opts ...grpc.CallOption) (*RestResponseNonData, error)
}

type ratingServiceClient struct {
	cc *grpc.ClientConn
}

func NewRatingServiceClient(cc *grpc.ClientConn) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) AddRating(ctx context.Context, in *AddRatingRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/AddRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) AddRatingAgain(ctx context.Context, in *AddRatingAgainRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/AddRatingAgain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) AddRatingComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/AddRatingComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateRating(ctx context.Context, in *UpdateRatingRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/UpdateRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteRating(ctx context.Context, in *DeleteRatingRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/DeleteRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetRatingByProduct(ctx context.Context, in *GetRatingByProductRequest, opts ...grpc.CallOption) (*GetRatingByProductResponse, error) {
	out := new(GetRatingByProductResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/GetRatingByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetRatingImageByProduct(ctx context.Context, in *GetRatingImagesByProductRequest, opts ...grpc.CallOption) (*GetRatingImagesByProductResponse, error) {
	out := new(GetRatingImagesByProductResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/GetRatingImageByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetRatingByMerchant(ctx context.Context, in *GetRatingByMerchantRequest, opts ...grpc.CallOption) (*GetRatingByMerchantResponse, error) {
	out := new(GetRatingByMerchantResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/GetRatingByMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetRatingImageByMerchant(ctx context.Context, in *GetRatingImagesByMerchantRequest, opts ...grpc.CallOption) (*GetRatingImagesByMerchantResponse, error) {
	out := new(GetRatingImagesByMerchantResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/GetRatingImageByMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetRatingByOrder(ctx context.Context, in *GetRatingByOrderRequest, opts ...grpc.CallOption) (*GetRatingByOrderResponse, error) {
	out := new(GetRatingByOrderResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/GetRatingByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetRatingInfoByProduct(ctx context.Context, in *GetRatingInfoByProductRequest, opts ...grpc.CallOption) (*GetRatingInfoByProductResponse, error) {
	out := new(GetRatingInfoByProductResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/GetRatingInfoByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetRatingInfoByMerchant(ctx context.Context, in *GetRatingInfoByMerchantRequest, opts ...grpc.CallOption) (*GetRatingInfoByMerchantResponse, error) {
	out := new(GetRatingInfoByMerchantResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/GetRatingInfoByMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetRatingCommentByRatingId(ctx context.Context, in *GetRatingCommentByRatingIdRequest, opts ...grpc.CallOption) (*DataGetCommentByRatingId, error) {
	out := new(DataGetCommentByRatingId)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/GetRatingCommentByRatingId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteCommentRatingComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/DeleteCommentRatingComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteCommentByAdminRatingComment(ctx context.Context, in *DeleteCommentByAdminRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/DeleteCommentByAdminRatingComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) MigrateRatingFromMongoDb(ctx context.Context, in *MigrateRatingFromMongoDbRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/MigrateRatingFromMongoDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) MigrateRatingAgainFromMongoDb(ctx context.Context, in *MigrateRatingAgainFromMongoDbRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/MigrateRatingAgainFromMongoDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) MigrateRatingMerchantScoreFromMongoDb(ctx context.Context, in *MigrateRatingFromMongoDbRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/MigrateRatingMerchantScoreFromMongoDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) CronUpdateData(ctx context.Context, in *CronUpdateDataRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/CronUpdateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) LikeUnLike(ctx context.Context, in *LikeDataRequest, opts ...grpc.CallOption) (*RestResponseNonData, error) {
	out := new(RestResponseNonData)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.rating.RatingService/LikeUnLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
type RatingServiceServer interface {
	// Add rating for user
	AddRating(context.Context, *AddRatingRequest) (*RestResponseNonData, error)
	// Update rating for user
	AddRatingAgain(context.Context, *AddRatingAgainRequest) (*RestResponseNonData, error)
	// Comment for 1 rating
	AddRatingComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	// Update rating for admin
	UpdateRating(context.Context, *UpdateRatingRequest) (*RestResponseNonData, error)
	// Delete specified rating
	DeleteRating(context.Context, *DeleteRatingRequest) (*RestResponseNonData, error)
	// Get rating list in product detail
	GetRatingByProduct(context.Context, *GetRatingByProductRequest) (*GetRatingByProductResponse, error)
	// Get rating image list in product detail
	GetRatingImageByProduct(context.Context, *GetRatingImagesByProductRequest) (*GetRatingImagesByProductResponse, error)
	// Get rating list in shop detail
	GetRatingByMerchant(context.Context, *GetRatingByMerchantRequest) (*GetRatingByMerchantResponse, error)
	// Get rating image list in shop detail
	GetRatingImageByMerchant(context.Context, *GetRatingImagesByMerchantRequest) (*GetRatingImagesByMerchantResponse, error)
	// Get rating list in profile page
	GetRatingByOrder(context.Context, *GetRatingByOrderRequest) (*GetRatingByOrderResponse, error)
	// Get rating info in product detail
	GetRatingInfoByProduct(context.Context, *GetRatingInfoByProductRequest) (*GetRatingInfoByProductResponse, error)
	// Get rating info in shop detail
	GetRatingInfoByMerchant(context.Context, *GetRatingInfoByMerchantRequest) (*GetRatingInfoByMerchantResponse, error)
	// Get comment for rating id
	GetRatingCommentByRatingId(context.Context, *GetRatingCommentByRatingIdRequest) (*DataGetCommentByRatingId, error)
	// Delete comment for user
	DeleteCommentRatingComment(context.Context, *DeleteCommentRequest) (*RestResponseNonData, error)
	// Delete comment for admin
	DeleteCommentByAdminRatingComment(context.Context, *DeleteCommentByAdminRequest) (*RestResponseNonData, error)
	MigrateRatingFromMongoDb(context.Context, *MigrateRatingFromMongoDbRequest) (*RestResponseNonData, error)
	MigrateRatingAgainFromMongoDb(context.Context, *MigrateRatingAgainFromMongoDbRequest) (*RestResponseNonData, error)
	MigrateRatingMerchantScoreFromMongoDb(context.Context, *MigrateRatingFromMongoDbRequest) (*RestResponseNonData, error)
	CronUpdateData(context.Context, *CronUpdateDataRequest) (*RestResponseNonData, error)
	// Like and Unlike for user
	LikeUnLike(context.Context, *LikeDataRequest) (*RestResponseNonData, error)
}

func RegisterRatingServiceServer(s *grpc.Server, srv RatingServiceServer) {
	s.RegisterService(&_RatingService_serviceDesc, srv)
}

func _RatingService_AddRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).AddRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/AddRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).AddRating(ctx, req.(*AddRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_AddRatingAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRatingAgainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).AddRatingAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/AddRatingAgain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).AddRatingAgain(ctx, req.(*AddRatingAgainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_AddRatingComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).AddRatingComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/AddRatingComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).AddRatingComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/UpdateRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateRating(ctx, req.(*UpdateRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/DeleteRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteRating(ctx, req.(*DeleteRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetRatingByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetRatingByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/GetRatingByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetRatingByProduct(ctx, req.(*GetRatingByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetRatingImageByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingImagesByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetRatingImageByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/GetRatingImageByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetRatingImageByProduct(ctx, req.(*GetRatingImagesByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetRatingByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingByMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetRatingByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/GetRatingByMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetRatingByMerchant(ctx, req.(*GetRatingByMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetRatingImageByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingImagesByMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetRatingImageByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/GetRatingImageByMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetRatingImageByMerchant(ctx, req.(*GetRatingImagesByMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetRatingByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetRatingByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/GetRatingByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetRatingByOrder(ctx, req.(*GetRatingByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetRatingInfoByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingInfoByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetRatingInfoByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/GetRatingInfoByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetRatingInfoByProduct(ctx, req.(*GetRatingInfoByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetRatingInfoByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingInfoByMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetRatingInfoByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/GetRatingInfoByMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetRatingInfoByMerchant(ctx, req.(*GetRatingInfoByMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetRatingCommentByRatingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingCommentByRatingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetRatingCommentByRatingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/GetRatingCommentByRatingId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetRatingCommentByRatingId(ctx, req.(*GetRatingCommentByRatingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteCommentRatingComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteCommentRatingComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/DeleteCommentRatingComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteCommentRatingComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteCommentByAdminRatingComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteCommentByAdminRatingComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/DeleteCommentByAdminRatingComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteCommentByAdminRatingComment(ctx, req.(*DeleteCommentByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_MigrateRatingFromMongoDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateRatingFromMongoDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).MigrateRatingFromMongoDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/MigrateRatingFromMongoDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).MigrateRatingFromMongoDb(ctx, req.(*MigrateRatingFromMongoDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_MigrateRatingAgainFromMongoDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateRatingAgainFromMongoDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).MigrateRatingAgainFromMongoDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/MigrateRatingAgainFromMongoDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).MigrateRatingAgainFromMongoDb(ctx, req.(*MigrateRatingAgainFromMongoDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_MigrateRatingMerchantScoreFromMongoDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateRatingFromMongoDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).MigrateRatingMerchantScoreFromMongoDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/MigrateRatingMerchantScoreFromMongoDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).MigrateRatingMerchantScoreFromMongoDb(ctx, req.(*MigrateRatingFromMongoDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_CronUpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronUpdateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CronUpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/CronUpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CronUpdateData(ctx, req.(*CronUpdateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_LikeUnLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).LikeUnLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.rating.RatingService/LikeUnLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).LikeUnLike(ctx, req.(*LikeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RatingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.rating.RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRating",
			Handler:    _RatingService_AddRating_Handler,
		},
		{
			MethodName: "AddRatingAgain",
			Handler:    _RatingService_AddRatingAgain_Handler,
		},
		{
			MethodName: "AddRatingComment",
			Handler:    _RatingService_AddRatingComment_Handler,
		},
		{
			MethodName: "UpdateRating",
			Handler:    _RatingService_UpdateRating_Handler,
		},
		{
			MethodName: "DeleteRating",
			Handler:    _RatingService_DeleteRating_Handler,
		},
		{
			MethodName: "GetRatingByProduct",
			Handler:    _RatingService_GetRatingByProduct_Handler,
		},
		{
			MethodName: "GetRatingImageByProduct",
			Handler:    _RatingService_GetRatingImageByProduct_Handler,
		},
		{
			MethodName: "GetRatingByMerchant",
			Handler:    _RatingService_GetRatingByMerchant_Handler,
		},
		{
			MethodName: "GetRatingImageByMerchant",
			Handler:    _RatingService_GetRatingImageByMerchant_Handler,
		},
		{
			MethodName: "GetRatingByOrder",
			Handler:    _RatingService_GetRatingByOrder_Handler,
		},
		{
			MethodName: "GetRatingInfoByProduct",
			Handler:    _RatingService_GetRatingInfoByProduct_Handler,
		},
		{
			MethodName: "GetRatingInfoByMerchant",
			Handler:    _RatingService_GetRatingInfoByMerchant_Handler,
		},
		{
			MethodName: "GetRatingCommentByRatingId",
			Handler:    _RatingService_GetRatingCommentByRatingId_Handler,
		},
		{
			MethodName: "DeleteCommentRatingComment",
			Handler:    _RatingService_DeleteCommentRatingComment_Handler,
		},
		{
			MethodName: "DeleteCommentByAdminRatingComment",
			Handler:    _RatingService_DeleteCommentByAdminRatingComment_Handler,
		},
		{
			MethodName: "MigrateRatingFromMongoDb",
			Handler:    _RatingService_MigrateRatingFromMongoDb_Handler,
		},
		{
			MethodName: "MigrateRatingAgainFromMongoDb",
			Handler:    _RatingService_MigrateRatingAgainFromMongoDb_Handler,
		},
		{
			MethodName: "MigrateRatingMerchantScoreFromMongoDb",
			Handler:    _RatingService_MigrateRatingMerchantScoreFromMongoDb_Handler,
		},
		{
			MethodName: "CronUpdateData",
			Handler:    _RatingService_CronUpdateData_Handler,
		},
		{
			MethodName: "LikeUnLike",
			Handler:    _RatingService_LikeUnLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rating/rating.proto",
}

func (m *RestResponseWithData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestResponseWithData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RestResponseNonData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestResponseNonData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorStatus {
		dAtA[i] = 0x8
		i++
		if m.ErrorStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RatingComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatingComment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if len(m.CommentDescription) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.CommentDescription)))
		i += copy(dAtA[i:], m.CommentDescription)
	}
	if m.CreateAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.CreateAt))
	}
	if m.MerchantId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RatingContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatingContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RatingId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if len(m.RatingDescription) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingDescription)))
		i += copy(dAtA[i:], m.RatingDescription)
	}
	if m.Star != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Star))
	}
	if m.Score != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Score))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.RatingOption) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingOption)))
		i += copy(dAtA[i:], m.RatingOption)
	}
	if m.CreateAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.CreateAt))
	}
	if m.LikeCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.LikeCount))
	}
	if m.TotalComment != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.TotalComment))
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ReviewComments) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ReviewComments)))
		i += copy(dAtA[i:], m.ReviewComments)
	}
	if m.IsRatingAgain != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.IsRatingAgain))
	}
	if m.Rc != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Rc))
	}
	if m.IsLike {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.IsLike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MerchantId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if m.NotValidate != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.NotValidate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataGetRatingByProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGetRatingByProduct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Count))
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if len(m.Ratings) > 0 {
		for _, msg := range m.Ratings {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataGetComments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGetComments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Total))
	}
	if m.RatingId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingId))
	}
	if m.MerchantId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataGetRatingByMerchant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGetRatingByMerchant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Count))
	}
	if m.MerchantId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if len(m.Ratings) > 0 {
		for _, msg := range m.Ratings {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataGetRatingByOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGetRatingByOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Count))
	}
	if m.OrderId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.OrderId))
	}
	if len(m.Ratings) > 0 {
		for _, msg := range m.Ratings {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataGetRatingImageByProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGetRatingImageByProduct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Count))
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if len(m.ImageArray) > 0 {
		for _, msg := range m.ImageArray {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ImageRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRating) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if len(m.ImageUrls) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ImageUrls)))
		i += copy(dAtA[i:], m.ImageUrls)
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataGetRatingImageByMerchant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGetRatingImageByMerchant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Count))
	}
	if m.MerchantId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataGetRatingCommentByRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGetRatingCommentByRating) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Count))
	}
	if m.RatingId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingId))
	}
	if len(m.CommentId) > 0 {
		for _, s := range m.CommentId {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RatingInfoContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatingInfoContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Star_1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Star_1))
	}
	if m.Star_2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Star_2))
	}
	if m.Star_3 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Star_3))
	}
	if m.Star_4 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Star_4))
	}
	if m.Star_5 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Star_5))
	}
	if m.TotalStar != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.TotalStar))
	}
	if m.TotalRate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.TotalRate))
	}
	if m.RatePercent != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RatePercent))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FilterSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterSubject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NameFilter) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.NameFilter)))
		i += copy(dAtA[i:], m.NameFilter)
	}
	if len(m.DataFilter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.DataFilter)))
		i += copy(dAtA[i:], m.DataFilter)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RatingContentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatingContentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if m.Star != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Star))
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Score))
	}
	if len(m.RatingDescription) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingDescription)))
		i += copy(dAtA[i:], m.RatingDescription)
	}
	if len(m.RatingOption) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingOption)))
		i += copy(dAtA[i:], m.RatingOption)
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RatingContentUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatingContentUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Id))
	}
	if m.Star != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Star))
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Score))
	}
	if len(m.RatingDescription) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingDescription)))
		i += copy(dAtA[i:], m.RatingDescription)
	}
	if len(m.RatingOption) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingOption)))
		i += copy(dAtA[i:], m.RatingOption)
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductInfoRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductInfoRating) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.ProductUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ProductUrl)))
		i += copy(dAtA[i:], m.ProductUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddRatingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRatingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.IncrementId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if m.MerchantId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.RatingSource != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingSource))
	}
	if len(m.RatingContents) > 0 {
		for _, msg := range m.RatingContents {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FptId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.FptId))
	}
	if len(m.RatingOwnerName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingOwnerName)))
		i += copy(dAtA[i:], m.RatingOwnerName)
	}
	if len(m.ProductInfo) > 0 {
		for _, msg := range m.ProductInfo {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddRatingAgainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRatingAgainRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.IncrementId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if m.RatingSource != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingSource))
	}
	if len(m.RatingContents) > 0 {
		for _, msg := range m.RatingContents {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FptId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.FptId))
	}
	if len(m.RatingOwnerName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingOwnerName)))
		i += copy(dAtA[i:], m.RatingOwnerName)
	}
	if len(m.ProductInfo) > 0 {
		for _, msg := range m.ProductInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateRatingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRatingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.IncrementId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if m.RatingSource != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingSource))
	}
	if len(m.RatingContents) > 0 {
		for _, msg := range m.RatingContents {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FptId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.FptId))
	}
	if len(m.RatingOwnerName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.RatingOwnerName)))
		i += copy(dAtA[i:], m.RatingOwnerName)
	}
	if len(m.ProductInfo) > 0 {
		for _, msg := range m.ProductInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteRatingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRatingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.IncrementId))
	}
	if m.RatingSource != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingSource))
	}
	if len(m.RatingContents) > 0 {
		for _, msg := range m.RatingContents {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Offset))
	}
	if len(m.Sort) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.Sort)))
		i += copy(dAtA[i:], m.Sort)
	}
	if len(m.Filters) > 0 {
		for _, msg := range m.Filters {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingImagesByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingImagesByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingByMerchantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingByMerchantRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingImagesByMerchantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingImagesByMerchantRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingByOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingByOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.IncrementId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingInfoByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingInfoByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingInfoByMerchantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingInfoByMerchantRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingCommentByRatingIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingCommentByRatingIdRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RatingId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MigrateRatingFromMongoDbRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrateRatingFromMongoDbRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeMigrate != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.TypeMigrate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MigrateRatingAgainFromMongoDbRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrateRatingAgainFromMongoDbRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartDate != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.EndDate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CronUpdateDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronUpdateDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeCron != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.TypeCron))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LikeDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeLike != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.TypeLike))
	}
	if m.RatingId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.FptId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.FptId))
	}
	if len(m.ProductUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ProductUrl)))
		i += copy(dAtA[i:], m.ProductUrl)
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if m.IsShop {
		dAtA[i] = 0x48
		i++
		if m.IsShop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentDescription) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.CommentDescription)))
		i += copy(dAtA[i:], m.CommentDescription)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if m.RatingId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingId))
	}
	if m.MerchantId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if len(m.ProductUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ProductUrl)))
		i += copy(dAtA[i:], m.ProductUrl)
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if m.FptId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.FptId))
	}
	if len(m.CommentAuthorName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.CommentAuthorName)))
		i += copy(dAtA[i:], m.CommentAuthorName)
	}
	if m.IsShop {
		dAtA[i] = 0x50
		i++
		if m.IsShop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.UserId))
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCommentByAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentByAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n3, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCommentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n5, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n6, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingImagesByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingImagesByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n7, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingByMerchantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingByMerchantResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n9, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n10, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingImagesByMerchantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingImagesByMerchantResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n12, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingByOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingByOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n13, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n14, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingInfoByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingInfoByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n15, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n16, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingInfoByProductResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingInfoByProductResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if m.RatingInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingInfo.Size()))
		n17, err := m.RatingInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingInfoByMerchantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingInfoByMerchantResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n18, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n19, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRatingInfoByMerchantResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRatingInfoByMerchantResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.MerchantId))
	}
	if m.RatingInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.RatingInfo.Size()))
		n20, err := m.RatingInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAppResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Total))
	}
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRating(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataGetCommentByRatingId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGetCommentByRatingId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Status.Size()))
		n21, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.Data.Size()))
		n22, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRating(dAtA, i, uint64(m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRating(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RestResponseWithData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovRating(uint64(m.StatusCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RestResponseNonData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorStatus {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RatingComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	l = len(m.CommentDescription)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovRating(uint64(m.CreateAt))
	}
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RatingContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RatingId != 0 {
		n += 1 + sovRating(uint64(m.RatingId))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	l = len(m.RatingDescription)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovRating(uint64(m.Star))
	}
	if m.Score != 0 {
		n += 1 + sovRating(uint64(m.Score))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.RatingOption)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovRating(uint64(m.CreateAt))
	}
	if m.LikeCount != 0 {
		n += 1 + sovRating(uint64(m.LikeCount))
	}
	if m.TotalComment != 0 {
		n += 1 + sovRating(uint64(m.TotalComment))
	}
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovRating(uint64(l))
		}
	}
	l = len(m.ReviewComments)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.IsRatingAgain != 0 {
		n += 1 + sovRating(uint64(m.IsRatingAgain))
	}
	if m.Rc != 0 {
		n += 1 + sovRating(uint64(m.Rc))
	}
	if m.IsLike {
		n += 3
	}
	if m.MerchantId != 0 {
		n += 2 + sovRating(uint64(m.MerchantId))
	}
	if m.NotValidate != 0 {
		n += 2 + sovRating(uint64(m.NotValidate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataGetRatingByProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRating(uint64(m.Count))
	}
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if len(m.Ratings) > 0 {
		for _, e := range m.Ratings {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataGetComments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovRating(uint64(m.Total))
	}
	if m.RatingId != 0 {
		n += 1 + sovRating(uint64(m.RatingId))
	}
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataGetRatingByMerchant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRating(uint64(m.Count))
	}
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	if len(m.Ratings) > 0 {
		for _, e := range m.Ratings {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataGetRatingByOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRating(uint64(m.Count))
	}
	if m.OrderId != 0 {
		n += 1 + sovRating(uint64(m.OrderId))
	}
	if len(m.Ratings) > 0 {
		for _, e := range m.Ratings {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataGetRatingImageByProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRating(uint64(m.Count))
	}
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if len(m.ImageArray) > 0 {
		for _, e := range m.ImageArray {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRating(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	l = len(m.ImageUrls)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovRating(uint64(m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataGetRatingImageByMerchant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRating(uint64(m.Count))
	}
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataGetRatingCommentByRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRating(uint64(m.Count))
	}
	if m.RatingId != 0 {
		n += 1 + sovRating(uint64(m.RatingId))
	}
	if len(m.CommentId) > 0 {
		for _, s := range m.CommentId {
			l = len(s)
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RatingInfoContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Star_1 != 0 {
		n += 1 + sovRating(uint64(m.Star_1))
	}
	if m.Star_2 != 0 {
		n += 1 + sovRating(uint64(m.Star_2))
	}
	if m.Star_3 != 0 {
		n += 1 + sovRating(uint64(m.Star_3))
	}
	if m.Star_4 != 0 {
		n += 1 + sovRating(uint64(m.Star_4))
	}
	if m.Star_5 != 0 {
		n += 1 + sovRating(uint64(m.Star_5))
	}
	if m.TotalStar != 0 {
		n += 1 + sovRating(uint64(m.TotalStar))
	}
	if m.TotalRate != 0 {
		n += 1 + sovRating(uint64(m.TotalRate))
	}
	if m.RatePercent != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FilterSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NameFilter)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.DataFilter)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RatingContentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if m.Star != 0 {
		n += 1 + sovRating(uint64(m.Star))
	}
	if m.Score != 0 {
		n += 1 + sovRating(uint64(m.Score))
	}
	l = len(m.RatingDescription)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.RatingOption)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RatingContentUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRating(uint64(m.Id))
	}
	if m.Star != 0 {
		n += 1 + sovRating(uint64(m.Star))
	}
	if m.Score != 0 {
		n += 1 + sovRating(uint64(m.Score))
	}
	l = len(m.RatingDescription)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.RatingOption)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductInfoRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.ProductUrl)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRatingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncrementId != 0 {
		n += 1 + sovRating(uint64(m.IncrementId))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.RatingSource != 0 {
		n += 1 + sovRating(uint64(m.RatingSource))
	}
	if len(m.RatingContents) > 0 {
		for _, e := range m.RatingContents {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.FptId != 0 {
		n += 1 + sovRating(uint64(m.FptId))
	}
	l = len(m.RatingOwnerName)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if len(m.ProductInfo) > 0 {
		for _, e := range m.ProductInfo {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRatingAgainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncrementId != 0 {
		n += 1 + sovRating(uint64(m.IncrementId))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	if m.RatingSource != 0 {
		n += 1 + sovRating(uint64(m.RatingSource))
	}
	if len(m.RatingContents) > 0 {
		for _, e := range m.RatingContents {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.FptId != 0 {
		n += 1 + sovRating(uint64(m.FptId))
	}
	l = len(m.RatingOwnerName)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if len(m.ProductInfo) > 0 {
		for _, e := range m.ProductInfo {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRatingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncrementId != 0 {
		n += 1 + sovRating(uint64(m.IncrementId))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	if m.RatingSource != 0 {
		n += 1 + sovRating(uint64(m.RatingSource))
	}
	if len(m.RatingContents) > 0 {
		for _, e := range m.RatingContents {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.FptId != 0 {
		n += 1 + sovRating(uint64(m.FptId))
	}
	l = len(m.RatingOwnerName)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if len(m.ProductInfo) > 0 {
		for _, e := range m.ProductInfo {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRatingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncrementId != 0 {
		n += 1 + sovRating(uint64(m.IncrementId))
	}
	if m.RatingSource != 0 {
		n += 1 + sovRating(uint64(m.RatingSource))
	}
	if len(m.RatingContents) > 0 {
		for _, e := range m.RatingContents {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovRating(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovRating(uint64(m.Offset))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingImagesByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if m.Limit != 0 {
		n += 1 + sovRating(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovRating(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingByMerchantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovRating(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovRating(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingImagesByMerchantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	if m.Limit != 0 {
		n += 1 + sovRating(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovRating(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingByOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncrementId != 0 {
		n += 1 + sovRating(uint64(m.IncrementId))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovRating(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovRating(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingInfoByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingInfoByMerchantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingCommentByRatingIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RatingId != 0 {
		n += 1 + sovRating(uint64(m.RatingId))
	}
	if m.Limit != 0 {
		n += 1 + sovRating(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovRating(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MigrateRatingFromMongoDbRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMigrate != 0 {
		n += 1 + sovRating(uint64(m.TypeMigrate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MigrateRatingAgainFromMongoDbRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != 0 {
		n += 1 + sovRating(uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		n += 1 + sovRating(uint64(m.EndDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CronUpdateDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeCron != 0 {
		n += 1 + sovRating(uint64(m.TypeCron))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeLike != 0 {
		n += 1 + sovRating(uint64(m.TypeLike))
	}
	if m.RatingId != 0 {
		n += 1 + sovRating(uint64(m.RatingId))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.FptId != 0 {
		n += 1 + sovRating(uint64(m.FptId))
	}
	l = len(m.ProductUrl)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.IsShop {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommentDescription)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	if m.RatingId != 0 {
		n += 1 + sovRating(uint64(m.RatingId))
	}
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.ProductUrl)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.FptId != 0 {
		n += 1 + sovRating(uint64(m.FptId))
	}
	l = len(m.CommentAuthorName)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.IsShop {
		n += 2
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovRating(uint64(m.UserId))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCommentByAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCommentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingImagesByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingByMerchantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingImagesByMerchantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingByOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingInfoByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingInfoByProductResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if m.RatingInfo != nil {
		l = m.RatingInfo.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingInfoByMerchantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRatingInfoByMerchantResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantId != 0 {
		n += 1 + sovRating(uint64(m.MerchantId))
	}
	if m.RatingInfo != nil {
		l = m.RatingInfo.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovRating(uint64(m.Total))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovRating(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataGetCommentByRatingId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRating(uint64(l))
	}
	if m.ProductId != 0 {
		n += 1 + sovRating(uint64(m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRating(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRating(x uint64) (n int) {
	return sovRating(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RestResponseWithData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestResponseWithData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestResponseWithData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestResponseNonData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestResponseNonData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestResponseNonData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorStatus = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatingComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatingComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatingComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatingContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatingContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatingContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingId", wireType)
			}
			m.RatingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalComment", wireType)
			}
			m.TotalComment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalComment |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewComments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewComments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRatingAgain", wireType)
			}
			m.IsRatingAgain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRatingAgain |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rc", wireType)
			}
			m.Rc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rc |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLike = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotValidate", wireType)
			}
			m.NotValidate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotValidate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGetRatingByProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGetRatingByProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGetRatingByProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ratings = append(m.Ratings, &RatingContent{})
			if err := m.Ratings[len(m.Ratings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGetComments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGetComments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGetComments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingId", wireType)
			}
			m.RatingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &RatingComment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGetRatingByMerchant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGetRatingByMerchant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGetRatingByMerchant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ratings = append(m.Ratings, &RatingContent{})
			if err := m.Ratings[len(m.Ratings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGetRatingByOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGetRatingByOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGetRatingByOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ratings = append(m.Ratings, &RatingContent{})
			if err := m.Ratings[len(m.Ratings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGetRatingImageByProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGetRatingImageByProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGetRatingImageByProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageArray = append(m.ImageArray, &ImageRating{})
			if err := m.ImageArray[len(m.ImageArray)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGetRatingImageByMerchant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGetRatingImageByMerchant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGetRatingImageByMerchant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGetRatingCommentByRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGetRatingCommentByRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGetRatingCommentByRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingId", wireType)
			}
			m.RatingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = append(m.CommentId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatingInfoContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatingInfoContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatingInfoContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star_1", wireType)
			}
			m.Star_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star_1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star_2", wireType)
			}
			m.Star_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star_2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star_3", wireType)
			}
			m.Star_3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star_3 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star_4", wireType)
			}
			m.Star_4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star_4 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star_5", wireType)
			}
			m.Star_5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star_5 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStar", wireType)
			}
			m.TotalStar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStar |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRate", wireType)
			}
			m.TotalRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatePercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RatePercent = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatingContentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatingContentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatingContentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatingContentUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatingContentUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatingContentUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductInfoRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductInfoRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductInfoRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRatingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRatingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRatingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementId", wireType)
			}
			m.IncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingSource", wireType)
			}
			m.RatingSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingSource |= (RatingSource(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingContents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingContents = append(m.RatingContents, &RatingContentRequest{})
			if err := m.RatingContents[len(m.RatingContents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FptId", wireType)
			}
			m.FptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FptId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingOwnerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingOwnerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductInfo = append(m.ProductInfo, &ProductInfoRating{})
			if err := m.ProductInfo[len(m.ProductInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRatingAgainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRatingAgainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRatingAgainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementId", wireType)
			}
			m.IncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingSource", wireType)
			}
			m.RatingSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingSource |= (RatingSource(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingContents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingContents = append(m.RatingContents, &RatingContentUpdateRequest{})
			if err := m.RatingContents[len(m.RatingContents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FptId", wireType)
			}
			m.FptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FptId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingOwnerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingOwnerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductInfo = append(m.ProductInfo, &ProductInfoRating{})
			if err := m.ProductInfo[len(m.ProductInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRatingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRatingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRatingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementId", wireType)
			}
			m.IncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingSource", wireType)
			}
			m.RatingSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingSource |= (RatingSource(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingContents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingContents = append(m.RatingContents, &RatingContentUpdateRequest{})
			if err := m.RatingContents[len(m.RatingContents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FptId", wireType)
			}
			m.FptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FptId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingOwnerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingOwnerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductInfo = append(m.ProductInfo, &ProductInfoRating{})
			if err := m.ProductInfo[len(m.ProductInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRatingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRatingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRatingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementId", wireType)
			}
			m.IncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingSource", wireType)
			}
			m.RatingSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingSource |= (RatingSource(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingContents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingContents = append(m.RatingContents, &RatingContentUpdateRequest{})
			if err := m.RatingContents[len(m.RatingContents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &FilterSubject{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingImagesByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingImagesByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingImagesByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingByMerchantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingByMerchantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingByMerchantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingImagesByMerchantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingImagesByMerchantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingImagesByMerchantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingByOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingByOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingByOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementId", wireType)
			}
			m.IncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingInfoByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingInfoByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingInfoByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingInfoByMerchantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingInfoByMerchantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingInfoByMerchantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingCommentByRatingIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingCommentByRatingIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingCommentByRatingIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingId", wireType)
			}
			m.RatingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MigrateRatingFromMongoDbRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigrateRatingFromMongoDbRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigrateRatingFromMongoDbRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMigrate", wireType)
			}
			m.TypeMigrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeMigrate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MigrateRatingAgainFromMongoDbRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigrateRatingAgainFromMongoDbRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigrateRatingAgainFromMongoDbRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronUpdateDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronUpdateDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronUpdateDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeCron", wireType)
			}
			m.TypeCron = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeCron |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeLike", wireType)
			}
			m.TypeLike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeLike |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingId", wireType)
			}
			m.RatingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FptId", wireType)
			}
			m.FptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FptId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShop = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingId", wireType)
			}
			m.RatingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FptId", wireType)
			}
			m.FptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FptId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentAuthorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentAuthorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShop = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentByAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentByAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentByAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RatingComment{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataGetRatingByProduct{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataGetComments{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingImagesByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingImagesByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingImagesByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataGetRatingImageByProduct{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingByMerchantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingByMerchantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingByMerchantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataGetRatingByMerchant{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingImagesByMerchantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingImagesByMerchantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingImagesByMerchantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataGetRatingImageByMerchant{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingByOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingByOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingByOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataGetRatingByOrder{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingInfoByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingInfoByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingInfoByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &GetRatingInfoByProductResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingInfoByProductResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RatingInfo == nil {
				m.RatingInfo = &RatingInfoContent{}
			}
			if err := m.RatingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingInfoByMerchantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRatingInfoByMerchantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRatingInfoByMerchantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &GetRatingInfoByMerchantResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRatingInfoByMerchantResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RatingInfo == nil {
				m.RatingInfo = &RatingInfoContent{}
			}
			if err := m.RatingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &base.Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGetCommentByRatingId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGetCommentByRatingId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGetCommentByRatingId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestResponseWithData{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRating
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataGetComments{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRating(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRating
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRating
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRating
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRating
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRating
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRating(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRating = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRating   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rating/rating.proto", fileDescriptor_rating_aab4f5f207432c17) }

var fileDescriptor_rating_aab4f5f207432c17 = []byte{
	// 2566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xdb, 0x6f, 0x1c, 0x57,
	0x19, 0xef, 0xec, 0x78, 0x6d, 0xef, 0xb7, 0xbe, 0x1e, 0x3b, 0xc9, 0x74, 0xe3, 0x38, 0xdb, 0x43,
	0x2e, 0x4e, 0x9a, 0x78, 0x1d, 0xe7, 0xa2, 0x16, 0xd1, 0x16, 0x3b, 0x49, 0x43, 0x50, 0xdc, 0x46,
	0xe3, 0x56, 0x15, 0x3c, 0xb0, 0x1a, 0xef, 0x1c, 0x6f, 0x86, 0xec, 0xce, 0x6c, 0x67, 0x66, 0x53,
	0x59, 0xc6, 0x08, 0x90, 0x28, 0xaa, 0x40, 0xaa, 0x04, 0x0f, 0x11, 0x12, 0x0f, 0xa8, 0x7d, 0xa8,
	0x00, 0xc1, 0x0b, 0x42, 0x48, 0xc0, 0x1f, 0xd0, 0x07, 0x1e, 0x90, 0x10, 0xbc, 0x21, 0xa1, 0x88,
	0x77, 0xfe, 0x05, 0x74, 0x2e, 0x33, 0x7b, 0xce, 0x5c, 0xf6, 0x92, 0x6c, 0xb9, 0x48, 0xbc, 0xd8,
	0x7b, 0xbe, 0x39, 0x97, 0xdf, 0xf9, 0x7d, 0xdf, 0xf9, 0xbe, 0xef, 0x7c, 0x33, 0xb0, 0xe4, 0x5b,
	0xa1, 0xe3, 0x36, 0x6b, 0xfc, 0xdf, 0x7a, 0xc7, 0xf7, 0x42, 0x0f, 0x2d, 0x05, 0xc4, 0xb5, 0xbd,
	0xf5, 0x47, 0x57, 0xd6, 0xad, 0x8e, 0xb3, 0xce, 0x1f, 0x55, 0x56, 0x9a, 0x9e, 0xd7, 0x6c, 0x91,
	0x9a, 0xd5, 0x71, 0x6a, 0x96, 0xeb, 0x7a, 0xa1, 0x15, 0x3a, 0x9e, 0x1b, 0xf0, 0x21, 0x95, 0xf9,
	0x3d, 0x2b, 0x20, 0x35, 0xfa, 0x87, 0x0b, 0xb0, 0x09, 0xcb, 0x26, 0x09, 0x42, 0x93, 0x04, 0x1d,
	0xcf, 0x0d, 0xc8, 0x3b, 0x4e, 0xf8, 0xe0, 0x96, 0x15, 0x5a, 0xa8, 0x0a, 0xe5, 0x20, 0xb4, 0xc2,
	0x6e, 0x50, 0x6f, 0x78, 0x36, 0x31, 0xb4, 0xaa, 0xb6, 0xa6, 0x9b, 0xb2, 0x08, 0x19, 0x30, 0xd5,
	0x26, 0x41, 0x60, 0x35, 0x89, 0x51, 0xa8, 0x6a, 0x6b, 0x25, 0x33, 0x6a, 0xe2, 0x3a, 0x2c, 0xc9,
	0x73, 0xbe, 0xe1, 0xb9, 0x6c, 0x4a, 0x0c, 0x33, 0xc4, 0xf7, 0x3d, 0xbf, 0xce, 0x67, 0x61, 0x73,
	0x4e, 0x9b, 0x8a, 0x0c, 0x9d, 0x81, 0x59, 0xde, 0x56, 0xa7, 0x56, 0x85, 0xf8, 0xf7, 0x1a, 0xcc,
	0x9a, 0x6c, 0xbb, 0x37, 0xbd, 0x76, 0x9b, 0xb8, 0x21, 0x5a, 0x05, 0x68, 0xf0, 0x9f, 0x75, 0xc7,
	0x66, 0x33, 0x97, 0x4c, 0x49, 0x42, 0xc1, 0x76, 0x03, 0xe2, 0xd3, 0x87, 0x05, 0xb6, 0x95, 0xa8,
	0x89, 0x36, 0x60, 0x29, 0xea, 0x67, 0x93, 0xa0, 0xe1, 0x3b, 0x1d, 0xca, 0x97, 0xa1, 0xb3, 0x29,
	0xb2, 0x1e, 0xa1, 0x15, 0x28, 0x35, 0x7c, 0x62, 0x85, 0xa4, 0x6e, 0x85, 0xc6, 0x04, 0x9b, 0xad,
	0x27, 0xa0, 0xc4, 0xb5, 0x89, 0xdf, 0x78, 0x60, 0x71, 0x28, 0x45, 0x4e, 0x9c, 0x24, 0xc2, 0x9f,
	0x4e, 0xf4, 0xd0, 0xbb, 0x21, 0x45, 0xbf, 0x02, 0x25, 0xae, 0xbd, 0x08, 0xbc, 0x6e, 0xf6, 0x04,
	0x7d, 0xb0, 0x5f, 0x06, 0x24, 0xba, 0xa5, 0xa1, 0x2f, 0xf2, 0x27, 0xb7, 0x24, 0xe0, 0x08, 0x26,
	0x82, 0xd0, 0xf2, 0x05, 0x66, 0xf6, 0x1b, 0x2d, 0x43, 0x31, 0x68, 0x78, 0x3e, 0x11, 0x40, 0x79,
	0x83, 0x2e, 0x69, 0xd9, 0xb6, 0x4f, 0x82, 0xc0, 0x98, 0xe4, 0xba, 0x15, 0x4d, 0xaa, 0x20, 0xb1,
	0xa4, 0xc7, 0x57, 0x9b, 0xe2, 0x0a, 0x52, 0x84, 0x2a, 0x45, 0xd3, 0x49, 0x8a, 0x56, 0x01, 0x5a,
	0xce, 0x43, 0x52, 0x6f, 0x78, 0x5d, 0x37, 0x34, 0x4a, 0xec, 0xb1, 0x24, 0xa1, 0x6b, 0x84, 0x5e,
	0x68, 0xb5, 0xea, 0x82, 0x7d, 0x03, 0x58, 0x17, 0x55, 0x48, 0x67, 0xe9, 0xf8, 0x9e, 0xdd, 0x6d,
	0x30, 0x9e, 0xcb, 0x7c, 0x96, 0x9e, 0x84, 0x3e, 0x77, 0xda, 0x56, 0x93, 0xd4, 0xbb, 0x7e, 0x2b,
	0x30, 0x66, 0xaa, 0x3a, 0x35, 0x89, 0x9e, 0x04, 0xad, 0xc1, 0xbc, 0x4f, 0x1e, 0x39, 0xe4, 0xbd,
	0x68, 0xc6, 0xc0, 0x98, 0x65, 0x7b, 0x49, 0x8a, 0x69, 0x4f, 0x27, 0xa8, 0x8b, 0x1d, 0x5a, 0x4d,
	0xcb, 0x71, 0x8d, 0x39, 0xb6, 0x5c, 0x52, 0x8c, 0xe6, 0xa0, 0xe0, 0x37, 0x8c, 0x79, 0xf6, 0xb0,
	0xe0, 0x37, 0x28, 0x8f, 0x4e, 0x50, 0xa7, 0x5b, 0x33, 0x16, 0x98, 0xb5, 0x47, 0xcd, 0xa4, 0x99,
	0x2c, 0xa6, 0xcc, 0x84, 0x1e, 0x17, 0xd7, 0x0b, 0xeb, 0x8f, 0xac, 0x96, 0x63, 0x5b, 0x21, 0x31,
	0x10, 0xeb, 0xa2, 0xc8, 0xf0, 0x0f, 0x34, 0x38, 0x4e, 0xcf, 0xd6, 0x1d, 0x12, 0x72, 0x8b, 0xda,
	0x3e, 0xb8, 0xcf, 0x19, 0xa0, 0x8a, 0xe5, 0xfc, 0x72, 0x7b, 0xe2, 0x8d, 0x04, 0x69, 0x85, 0x14,
	0x69, 0x5f, 0x80, 0x29, 0xbe, 0xa1, 0xc0, 0xd0, 0xab, 0xfa, 0x5a, 0x79, 0x13, 0xaf, 0x67, 0x38,
	0x99, 0x75, 0xc5, 0x7c, 0xcd, 0x68, 0x08, 0xfe, 0x44, 0x83, 0x79, 0x01, 0xe7, 0x66, 0x44, 0xde,
	0x32, 0x14, 0x99, 0xde, 0x22, 0x1c, 0xac, 0xa1, 0x5a, 0x7c, 0x21, 0x69, 0xf1, 0x09, 0x72, 0xf4,
	0x34, 0x39, 0xaf, 0xc2, 0x74, 0xac, 0xb5, 0x89, 0x21, 0x80, 0xb2, 0xae, 0x66, 0x3c, 0x06, 0x7f,
	0xa8, 0xc1, 0x89, 0x04, 0x71, 0x3b, 0x62, 0xfa, 0x1c, 0xe6, 0x12, 0x98, 0x0a, 0x69, 0x4c, 0xcf,
	0xc6, 0xdd, 0xfb, 0x1a, 0x2c, 0x27, 0x10, 0xbd, 0xe9, 0xdb, 0xc4, 0xcf, 0x81, 0x53, 0x81, 0x69,
	0x8f, 0x3e, 0xee, 0x61, 0x89, 0xdb, 0xcf, 0x08, 0xe4, 0xb1, 0x06, 0x27, 0x15, 0x20, 0x77, 0xe9,
	0x99, 0x79, 0x56, 0xc3, 0xda, 0x86, 0x32, 0x3f, 0x7b, 0x96, 0xef, 0x5b, 0x07, 0x02, 0x57, 0x35,
	0x13, 0x17, 0x5b, 0x8f, 0x2f, 0x6d, 0xca, 0x83, 0xf0, 0x01, 0x94, 0xa5, 0x67, 0xf4, 0xb0, 0xc5,
	0xee, 0xb2, 0xd0, 0xd7, 0x4f, 0xaa, 0xae, 0x80, 0xfb, 0x47, 0xd9, 0x15, 0x54, 0xa1, 0x2c, 0xbc,
	0x53, 0xe8, 0xb4, 0x89, 0xf0, 0x8f, 0xb2, 0x08, 0x3f, 0x82, 0x95, 0x2c, 0x4e, 0x9e, 0xd9, 0x66,
	0x92, 0xc8, 0x12, 0x4e, 0x0a, 0xfb, 0x89, 0x75, 0x85, 0x25, 0x6f, 0x1f, 0x08, 0x0e, 0xb2, 0xd7,
	0xed, 0x7f, 0xba, 0xd4, 0x58, 0x29, 0xd6, 0xec, 0x49, 0xf0, 0x3f, 0x35, 0x58, 0x14, 0xbb, 0x74,
	0xf7, 0xbd, 0x28, 0x46, 0x1d, 0x87, 0x49, 0x1a, 0x30, 0xea, 0x57, 0xc4, 0x52, 0xa2, 0x15, 0xcb,
	0x37, 0xc5, 0x42, 0xa2, 0x15, 0xcb, 0xaf, 0x8a, 0xe3, 0x2b, 0x5a, 0xb1, 0xfc, 0x9a, 0xa0, 0x59,
	0xb4, 0x62, 0xf9, 0x75, 0x11, 0x89, 0x44, 0x8b, 0xa2, 0xe5, 0x7e, 0x9f, 0x85, 0xae, 0x49, 0x6e,
	0x58, 0x3d, 0x49, 0xef, 0xb9, 0x4f, 0x9d, 0xe4, 0x94, 0xfc, 0x9c, 0x4a, 0xa8, 0x1b, 0xa5, 0xff,
	0xeb, 0x1d, 0xe2, 0x37, 0x68, 0x2c, 0xa1, 0xd1, 0xa8, 0x60, 0x2a, 0x32, 0xbc, 0x0b, 0xb3, 0xaf,
	0x3b, 0xad, 0x90, 0xf8, 0xbb, 0xdd, 0xbd, 0xaf, 0x93, 0x06, 0x53, 0x9c, 0x6b, 0xb5, 0x49, 0x7d,
	0x9f, 0x49, 0x45, 0x3e, 0x21, 0x8b, 0x68, 0x0f, 0xdb, 0x0a, 0xad, 0xa8, 0x07, 0x4f, 0x53, 0x64,
	0x11, 0xfe, 0xab, 0x06, 0xcb, 0xea, 0x11, 0x23, 0xef, 0x76, 0x49, 0x90, 0x3c, 0x2a, 0x5a, 0xea,
	0xa8, 0x44, 0x61, 0xba, 0x90, 0x15, 0xa6, 0x75, 0x39, 0x4c, 0xaf, 0x67, 0xc6, 0xff, 0x09, 0x86,
	0x25, 0xe3, 0x49, 0x3a, 0x78, 0x17, 0xb3, 0x82, 0xb7, 0x6a, 0x93, 0x93, 0x29, 0x9b, 0xfc, 0xa3,
	0x06, 0x15, 0x65, 0x63, 0x6f, 0x77, 0x68, 0x30, 0x8a, 0xb6, 0x97, 0x3c, 0x96, 0xff, 0xed, 0xdb,
	0x39, 0x80, 0x45, 0xe1, 0xda, 0xa8, 0xb9, 0x8b, 0x73, 0x35, 0x48, 0x47, 0x18, 0x66, 0xa2, 0x16,
	0xb5, 0x0a, 0xa1, 0x7f, 0x45, 0x46, 0x4d, 0x24, 0x6a, 0x77, 0xfd, 0x96, 0x70, 0x3b, 0xb2, 0x08,
	0xff, 0x41, 0x87, 0x85, 0x2d, 0xdb, 0x16, 0xbe, 0x4e, 0xf0, 0x87, 0x61, 0xc6, 0x71, 0x1b, 0x3e,
	0x91, 0x93, 0x59, 0xdd, 0x54, 0x64, 0x7d, 0x5c, 0xdd, 0xe0, 0xd0, 0x29, 0xe5, 0x76, 0x13, 0x6a,
	0x6e, 0x77, 0x27, 0xe6, 0x33, 0xf0, 0xba, 0x7e, 0x83, 0xe7, 0x84, 0x73, 0x9b, 0x2f, 0xf4, 0x89,
	0x1e, 0xbb, 0xac, 0xa3, 0xa9, 0x8e, 0x43, 0xbb, 0x30, 0x2f, 0x04, 0x0d, 0x6e, 0x21, 0x9c, 0xf7,
	0xf2, 0xe6, 0x85, 0x21, 0x02, 0x11, 0xa7, 0xc1, 0x4c, 0xce, 0x40, 0x1d, 0xc4, 0x7e, 0x87, 0x6d,
	0x8a, 0x1f, 0x72, 0xd1, 0x42, 0x97, 0x60, 0x31, 0x52, 0xf8, 0x7b, 0x2e, 0xf1, 0xb9, 0x3e, 0xa6,
	0xe5, 0x1c, 0x58, 0x7a, 0x80, 0xbe, 0xdc, 0x53, 0x9c, 0xe3, 0xee, 0x7b, 0x46, 0x89, 0xe1, 0x3a,
	0x97, 0x89, 0x2b, 0x65, 0x16, 0xa6, 0x32, 0x16, 0x7f, 0x5f, 0x87, 0x63, 0xb1, 0xfa, 0xb6, 0x68,
	0x02, 0x38, 0x1e, 0x1d, 0xa6, 0xf4, 0xa0, 0x3f, 0xa5, 0x1e, 0xbe, 0x92, 0xd6, 0x03, 0x4f, 0x96,
	0x6a, 0x83, 0xf5, 0xa0, 0x1c, 0xea, 0x7e, 0xda, 0x28, 0x0e, 0xd6, 0xc6, 0xe4, 0xb0, 0xda, 0x98,
	0x7a, 0x06, 0x6d, 0x7c, 0xa0, 0xc3, 0x92, 0x00, 0x3d, 0xc6, 0xf3, 0xf4, 0x7f, 0x5d, 0x3c, 0x8d,
	0x2e, 0xfe, 0xa6, 0xc1, 0xd2, 0x2d, 0xd2, 0x22, 0x4f, 0xa3, 0x8b, 0xff, 0x01, 0xc6, 0xf1, 0x5f,
	0x34, 0x78, 0x3e, 0x7d, 0xe7, 0x1a, 0x36, 0xc0, 0xe7, 0x5b, 0xdb, 0x32, 0x14, 0x5b, 0x4e, 0xdb,
	0x09, 0xa3, 0xb8, 0xc8, 0x1a, 0x54, 0xbf, 0xde, 0xfe, 0x7e, 0x40, 0xa2, 0x6a, 0x83, 0x68, 0xb1,
	0xc8, 0xea, 0xf9, 0xa1, 0x08, 0x7b, 0xec, 0x37, 0xcd, 0xfd, 0x79, 0xfe, 0x11, 0xb9, 0xdc, 0xec,
	0xdc, 0x5f, 0x49, 0x77, 0xcc, 0x68, 0x08, 0xf6, 0xe0, 0xb4, 0x9a, 0xe2, 0x06, 0x23, 0x6f, 0x2e,
	0xde, 0x42, 0x21, 0x7b, 0x0b, 0xba, 0xbc, 0x05, 0x7a, 0xeb, 0xa9, 0x64, 0xdc, 0xc1, 0xa2, 0xc5,
	0x12, 0xd1, 0x4c, 0xcb, 0x8c, 0x66, 0xe3, 0xe0, 0x12, 0xfb, 0x50, 0x4d, 0xed, 0x7c, 0x74, 0x34,
	0xa3, 0x6d, 0xfe, 0xbb, 0x1a, 0x9c, 0x48, 0x5e, 0xf7, 0xc6, 0xe3, 0xb5, 0x46, 0xdb, 0xfb, 0x6b,
	0x70, 0xaa, 0xb7, 0x77, 0x77, 0xdf, 0x1b, 0x55, 0xe7, 0x78, 0x1b, 0x56, 0x13, 0x13, 0x8c, 0x4c,
	0x1d, 0xf6, 0xe0, 0x85, 0xbc, 0x5b, 0xce, 0x5d, 0x3b, 0x9a, 0xa6, 0x7f, 0xa1, 0x4c, 0x61, 0xbf,
	0x98, 0xcd, 0x7e, 0x31, 0xde, 0xf5, 0x6d, 0x38, 0xbd, 0xe3, 0x34, 0xfd, 0x38, 0x5e, 0xbc, 0xee,
	0x7b, 0xed, 0x1d, 0xcf, 0x6d, 0x7a, 0xb7, 0xf6, 0x24, 0x25, 0x84, 0x07, 0x1d, 0x52, 0x6f, 0xf3,
	0x7e, 0x91, 0x12, 0x64, 0x19, 0xde, 0x83, 0x33, 0xca, 0x34, 0x2c, 0x0f, 0xc8, 0x98, 0x6b, 0x15,
	0x80, 0xa6, 0xbe, 0x61, 0xdd, 0xee, 0xcd, 0x24, 0x49, 0xe8, 0x85, 0x9e, 0xb8, 0x36, 0x7f, 0x2a,
	0x2e, 0xf4, 0x51, 0x1b, 0x5f, 0x87, 0x63, 0x37, 0x7d, 0xcf, 0xe5, 0x4e, 0x89, 0xde, 0x07, 0x25,
	0x3e, 0x18, 0x98, 0x86, 0xef, 0xb9, 0x11, 0x1f, 0xb1, 0x00, 0xff, 0xb8, 0x00, 0xf3, 0xf7, 0x9c,
	0x87, 0x99, 0x23, 0x58, 0x4d, 0x4a, 0x1e, 0xc1, 0xaa, 0x52, 0xfd, 0x2f, 0x8e, 0x92, 0xbd, 0xe9,
	0xaa, 0xbd, 0x55, 0x60, 0x9a, 0xfe, 0x64, 0x01, 0x86, 0x27, 0x95, 0x71, 0x3b, 0x37, 0x3a, 0x25,
	0xd2, 0xe3, 0xc9, 0x54, 0x7a, 0x9c, 0x4a, 0xb2, 0xa7, 0x32, 0x92, 0xec, 0x15, 0x28, 0xc5, 0xb9,
	0xbc, 0xc8, 0xfa, 0x7a, 0x02, 0x51, 0x7f, 0x0b, 0x1e, 0x78, 0x1d, 0x56, 0x66, 0xe4, 0xf5, 0x37,
	0xda, 0xc4, 0xdf, 0xd3, 0x61, 0x71, 0xcb, 0xb6, 0xa3, 0xca, 0x90, 0x60, 0x27, 0xa7, 0x18, 0xac,
	0xe5, 0x17, 0x83, 0xf3, 0xcf, 0xa0, 0xc2, 0xa5, 0x3e, 0xa0, 0xc4, 0x35, 0x91, 0x59, 0x1a, 0x90,
	0xae, 0xe9, 0xc5, 0x54, 0x49, 0x7b, 0x3c, 0xfc, 0xf5, 0xb4, 0x33, 0xad, 0x68, 0x47, 0x62, 0xc2,
	0xea, 0x86, 0x0f, 0x3c, 0x91, 0x3d, 0x94, 0x54, 0x26, 0xa4, 0x47, 0x32, 0xd7, 0xa0, 0x70, 0xad,
	0xea, 0xa8, 0x9c, 0xd0, 0x11, 0xbe, 0x0f, 0xcb, 0x3c, 0x55, 0x48, 0xe8, 0x42, 0x62, 0x56, 0x4b,
	0x95, 0x73, 0x24, 0x66, 0x0a, 0x49, 0x66, 0xf0, 0x2b, 0x70, 0x52, 0x99, 0x71, 0xfb, 0x60, 0xcb,
	0x6e, 0xf7, 0x92, 0xf3, 0x01, 0xef, 0x0a, 0xf0, 0x87, 0x1a, 0x20, 0xd9, 0x34, 0xf8, 0x5b, 0x0c,
	0xb4, 0xc5, 0x0a, 0x14, 0xd1, 0x8b, 0x8b, 0xdc, 0xbb, 0x4c, 0xc6, 0xcb, 0x14, 0x53, 0x0c, 0x44,
	0x37, 0x60, 0xc2, 0xb6, 0x42, 0x8b, 0x41, 0x1e, 0xae, 0x62, 0xc9, 0xfa, 0xe3, 0x9f, 0xaa, 0x51,
	0x32, 0xf6, 0xce, 0xe3, 0x43, 0xf6, 0x9a, 0x82, 0xec, 0xc5, 0xcc, 0x09, 0xb2, 0x0b, 0xcd, 0x02,
	0xe2, 0x0f, 0x35, 0x58, 0x92, 0xca, 0xbe, 0xe3, 0xc4, 0xf6, 0x92, 0x82, 0xed, 0x4c, 0x3f, 0x6c,
	0xf1, 0xf2, 0x1c, 0xd4, 0x2f, 0xb4, 0x8c, 0xa8, 0xfe, 0x19, 0xb0, 0x77, 0x4b, 0x41, 0xb8, 0x31,
	0x98, 0x3d, 0xb5, 0xa4, 0x2a, 0xd0, 0x7e, 0xa4, 0xc1, 0xc9, 0xcc, 0x5c, 0x68, 0x7c, 0x40, 0xbf,
	0xa8, 0x00, 0xbd, 0x34, 0x8c, 0x9a, 0x63, 0x18, 0x1c, 0xe4, 0x2f, 0x35, 0x29, 0x4e, 0xa7, 0x13,
	0xa5, 0xf1, 0x41, 0xbd, 0xad, 0x40, 0xbd, 0x32, 0x34, 0xa7, 0x09, 0xbc, 0x3f, 0xd1, 0xc0, 0x48,
	0xe7, 0x58, 0xe3, 0x83, 0xf9, 0x8a, 0x02, 0xf3, 0xc2, 0x30, 0x8c, 0x72, 0x0c, 0x1c, 0xde, 0xc7,
	0x85, 0x54, 0xea, 0xf4, 0x19, 0xd8, 0xe7, 0x3d, 0x05, 0xe4, 0x4b, 0x99, 0x13, 0xf4, 0x47, 0xc1,
	0xf6, 0xc0, 0x31, 0x57, 0x3a, 0x30, 0xc1, 0xde, 0xe7, 0x0e, 0xba, 0x09, 0x7c, 0x09, 0xca, 0x51,
	0xbc, 0xa3, 0xf7, 0x49, 0xbe, 0xf8, 0xb9, 0x3e, 0x4e, 0x4f, 0x2a, 0x37, 0x9b, 0xf2, 0x50, 0xfc,
	0x49, 0x41, 0xbe, 0x97, 0x24, 0x12, 0xcc, 0xf1, 0xd1, 0xb4, 0xa3, 0xd0, 0xf4, 0xf2, 0x30, 0x34,
	0x25, 0x61, 0xc8, 0x3c, 0xf9, 0x82, 0xa7, 0xc1, 0xd7, 0x86, 0xf1, 0x31, 0x55, 0xa7, 0x19, 0x5f,
	0x10, 0x6e, 0x75, 0x3a, 0x31, 0x31, 0xca, 0x0b, 0xb8, 0x62, 0xf4, 0x02, 0xee, 0x86, 0xf4, 0x02,
	0xad, 0xc0, 0x2e, 0x8a, 0x15, 0x75, 0x3d, 0xf6, 0x8d, 0x40, 0xfa, 0xc5, 0xd9, 0x6f, 0x35, 0x30,
	0x54, 0x67, 0xdb, 0xcb, 0xd2, 0xff, 0xa3, 0xce, 0x3e, 0x61, 0x8e, 0x7a, 0xd2, 0x1c, 0x2f, 0x6e,
	0xc1, 0x8c, 0x5c, 0x2d, 0x40, 0x53, 0xa0, 0xbf, 0x73, 0x7b, 0x7b, 0xe1, 0x39, 0xfa, 0x63, 0xe7,
	0xcd, 0xed, 0x05, 0x8d, 0x49, 0xb6, 0xee, 0x2f, 0x14, 0x50, 0x19, 0xa6, 0x76, 0x6f, 0xbf, 0xf5,
	0xd6, 0xdd, 0x37, 0xee, 0x2c, 0xe8, 0xa8, 0x04, 0xc5, 0xdb, 0x3b, 0x5b, 0x77, 0xef, 0x2d, 0x4c,
	0x6c, 0x7e, 0x7c, 0x22, 0x7a, 0x73, 0xbf, 0x4b, 0xfc, 0x47, 0x4e, 0x83, 0xa0, 0x77, 0xa1, 0x14,
	0x57, 0x00, 0xd1, 0xd9, 0x4c, 0xb4, 0xc9, 0x02, 0x6f, 0x65, 0x6d, 0x20, 0x2b, 0xe2, 0x8b, 0x09,
	0xbc, 0xf4, 0x9d, 0x3f, 0xff, 0xe3, 0x47, 0x85, 0x59, 0x3c, 0x2d, 0xbe, 0xfb, 0x08, 0x3e, 0xaf,
	0x5d, 0x44, 0xdf, 0xd2, 0x60, 0x4e, 0xad, 0x3a, 0xa2, 0x8b, 0xfd, 0x17, 0x96, 0x4b, 0x93, 0x23,
	0xac, 0x6e, 0xb0, 0xd5, 0x51, 0x65, 0x36, 0x5a, 0xbd, 0x46, 0x13, 0x30, 0x0a, 0xe1, 0xdb, 0x9a,
	0x54, 0xb7, 0x8e, 0x3e, 0xc1, 0x38, 0x97, 0x07, 0x42, 0xcd, 0xeb, 0x2a, 0xe7, 0x07, 0xf6, 0xe3,
	0x30, 0xf0, 0x0a, 0x5b, 0xff, 0x38, 0x5e, 0x8c, 0xd7, 0x8f, 0xac, 0x90, 0x62, 0x38, 0x82, 0x19,
	0xb9, 0xda, 0x87, 0xb2, 0xf7, 0x95, 0x51, 0x10, 0x1c, 0x81, 0x81, 0xe7, 0x19, 0x82, 0xa5, 0xca,
	0x5c, 0x8c, 0xc0, 0xa2, 0x89, 0x24, 0x5d, 0xfe, 0x9b, 0x30, 0x23, 0x17, 0xb8, 0x72, 0x96, 0xcf,
	0xa8, 0x81, 0x8d, 0xb0, 0x7c, 0x85, 0x2d, 0xbf, 0x8c, 0xe7, 0xe3, 0xe5, 0x6d, 0x36, 0x1f, 0x5d,
	0xff, 0xb1, 0x06, 0x28, 0xe3, 0xad, 0xff, 0x7a, 0x7f, 0xa7, 0x95, 0xbc, 0xd9, 0x57, 0x6a, 0x43,
	0xf7, 0x17, 0x4a, 0xa9, 0x32, 0x4c, 0x15, 0x7c, 0x2c, 0x36, 0xc9, 0x26, 0x09, 0xe3, 0x6e, 0x14,
	0xd9, 0x6f, 0xe4, 0xaa, 0x46, 0xe2, 0xdd, 0xf1, 0xb5, 0x01, 0x3e, 0x35, 0xb3, 0xe4, 0x54, 0xb9,
	0x3e, 0xe2, 0x28, 0x01, 0xf5, 0x32, 0x83, 0x7a, 0x1e, 0x9d, 0x8d, 0xe9, 0x63, 0x97, 0x8e, 0xa0,
	0x26, 0x9c, 0x42, 0x50, 0x3b, 0xec, 0xb9, 0x87, 0x23, 0xf4, 0x11, 0xcf, 0x60, 0x53, 0x9f, 0x03,
	0x0c, 0xa4, 0x28, 0x51, 0xeb, 0xa8, 0x6c, 0x0c, 0x3f, 0x40, 0x20, 0x5d, 0x63, 0x48, 0x31, 0xaa,
	0xc6, 0x48, 0xa3, 0xe8, 0x10, 0xd4, 0x0e, 0xa5, 0x40, 0x71, 0x84, 0x7e, 0x27, 0xa7, 0x33, 0xc9,
	0x97, 0xd0, 0x43, 0xf2, 0x94, 0xc4, 0x7b, 0x63, 0xd4, 0x61, 0x02, 0x75, 0x8d, 0xa1, 0xbe, 0x80,
	0xce, 0x27, 0xf9, 0xcd, 0x03, 0xff, 0x58, 0x83, 0x85, 0xd4, 0xe7, 0x0d, 0x97, 0x06, 0xb1, 0x25,
	0x97, 0xc5, 0x2a, 0x97, 0x87, 0xec, 0x2d, 0x20, 0x9e, 0x63, 0x10, 0xab, 0x68, 0x35, 0x86, 0xc8,
	0x3e, 0x92, 0x08, 0x6a, 0x87, 0x72, 0x21, 0xed, 0x08, 0xfd, 0x4a, 0x83, 0xe3, 0xd9, 0x09, 0x10,
	0xda, 0x1c, 0x29, 0x5b, 0xe2, 0x28, 0xaf, 0x3e, 0x45, 0x86, 0x85, 0x5f, 0x64, 0x58, 0xcf, 0xa2,
	0xcf, 0xf5, 0xe8, 0x74, 0xf7, 0xbd, 0x1c, 0x63, 0xfd, 0xb5, 0x72, 0xc8, 0x94, 0x54, 0x04, 0x5d,
	0x1d, 0x2d, 0x71, 0xe1, 0x90, 0xaf, 0x3d, 0x4d, 0xb6, 0x93, 0x75, 0xc4, 0x28, 0xe6, 0x3c, 0x03,
	0xf8, 0xb9, 0x7c, 0x8f, 0x4d, 0xa7, 0x0f, 0x03, 0x0c, 0x31, 0xaf, 0x2a, 0x98, 0x63, 0x14, 0x79,
	0x59, 0x0a, 0x3e, 0xcb, 0x40, 0x9f, 0x46, 0xa7, 0x62, 0xd0, 0x87, 0x71, 0x5d, 0xe6, 0x28, 0x8e,
	0x31, 0xe8, 0x67, 0x1a, 0x54, 0xd4, 0xc2, 0x84, 0x12, 0xee, 0x2e, 0xf4, 0x71, 0xf8, 0x89, 0x88,
	0x37, 0xbc, 0xc7, 0xbf, 0xc1, 0xa0, 0x6d, 0x5c, 0x5c, 0x4f, 0x85, 0xbc, 0xda, 0x61, 0xaf, 0x42,
	0x71, 0xc4, 0x02, 0x71, 0x50, 0x3b, 0x14, 0x05, 0x91, 0x23, 0x44, 0x6f, 0x65, 0x99, 0x25, 0x0f,
	0x05, 0xf2, 0xc6, 0x60, 0xc8, 0x6a, 0xa9, 0x64, 0x04, 0xe4, 0x97, 0x18, 0xf2, 0x73, 0x17, 0xcf,
	0x0c, 0x40, 0xce, 0x02, 0x28, 0xfa, 0x06, 0x18, 0x79, 0xb5, 0xd7, 0x9c, 0x18, 0x31, 0xa0, 0x54,
	0x3b, 0x02, 0xd2, 0xe7, 0xd0, 0xfb, 0x1a, 0x9c, 0xea, 0x5b, 0xb3, 0x45, 0x2f, 0x0f, 0xc6, 0x90,
	0x53, 0xe7, 0x1d, 0x09, 0xc8, 0x07, 0x1a, 0x9c, 0x55, 0x26, 0x8d, 0x0e, 0xd8, 0x6e, 0xc3, 0xf3,
	0xc9, 0xbf, 0x97, 0x94, 0x07, 0x30, 0xa7, 0xd6, 0x98, 0x73, 0xb2, 0xca, 0xcc, 0x42, 0xf4, 0x48,
	0x2b, 0x7d, 0x0d, 0xe0, 0x9e, 0xf3, 0x90, 0xbc, 0xed, 0xd2, 0xbf, 0x28, 0x3b, 0xc5, 0x4f, 0x94,
	0xad, 0x47, 0x99, 0x7f, 0xfb, 0xd5, 0x4f, 0x9f, 0xac, 0x6a, 0x7f, 0x7a, 0xb2, 0xaa, 0xfd, 0xfd,
	0xc9, 0xaa, 0xf6, 0xd5, 0x8d, 0xa6, 0x13, 0xb6, 0xac, 0xbd, 0x68, 0xbc, 0x5b, 0x63, 0xdf, 0x3d,
	0xef, 0x75, 0xf7, 0x6b, 0x8e, 0x1b, 0x12, 0xdf, 0xb5, 0x5a, 0x97, 0xad, 0x8e, 0x13, 0x5c, 0x6e,
	0x7a, 0xc2, 0x72, 0xf7, 0x26, 0x59, 0x8f, 0xab, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xca,
	0x33, 0x84, 0x74, 0x2d, 0x00, 0x00,
}
