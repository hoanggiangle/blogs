// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rating/rating.proto

package rating

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on RestResponseWithData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RestResponseWithData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for StatusCode

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RestResponseWithDataValidationError is the validation error returned by
// RestResponseWithData.Validate if the designated constraints aren't met.
type RestResponseWithDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestResponseWithDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestResponseWithDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestResponseWithDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestResponseWithDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestResponseWithDataValidationError) ErrorName() string {
	return "RestResponseWithDataValidationError"
}

// Error satisfies the builtin error interface
func (e RestResponseWithDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestResponseWithData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestResponseWithDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestResponseWithDataValidationError{}

// Validate checks the field values on RestResponseNonData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RestResponseNonData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ErrorStatus

	// no validation rules for ErrorMessage

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RestResponseNonDataValidationError is the validation error returned by
// RestResponseNonData.Validate if the designated constraints aren't met.
type RestResponseNonDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestResponseNonDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestResponseNonDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestResponseNonDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestResponseNonDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestResponseNonDataValidationError) ErrorName() string {
	return "RestResponseNonDataValidationError"
}

// Error satisfies the builtin error interface
func (e RestResponseNonDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestResponseNonData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestResponseNonDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestResponseNonDataValidationError{}

// Validate checks the field values on RatingComment with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RatingComment) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CommentId

	// no validation rules for UserId

	// no validation rules for CommentDescription

	// no validation rules for CreateAt

	// no validation rules for MerchantId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RatingCommentValidationError is the validation error returned by
// RatingComment.Validate if the designated constraints aren't met.
type RatingCommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingCommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingCommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingCommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingCommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingCommentValidationError) ErrorName() string { return "RatingCommentValidationError" }

// Error satisfies the builtin error interface
func (e RatingCommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRatingComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingCommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingCommentValidationError{}

// Validate checks the field values on RatingContent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RatingContent) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for RatingId

	// no validation rules for UserId

	// no validation rules for RatingDescription

	// no validation rules for Star

	// no validation rules for Score

	// no validation rules for Address

	// no validation rules for RatingOption

	// no validation rules for CreateAt

	// no validation rules for LikeCount

	// no validation rules for TotalComment

	// no validation rules for ProductId

	// no validation rules for ReviewComments

	// no validation rules for IsRatingAgain

	// no validation rules for Rc

	// no validation rules for IsLike

	// no validation rules for MerchantId

	// no validation rules for NotValidate

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RatingContentValidationError is the validation error returned by
// RatingContent.Validate if the designated constraints aren't met.
type RatingContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingContentValidationError) ErrorName() string { return "RatingContentValidationError" }

// Error satisfies the builtin error interface
func (e RatingContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRatingContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingContentValidationError{}

// Validate checks the field values on DataGetRatingByProduct with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataGetRatingByProduct) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Count

	// no validation rules for ProductId

	for idx, item := range m.GetRatings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Ratings[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DataGetRatingByProductValidationError is the validation error returned by
// DataGetRatingByProduct.Validate if the designated constraints aren't met.
type DataGetRatingByProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataGetRatingByProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataGetRatingByProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataGetRatingByProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataGetRatingByProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataGetRatingByProductValidationError) ErrorName() string {
	return "DataGetRatingByProductValidationError"
}

// Error satisfies the builtin error interface
func (e DataGetRatingByProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataGetRatingByProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataGetRatingByProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataGetRatingByProductValidationError{}

// Validate checks the field values on DataGetComments with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DataGetComments) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	// no validation rules for RatingId

	// no validation rules for MerchantId

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Comments[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DataGetCommentsValidationError is the validation error returned by
// DataGetComments.Validate if the designated constraints aren't met.
type DataGetCommentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataGetCommentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataGetCommentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataGetCommentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataGetCommentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataGetCommentsValidationError) ErrorName() string { return "DataGetCommentsValidationError" }

// Error satisfies the builtin error interface
func (e DataGetCommentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataGetComments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataGetCommentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataGetCommentsValidationError{}

// Validate checks the field values on DataGetRatingByMerchant with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataGetRatingByMerchant) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Count

	// no validation rules for MerchantId

	for idx, item := range m.GetRatings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Ratings[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DataGetRatingByMerchantValidationError is the validation error returned by
// DataGetRatingByMerchant.Validate if the designated constraints aren't met.
type DataGetRatingByMerchantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataGetRatingByMerchantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataGetRatingByMerchantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataGetRatingByMerchantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataGetRatingByMerchantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataGetRatingByMerchantValidationError) ErrorName() string {
	return "DataGetRatingByMerchantValidationError"
}

// Error satisfies the builtin error interface
func (e DataGetRatingByMerchantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataGetRatingByMerchant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataGetRatingByMerchantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataGetRatingByMerchantValidationError{}

// Validate checks the field values on DataGetRatingByOrder with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataGetRatingByOrder) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Count

	// no validation rules for OrderId

	for idx, item := range m.GetRatings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Ratings[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DataGetRatingByOrderValidationError is the validation error returned by
// DataGetRatingByOrder.Validate if the designated constraints aren't met.
type DataGetRatingByOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataGetRatingByOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataGetRatingByOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataGetRatingByOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataGetRatingByOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataGetRatingByOrderValidationError) ErrorName() string {
	return "DataGetRatingByOrderValidationError"
}

// Error satisfies the builtin error interface
func (e DataGetRatingByOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataGetRatingByOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataGetRatingByOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataGetRatingByOrderValidationError{}

// Validate checks the field values on DataGetRatingImageByProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataGetRatingImageByProduct) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Count

	// no validation rules for ProductId

	for idx, item := range m.GetImageArray() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ImageArray[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DataGetRatingImageByProductValidationError is the validation error returned
// by DataGetRatingImageByProduct.Validate if the designated constraints
// aren't met.
type DataGetRatingImageByProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataGetRatingImageByProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataGetRatingImageByProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataGetRatingImageByProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataGetRatingImageByProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataGetRatingImageByProductValidationError) ErrorName() string {
	return "DataGetRatingImageByProductValidationError"
}

// Error satisfies the builtin error interface
func (e DataGetRatingImageByProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataGetRatingImageByProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataGetRatingImageByProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataGetRatingImageByProductValidationError{}

// Validate checks the field values on ImageRating with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ImageRating) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ImageUrls

	// no validation rules for CreateTime

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ImageRatingValidationError is the validation error returned by
// ImageRating.Validate if the designated constraints aren't met.
type ImageRatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageRatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageRatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageRatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageRatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageRatingValidationError) ErrorName() string { return "ImageRatingValidationError" }

// Error satisfies the builtin error interface
func (e ImageRatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageRatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageRatingValidationError{}

// Validate checks the field values on DataGetRatingImageByMerchant with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataGetRatingImageByMerchant) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Count

	// no validation rules for MerchantId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DataGetRatingImageByMerchantValidationError is the validation error returned
// by DataGetRatingImageByMerchant.Validate if the designated constraints
// aren't met.
type DataGetRatingImageByMerchantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataGetRatingImageByMerchantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataGetRatingImageByMerchantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataGetRatingImageByMerchantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataGetRatingImageByMerchantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataGetRatingImageByMerchantValidationError) ErrorName() string {
	return "DataGetRatingImageByMerchantValidationError"
}

// Error satisfies the builtin error interface
func (e DataGetRatingImageByMerchantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataGetRatingImageByMerchant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataGetRatingImageByMerchantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataGetRatingImageByMerchantValidationError{}

// Validate checks the field values on DataGetRatingCommentByRating with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataGetRatingCommentByRating) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Count

	// no validation rules for RatingId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DataGetRatingCommentByRatingValidationError is the validation error returned
// by DataGetRatingCommentByRating.Validate if the designated constraints
// aren't met.
type DataGetRatingCommentByRatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataGetRatingCommentByRatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataGetRatingCommentByRatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataGetRatingCommentByRatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataGetRatingCommentByRatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataGetRatingCommentByRatingValidationError) ErrorName() string {
	return "DataGetRatingCommentByRatingValidationError"
}

// Error satisfies the builtin error interface
func (e DataGetRatingCommentByRatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataGetRatingCommentByRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataGetRatingCommentByRatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataGetRatingCommentByRatingValidationError{}

// Validate checks the field values on RatingInfoContent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RatingInfoContent) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Star_1

	// no validation rules for Star_2

	// no validation rules for Star_3

	// no validation rules for Star_4

	// no validation rules for Star_5

	// no validation rules for TotalStar

	// no validation rules for TotalRate

	// no validation rules for RatePercent

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RatingInfoContentValidationError is the validation error returned by
// RatingInfoContent.Validate if the designated constraints aren't met.
type RatingInfoContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingInfoContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingInfoContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingInfoContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingInfoContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingInfoContentValidationError) ErrorName() string {
	return "RatingInfoContentValidationError"
}

// Error satisfies the builtin error interface
func (e RatingInfoContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRatingInfoContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingInfoContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingInfoContentValidationError{}

// Validate checks the field values on FilterSubject with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FilterSubject) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for NameFilter

	// no validation rules for DataFilter

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// FilterSubjectValidationError is the validation error returned by
// FilterSubject.Validate if the designated constraints aren't met.
type FilterSubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterSubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterSubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterSubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterSubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterSubjectValidationError) ErrorName() string { return "FilterSubjectValidationError" }

// Error satisfies the builtin error interface
func (e FilterSubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterSubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterSubjectValidationError{}

// Validate checks the field values on RatingContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RatingContentRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Star

	// no validation rules for Score

	// no validation rules for RatingDescription

	// no validation rules for RatingOption

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RatingContentRequestValidationError is the validation error returned by
// RatingContentRequest.Validate if the designated constraints aren't met.
type RatingContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingContentRequestValidationError) ErrorName() string {
	return "RatingContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RatingContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRatingContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingContentRequestValidationError{}

// Validate checks the field values on RatingContentUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RatingContentUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Star

	// no validation rules for Score

	// no validation rules for RatingDescription

	// no validation rules for RatingOption

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RatingContentUpdateRequestValidationError is the validation error returned
// by RatingContentUpdateRequest.Validate if the designated constraints aren't met.
type RatingContentUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingContentUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingContentUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingContentUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingContentUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingContentUpdateRequestValidationError) ErrorName() string {
	return "RatingContentUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RatingContentUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRatingContentUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingContentUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingContentUpdateRequestValidationError{}

// Validate checks the field values on ProductInfoRating with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductInfoRating) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for ProductName

	// no validation rules for ProductUrl

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductInfoRatingValidationError is the validation error returned by
// ProductInfoRating.Validate if the designated constraints aren't met.
type ProductInfoRatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductInfoRatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductInfoRatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductInfoRatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductInfoRatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductInfoRatingValidationError) ErrorName() string {
	return "ProductInfoRatingValidationError"
}

// Error satisfies the builtin error interface
func (e ProductInfoRatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductInfoRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductInfoRatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductInfoRatingValidationError{}

// Validate checks the field values on AddRatingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddRatingRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IncrementId

	// no validation rules for UserId

	// no validation rules for MerchantId

	// no validation rules for Address

	// no validation rules for RatingSource

	for idx, item := range m.GetRatingContents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("RatingContents[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for FptId

	// no validation rules for RatingOwnerName

	for idx, item := range m.GetProductInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductInfo[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddRatingRequestValidationError is the validation error returned by
// AddRatingRequest.Validate if the designated constraints aren't met.
type AddRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRatingRequestValidationError) ErrorName() string { return "AddRatingRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRatingRequestValidationError{}

// Validate checks the field values on AddRatingAgainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddRatingAgainRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IncrementId

	// no validation rules for UserId

	// no validation rules for RatingSource

	for idx, item := range m.GetRatingContents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("RatingContents[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for FptId

	// no validation rules for RatingOwnerName

	for idx, item := range m.GetProductInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductInfo[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddRatingAgainRequestValidationError is the validation error returned by
// AddRatingAgainRequest.Validate if the designated constraints aren't met.
type AddRatingAgainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRatingAgainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRatingAgainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRatingAgainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRatingAgainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRatingAgainRequestValidationError) ErrorName() string {
	return "AddRatingAgainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRatingAgainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRatingAgainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRatingAgainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRatingAgainRequestValidationError{}

// Validate checks the field values on UpdateRatingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRatingRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IncrementId

	// no validation rules for UserId

	// no validation rules for RatingSource

	for idx, item := range m.GetRatingContents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("RatingContents[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for FptId

	// no validation rules for RatingOwnerName

	for idx, item := range m.GetProductInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductInfo[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateRatingRequestValidationError is the validation error returned by
// UpdateRatingRequest.Validate if the designated constraints aren't met.
type UpdateRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRatingRequestValidationError) ErrorName() string {
	return "UpdateRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRatingRequestValidationError{}

// Validate checks the field values on DeleteRatingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRatingRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IncrementId

	// no validation rules for RatingSource

	for idx, item := range m.GetRatingContents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("RatingContents[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteRatingRequestValidationError is the validation error returned by
// DeleteRatingRequest.Validate if the designated constraints aren't met.
type DeleteRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRatingRequestValidationError) ErrorName() string {
	return "DeleteRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRatingRequestValidationError{}

// Validate checks the field values on GetRatingByProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingByProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for UserId

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for Sort

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Filters[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingByProductRequestValidationError is the validation error returned by
// GetRatingByProductRequest.Validate if the designated constraints aren't met.
type GetRatingByProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingByProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingByProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingByProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingByProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingByProductRequestValidationError) ErrorName() string {
	return "GetRatingByProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingByProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingByProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingByProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingByProductRequestValidationError{}

// Validate checks the field values on GetRatingImagesByProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingImagesByProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingImagesByProductRequestValidationError is the validation error
// returned by GetRatingImagesByProductRequest.Validate if the designated
// constraints aren't met.
type GetRatingImagesByProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingImagesByProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingImagesByProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingImagesByProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingImagesByProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingImagesByProductRequestValidationError) ErrorName() string {
	return "GetRatingImagesByProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingImagesByProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingImagesByProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingImagesByProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingImagesByProductRequestValidationError{}

// Validate checks the field values on GetRatingByMerchantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingByMerchantRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MerchantId

	// no validation rules for UserId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingByMerchantRequestValidationError is the validation error returned
// by GetRatingByMerchantRequest.Validate if the designated constraints aren't met.
type GetRatingByMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingByMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingByMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingByMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingByMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingByMerchantRequestValidationError) ErrorName() string {
	return "GetRatingByMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingByMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingByMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingByMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingByMerchantRequestValidationError{}

// Validate checks the field values on GetRatingImagesByMerchantRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetRatingImagesByMerchantRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MerchantId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingImagesByMerchantRequestValidationError is the validation error
// returned by GetRatingImagesByMerchantRequest.Validate if the designated
// constraints aren't met.
type GetRatingImagesByMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingImagesByMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingImagesByMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingImagesByMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingImagesByMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingImagesByMerchantRequestValidationError) ErrorName() string {
	return "GetRatingImagesByMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingImagesByMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingImagesByMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingImagesByMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingImagesByMerchantRequestValidationError{}

// Validate checks the field values on GetRatingByOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingByOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IncrementId

	// no validation rules for UserId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingByOrderRequestValidationError is the validation error returned by
// GetRatingByOrderRequest.Validate if the designated constraints aren't met.
type GetRatingByOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingByOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingByOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingByOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingByOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingByOrderRequestValidationError) ErrorName() string {
	return "GetRatingByOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingByOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingByOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingByOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingByOrderRequestValidationError{}

// Validate checks the field values on GetRatingInfoByProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingInfoByProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingInfoByProductRequestValidationError is the validation error
// returned by GetRatingInfoByProductRequest.Validate if the designated
// constraints aren't met.
type GetRatingInfoByProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingInfoByProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingInfoByProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingInfoByProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingInfoByProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingInfoByProductRequestValidationError) ErrorName() string {
	return "GetRatingInfoByProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingInfoByProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingInfoByProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingInfoByProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingInfoByProductRequestValidationError{}

// Validate checks the field values on GetRatingInfoByMerchantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingInfoByMerchantRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MerchantId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingInfoByMerchantRequestValidationError is the validation error
// returned by GetRatingInfoByMerchantRequest.Validate if the designated
// constraints aren't met.
type GetRatingInfoByMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingInfoByMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingInfoByMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingInfoByMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingInfoByMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingInfoByMerchantRequestValidationError) ErrorName() string {
	return "GetRatingInfoByMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingInfoByMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingInfoByMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingInfoByMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingInfoByMerchantRequestValidationError{}

// Validate checks the field values on GetRatingCommentByRatingIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetRatingCommentByRatingIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for RatingId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingCommentByRatingIdRequestValidationError is the validation error
// returned by GetRatingCommentByRatingIdRequest.Validate if the designated
// constraints aren't met.
type GetRatingCommentByRatingIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingCommentByRatingIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingCommentByRatingIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingCommentByRatingIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingCommentByRatingIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingCommentByRatingIdRequestValidationError) ErrorName() string {
	return "GetRatingCommentByRatingIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingCommentByRatingIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingCommentByRatingIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingCommentByRatingIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingCommentByRatingIdRequestValidationError{}

// Validate checks the field values on MigrateRatingFromMongoDbRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MigrateRatingFromMongoDbRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for TypeMigrate

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MigrateRatingFromMongoDbRequestValidationError is the validation error
// returned by MigrateRatingFromMongoDbRequest.Validate if the designated
// constraints aren't met.
type MigrateRatingFromMongoDbRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateRatingFromMongoDbRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateRatingFromMongoDbRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateRatingFromMongoDbRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateRatingFromMongoDbRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateRatingFromMongoDbRequestValidationError) ErrorName() string {
	return "MigrateRatingFromMongoDbRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateRatingFromMongoDbRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateRatingFromMongoDbRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateRatingFromMongoDbRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateRatingFromMongoDbRequestValidationError{}

// Validate checks the field values on MigrateRatingAgainFromMongoDbRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *MigrateRatingAgainFromMongoDbRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MigrateRatingAgainFromMongoDbRequestValidationError is the validation error
// returned by MigrateRatingAgainFromMongoDbRequest.Validate if the designated
// constraints aren't met.
type MigrateRatingAgainFromMongoDbRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateRatingAgainFromMongoDbRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateRatingAgainFromMongoDbRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateRatingAgainFromMongoDbRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateRatingAgainFromMongoDbRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateRatingAgainFromMongoDbRequestValidationError) ErrorName() string {
	return "MigrateRatingAgainFromMongoDbRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateRatingAgainFromMongoDbRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateRatingAgainFromMongoDbRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateRatingAgainFromMongoDbRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateRatingAgainFromMongoDbRequestValidationError{}

// Validate checks the field values on CronUpdateDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CronUpdateDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for TypeCron

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CronUpdateDataRequestValidationError is the validation error returned by
// CronUpdateDataRequest.Validate if the designated constraints aren't met.
type CronUpdateDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronUpdateDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronUpdateDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronUpdateDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronUpdateDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronUpdateDataRequestValidationError) ErrorName() string {
	return "CronUpdateDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CronUpdateDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronUpdateDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronUpdateDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronUpdateDataRequestValidationError{}

// Validate checks the field values on LikeDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LikeDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for TypeLike

	// no validation rules for RatingId

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for FptId

	// no validation rules for ProductUrl

	// no validation rules for ProductName

	// no validation rules for ImageUrl

	// no validation rules for IsShop

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// LikeDataRequestValidationError is the validation error returned by
// LikeDataRequest.Validate if the designated constraints aren't met.
type LikeDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeDataRequestValidationError) ErrorName() string { return "LikeDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e LikeDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeDataRequestValidationError{}

// Validate checks the field values on AddCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddCommentRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CommentDescription

	// no validation rules for UserId

	// no validation rules for RatingId

	// no validation rules for MerchantId

	// no validation rules for CommentId

	// no validation rules for ProductUrl

	// no validation rules for ProductName

	// no validation rules for FptId

	// no validation rules for CommentAuthorName

	// no validation rules for IsShop

	// no validation rules for ImageUrl

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddCommentRequestValidationError is the validation error returned by
// AddCommentRequest.Validate if the designated constraints aren't met.
type AddCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRequestValidationError) ErrorName() string {
	return "AddCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCommentRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for UserId

	// no validation rules for CommentId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentByAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCommentByAdminRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CommentId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteCommentByAdminRequestValidationError is the validation error returned
// by DeleteCommentByAdminRequest.Validate if the designated constraints
// aren't met.
type DeleteCommentByAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByAdminRequestValidationError) ErrorName() string {
	return "DeleteCommentByAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByAdminRequestValidationError{}

// Validate checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCommentResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddCommentResponseValidationError is the validation error returned by
// AddCommentResponse.Validate if the designated constraints aren't met.
type AddCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentResponseValidationError) ErrorName() string {
	return "AddCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentResponseValidationError{}

// Validate checks the field values on GetRatingByProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingByProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingByProductResponseValidationError is the validation error returned
// by GetRatingByProductResponse.Validate if the designated constraints aren't met.
type GetRatingByProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingByProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingByProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingByProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingByProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingByProductResponseValidationError) ErrorName() string {
	return "GetRatingByProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingByProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingByProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingByProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingByProductResponseValidationError{}

// Validate checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCommentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCommentsResponseValidationError is the validation error returned by
// GetCommentsResponse.Validate if the designated constraints aren't met.
type GetCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsResponseValidationError) ErrorName() string {
	return "GetCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsResponseValidationError{}

// Validate checks the field values on GetRatingImagesByProductResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetRatingImagesByProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingImagesByProductResponseValidationError is the validation error
// returned by GetRatingImagesByProductResponse.Validate if the designated
// constraints aren't met.
type GetRatingImagesByProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingImagesByProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingImagesByProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingImagesByProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingImagesByProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingImagesByProductResponseValidationError) ErrorName() string {
	return "GetRatingImagesByProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingImagesByProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingImagesByProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingImagesByProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingImagesByProductResponseValidationError{}

// Validate checks the field values on GetRatingByMerchantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingByMerchantResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingByMerchantResponseValidationError is the validation error returned
// by GetRatingByMerchantResponse.Validate if the designated constraints
// aren't met.
type GetRatingByMerchantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingByMerchantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingByMerchantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingByMerchantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingByMerchantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingByMerchantResponseValidationError) ErrorName() string {
	return "GetRatingByMerchantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingByMerchantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingByMerchantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingByMerchantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingByMerchantResponseValidationError{}

// Validate checks the field values on GetRatingImagesByMerchantResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetRatingImagesByMerchantResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingImagesByMerchantResponseValidationError is the validation error
// returned by GetRatingImagesByMerchantResponse.Validate if the designated
// constraints aren't met.
type GetRatingImagesByMerchantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingImagesByMerchantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingImagesByMerchantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingImagesByMerchantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingImagesByMerchantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingImagesByMerchantResponseValidationError) ErrorName() string {
	return "GetRatingImagesByMerchantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingImagesByMerchantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingImagesByMerchantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingImagesByMerchantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingImagesByMerchantResponseValidationError{}

// Validate checks the field values on GetRatingByOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingByOrderResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingByOrderResponseValidationError is the validation error returned by
// GetRatingByOrderResponse.Validate if the designated constraints aren't met.
type GetRatingByOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingByOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingByOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingByOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingByOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingByOrderResponseValidationError) ErrorName() string {
	return "GetRatingByOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingByOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingByOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingByOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingByOrderResponseValidationError{}

// Validate checks the field values on GetRatingInfoByProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingInfoByProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingInfoByProductResponseValidationError is the validation error
// returned by GetRatingInfoByProductResponse.Validate if the designated
// constraints aren't met.
type GetRatingInfoByProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingInfoByProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingInfoByProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingInfoByProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingInfoByProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingInfoByProductResponseValidationError) ErrorName() string {
	return "GetRatingInfoByProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingInfoByProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingInfoByProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingInfoByProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingInfoByProductResponseValidationError{}

// Validate checks the field values on GetRatingInfoByMerchantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRatingInfoByMerchantResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingInfoByMerchantResponseValidationError is the validation error
// returned by GetRatingInfoByMerchantResponse.Validate if the designated
// constraints aren't met.
type GetRatingInfoByMerchantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingInfoByMerchantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingInfoByMerchantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingInfoByMerchantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingInfoByMerchantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingInfoByMerchantResponseValidationError) ErrorName() string {
	return "GetRatingInfoByMerchantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingInfoByMerchantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingInfoByMerchantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingInfoByMerchantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingInfoByMerchantResponseValidationError{}

// Validate checks the field values on ListAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Comments[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListAppResponseValidationError is the validation error returned by
// ListAppResponse.Validate if the designated constraints aren't met.
type ListAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppResponseValidationError) ErrorName() string { return "ListAppResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppResponseValidationError{}

// Validate checks the field values on DataGetCommentByRatingId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataGetCommentByRatingId) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Status", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	// no validation rules for ProductId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DataGetCommentByRatingIdValidationError is the validation error returned by
// DataGetCommentByRatingId.Validate if the designated constraints aren't met.
type DataGetCommentByRatingIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataGetCommentByRatingIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataGetCommentByRatingIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataGetCommentByRatingIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataGetCommentByRatingIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataGetCommentByRatingIdValidationError) ErrorName() string {
	return "DataGetCommentByRatingIdValidationError"
}

// Error satisfies the builtin error interface
func (e DataGetCommentByRatingIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataGetCommentByRatingId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataGetCommentByRatingIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataGetCommentByRatingIdValidationError{}

// Validate checks the field values on GetRatingInfoByProductResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetRatingInfoByProductResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	if v, ok := interface{}(m.GetRatingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("RatingInfo", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingInfoByProductResponse_DataValidationError is the validation error
// returned by GetRatingInfoByProductResponse_Data.Validate if the designated
// constraints aren't met.
type GetRatingInfoByProductResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingInfoByProductResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingInfoByProductResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingInfoByProductResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingInfoByProductResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingInfoByProductResponse_DataValidationError) ErrorName() string {
	return "GetRatingInfoByProductResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingInfoByProductResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingInfoByProductResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingInfoByProductResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingInfoByProductResponse_DataValidationError{}

// Validate checks the field values on GetRatingInfoByMerchantResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetRatingInfoByMerchantResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MerchantId

	if v, ok := interface{}(m.GetRatingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("RatingInfo", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRatingInfoByMerchantResponse_DataValidationError is the validation error
// returned by GetRatingInfoByMerchantResponse_Data.Validate if the designated
// constraints aren't met.
type GetRatingInfoByMerchantResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRatingInfoByMerchantResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRatingInfoByMerchantResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRatingInfoByMerchantResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRatingInfoByMerchantResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRatingInfoByMerchantResponse_DataValidationError) ErrorName() string {
	return "GetRatingInfoByMerchantResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetRatingInfoByMerchantResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRatingInfoByMerchantResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRatingInfoByMerchantResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRatingInfoByMerchantResponse_DataValidationError{}
