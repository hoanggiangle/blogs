// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: seller/store/store.proto

package store

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on AlowCheckOrderRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AlowCheckOrderRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Value

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AlowCheckOrderResValidationError is the validation error returned by
// AlowCheckOrderRes.Validate if the designated constraints aren't met.
type AlowCheckOrderResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlowCheckOrderResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlowCheckOrderResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlowCheckOrderResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlowCheckOrderResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlowCheckOrderResValidationError) ErrorName() string {
	return "AlowCheckOrderResValidationError"
}

// Error satisfies the builtin error interface
func (e AlowCheckOrderResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlowCheckOrderRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlowCheckOrderResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlowCheckOrderResValidationError{}

// Validate checks the field values on MenuRep with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MenuRep) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MenuRepValidationError is the validation error returned by MenuRep.Validate
// if the designated constraints aren't met.
type MenuRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuRepValidationError) ErrorName() string { return "MenuRepValidationError" }

// Error satisfies the builtin error interface
func (e MenuRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuRepValidationError{}

// Validate checks the field values on MenuRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MenuRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for StoreId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MenuResValidationError is the validation error returned by MenuRes.Validate
// if the designated constraints aren't met.
type MenuResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuResValidationError) ErrorName() string { return "MenuResValidationError" }

// Error satisfies the builtin error interface
func (e MenuResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuResValidationError{}

// Validate checks the field values on SendoMenu with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SendoMenu) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MenuName

	// no validation rules for MenuCode

	// no validation rules for MenuStyle

	// no validation rules for MenuUrl

	// no validation rules for MenuUrlSpa

	// no validation rules for MenuID

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Menus[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// SendoMenuValidationError is the validation error returned by
// SendoMenu.Validate if the designated constraints aren't met.
type SendoMenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendoMenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendoMenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendoMenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendoMenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendoMenuValidationError) ErrorName() string { return "SendoMenuValidationError" }

// Error satisfies the builtin error interface
func (e SendoMenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendoMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendoMenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendoMenuValidationError{}

// Validate checks the field values on RegShopStep2Req with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegShopStep2Req) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopName

	// no validation rules for PhoneNumber

	// no validation rules for Otp

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegShopStep2ReqValidationError is the validation error returned by
// RegShopStep2Req.Validate if the designated constraints aren't met.
type RegShopStep2ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegShopStep2ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegShopStep2ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegShopStep2ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegShopStep2ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegShopStep2ReqValidationError) ErrorName() string { return "RegShopStep2ReqValidationError" }

// Error satisfies the builtin error interface
func (e RegShopStep2ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegShopStep2Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegShopStep2ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegShopStep2ReqValidationError{}

// Validate checks the field values on RegShopStep3Req with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegShopStep3Req) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopAddress

	// no validation rules for ShopWardId

	// no validation rules for ShopDistrictId

	// no validation rules for ShopRegionId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegShopStep3ReqValidationError is the validation error returned by
// RegShopStep3Req.Validate if the designated constraints aren't met.
type RegShopStep3ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegShopStep3ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegShopStep3ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegShopStep3ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegShopStep3ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegShopStep3ReqValidationError) ErrorName() string { return "RegShopStep3ReqValidationError" }

// Error satisfies the builtin error interface
func (e RegShopStep3ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegShopStep3Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegShopStep3ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegShopStep3ReqValidationError{}

// Validate checks the field values on RegShopStep4Req with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegShopStep4Req) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for UserAgentString

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegShopStep4ReqValidationError is the validation error returned by
// RegShopStep4Req.Validate if the designated constraints aren't met.
type RegShopStep4ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegShopStep4ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegShopStep4ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegShopStep4ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegShopStep4ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegShopStep4ReqValidationError) ErrorName() string { return "RegShopStep4ReqValidationError" }

// Error satisfies the builtin error interface
func (e RegShopStep4ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegShopStep4Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegShopStep4ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegShopStep4ReqValidationError{}

// Validate checks the field values on RegShopStep5Req with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegShopStep5Req) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopType

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegShopStep5ReqValidationError is the validation error returned by
// RegShopStep5Req.Validate if the designated constraints aren't met.
type RegShopStep5ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegShopStep5ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegShopStep5ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegShopStep5ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegShopStep5ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegShopStep5ReqValidationError) ErrorName() string { return "RegShopStep5ReqValidationError" }

// Error satisfies the builtin error interface
func (e RegShopStep5ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegShopStep5Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegShopStep5ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegShopStep5ReqValidationError{}

// Validate checks the field values on RegShopStep6Req with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegShopStep6Req) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopUrl

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegShopStep6ReqValidationError is the validation error returned by
// RegShopStep6Req.Validate if the designated constraints aren't met.
type RegShopStep6ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegShopStep6ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegShopStep6ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegShopStep6ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegShopStep6ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegShopStep6ReqValidationError) ErrorName() string { return "RegShopStep6ReqValidationError" }

// Error satisfies the builtin error interface
func (e RegShopStep6ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegShopStep6Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegShopStep6ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegShopStep6ReqValidationError{}

// Validate checks the field values on RegShopStep7Req with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegShopStep7Req) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Code

	// no validation rules for Email

	// no validation rules for ExternalLinkShop

	// no validation rules for ShopRepresentative

	// no validation rules for CompanyName

	// no validation rules for BusinessLicenseNumber

	// no validation rules for BusinessType

	// no validation rules for IsUseWarehouseAddress

	// no validation rules for Phone

	// no validation rules for Mobile

	// no validation rules for ShopAddress

	// no validation rules for ShopWardId

	// no validation rules for ShopDistrictId

	// no validation rules for ShopRegionId

	// no validation rules for FileAttachment

	for idx, item := range m.GetFileAttachments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("FileAttachments[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for IdentificationNumber

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegShopStep7ReqValidationError is the validation error returned by
// RegShopStep7Req.Validate if the designated constraints aren't met.
type RegShopStep7ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegShopStep7ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegShopStep7ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegShopStep7ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegShopStep7ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegShopStep7ReqValidationError) ErrorName() string { return "RegShopStep7ReqValidationError" }

// Error satisfies the builtin error interface
func (e RegShopStep7ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegShopStep7Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegShopStep7ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegShopStep7ReqValidationError{}

// Validate checks the field values on FileUploadDto with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FileUploadDto) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for FileName

	// no validation rules for UrlFile

	// no validation rules for Type

	// no validation rules for Filebyte

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// FileUploadDtoValidationError is the validation error returned by
// FileUploadDto.Validate if the designated constraints aren't met.
type FileUploadDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadDtoValidationError) ErrorName() string { return "FileUploadDtoValidationError" }

// Error satisfies the builtin error interface
func (e FileUploadDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadDtoValidationError{}

// Validate checks the field values on UserContextDtoRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserContextDtoRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	// no validation rules for HasError

	// no validation rules for ErrorsMess

	// no validation rules for ErrorCode

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UserContextDtoResValidationError is the validation error returned by
// UserContextDtoRes.Validate if the designated constraints aren't met.
type UserContextDtoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserContextDtoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserContextDtoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserContextDtoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserContextDtoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserContextDtoResValidationError) ErrorName() string {
	return "UserContextDtoResValidationError"
}

// Error satisfies the builtin error interface
func (e UserContextDtoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserContextDtoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserContextDtoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserContextDtoResValidationError{}

// Validate checks the field values on UserContextDto with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserContextDto) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopName

	// no validation rules for Email

	// no validation rules for FullName

	// no validation rules for AvatarUrl

	// no validation rules for ShopId

	// no validation rules for SentSms

	// no validation rules for ShopStatus

	// no validation rules for ShopUrl

	// no validation rules for IsReview

	// no validation rules for IsFresh

	// no validation rules for Token

	// no validation rules for Mobile

	// no validation rules for ActivityPoint

	// no validation rules for ActivityPointStatus

	// no validation rules for DepositAmount

	// no validation rules for IsAffiliate

	// no validation rules for IsBrandShop

	// no validation rules for IsSelfShipping

	// no validation rules for ShopType

	// no validation rules for ShopLevel

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UserContextDtoValidationError is the validation error returned by
// UserContextDto.Validate if the designated constraints aren't met.
type UserContextDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserContextDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserContextDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserContextDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserContextDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserContextDtoValidationError) ErrorName() string { return "UserContextDtoValidationError" }

// Error satisfies the builtin error interface
func (e UserContextDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserContextDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserContextDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserContextDtoValidationError{}

// Validate checks the field values on CheckExistsUsershopWithoutAuthenReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CheckExistsUsershopWithoutAuthenReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Name

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckExistsUsershopWithoutAuthenReqValidationError is the validation error
// returned by CheckExistsUsershopWithoutAuthenReq.Validate if the designated
// constraints aren't met.
type CheckExistsUsershopWithoutAuthenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckExistsUsershopWithoutAuthenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckExistsUsershopWithoutAuthenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckExistsUsershopWithoutAuthenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckExistsUsershopWithoutAuthenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckExistsUsershopWithoutAuthenReqValidationError) ErrorName() string {
	return "CheckExistsUsershopWithoutAuthenReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckExistsUsershopWithoutAuthenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckExistsUsershopWithoutAuthenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckExistsUsershopWithoutAuthenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckExistsUsershopWithoutAuthenReqValidationError{}

// Validate checks the field values on CheckExistsUsershopWithoutAuthenRes with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CheckExistsUsershopWithoutAuthenRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Data

	// no validation rules for HasError

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckExistsUsershopWithoutAuthenResValidationError is the validation error
// returned by CheckExistsUsershopWithoutAuthenRes.Validate if the designated
// constraints aren't met.
type CheckExistsUsershopWithoutAuthenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckExistsUsershopWithoutAuthenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckExistsUsershopWithoutAuthenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckExistsUsershopWithoutAuthenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckExistsUsershopWithoutAuthenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckExistsUsershopWithoutAuthenResValidationError) ErrorName() string {
	return "CheckExistsUsershopWithoutAuthenResValidationError"
}

// Error satisfies the builtin error interface
func (e CheckExistsUsershopWithoutAuthenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckExistsUsershopWithoutAuthenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckExistsUsershopWithoutAuthenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckExistsUsershopWithoutAuthenResValidationError{}

// Validate checks the field values on CheckRegisterAndSendOtpRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckRegisterAndSendOtpRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for HasError

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckRegisterAndSendOtpResValidationError is the validation error returned
// by CheckRegisterAndSendOtpRes.Validate if the designated constraints aren't met.
type CheckRegisterAndSendOtpResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRegisterAndSendOtpResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRegisterAndSendOtpResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRegisterAndSendOtpResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRegisterAndSendOtpResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRegisterAndSendOtpResValidationError) ErrorName() string {
	return "CheckRegisterAndSendOtpResValidationError"
}

// Error satisfies the builtin error interface
func (e CheckRegisterAndSendOtpResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRegisterAndSendOtpRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRegisterAndSendOtpResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRegisterAndSendOtpResValidationError{}

// Validate checks the field values on ApiRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ApiRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for HasError

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ApiResValidationError is the validation error returned by ApiRes.Validate if
// the designated constraints aren't met.
type ApiResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiResValidationError) ErrorName() string { return "ApiResValidationError" }

// Error satisfies the builtin error interface
func (e ApiResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiResValidationError{}

// Validate checks the field values on RegionRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RegionRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegionResValidationError is the validation error returned by
// RegionRes.Validate if the designated constraints aren't met.
type RegionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionResValidationError) ErrorName() string { return "RegionResValidationError" }

// Error satisfies the builtin error interface
func (e RegionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionResValidationError{}

// Validate checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Region) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Name

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegionValidationError is the validation error returned by Region.Validate if
// the designated constraints aren't met.
type RegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionValidationError) ErrorName() string { return "RegionValidationError" }

// Error satisfies the builtin error interface
func (e RegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionValidationError{}

// Validate checks the field values on DistrictRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DistrictRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DistrictResValidationError is the validation error returned by
// DistrictRes.Validate if the designated constraints aren't met.
type DistrictResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictResValidationError) ErrorName() string { return "DistrictResValidationError" }

// Error satisfies the builtin error interface
func (e DistrictResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrictRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictResValidationError{}

// Validate checks the field values on District with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *District) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Name

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DistrictValidationError is the validation error returned by
// District.Validate if the designated constraints aren't met.
type DistrictValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictValidationError) ErrorName() string { return "DistrictValidationError" }

// Error satisfies the builtin error interface
func (e DistrictValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrict.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictValidationError{}

// Validate checks the field values on DistrictWardRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DistrictWardRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DistrictWardResValidationError is the validation error returned by
// DistrictWardRes.Validate if the designated constraints aren't met.
type DistrictWardResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictWardResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictWardResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictWardResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictWardResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictWardResValidationError) ErrorName() string { return "DistrictWardResValidationError" }

// Error satisfies the builtin error interface
func (e DistrictWardResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrictWardRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictWardResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictWardResValidationError{}

// Validate checks the field values on DistrictWard with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DistrictWard) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Name

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DistrictWardValidationError is the validation error returned by
// DistrictWard.Validate if the designated constraints aren't met.
type DistrictWardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictWardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictWardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictWardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictWardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictWardValidationError) ErrorName() string { return "DistrictWardValidationError" }

// Error satisfies the builtin error interface
func (e DistrictWardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrictWard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictWardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictWardValidationError{}

// Validate checks the field values on RegionReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RegionReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegionReqValidationError is the validation error returned by
// RegionReq.Validate if the designated constraints aren't met.
type RegionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionReqValidationError) ErrorName() string { return "RegionReqValidationError" }

// Error satisfies the builtin error interface
func (e RegionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionReqValidationError{}

// Validate checks the field values on RegionWHReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegionWHReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegionWHReqValidationError is the validation error returned by
// RegionWHReq.Validate if the designated constraints aren't met.
type RegionWHReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionWHReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionWHReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionWHReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionWHReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionWHReqValidationError) ErrorName() string { return "RegionWHReqValidationError" }

// Error satisfies the builtin error interface
func (e RegionWHReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegionWHReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionWHReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionWHReqValidationError{}

// Validate checks the field values on DistrictReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DistrictReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for RegionId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DistrictReqValidationError is the validation error returned by
// DistrictReq.Validate if the designated constraints aren't met.
type DistrictReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictReqValidationError) ErrorName() string { return "DistrictReqValidationError" }

// Error satisfies the builtin error interface
func (e DistrictReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrictReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictReqValidationError{}

// Validate checks the field values on DistrictWHReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DistrictWHReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for RegionId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DistrictWHReqValidationError is the validation error returned by
// DistrictWHReq.Validate if the designated constraints aren't met.
type DistrictWHReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictWHReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictWHReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictWHReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictWHReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictWHReqValidationError) ErrorName() string { return "DistrictWHReqValidationError" }

// Error satisfies the builtin error interface
func (e DistrictWHReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrictWHReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictWHReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictWHReqValidationError{}

// Validate checks the field values on DistrictWardReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DistrictWardReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for DistrictId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DistrictWardReqValidationError is the validation error returned by
// DistrictWardReq.Validate if the designated constraints aren't met.
type DistrictWardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictWardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictWardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictWardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictWardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictWardReqValidationError) ErrorName() string { return "DistrictWardReqValidationError" }

// Error satisfies the builtin error interface
func (e DistrictWardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrictWardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictWardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictWardReqValidationError{}

// Validate checks the field values on ShopInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ShopInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShopInfoReqValidationError is the validation error returned by
// ShopInfoReq.Validate if the designated constraints aren't met.
type ShopInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopInfoReqValidationError) ErrorName() string { return "ShopInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e ShopInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopInfoReqValidationError{}

// Validate checks the field values on ChangeEmailReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChangeEmailReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Email

	// no validation rules for Otp

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ChangeEmailReqValidationError is the validation error returned by
// ChangeEmailReq.Validate if the designated constraints aren't met.
type ChangeEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEmailReqValidationError) ErrorName() string { return "ChangeEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEmailReqValidationError{}

// Validate checks the field values on PhoneShopReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PhoneShopReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Phone

	// no validation rules for Otp

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// PhoneShopReqValidationError is the validation error returned by
// PhoneShopReq.Validate if the designated constraints aren't met.
type PhoneShopReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneShopReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneShopReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneShopReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneShopReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneShopReqValidationError) ErrorName() string { return "PhoneShopReqValidationError" }

// Error satisfies the builtin error interface
func (e PhoneShopReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneShopReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneShopReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneShopReqValidationError{}

// Validate checks the field values on UpdateShopDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateShopDetailReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopLogo

	// no validation rules for ShopCover

	// no validation rules for ShopBackground

	// no validation rules for ShopDescription

	// no validation rules for Slogan

	// no validation rules for ShopAddress

	// no validation rules for ShopRegionId

	// no validation rules for ShopDistrictId

	// no validation rules for ShopWardId

	// no validation rules for WarrantyInformation

	// no validation rules for ShopRepresentative

	// no validation rules for TaxNumber

	// no validation rules for VersionNo

	// no validation rules for WarehouseAddress

	// no validation rules for WarehouseRegionId

	// no validation rules for WarehouseDistrictId

	// no validation rules for WarehouseWardId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateShopDetailReqValidationError is the validation error returned by
// UpdateShopDetailReq.Validate if the designated constraints aren't met.
type UpdateShopDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShopDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShopDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShopDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShopDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShopDetailReqValidationError) ErrorName() string {
	return "UpdateShopDetailReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShopDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShopDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShopDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShopDetailReqValidationError{}

// Validate checks the field values on ShopDtoRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ShopDtoRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	// no validation rules for HasError

	// no validation rules for ErrorsMess

	// no validation rules for ErrorCode

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShopDtoResValidationError is the validation error returned by
// ShopDtoRes.Validate if the designated constraints aren't met.
type ShopDtoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopDtoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopDtoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopDtoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopDtoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopDtoResValidationError) ErrorName() string { return "ShopDtoResValidationError" }

// Error satisfies the builtin error interface
func (e ShopDtoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopDtoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopDtoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopDtoResValidationError{}

// Validate checks the field values on ShopDto with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ShopDto) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for IsSelfShipping

	// no validation rules for Code

	// no validation rules for ShopStatus

	// no validation rules for ShopType

	// no validation rules for StatusDate

	// no validation rules for SystemUrl

	// no validation rules for ShippingMethod

	// no validation rules for PaymentMethod

	// no validation rules for Email

	// no validation rules for BusinessLicenseNumber

	// no validation rules for ShopAddress

	// no validation rules for ShopWard

	// no validation rules for Mobile

	// no validation rules for LastLogin

	// no validation rules for Slogan

	// no validation rules for ShopDescription

	// no validation rules for ShopRepresentative

	// no validation rules for ShopCountryCode

	// no validation rules for WarehouseCountryCode

	// no validation rules for TaxNumber

	// no validation rules for ReasonCode

	// no validation rules for ShopRegionId

	// no validation rules for ShopDistrictId

	// no validation rules for WarehouseDistrictId

	// no validation rules for WarehouseRegionId

	// no validation rules for ShopWardId

	// no validation rules for WarehouseWardId

	// no validation rules for WarehouseAddress

	// no validation rules for WarehouseWard

	// no validation rules for ClosingShopDate

	// no validation rules for CompanyName

	// no validation rules for ExternalLinkShop

	// no validation rules for VersionNo

	// no validation rules for ShopBackground

	// no validation rules for ShopCover

	// no validation rules for ShopLogo

	// no validation rules for WarrantyInformation

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShopDtoValidationError is the validation error returned by ShopDto.Validate
// if the designated constraints aren't met.
type ShopDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopDtoValidationError) ErrorName() string { return "ShopDtoValidationError" }

// Error satisfies the builtin error interface
func (e ShopDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopDtoValidationError{}

// Validate checks the field values on ShopDetailReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ShopDetailReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShopDetailReqValidationError is the validation error returned by
// ShopDetailReq.Validate if the designated constraints aren't met.
type ShopDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopDetailReqValidationError) ErrorName() string { return "ShopDetailReqValidationError" }

// Error satisfies the builtin error interface
func (e ShopDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopDetailReqValidationError{}
