// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: checkout/checkout.proto

package checkout

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on SaveOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SaveOrderResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IsError

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Errors[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for IncrementId

	// no validation rules for PaymentType

	// no validation rules for PaymentFailed

	// no validation rules for PaymentFailedReason

	// no validation rules for PaymentId

	// no validation rules for PaymentConfirmType

	// no validation rules for PaymentUrl

	// no validation rules for DisableSaveOrder

	// no validation rules for VerifyUrl

	for idx, item := range m.GetCurrentProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("CurrentProducts[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for IgnoreInvalidProduct

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// SaveOrderResponseValidationError is the validation error returned by
// SaveOrderResponse.Validate if the designated constraints aren't met.
type SaveOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveOrderResponseValidationError) ErrorName() string {
	return "SaveOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveOrderResponseValidationError{}

// Validate checks the field values on CheckoutData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckoutData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetCustomerData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CustomerData", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetProductsCheckout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ProductsCheckout", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetShopInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ShopInfo", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetShippingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ShippingInfo", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetPaymentInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("PaymentInfo", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetVoucherInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("VoucherInfo", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetLoyaltyInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("LoyaltyInfo", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetTotalInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("TotalInfo", "embedded message failed validation"))
		}
	}

	// no validation rules for CustomerNote

	// no validation rules for DisableSaveOrder

	if v, ok := interface{}(m.GetEcommerceTracking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("EcommerceTracking", "embedded message failed validation"))
		}
	}

	// no validation rules for IgnoreInvalidProduct

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckoutDataValidationError is the validation error returned by
// CheckoutData.Validate if the designated constraints aren't met.
type CheckoutDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckoutDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckoutDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckoutDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckoutDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckoutDataValidationError) ErrorName() string { return "CheckoutDataValidationError" }

// Error satisfies the builtin error interface
func (e CheckoutDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckoutData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckoutDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckoutDataValidationError{}

// Validate checks the field values on TotalOrderInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TotalOrderInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for SubTotal

	// no validation rules for VoucherAmount

	// no validation rules for LoyaltyAmount

	// no validation rules for DeliveryFee

	// no validation rules for CodFee

	// no validation rules for SendoDiscountFee

	// no validation rules for ShopDiscountFee

	// no validation rules for SendoDiscountPrice

	// no validation rules for ShopDiscountMobile

	// no validation rules for ShopDiscountOnlinePayment

	// no validation rules for GrandTotal

	// no validation rules for TotalSubsidyAmount

	for idx, item := range m.GetTotalDetail() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("TotalDetail[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TotalOrderInfoValidationError is the validation error returned by
// TotalOrderInfo.Validate if the designated constraints aren't met.
type TotalOrderInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalOrderInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalOrderInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalOrderInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalOrderInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalOrderInfoValidationError) ErrorName() string { return "TotalOrderInfoValidationError" }

// Error satisfies the builtin error interface
func (e TotalOrderInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalOrderInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalOrderInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalOrderInfoValidationError{}

// Validate checks the field values on TotalDetailItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TotalDetailItem) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Index

	// no validation rules for Field

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Sign

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TotalDetailItemValidationError is the validation error returned by
// TotalDetailItem.Validate if the designated constraints aren't met.
type TotalDetailItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalDetailItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalDetailItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalDetailItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalDetailItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalDetailItemValidationError) ErrorName() string { return "TotalDetailItemValidationError" }

// Error satisfies the builtin error interface
func (e TotalDetailItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalDetailItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalDetailItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalDetailItemValidationError{}

// Validate checks the field values on LoyaltyInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoyaltyInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Score

	// no validation rules for UseScore

	// no validation rules for BonusScore

	// no validation rules for SuggestedMsg

	// no validation rules for ErrorMsg

	// no validation rules for SuggestScore

	// no validation rules for SuggestMessage

	// no validation rules for DisableLoyalty

	// no validation rules for SuggestedUseScoreMsg

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// LoyaltyInfoValidationError is the validation error returned by
// LoyaltyInfo.Validate if the designated constraints aren't met.
type LoyaltyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoyaltyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoyaltyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoyaltyInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoyaltyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoyaltyInfoValidationError) ErrorName() string { return "LoyaltyInfoValidationError" }

// Error satisfies the builtin error interface
func (e LoyaltyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoyaltyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoyaltyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoyaltyInfoValidationError{}

// Validate checks the field values on VoucherInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VoucherInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for EnableSuggestVoucher

	// no validation rules for VoucherCode

	// no validation rules for VoucherValue

	// no validation rules for IsShopVoucher

	// no validation rules for VoucherCampaignCode

	// no validation rules for SubTotal

	// no validation rules for PaymentMethod

	// no validation rules for TrackingOrderSource

	// no validation rules for RedeemedAt

	// no validation rules for IsEnableCaptcha

	// no validation rules for CaptchaResponse

	// no validation rules for SuggestedMessage

	// no validation rules for Error

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// VoucherInfoValidationError is the validation error returned by
// VoucherInfo.Validate if the designated constraints aren't met.
type VoucherInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoucherInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoucherInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoucherInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoucherInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoucherInfoValidationError) ErrorName() string { return "VoucherInfoValidationError" }

// Error satisfies the builtin error interface
func (e VoucherInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoucherInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoucherInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoucherInfoValidationError{}

// Validate checks the field values on PaymentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PaymentInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetListPayment() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ListPayment[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetCurrentPaymentData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CurrentPaymentData", "embedded message failed validation"))
		}
	}

	// no validation rules for ErrorMsg

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// PaymentInfoValidationError is the validation error returned by
// PaymentInfo.Validate if the designated constraints aren't met.
type PaymentInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentInfoValidationError) ErrorName() string { return "PaymentInfoValidationError" }

// Error satisfies the builtin error interface
func (e PaymentInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentInfoValidationError{}

// Validate checks the field values on ProductInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for FinalPrice

	if v, ok := interface{}(m.GetPromotion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Promotion", "embedded message failed validation"))
		}
	}

	// no validation rules for Hash

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductInfoValidationError is the validation error returned by
// ProductInfo.Validate if the designated constraints aren't met.
type ProductInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductInfoValidationError) ErrorName() string { return "ProductInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProductInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductInfoValidationError{}

// Validate checks the field values on CurrentPayment with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CurrentPayment) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	if v, ok := interface{}(m.GetCurrentPaymentData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CurrentPaymentData", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CurrentPaymentValidationError is the validation error returned by
// CurrentPayment.Validate if the designated constraints aren't met.
type CurrentPaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentPaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentPaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentPaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentPaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentPaymentValidationError) ErrorName() string { return "CurrentPaymentValidationError" }

// Error satisfies the builtin error interface
func (e CurrentPaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentPaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentPaymentValidationError{}

// Validate checks the field values on CurrentPaymentData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CurrentPaymentData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Method

	// no validation rules for CardType

	// no validation rules for Card

	// no validation rules for CardId

	// no validation rules for CardCvc

	// no validation rules for InstallmentPeriod

	// no validation rules for BankName

	// no validation rules for BankId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CurrentPaymentDataValidationError is the validation error returned by
// CurrentPaymentData.Validate if the designated constraints aren't met.
type CurrentPaymentDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentPaymentDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentPaymentDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentPaymentDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentPaymentDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentPaymentDataValidationError) ErrorName() string {
	return "CurrentPaymentDataValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentPaymentDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentPaymentData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentPaymentDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentPaymentDataValidationError{}

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Payment) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for PaymentName

	// no validation rules for PaymentCode

	// no validation rules for IsDisable

	// no validation rules for ReasonDisable

	// no validation rules for PaymentText

	for idx, item := range m.GetInstallmentPlans() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("InstallmentPlans[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetBankList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("BankList[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on BanksConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BanksConfig) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for BankId

	// no validation rules for BankFullname

	// no validation rules for BankName

	// no validation rules for Logo

	// no validation rules for Sort

	for idx, item := range m.GetBankInstallmentTerms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("BankInstallmentTerms[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BanksConfigValidationError is the validation error returned by
// BanksConfig.Validate if the designated constraints aren't met.
type BanksConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BanksConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BanksConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BanksConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BanksConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BanksConfigValidationError) ErrorName() string { return "BanksConfigValidationError" }

// Error satisfies the builtin error interface
func (e BanksConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanksConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BanksConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BanksConfigValidationError{}

// Validate checks the field values on BankInstallmentTerms with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BankInstallmentTerms) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Period

	// no validation rules for InstallmentPlan

	// no validation rules for Label

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BankInstallmentTermsValidationError is the validation error returned by
// BankInstallmentTerms.Validate if the designated constraints aren't met.
type BankInstallmentTermsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankInstallmentTermsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankInstallmentTermsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankInstallmentTermsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankInstallmentTermsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankInstallmentTermsValidationError) ErrorName() string {
	return "BankInstallmentTermsValidationError"
}

// Error satisfies the builtin error interface
func (e BankInstallmentTermsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBankInstallmentTerms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankInstallmentTermsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankInstallmentTermsValidationError{}

// Validate checks the field values on InstallmentPlan with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *InstallmentPlan) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for InstallmentPeriod

	// no validation rules for PeriodicPayment

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// InstallmentPlanValidationError is the validation error returned by
// InstallmentPlan.Validate if the designated constraints aren't met.
type InstallmentPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallmentPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallmentPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallmentPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallmentPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallmentPlanValidationError) ErrorName() string { return "InstallmentPlanValidationError" }

// Error satisfies the builtin error interface
func (e InstallmentPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallmentPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallmentPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallmentPlanValidationError{}

// Validate checks the field values on ShippingCarrierShop with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShippingCarrierShop) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetListCarrier() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ListCarrier[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for CurrentCarrier

	// no validation rules for ChangeCurrent

	// no validation rules for Error

	// no validation rules for ErrorMessage

	// no validation rules for FreeShippingMessage

	// no validation rules for Param

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShippingCarrierShopValidationError is the validation error returned by
// ShippingCarrierShop.Validate if the designated constraints aren't met.
type ShippingCarrierShopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingCarrierShopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingCarrierShopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingCarrierShopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingCarrierShopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingCarrierShopValidationError) ErrorName() string {
	return "ShippingCarrierShopValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingCarrierShopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingCarrierShop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingCarrierShopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingCarrierShopValidationError{}

// Validate checks the field values on ShippingCarrier with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ShippingCarrier) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CarrierId

	// no validation rules for CarrierCode

	// no validation rules for CarrierName

	// no validation rules for CarrierLogo

	// no validation rules for IsCurrentCarrier

	// no validation rules for OriginalFee

	// no validation rules for DeliveryFee

	// no validation rules for SubFee

	// no validation rules for CodFee

	// no validation rules for DeliveryFeeDiscount

	// no validation rules for CodFeeDiscount

	// no validation rules for SendoDiscountFee

	// no validation rules for ShopDiscountFee

	// no validation rules for EventDiscountId

	// no validation rules for DeliveryDuration

	// no validation rules for DeliveryDurationNote

	for idx, item := range m.GetProductInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductInfo[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for UseMap

	// no validation rules for Error

	// no validation rules for ServiceName

	// no validation rules for OpcUrl

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShippingCarrierValidationError is the validation error returned by
// ShippingCarrier.Validate if the designated constraints aren't met.
type ShippingCarrierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingCarrierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingCarrierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingCarrierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingCarrierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingCarrierValidationError) ErrorName() string { return "ShippingCarrierValidationError" }

// Error satisfies the builtin error interface
func (e ShippingCarrierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingCarrier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingCarrierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingCarrierValidationError{}

// Validate checks the field values on ProductShippingInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductShippingInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Weight

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductShippingInfoValidationError is the validation error returned by
// ProductShippingInfo.Validate if the designated constraints aren't met.
type ProductShippingInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductShippingInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductShippingInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductShippingInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductShippingInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductShippingInfoValidationError) ErrorName() string {
	return "ProductShippingInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ProductShippingInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductShippingInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductShippingInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductShippingInfoValidationError{}

// Validate checks the field values on ShopInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ShopInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	// no validation rules for ExternalId

	// no validation rules for Name

	// no validation rules for Telephone

	// no validation rules for Email

	// no validation rules for Logo

	if v, ok := interface{}(m.GetLoyaltyConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("LoyaltyConfig", "embedded message failed validation"))
		}
	}

	// no validation rules for IsCertified

	// no validation rules for ShopType

	// no validation rules for CanUseSuperFastDelivery

	if v, ok := interface{}(m.GetWareHouse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("WareHouse", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetMerchantServices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("MerchantServices[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetSupportConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("SupportConfig", "embedded message failed validation"))
		}
	}

	// no validation rules for IsShopTvc

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShopInfoValidationError is the validation error returned by
// ShopInfo.Validate if the designated constraints aren't met.
type ShopInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopInfoValidationError) ErrorName() string { return "ShopInfoValidationError" }

// Error satisfies the builtin error interface
func (e ShopInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopInfoValidationError{}

// Validate checks the field values on MerchantSupportConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MerchantSupportConfig) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for UseCod

	// no validation rules for UseSenpay

	// no validation rules for HasDiscount

	// no validation rules for DiscountValue

	// no validation rules for OrderAmount

	for idx, item := range m.GetSenpayDiscount() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("SenpayDiscount[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetAppDiscount() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("AppDiscount[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MerchantSupportConfigValidationError is the validation error returned by
// MerchantSupportConfig.Validate if the designated constraints aren't met.
type MerchantSupportConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantSupportConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantSupportConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantSupportConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantSupportConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantSupportConfigValidationError) ErrorName() string {
	return "MerchantSupportConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MerchantSupportConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchantSupportConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantSupportConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantSupportConfigValidationError{}

// Validate checks the field values on DiscountConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DiscountConfig) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderAmount

	// no validation rules for DiscountPercent

	// no validation rules for Position

	// no validation rules for IsActive

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DiscountConfigValidationError is the validation error returned by
// DiscountConfig.Validate if the designated constraints aren't met.
type DiscountConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountConfigValidationError) ErrorName() string { return "DiscountConfigValidationError" }

// Error satisfies the builtin error interface
func (e DiscountConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscountConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountConfigValidationError{}

// Validate checks the field values on MerchantService with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MerchantService) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ServiceCode

	// no validation rules for IsActive

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MerchantServiceValidationError is the validation error returned by
// MerchantService.Validate if the designated constraints aren't met.
type MerchantServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantServiceValidationError) ErrorName() string { return "MerchantServiceValidationError" }

// Error satisfies the builtin error interface
func (e MerchantServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchantService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantServiceValidationError{}

// Validate checks the field values on LoyaltyConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoyaltyConfig) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for StoreId

	// no validation rules for IsActive

	// no validation rules for Percent

	// no validation rules for UpdateTime

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// LoyaltyConfigValidationError is the validation error returned by
// LoyaltyConfig.Validate if the designated constraints aren't met.
type LoyaltyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoyaltyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoyaltyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoyaltyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoyaltyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoyaltyConfigValidationError) ErrorName() string { return "LoyaltyConfigValidationError" }

// Error satisfies the builtin error interface
func (e LoyaltyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoyaltyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoyaltyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoyaltyConfigValidationError{}

// Validate checks the field values on ShopWareHouse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ShopWareHouse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CityId

	// no validation rules for CityName

	// no validation rules for DistrictId

	// no validation rules for DistrictName

	// no validation rules for WardId

	// no validation rules for WardName

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Address

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ShopWareHouseValidationError is the validation error returned by
// ShopWareHouse.Validate if the designated constraints aren't met.
type ShopWareHouseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopWareHouseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopWareHouseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopWareHouseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopWareHouseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopWareHouseValidationError) ErrorName() string { return "ShopWareHouseValidationError" }

// Error satisfies the builtin error interface
func (e ShopWareHouseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopWareHouse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopWareHouseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopWareHouseValidationError{}

// Validate checks the field values on ProductCheckout with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductCheckout) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Products[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for TotalPrice

	// no validation rules for TotalSubsidyAmount

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductCheckoutValidationError is the validation error returned by
// ProductCheckout.Validate if the designated constraints aren't met.
type ProductCheckoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCheckoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCheckoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCheckoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCheckoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCheckoutValidationError) ErrorName() string { return "ProductCheckoutValidationError" }

// Error satisfies the builtin error interface
func (e ProductCheckoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCheckout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCheckoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCheckoutValidationError{}

// Validate checks the field values on CustomerData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CustomerData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Customer", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetCustomerAddress() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("CustomerAddress[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetBadBuyerInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("BadBuyerInfo", "embedded message failed validation"))
		}
	}

	// no validation rules for CurrentAddressId

	if v, ok := interface{}(m.GetClientInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ClientInfo", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CustomerDataValidationError is the validation error returned by
// CustomerData.Validate if the designated constraints aren't met.
type CustomerDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerDataValidationError) ErrorName() string { return "CustomerDataValidationError" }

// Error satisfies the builtin error interface
func (e CustomerDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerDataValidationError{}

// Validate checks the field values on ClientInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ClientInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ClientIp

	// no validation rules for Platform

	// no validation rules for DeviceId

	// no validation rules for TrackingOrderSource

	// no validation rules for BrowserId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ClientInfoValidationError is the validation error returned by
// ClientInfo.Validate if the designated constraints aren't met.
type ClientInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientInfoValidationError) ErrorName() string { return "ClientInfoValidationError" }

// Error satisfies the builtin error interface
func (e ClientInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientInfoValidationError{}

// Validate checks the field values on Customer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Customer) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CustomerId

	// no validation rules for FptId

	// no validation rules for Telephone

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Avatar

	// no validation rules for DefaultShipping

	// no validation rules for IsOtpPhone

	// no validation rules for IsVerifyCheckout

	// no validation rules for IsFirstOrder

	// no validation rules for RegisteredBy

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CustomerValidationError is the validation error returned by
// Customer.Validate if the designated constraints aren't met.
type CustomerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerValidationError) ErrorName() string { return "CustomerValidationError" }

// Error satisfies the builtin error interface
func (e CustomerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerValidationError{}

// Validate checks the field values on BadBuyerInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BadBuyerInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopBlock

	// no validation rules for BlockCod

	// no validation rules for OtpCod

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BadBuyerInfoValidationError is the validation error returned by
// BadBuyerInfo.Validate if the designated constraints aren't met.
type BadBuyerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BadBuyerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BadBuyerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BadBuyerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BadBuyerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BadBuyerInfoValidationError) ErrorName() string { return "BadBuyerInfoValidationError" }

// Error satisfies the builtin error interface
func (e BadBuyerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBadBuyerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BadBuyerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BadBuyerInfoValidationError{}

// Validate checks the field values on ProductItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductItem) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Name

	// no validation rules for Categories

	// no validation rules for BrandId

	// no validation rules for SourceUrl

	// no validation rules for SourcePageId

	// no validation rules for SourceBlockId

	// no validation rules for SourceInfo

	// no validation rules for Price

	// no validation rules for FinalPrice

	// no validation rules for Weight

	// no validation rules for LengthProduct

	// no validation rules for WitdhProduct

	// no validation rules for HeightProduct

	// no validation rules for Qty

	for idx, item := range m.GetOptionData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("OptionData[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Hash

	// no validation rules for Image

	if v, ok := interface{}(m.GetImageResize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ImageResize", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetPromotion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Promotion", "embedded message failed validation"))
		}
	}

	// no validation rules for OriginFinalPrice

	// no validation rules for Sku

	// no validation rules for SkuUser

	// no validation rules for AttributeHash

	// no validation rules for CategoryId

	// no validation rules for CheckoutWeight

	// no validation rules for CatPath

	if v, ok := interface{}(m.GetExtendedShippingPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ExtendedShippingPackage", "embedded message failed validation"))
		}
	}

	// no validation rules for UnitId

	// no validation rules for IsValid

	// no validation rules for StatusLabel

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductItemValidationError is the validation error returned by
// ProductItem.Validate if the designated constraints aren't met.
type ProductItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductItemValidationError) ErrorName() string { return "ProductItemValidationError" }

// Error satisfies the builtin error interface
func (e ProductItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductItemValidationError{}

// Validate checks the field values on ImageResize with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ImageResize) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Image

	// no validation rules for Image_50X50

	// no validation rules for Image_100X100

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ImageResizeValidationError is the validation error returned by
// ImageResize.Validate if the designated constraints aren't met.
type ImageResizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageResizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageResizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageResizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageResizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageResizeValidationError) ErrorName() string { return "ImageResizeValidationError" }

// Error satisfies the builtin error interface
func (e ImageResizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageResize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageResizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageResizeValidationError{}

// Validate checks the field values on ExtendedShippingPackage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExtendedShippingPackage) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IsUsingInstant

	// no validation rules for IsUsingInDay

	// no validation rules for IsSelfShipping

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ExtendedShippingPackageValidationError is the validation error returned by
// ExtendedShippingPackage.Validate if the designated constraints aren't met.
type ExtendedShippingPackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtendedShippingPackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtendedShippingPackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtendedShippingPackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtendedShippingPackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtendedShippingPackageValidationError) ErrorName() string {
	return "ExtendedShippingPackageValidationError"
}

// Error satisfies the builtin error interface
func (e ExtendedShippingPackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtendedShippingPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtendedShippingPackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtendedShippingPackageValidationError{}

// Validate checks the field values on ProductOption with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductOption) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Value

	// no validation rules for OptionId

	// no validation rules for ProductOptionId

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for AttributeId

	// no validation rules for ProductOption

	// no validation rules for AttributeCode

	// no validation rules for ColorHexRgb

	// no validation rules for Image

	// no validation rules for ColorId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductOptionValidationError is the validation error returned by
// ProductOption.Validate if the designated constraints aren't met.
type ProductOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductOptionValidationError) ErrorName() string { return "ProductOptionValidationError" }

// Error satisfies the builtin error interface
func (e ProductOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductOptionValidationError{}

// Validate checks the field values on PaymentTransferInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PaymentTransferInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetListBanks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ListBanks[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for PaymentTransferId

	// no validation rules for ConfirmationExchange

	// no validation rules for ConfirmationTime

	// no validation rules for ConfirmationSmsFee

	// no validation rules for ConfirmationUrl

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// PaymentTransferInfoValidationError is the validation error returned by
// PaymentTransferInfo.Validate if the designated constraints aren't met.
type PaymentTransferInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentTransferInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentTransferInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentTransferInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentTransferInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentTransferInfoValidationError) ErrorName() string {
	return "PaymentTransferInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentTransferInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentTransferInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentTransferInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentTransferInfoValidationError{}

// Validate checks the field values on PaymentWalletInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaymentWalletInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for PaymentWalletId

	// no validation rules for WalletConfirmType

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// PaymentWalletInfoValidationError is the validation error returned by
// PaymentWalletInfo.Validate if the designated constraints aren't met.
type PaymentWalletInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentWalletInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentWalletInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentWalletInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentWalletInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentWalletInfoValidationError) ErrorName() string {
	return "PaymentWalletInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentWalletInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentWalletInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentWalletInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentWalletInfoValidationError{}

// Validate checks the field values on BankTransferInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BankTransferInfo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for AccountName

	// no validation rules for AccountNumber

	// no validation rules for BranchName

	// no validation rules for BranchLocation

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// BankTransferInfoValidationError is the validation error returned by
// BankTransferInfo.Validate if the designated constraints aren't met.
type BankTransferInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankTransferInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankTransferInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankTransferInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankTransferInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankTransferInfoValidationError) ErrorName() string { return "BankTransferInfoValidationError" }

// Error satisfies the builtin error interface
func (e BankTransferInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBankTransferInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankTransferInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankTransferInfoValidationError{}

// Validate checks the field values on CustomerAddress with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CustomerAddress) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CustomerId

	// no validation rules for FptId

	// no validation rules for CreatedAt

	// no validation rules for AddressId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for City

	// no validation rules for CityId

	// no validation rules for District

	// no validation rules for DistrictId

	// no validation rules for Ward

	// no validation rules for WardId

	// no validation rules for Region

	// no validation rules for Street

	// no validation rules for Telephone

	// no validation rules for Email

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for FullAddress

	// no validation rules for IsDefaultShipping

	// no validation rules for IsNew

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CustomerAddressValidationError is the validation error returned by
// CustomerAddress.Validate if the designated constraints aren't met.
type CustomerAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerAddressValidationError) ErrorName() string { return "CustomerAddressValidationError" }

// Error satisfies the builtin error interface
func (e CustomerAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerAddressValidationError{}

// Validate checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Region) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Name

	// no validation rules for CityId

	// no validation rules for DistrictId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RegionValidationError is the validation error returned by Region.Validate if
// the designated constraints aren't met.
type RegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionValidationError) ErrorName() string { return "RegionValidationError" }

// Error satisfies the builtin error interface
func (e RegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionValidationError{}

// Validate checks the field values on City with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *City) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CityId

	// no validation rules for CityName

	for idx, item := range m.GetDistricts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Districts[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CityValidationError is the validation error returned by City.Validate if the
// designated constraints aren't met.
type CityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CityValidationError) ErrorName() string { return "CityValidationError" }

// Error satisfies the builtin error interface
func (e CityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CityValidationError{}

// Validate checks the field values on District with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *District) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for DistrictId

	// no validation rules for DistrictName

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DistrictValidationError is the validation error returned by
// District.Validate if the designated constraints aren't met.
type DistrictValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictValidationError) ErrorName() string { return "DistrictValidationError" }

// Error satisfies the builtin error interface
func (e DistrictValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrict.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictValidationError{}

// Validate checks the field values on Ward with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Ward) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for WardId

	// no validation rules for WardName

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// WardValidationError is the validation error returned by Ward.Validate if the
// designated constraints aren't met.
type WardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WardValidationError) ErrorName() string { return "WardValidationError" }

// Error satisfies the builtin error interface
func (e WardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WardValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Error) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetInvalidFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("InvalidFields[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetErrorActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ErrorActions[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for ProductId

	// no validation rules for Type

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on ErrorAction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ErrorAction) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Label

	// no validation rules for Action

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ErrorActionValidationError is the validation error returned by
// ErrorAction.Validate if the designated constraints aren't met.
type ErrorActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorActionValidationError) ErrorName() string { return "ErrorActionValidationError" }

// Error satisfies the builtin error interface
func (e ErrorActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorActionValidationError{}

// Validate checks the field values on InvalidField with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *InvalidField) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for InvalidCode

	// no validation rules for Field

	// no validation rules for InvalidMessage

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// InvalidFieldValidationError is the validation error returned by
// InvalidField.Validate if the designated constraints aren't met.
type InvalidFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidFieldValidationError) ErrorName() string { return "InvalidFieldValidationError" }

// Error satisfies the builtin error interface
func (e InvalidFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidFieldValidationError{}

// Validate checks the field values on CheckoutLoadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckoutLoadRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	// no validation rules for ItemHash

	// no validation rules for CurrentAddressId

	// no validation rules for CurrentCarrier

	if v, ok := interface{}(m.GetCurrentPaymentMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CurrentPaymentMethod", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetCurrentVoucher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CurrentVoucher", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetCurrentLoyalty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CurrentLoyalty", "embedded message failed validation"))
		}
	}

	// no validation rules for SendoPlatform

	for idx, item := range m.GetCurrentProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("CurrentProducts[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for DeviceId

	// no validation rules for OtpCode

	// no validation rules for SenpayToken

	// no validation rules for SenpayRefreshToken

	// no validation rules for CustomerNote

	// no validation rules for EnableTracking

	// no validation rules for IgnoreInvalidProduct

	// no validation rules for Version

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckoutLoadRequestValidationError is the validation error returned by
// CheckoutLoadRequest.Validate if the designated constraints aren't met.
type CheckoutLoadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckoutLoadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckoutLoadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckoutLoadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckoutLoadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckoutLoadRequestValidationError) ErrorName() string {
	return "CheckoutLoadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckoutLoadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckoutLoadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckoutLoadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckoutLoadRequestValidationError{}

// Validate checks the field values on CheckoutLoadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckoutLoadResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Errors[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for IsError

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckoutLoadResponseValidationError is the validation error returned by
// CheckoutLoadResponse.Validate if the designated constraints aren't met.
type CheckoutLoadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckoutLoadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckoutLoadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckoutLoadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckoutLoadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckoutLoadResponseValidationError) ErrorName() string {
	return "CheckoutLoadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckoutLoadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckoutLoadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckoutLoadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckoutLoadResponseValidationError{}

// Validate checks the field values on GetCustomerAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomerAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCustomerAddressRequestValidationError is the validation error returned by
// GetCustomerAddressRequest.Validate if the designated constraints aren't met.
type GetCustomerAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerAddressRequestValidationError) ErrorName() string {
	return "GetCustomerAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerAddressRequestValidationError{}

// Validate checks the field values on GetCustomerAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomerAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCustomerAddressResponseValidationError is the validation error returned
// by GetCustomerAddressResponse.Validate if the designated constraints aren't met.
type GetCustomerAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerAddressResponseValidationError) ErrorName() string {
	return "GetCustomerAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerAddressResponseValidationError{}

// Validate checks the field values on GetCustomerVoucherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomerVoucherRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCustomerVoucherRequestValidationError is the validation error returned by
// GetCustomerVoucherRequest.Validate if the designated constraints aren't met.
type GetCustomerVoucherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerVoucherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerVoucherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerVoucherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerVoucherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerVoucherRequestValidationError) ErrorName() string {
	return "GetCustomerVoucherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerVoucherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerVoucherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerVoucherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerVoucherRequestValidationError{}

// Validate checks the field values on GetCustomerVoucherResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomerVoucherResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetSendo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Sendo[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetShop() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Shop[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCustomerVoucherResponseValidationError is the validation error returned
// by GetCustomerVoucherResponse.Validate if the designated constraints aren't met.
type GetCustomerVoucherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerVoucherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerVoucherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerVoucherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerVoucherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerVoucherResponseValidationError) ErrorName() string {
	return "GetCustomerVoucherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerVoucherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerVoucherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerVoucherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerVoucherResponseValidationError{}

// Validate checks the field values on AddCustomerAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomerAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CityId

	// no validation rules for DistrictId

	// no validation rules for WardId

	// no validation rules for Street

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for FirstName

	// no validation rules for MiddleName

	// no validation rules for LastName

	// no validation rules for Fax

	// no validation rules for Telephone

	// no validation rules for Email

	// no validation rules for SetToDefault

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddCustomerAddressRequestValidationError is the validation error returned by
// AddCustomerAddressRequest.Validate if the designated constraints aren't met.
type AddCustomerAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomerAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomerAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomerAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomerAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomerAddressRequestValidationError) ErrorName() string {
	return "AddCustomerAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomerAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomerAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomerAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomerAddressRequestValidationError{}

// Validate checks the field values on AddCustomerAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomerAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddCustomerAddressResponseValidationError is the validation error returned
// by AddCustomerAddressResponse.Validate if the designated constraints aren't met.
type AddCustomerAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomerAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomerAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomerAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomerAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomerAddressResponseValidationError) ErrorName() string {
	return "AddCustomerAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomerAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomerAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomerAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomerAddressResponseValidationError{}

// Validate checks the field values on RepushAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepushAffiliateRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Type

	// no validation rules for FromDate

	// no validation rules for ToDate

	// no validation rules for Provider

	// no validation rules for IsLog

	// no validation rules for Limit

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RepushAffiliateRequestValidationError is the validation error returned by
// RepushAffiliateRequest.Validate if the designated constraints aren't met.
type RepushAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepushAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepushAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepushAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepushAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepushAffiliateRequestValidationError) ErrorName() string {
	return "RepushAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RepushAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepushAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepushAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepushAffiliateRequestValidationError{}

// Validate checks the field values on RepushAffiliateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepushAffiliateResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Pushed

	// no validation rules for Success

	// no validation rules for Fail

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RepushAffiliateResponseValidationError is the validation error returned by
// RepushAffiliateResponse.Validate if the designated constraints aren't met.
type RepushAffiliateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepushAffiliateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepushAffiliateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepushAffiliateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepushAffiliateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepushAffiliateResponseValidationError) ErrorName() string {
	return "RepushAffiliateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RepushAffiliateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepushAffiliateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepushAffiliateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepushAffiliateResponseValidationError{}

// Validate checks the field values on UpdateCustomerAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomerAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for AddressId

	// no validation rules for CityId

	// no validation rules for DistrictId

	// no validation rules for WardId

	// no validation rules for Street

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for FirstName

	// no validation rules for MiddleName

	// no validation rules for LastName

	// no validation rules for Fax

	// no validation rules for Telephone

	// no validation rules for Email

	// no validation rules for UpdateToDefault

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateCustomerAddressRequestValidationError is the validation error returned
// by UpdateCustomerAddressRequest.Validate if the designated constraints
// aren't met.
type UpdateCustomerAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerAddressRequestValidationError) ErrorName() string {
	return "UpdateCustomerAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerAddressRequestValidationError{}

// Validate checks the field values on UpdateCustomerAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomerAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateCustomerAddressResponseValidationError is the validation error
// returned by UpdateCustomerAddressResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomerAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerAddressResponseValidationError) ErrorName() string {
	return "UpdateCustomerAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerAddressResponseValidationError{}

// Validate checks the field values on DeleteCustomerAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCustomerAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for AddressId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteCustomerAddressRequestValidationError is the validation error returned
// by DeleteCustomerAddressRequest.Validate if the designated constraints
// aren't met.
type DeleteCustomerAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerAddressRequestValidationError) ErrorName() string {
	return "DeleteCustomerAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerAddressRequestValidationError{}

// Validate checks the field values on DeleteCustomerAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCustomerAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteCustomerAddressResponseValidationError is the validation error
// returned by DeleteCustomerAddressResponse.Validate if the designated
// constraints aren't met.
type DeleteCustomerAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerAddressResponseValidationError) ErrorName() string {
	return "DeleteCustomerAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerAddressResponseValidationError{}

// Validate checks the field values on GetRegionsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRegionsListRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRegionsListRequestValidationError is the validation error returned by
// GetRegionsListRequest.Validate if the designated constraints aren't met.
type GetRegionsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegionsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegionsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegionsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegionsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegionsListRequestValidationError) ErrorName() string {
	return "GetRegionsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegionsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegionsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegionsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegionsListRequestValidationError{}

// Validate checks the field values on GetRegionsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRegionsListResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRegionsListResponseValidationError is the validation error returned by
// GetRegionsListResponse.Validate if the designated constraints aren't met.
type GetRegionsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegionsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegionsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegionsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegionsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegionsListResponseValidationError) ErrorName() string {
	return "GetRegionsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegionsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegionsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegionsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegionsListResponseValidationError{}

// Validate checks the field values on GetWardsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWardsListRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for DistrictId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetWardsListRequestValidationError is the validation error returned by
// GetWardsListRequest.Validate if the designated constraints aren't met.
type GetWardsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWardsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWardsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWardsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWardsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWardsListRequestValidationError) ErrorName() string {
	return "GetWardsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWardsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWardsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWardsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWardsListRequestValidationError{}

// Validate checks the field values on GetWardsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWardsListResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetWardsListResponseValidationError is the validation error returned by
// GetWardsListResponse.Validate if the designated constraints aren't met.
type GetWardsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWardsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWardsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWardsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWardsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWardsListResponseValidationError) ErrorName() string {
	return "GetWardsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWardsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWardsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWardsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWardsListResponseValidationError{}

// Validate checks the field values on GetShippingCarriersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetShippingCarriersRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopId

	// no validation rules for AddressId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetShippingCarriersRequestValidationError is the validation error returned
// by GetShippingCarriersRequest.Validate if the designated constraints aren't met.
type GetShippingCarriersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingCarriersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingCarriersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingCarriersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingCarriersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingCarriersRequestValidationError) ErrorName() string {
	return "GetShippingCarriersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingCarriersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingCarriersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingCarriersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingCarriersRequestValidationError{}

// Validate checks the field values on GetShippingCarriersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetShippingCarriersResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetShippingCarriersResponseValidationError is the validation error returned
// by GetShippingCarriersResponse.Validate if the designated constraints
// aren't met.
type GetShippingCarriersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingCarriersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingCarriersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingCarriersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingCarriersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingCarriersResponseValidationError) ErrorName() string {
	return "GetShippingCarriersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingCarriersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingCarriersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingCarriersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingCarriersResponseValidationError{}

// Validate checks the field values on GetOrderInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrderInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderIncrementId

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetOrderInfoRequestValidationError is the validation error returned by
// GetOrderInfoRequest.Validate if the designated constraints aren't met.
type GetOrderInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderInfoRequestValidationError) ErrorName() string {
	return "GetOrderInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderInfoRequestValidationError{}

// Validate checks the field values on GetOrderInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrderInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IncrementId

	// no validation rules for CustomerName

	// no validation rules for ShopName

	// no validation rules for GrandTotal

	// no validation rules for OrderCurrencyCode

	// no validation rules for PaymentStatus

	// no validation rules for PaymentStatusLabel

	// no validation rules for PaymentMethod

	// no validation rules for PaymentMethodLabel

	// no validation rules for PaymentType

	if v, ok := interface{}(m.GetPaymentTransferInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("PaymentTransferInfo", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetPaymentWalletInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("PaymentWalletInfo", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Actions[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetAppActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("AppActions[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Viewed

	if v, ok := interface{}(m.GetTrackingData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("TrackingData", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	// no validation rules for DeliveryDurationNote

	if v, ok := interface{}(m.GetCustomerData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CustomerData", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetOrderInfoResponseValidationError is the validation error returned by
// GetOrderInfoResponse.Validate if the designated constraints aren't met.
type GetOrderInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderInfoResponseValidationError) ErrorName() string {
	return "GetOrderInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderInfoResponseValidationError{}

// Validate checks the field values on UpdateOrderViewedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrderViewedRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderIncrementId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateOrderViewedRequestValidationError is the validation error returned by
// UpdateOrderViewedRequest.Validate if the designated constraints aren't met.
type UpdateOrderViewedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderViewedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderViewedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderViewedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderViewedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderViewedRequestValidationError) ErrorName() string {
	return "UpdateOrderViewedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderViewedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderViewedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderViewedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderViewedRequestValidationError{}

// Validate checks the field values on UpdateOrderViewedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrderViewedResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateOrderViewedResponseValidationError is the validation error returned by
// UpdateOrderViewedResponse.Validate if the designated constraints aren't met.
type UpdateOrderViewedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderViewedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderViewedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderViewedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderViewedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderViewedResponseValidationError) ErrorName() string {
	return "UpdateOrderViewedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderViewedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderViewedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderViewedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderViewedResponseValidationError{}

// Validate checks the field values on ActionAfterSuccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActionAfterSuccess) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Type

	// no validation rules for Label

	// no validation rules for Action

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ActionAfterSuccessValidationError is the validation error returned by
// ActionAfterSuccess.Validate if the designated constraints aren't met.
type ActionAfterSuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionAfterSuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionAfterSuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionAfterSuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionAfterSuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionAfterSuccessValidationError) ErrorName() string {
	return "ActionAfterSuccessValidationError"
}

// Error satisfies the builtin error interface
func (e ActionAfterSuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionAfterSuccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionAfterSuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionAfterSuccessValidationError{}

// Validate checks the field values on GetSenpayTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSenpayTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetSenpayTokenRequestValidationError is the validation error returned by
// GetSenpayTokenRequest.Validate if the designated constraints aren't met.
type GetSenpayTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSenpayTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSenpayTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSenpayTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSenpayTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSenpayTokenRequestValidationError) ErrorName() string {
	return "GetSenpayTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSenpayTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSenpayTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSenpayTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSenpayTokenRequestValidationError{}

// Validate checks the field values on GetSenpayTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSenpayTokenResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Token

	// no validation rules for RefreshToken

	// no validation rules for ExpireIn

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetSenpayTokenResponseValidationError is the validation error returned by
// GetSenpayTokenResponse.Validate if the designated constraints aren't met.
type GetSenpayTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSenpayTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSenpayTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSenpayTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSenpayTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSenpayTokenResponseValidationError) ErrorName() string {
	return "GetSenpayTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSenpayTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSenpayTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSenpayTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSenpayTokenResponseValidationError{}

// Validate checks the field values on SenpayOtpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SenpayOtpRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderIncrementId

	// no validation rules for PaymentWalletId

	// no validation rules for WalletConfirmType

	// no validation rules for VerifyCode

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// SenpayOtpRequestValidationError is the validation error returned by
// SenpayOtpRequest.Validate if the designated constraints aren't met.
type SenpayOtpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SenpayOtpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SenpayOtpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SenpayOtpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SenpayOtpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SenpayOtpRequestValidationError) ErrorName() string { return "SenpayOtpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SenpayOtpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSenpayOtpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SenpayOtpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SenpayOtpRequestValidationError{}

// Validate checks the field values on SenpayOtpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SenpayOtpResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderIncrementId

	// no validation rules for PaymentStatus

	// no validation rules for PaymentStatusLabel

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Error", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// SenpayOtpResponseValidationError is the validation error returned by
// SenpayOtpResponse.Validate if the designated constraints aren't met.
type SenpayOtpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SenpayOtpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SenpayOtpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SenpayOtpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SenpayOtpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SenpayOtpResponseValidationError) ErrorName() string {
	return "SenpayOtpResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SenpayOtpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSenpayOtpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SenpayOtpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SenpayOtpResponseValidationError{}

// Validate checks the field values on CodOtpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CodOtpRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MerchantExternalId

	// no validation rules for Telephone

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CodOtpRequestValidationError is the validation error returned by
// CodOtpRequest.Validate if the designated constraints aren't met.
type CodOtpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodOtpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodOtpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodOtpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodOtpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodOtpRequestValidationError) ErrorName() string { return "CodOtpRequestValidationError" }

// Error satisfies the builtin error interface
func (e CodOtpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodOtpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodOtpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodOtpRequestValidationError{}

// Validate checks the field values on CodOtpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CodOtpResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for ErrorCode

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CodOtpResponseValidationError is the validation error returned by
// CodOtpResponse.Validate if the designated constraints aren't met.
type CodOtpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodOtpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodOtpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodOtpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodOtpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodOtpResponseValidationError) ErrorName() string { return "CodOtpResponseValidationError" }

// Error satisfies the builtin error interface
func (e CodOtpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodOtpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodOtpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodOtpResponseValidationError{}

// Validate checks the field values on TrackingTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrackingTransaction) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for TransactionId

	// no validation rules for Affiliation

	// no validation rules for Total

	// no validation rules for Tax

	// no validation rules for Shipping

	// no validation rules for City

	// no validation rules for Province

	// no validation rules for Country

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingTransactionValidationError is the validation error returned by
// TrackingTransaction.Validate if the designated constraints aren't met.
type TrackingTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingTransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingTransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingTransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingTransactionValidationError) ErrorName() string {
	return "TrackingTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e TrackingTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingTransactionValidationError{}

// Validate checks the field values on TrackingItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TrackingItem) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for TransactionId

	// no validation rules for Sku

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for Price

	// no validation rules for Quantity

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingItemValidationError is the validation error returned by
// TrackingItem.Validate if the designated constraints aren't met.
type TrackingItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingItemValidationError) ErrorName() string { return "TrackingItemValidationError" }

// Error satisfies the builtin error interface
func (e TrackingItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingItemValidationError{}

// Validate checks the field values on TrackingCustomer with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrackingCustomer) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Index

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for OptScope

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingCustomerValidationError is the validation error returned by
// TrackingCustomer.Validate if the designated constraints aren't met.
type TrackingCustomerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingCustomerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingCustomerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingCustomerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingCustomerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingCustomerValidationError) ErrorName() string { return "TrackingCustomerValidationError" }

// Error satisfies the builtin error interface
func (e TrackingCustomerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingCustomer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingCustomerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingCustomerValidationError{}

// Validate checks the field values on TrackingActionFeild with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrackingActionFeild) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Affiliation

	// no validation rules for Revenue

	// no validation rules for Tax

	// no validation rules for Shipping

	// no validation rules for Coupon

	// no validation rules for Option

	// no validation rules for Action

	// no validation rules for LotusPointsUsed

	// no validation rules for ShipTime

	// no validation rules for ShipTo

	// no validation rules for Express

	// no validation rules for Step

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingActionFeildValidationError is the validation error returned by
// TrackingActionFeild.Validate if the designated constraints aren't met.
type TrackingActionFeildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingActionFeildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingActionFeildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingActionFeildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingActionFeildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingActionFeildValidationError) ErrorName() string {
	return "TrackingActionFeildValidationError"
}

// Error satisfies the builtin error interface
func (e TrackingActionFeildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingActionFeild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingActionFeildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingActionFeildValidationError{}

// Validate checks the field values on TrackingShopReputation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrackingShopReputation) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Point

	// no validation rules for Type

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingShopReputationValidationError is the validation error returned by
// TrackingShopReputation.Validate if the designated constraints aren't met.
type TrackingShopReputationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingShopReputationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingShopReputationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingShopReputationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingShopReputationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingShopReputationValidationError) ErrorName() string {
	return "TrackingShopReputationValidationError"
}

// Error satisfies the builtin error interface
func (e TrackingShopReputationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingShopReputation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingShopReputationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingShopReputationValidationError{}

// Validate checks the field values on TrackingCategory with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrackingCategory) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Slug

	// no validation rules for Name

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingCategoryValidationError is the validation error returned by
// TrackingCategory.Validate if the designated constraints aren't met.
type TrackingCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingCategoryValidationError) ErrorName() string { return "TrackingCategoryValidationError" }

// Error satisfies the builtin error interface
func (e TrackingCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingCategoryValidationError{}

// Validate checks the field values on TrackingGoogleTagParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrackingGoogleTagParams) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for EcommPagetype

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingGoogleTagParamsValidationError is the validation error returned by
// TrackingGoogleTagParams.Validate if the designated constraints aren't met.
type TrackingGoogleTagParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingGoogleTagParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingGoogleTagParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingGoogleTagParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingGoogleTagParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingGoogleTagParamsValidationError) ErrorName() string {
	return "TrackingGoogleTagParamsValidationError"
}

// Error satisfies the builtin error interface
func (e TrackingGoogleTagParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingGoogleTagParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingGoogleTagParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingGoogleTagParamsValidationError{}

// Validate checks the field values on TrackingProduct with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrackingProduct) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Price

	// no validation rules for Brand

	// no validation rules for Category

	// no validation rules for Variant

	// no validation rules for Quantity

	// no validation rules for Coupon

	// no validation rules for ShopId

	// no validation rules for ShopExtId

	if v, ok := interface{}(m.GetShopReputation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ShopReputation", "embedded message failed validation"))
		}
	}

	// no validation rules for SourceBlockId

	// no validation rules for SourcePageId

	// no validation rules for SourceUrl

	// no validation rules for SourceInfo

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Categories[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for FinalPrice

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingProductValidationError is the validation error returned by
// TrackingProduct.Validate if the designated constraints aren't met.
type TrackingProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingProductValidationError) ErrorName() string { return "TrackingProductValidationError" }

// Error satisfies the builtin error interface
func (e TrackingProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingProductValidationError{}

// Validate checks the field values on TrackingPurchase with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrackingPurchase) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetActionField()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ActionField", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Products[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingPurchaseValidationError is the validation error returned by
// TrackingPurchase.Validate if the designated constraints aren't met.
type TrackingPurchaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingPurchaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingPurchaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingPurchaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingPurchaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingPurchaseValidationError) ErrorName() string { return "TrackingPurchaseValidationError" }

// Error satisfies the builtin error interface
func (e TrackingPurchaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingPurchase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingPurchaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingPurchaseValidationError{}

// Validate checks the field values on TrackingCheckout with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrackingCheckout) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetActionField()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ActionField", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Products[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingCheckoutValidationError is the validation error returned by
// TrackingCheckout.Validate if the designated constraints aren't met.
type TrackingCheckoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingCheckoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingCheckoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingCheckoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingCheckoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingCheckoutValidationError) ErrorName() string { return "TrackingCheckoutValidationError" }

// Error satisfies the builtin error interface
func (e TrackingCheckoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingCheckout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingCheckoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingCheckoutValidationError{}

// Validate checks the field values on TrackingEcommerce with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrackingEcommerce) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetPurchase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Purchase", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetCheckout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Checkout", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingEcommerceValidationError is the validation error returned by
// TrackingEcommerce.Validate if the designated constraints aren't met.
type TrackingEcommerceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingEcommerceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingEcommerceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingEcommerceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingEcommerceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingEcommerceValidationError) ErrorName() string {
	return "TrackingEcommerceValidationError"
}

// Error satisfies the builtin error interface
func (e TrackingEcommerceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingEcommerce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingEcommerceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingEcommerceValidationError{}

// Validate checks the field values on TrackingEcommerceData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrackingEcommerceData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetEcommerce()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Ecommerce", "embedded message failed validation"))
		}
	}

	// no validation rules for Event

	// no validation rules for SendoPlatform

	if v, ok := interface{}(m.GetGoogleTagParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("GoogleTagParams", "embedded message failed validation"))
		}
	}

	// no validation rules for Pageurl

	// no validation rules for Email

	// no validation rules for Userid

	// no validation rules for LoginType

	// no validation rules for IsFirstOrder

	// no validation rules for ClientTime

	// no validation rules for IpClient

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingEcommerceDataValidationError is the validation error returned by
// TrackingEcommerceData.Validate if the designated constraints aren't met.
type TrackingEcommerceDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingEcommerceDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingEcommerceDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingEcommerceDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingEcommerceDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingEcommerceDataValidationError) ErrorName() string {
	return "TrackingEcommerceDataValidationError"
}

// Error satisfies the builtin error interface
func (e TrackingEcommerceDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingEcommerceData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingEcommerceDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingEcommerceDataValidationError{}

// Validate checks the field values on TrackingData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TrackingData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for View

	// no validation rules for NewUser

	if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Transaction", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Items[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Customer", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetEcommerceData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("EcommerceData", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// TrackingDataValidationError is the validation error returned by
// TrackingData.Validate if the designated constraints aren't met.
type TrackingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackingDataValidationError) ErrorName() string { return "TrackingDataValidationError" }

// Error satisfies the builtin error interface
func (e TrackingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackingDataValidationError{}

// Validate checks the field values on RepushOPCOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepushOPCOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Rebuild

	// no validation rules for IsOldOrder

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RepushOPCOrderRequestValidationError is the validation error returned by
// RepushOPCOrderRequest.Validate if the designated constraints aren't met.
type RepushOPCOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepushOPCOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepushOPCOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepushOPCOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepushOPCOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepushOPCOrderRequestValidationError) ErrorName() string {
	return "RepushOPCOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RepushOPCOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepushOPCOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepushOPCOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepushOPCOrderRequestValidationError{}

// Validate checks the field values on RepushOPCOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepushOPCOrderResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IsError

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RepushOPCOrderResponseValidationError is the validation error returned by
// RepushOPCOrderResponse.Validate if the designated constraints aren't met.
type RepushOPCOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepushOPCOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepushOPCOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepushOPCOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepushOPCOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepushOPCOrderResponseValidationError) ErrorName() string {
	return "RepushOPCOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RepushOPCOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepushOPCOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepushOPCOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepushOPCOrderResponseValidationError{}
