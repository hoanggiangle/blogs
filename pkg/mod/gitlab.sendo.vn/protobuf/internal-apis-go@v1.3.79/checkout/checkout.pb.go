// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checkout/checkout.proto

package checkout // import "gitlab.sendo.vn/protobuf/internal-apis-go/checkout"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import flashdeal "gitlab.sendo.vn/protobuf/internal-apis-go/product/flashdeal"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SaveOrderResponse struct {
	IsError              bool           `protobuf:"varint,1,opt,name=is_error,proto3" json:"is_error,omitempty"`
	Errors               []*Error       `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	IncrementId          int64          `protobuf:"varint,3,opt,name=increment_id,proto3" json:"increment_id,omitempty"`
	PaymentType          string         `protobuf:"bytes,4,opt,name=payment_type,proto3" json:"payment_type,omitempty"`
	PaymentFailed        bool           `protobuf:"varint,5,opt,name=payment_failed,proto3" json:"payment_failed,omitempty"`
	PaymentFailedReason  string         `protobuf:"bytes,6,opt,name=payment_failed_reason,proto3" json:"payment_failed_reason,omitempty"`
	PaymentId            string         `protobuf:"bytes,7,opt,name=payment_id,proto3" json:"payment_id,omitempty"`
	PaymentConfirmType   int32          `protobuf:"varint,9,opt,name=payment_confirm_type,proto3" json:"payment_confirm_type,omitempty"`
	PaymentUrl           string         `protobuf:"bytes,10,opt,name=payment_url,proto3" json:"payment_url,omitempty"`
	DisableSaveOrder     bool           `protobuf:"varint,11,opt,name=disable_save_order,proto3" json:"disable_save_order,omitempty"`
	VerifyUrl            string         `protobuf:"bytes,12,opt,name=verify_url,proto3" json:"verify_url,omitempty"`
	CurrentProducts      []*ProductItem `protobuf:"bytes,13,rep,name=current_products" json:"current_products,omitempty"`
	IgnoreInvalidProduct int32          `protobuf:"varint,14,opt,name=ignore_invalid_product,proto3" json:"ignore_invalid_product,omitempty"`
	ProductHashes        []string       `protobuf:"bytes,15,rep,name=product_hashes" json:"product_hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SaveOrderResponse) Reset()         { *m = SaveOrderResponse{} }
func (m *SaveOrderResponse) String() string { return proto.CompactTextString(m) }
func (*SaveOrderResponse) ProtoMessage()    {}
func (*SaveOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{0}
}
func (m *SaveOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SaveOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveOrderResponse.Merge(dst, src)
}
func (m *SaveOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveOrderResponse proto.InternalMessageInfo

func (m *SaveOrderResponse) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *SaveOrderResponse) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *SaveOrderResponse) GetIncrementId() int64 {
	if m != nil {
		return m.IncrementId
	}
	return 0
}

func (m *SaveOrderResponse) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *SaveOrderResponse) GetPaymentFailed() bool {
	if m != nil {
		return m.PaymentFailed
	}
	return false
}

func (m *SaveOrderResponse) GetPaymentFailedReason() string {
	if m != nil {
		return m.PaymentFailedReason
	}
	return ""
}

func (m *SaveOrderResponse) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

func (m *SaveOrderResponse) GetPaymentConfirmType() int32 {
	if m != nil {
		return m.PaymentConfirmType
	}
	return 0
}

func (m *SaveOrderResponse) GetPaymentUrl() string {
	if m != nil {
		return m.PaymentUrl
	}
	return ""
}

func (m *SaveOrderResponse) GetDisableSaveOrder() bool {
	if m != nil {
		return m.DisableSaveOrder
	}
	return false
}

func (m *SaveOrderResponse) GetVerifyUrl() string {
	if m != nil {
		return m.VerifyUrl
	}
	return ""
}

func (m *SaveOrderResponse) GetCurrentProducts() []*ProductItem {
	if m != nil {
		return m.CurrentProducts
	}
	return nil
}

func (m *SaveOrderResponse) GetIgnoreInvalidProduct() int32 {
	if m != nil {
		return m.IgnoreInvalidProduct
	}
	return 0
}

func (m *SaveOrderResponse) GetProductHashes() []string {
	if m != nil {
		return m.ProductHashes
	}
	return nil
}

type CheckoutData struct {
	CustomerData         *CustomerData          `protobuf:"bytes,1,opt,name=customer_data" json:"customer_data,omitempty"`
	ProductsCheckout     *ProductCheckout       `protobuf:"bytes,2,opt,name=products_checkout" json:"products_checkout,omitempty"`
	ShopInfo             *ShopInfo              `protobuf:"bytes,3,opt,name=shop_info" json:"shop_info,omitempty"`
	ShippingInfo         *ShippingCarrierShop   `protobuf:"bytes,4,opt,name=shipping_info" json:"shipping_info,omitempty"`
	PaymentInfo          *PaymentInfo           `protobuf:"bytes,5,opt,name=payment_info" json:"payment_info,omitempty"`
	VoucherInfo          *VoucherInfo           `protobuf:"bytes,6,opt,name=voucher_info" json:"voucher_info,omitempty"`
	LoyaltyInfo          *LoyaltyInfo           `protobuf:"bytes,7,opt,name=loyalty_info" json:"loyalty_info,omitempty"`
	TotalInfo            *TotalOrderInfo        `protobuf:"bytes,8,opt,name=total_info" json:"total_info,omitempty"`
	CustomerNote         string                 `protobuf:"bytes,9,opt,name=customer_note,proto3" json:"customer_note,omitempty"`
	DisableSaveOrder     bool                   `protobuf:"varint,10,opt,name=disable_save_order,proto3" json:"disable_save_order,omitempty"`
	EcommerceTracking    *TrackingEcommerceData `protobuf:"bytes,11,opt,name=ecommerce_tracking" json:"ecommerce_tracking,omitempty"`
	IgnoreInvalidProduct int32                  `protobuf:"varint,12,opt,name=ignore_invalid_product,proto3" json:"ignore_invalid_product,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CheckoutData) Reset()         { *m = CheckoutData{} }
func (m *CheckoutData) String() string { return proto.CompactTextString(m) }
func (*CheckoutData) ProtoMessage()    {}
func (*CheckoutData) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{1}
}
func (m *CheckoutData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckoutData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckoutData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckoutData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckoutData.Merge(dst, src)
}
func (m *CheckoutData) XXX_Size() int {
	return m.Size()
}
func (m *CheckoutData) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckoutData.DiscardUnknown(m)
}

var xxx_messageInfo_CheckoutData proto.InternalMessageInfo

func (m *CheckoutData) GetCustomerData() *CustomerData {
	if m != nil {
		return m.CustomerData
	}
	return nil
}

func (m *CheckoutData) GetProductsCheckout() *ProductCheckout {
	if m != nil {
		return m.ProductsCheckout
	}
	return nil
}

func (m *CheckoutData) GetShopInfo() *ShopInfo {
	if m != nil {
		return m.ShopInfo
	}
	return nil
}

func (m *CheckoutData) GetShippingInfo() *ShippingCarrierShop {
	if m != nil {
		return m.ShippingInfo
	}
	return nil
}

func (m *CheckoutData) GetPaymentInfo() *PaymentInfo {
	if m != nil {
		return m.PaymentInfo
	}
	return nil
}

func (m *CheckoutData) GetVoucherInfo() *VoucherInfo {
	if m != nil {
		return m.VoucherInfo
	}
	return nil
}

func (m *CheckoutData) GetLoyaltyInfo() *LoyaltyInfo {
	if m != nil {
		return m.LoyaltyInfo
	}
	return nil
}

func (m *CheckoutData) GetTotalInfo() *TotalOrderInfo {
	if m != nil {
		return m.TotalInfo
	}
	return nil
}

func (m *CheckoutData) GetCustomerNote() string {
	if m != nil {
		return m.CustomerNote
	}
	return ""
}

func (m *CheckoutData) GetDisableSaveOrder() bool {
	if m != nil {
		return m.DisableSaveOrder
	}
	return false
}

func (m *CheckoutData) GetEcommerceTracking() *TrackingEcommerceData {
	if m != nil {
		return m.EcommerceTracking
	}
	return nil
}

func (m *CheckoutData) GetIgnoreInvalidProduct() int32 {
	if m != nil {
		return m.IgnoreInvalidProduct
	}
	return 0
}

type TotalOrderInfo struct {
	SubTotal                  float32            `protobuf:"fixed32,1,opt,name=sub_total,proto3" json:"sub_total,omitempty"`
	VoucherAmount             float32            `protobuf:"fixed32,2,opt,name=voucher_amount,proto3" json:"voucher_amount,omitempty"`
	LoyaltyAmount             float32            `protobuf:"fixed32,3,opt,name=loyalty_amount,proto3" json:"loyalty_amount,omitempty"`
	DeliveryFee               float32            `protobuf:"fixed32,4,opt,name=delivery_fee,proto3" json:"delivery_fee,omitempty"`
	CodFee                    float32            `protobuf:"fixed32,5,opt,name=cod_fee,proto3" json:"cod_fee,omitempty"`
	SendoDiscountFee          float32            `protobuf:"fixed32,6,opt,name=sendo_discount_fee,proto3" json:"sendo_discount_fee,omitempty"`
	ShopDiscountFee           float32            `protobuf:"fixed32,7,opt,name=shop_discount_fee,proto3" json:"shop_discount_fee,omitempty"`
	SendoDiscountPrice        float32            `protobuf:"fixed32,8,opt,name=sendo_discount_price,proto3" json:"sendo_discount_price,omitempty"`
	ShopDiscountMobile        float32            `protobuf:"fixed32,9,opt,name=shop_discount_mobile,proto3" json:"shop_discount_mobile,omitempty"`
	ShopDiscountOnlinePayment float32            `protobuf:"fixed32,10,opt,name=shop_discount_online_payment,proto3" json:"shop_discount_online_payment,omitempty"`
	GrandTotal                float32            `protobuf:"fixed32,11,opt,name=grand_total,proto3" json:"grand_total,omitempty"`
	TotalSubsidyAmount        float32            `protobuf:"fixed32,12,opt,name=total_subsidy_amount,proto3" json:"total_subsidy_amount,omitempty"`
	TotalDetail               []*TotalDetailItem `protobuf:"bytes,13,rep,name=total_detail" json:"total_detail,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}           `json:"-"`
	XXX_unrecognized          []byte             `json:"-"`
	XXX_sizecache             int32              `json:"-"`
}

func (m *TotalOrderInfo) Reset()         { *m = TotalOrderInfo{} }
func (m *TotalOrderInfo) String() string { return proto.CompactTextString(m) }
func (*TotalOrderInfo) ProtoMessage()    {}
func (*TotalOrderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{2}
}
func (m *TotalOrderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalOrderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalOrderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TotalOrderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalOrderInfo.Merge(dst, src)
}
func (m *TotalOrderInfo) XXX_Size() int {
	return m.Size()
}
func (m *TotalOrderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalOrderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TotalOrderInfo proto.InternalMessageInfo

func (m *TotalOrderInfo) GetSubTotal() float32 {
	if m != nil {
		return m.SubTotal
	}
	return 0
}

func (m *TotalOrderInfo) GetVoucherAmount() float32 {
	if m != nil {
		return m.VoucherAmount
	}
	return 0
}

func (m *TotalOrderInfo) GetLoyaltyAmount() float32 {
	if m != nil {
		return m.LoyaltyAmount
	}
	return 0
}

func (m *TotalOrderInfo) GetDeliveryFee() float32 {
	if m != nil {
		return m.DeliveryFee
	}
	return 0
}

func (m *TotalOrderInfo) GetCodFee() float32 {
	if m != nil {
		return m.CodFee
	}
	return 0
}

func (m *TotalOrderInfo) GetSendoDiscountFee() float32 {
	if m != nil {
		return m.SendoDiscountFee
	}
	return 0
}

func (m *TotalOrderInfo) GetShopDiscountFee() float32 {
	if m != nil {
		return m.ShopDiscountFee
	}
	return 0
}

func (m *TotalOrderInfo) GetSendoDiscountPrice() float32 {
	if m != nil {
		return m.SendoDiscountPrice
	}
	return 0
}

func (m *TotalOrderInfo) GetShopDiscountMobile() float32 {
	if m != nil {
		return m.ShopDiscountMobile
	}
	return 0
}

func (m *TotalOrderInfo) GetShopDiscountOnlinePayment() float32 {
	if m != nil {
		return m.ShopDiscountOnlinePayment
	}
	return 0
}

func (m *TotalOrderInfo) GetGrandTotal() float32 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *TotalOrderInfo) GetTotalSubsidyAmount() float32 {
	if m != nil {
		return m.TotalSubsidyAmount
	}
	return 0
}

func (m *TotalOrderInfo) GetTotalDetail() []*TotalDetailItem {
	if m != nil {
		return m.TotalDetail
	}
	return nil
}

type TotalDetailItem struct {
	Index                int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Value                float32  `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Label                string   `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Sign                 int32    `protobuf:"varint,5,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TotalDetailItem) Reset()         { *m = TotalDetailItem{} }
func (m *TotalDetailItem) String() string { return proto.CompactTextString(m) }
func (*TotalDetailItem) ProtoMessage()    {}
func (*TotalDetailItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{3}
}
func (m *TotalDetailItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalDetailItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalDetailItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TotalDetailItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalDetailItem.Merge(dst, src)
}
func (m *TotalDetailItem) XXX_Size() int {
	return m.Size()
}
func (m *TotalDetailItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalDetailItem.DiscardUnknown(m)
}

var xxx_messageInfo_TotalDetailItem proto.InternalMessageInfo

func (m *TotalDetailItem) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TotalDetailItem) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *TotalDetailItem) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TotalDetailItem) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TotalDetailItem) GetSign() int32 {
	if m != nil {
		return m.Sign
	}
	return 0
}

type LoyaltyInfo struct {
	Score                float32  `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	UseScore             float32  `protobuf:"fixed32,2,opt,name=use_score,proto3" json:"use_score,omitempty"`
	BonusScore           float32  `protobuf:"fixed32,3,opt,name=bonus_score,proto3" json:"bonus_score,omitempty"`
	SuggestedMsg         string   `protobuf:"bytes,4,opt,name=suggested_msg,proto3" json:"suggested_msg,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,5,opt,name=error_msg,proto3" json:"error_msg,omitempty"`
	SuggestScore         string   `protobuf:"bytes,6,opt,name=suggest_score,proto3" json:"suggest_score,omitempty"`
	SuggestMessage       string   `protobuf:"bytes,7,opt,name=suggest_message,proto3" json:"suggest_message,omitempty"`
	DisableLoyalty       bool     `protobuf:"varint,8,opt,name=disable_loyalty,proto3" json:"disable_loyalty,omitempty"`
	SuggestedUseScoreMsg string   `protobuf:"bytes,9,opt,name=suggested_use_score_msg,proto3" json:"suggested_use_score_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoyaltyInfo) Reset()         { *m = LoyaltyInfo{} }
func (m *LoyaltyInfo) String() string { return proto.CompactTextString(m) }
func (*LoyaltyInfo) ProtoMessage()    {}
func (*LoyaltyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{4}
}
func (m *LoyaltyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoyaltyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoyaltyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoyaltyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoyaltyInfo.Merge(dst, src)
}
func (m *LoyaltyInfo) XXX_Size() int {
	return m.Size()
}
func (m *LoyaltyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LoyaltyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LoyaltyInfo proto.InternalMessageInfo

func (m *LoyaltyInfo) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *LoyaltyInfo) GetUseScore() float32 {
	if m != nil {
		return m.UseScore
	}
	return 0
}

func (m *LoyaltyInfo) GetBonusScore() float32 {
	if m != nil {
		return m.BonusScore
	}
	return 0
}

func (m *LoyaltyInfo) GetSuggestedMsg() string {
	if m != nil {
		return m.SuggestedMsg
	}
	return ""
}

func (m *LoyaltyInfo) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *LoyaltyInfo) GetSuggestScore() string {
	if m != nil {
		return m.SuggestScore
	}
	return ""
}

func (m *LoyaltyInfo) GetSuggestMessage() string {
	if m != nil {
		return m.SuggestMessage
	}
	return ""
}

func (m *LoyaltyInfo) GetDisableLoyalty() bool {
	if m != nil {
		return m.DisableLoyalty
	}
	return false
}

func (m *LoyaltyInfo) GetSuggestedUseScoreMsg() string {
	if m != nil {
		return m.SuggestedUseScoreMsg
	}
	return ""
}

type VoucherInfo struct {
	EnableSuggestVoucher bool     `protobuf:"varint,1,opt,name=enable_suggest_voucher,proto3" json:"enable_suggest_voucher,omitempty"`
	VoucherCode          string   `protobuf:"bytes,2,opt,name=voucher_code,proto3" json:"voucher_code,omitempty"`
	VoucherValue         float32  `protobuf:"fixed32,3,opt,name=voucher_value,proto3" json:"voucher_value,omitempty"`
	IsShopVoucher        bool     `protobuf:"varint,4,opt,name=is_shop_voucher,proto3" json:"is_shop_voucher,omitempty"`
	VoucherCampaignCode  string   `protobuf:"bytes,5,opt,name=voucher_campaign_code,proto3" json:"voucher_campaign_code,omitempty"`
	SubTotal             float32  `protobuf:"fixed32,6,opt,name=sub_total,proto3" json:"sub_total,omitempty"`
	PaymentMethod        string   `protobuf:"bytes,7,opt,name=payment_method,proto3" json:"payment_method,omitempty"`
	TrackingOrderSource  int32    `protobuf:"varint,8,opt,name=tracking_order_source,proto3" json:"tracking_order_source,omitempty"`
	RedeemedAt           int64    `protobuf:"varint,9,opt,name=redeemed_at,proto3" json:"redeemed_at,omitempty"`
	IsEnableCaptcha      bool     `protobuf:"varint,10,opt,name=is_enable_captcha,proto3" json:"is_enable_captcha,omitempty"`
	CaptchaResponse      string   `protobuf:"bytes,11,opt,name=captcha_response,proto3" json:"captcha_response,omitempty"`
	SuggestedMessage     string   `protobuf:"bytes,12,opt,name=suggested_message,proto3" json:"suggested_message,omitempty"`
	Error                string   `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoucherInfo) Reset()         { *m = VoucherInfo{} }
func (m *VoucherInfo) String() string { return proto.CompactTextString(m) }
func (*VoucherInfo) ProtoMessage()    {}
func (*VoucherInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{5}
}
func (m *VoucherInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VoucherInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherInfo.Merge(dst, src)
}
func (m *VoucherInfo) XXX_Size() int {
	return m.Size()
}
func (m *VoucherInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherInfo proto.InternalMessageInfo

func (m *VoucherInfo) GetEnableSuggestVoucher() bool {
	if m != nil {
		return m.EnableSuggestVoucher
	}
	return false
}

func (m *VoucherInfo) GetVoucherCode() string {
	if m != nil {
		return m.VoucherCode
	}
	return ""
}

func (m *VoucherInfo) GetVoucherValue() float32 {
	if m != nil {
		return m.VoucherValue
	}
	return 0
}

func (m *VoucherInfo) GetIsShopVoucher() bool {
	if m != nil {
		return m.IsShopVoucher
	}
	return false
}

func (m *VoucherInfo) GetVoucherCampaignCode() string {
	if m != nil {
		return m.VoucherCampaignCode
	}
	return ""
}

func (m *VoucherInfo) GetSubTotal() float32 {
	if m != nil {
		return m.SubTotal
	}
	return 0
}

func (m *VoucherInfo) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *VoucherInfo) GetTrackingOrderSource() int32 {
	if m != nil {
		return m.TrackingOrderSource
	}
	return 0
}

func (m *VoucherInfo) GetRedeemedAt() int64 {
	if m != nil {
		return m.RedeemedAt
	}
	return 0
}

func (m *VoucherInfo) GetIsEnableCaptcha() bool {
	if m != nil {
		return m.IsEnableCaptcha
	}
	return false
}

func (m *VoucherInfo) GetCaptchaResponse() string {
	if m != nil {
		return m.CaptchaResponse
	}
	return ""
}

func (m *VoucherInfo) GetSuggestedMessage() string {
	if m != nil {
		return m.SuggestedMessage
	}
	return ""
}

func (m *VoucherInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PaymentInfo struct {
	ListPayment          []*Payment          `protobuf:"bytes,1,rep,name=list_payment" json:"list_payment,omitempty"`
	CurrentPaymentData   *CurrentPaymentData `protobuf:"bytes,2,opt,name=current_payment_data" json:"current_payment_data,omitempty"`
	ErrorMsg             string              `protobuf:"bytes,3,opt,name=error_msg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PaymentInfo) Reset()         { *m = PaymentInfo{} }
func (m *PaymentInfo) String() string { return proto.CompactTextString(m) }
func (*PaymentInfo) ProtoMessage()    {}
func (*PaymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{6}
}
func (m *PaymentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PaymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentInfo.Merge(dst, src)
}
func (m *PaymentInfo) XXX_Size() int {
	return m.Size()
}
func (m *PaymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentInfo proto.InternalMessageInfo

func (m *PaymentInfo) GetListPayment() []*Payment {
	if m != nil {
		return m.ListPayment
	}
	return nil
}

func (m *PaymentInfo) GetCurrentPaymentData() *CurrentPaymentData {
	if m != nil {
		return m.CurrentPaymentData
	}
	return nil
}

func (m *PaymentInfo) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type ProductInfo struct {
	ProductId            int64                `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	FinalPrice           float32              `protobuf:"fixed32,2,opt,name=final_price,proto3" json:"final_price,omitempty"`
	Promotion            *flashdeal.FlashDeal `protobuf:"bytes,3,opt,name=promotion" json:"promotion,omitempty"`
	Hash                 string               `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProductInfo) Reset()         { *m = ProductInfo{} }
func (m *ProductInfo) String() string { return proto.CompactTextString(m) }
func (*ProductInfo) ProtoMessage()    {}
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{7}
}
func (m *ProductInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductInfo.Merge(dst, src)
}
func (m *ProductInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProductInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProductInfo proto.InternalMessageInfo

func (m *ProductInfo) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductInfo) GetFinalPrice() float32 {
	if m != nil {
		return m.FinalPrice
	}
	return 0
}

func (m *ProductInfo) GetPromotion() *flashdeal.FlashDeal {
	if m != nil {
		return m.Promotion
	}
	return nil
}

func (m *ProductInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type CurrentPayment struct {
	ShopId               int64               `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	CurrentPaymentData   *CurrentPaymentData `protobuf:"bytes,2,opt,name=current_payment_data" json:"current_payment_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CurrentPayment) Reset()         { *m = CurrentPayment{} }
func (m *CurrentPayment) String() string { return proto.CompactTextString(m) }
func (*CurrentPayment) ProtoMessage()    {}
func (*CurrentPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{8}
}
func (m *CurrentPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CurrentPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentPayment.Merge(dst, src)
}
func (m *CurrentPayment) XXX_Size() int {
	return m.Size()
}
func (m *CurrentPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentPayment.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentPayment proto.InternalMessageInfo

func (m *CurrentPayment) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *CurrentPayment) GetCurrentPaymentData() *CurrentPaymentData {
	if m != nil {
		return m.CurrentPaymentData
	}
	return nil
}

type CurrentPaymentData struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	CardType             string   `protobuf:"bytes,2,opt,name=card_type,proto3" json:"card_type,omitempty"`
	Card                 int64    `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	CardId               int64    `protobuf:"varint,4,opt,name=card_id,proto3" json:"card_id,omitempty"`
	CardCvc              string   `protobuf:"bytes,5,opt,name=card_cvc,proto3" json:"card_cvc,omitempty"`
	InstallmentPeriod    int32    `protobuf:"varint,6,opt,name=installment_period,proto3" json:"installment_period,omitempty"`
	BankName             string   `protobuf:"bytes,7,opt,name=bank_name,proto3" json:"bank_name,omitempty"`
	BankId               uint32   `protobuf:"varint,8,opt,name=bank_id,proto3" json:"bank_id,omitempty"`
	Bins                 []string `protobuf:"bytes,9,rep,name=bins" json:"bins,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentPaymentData) Reset()         { *m = CurrentPaymentData{} }
func (m *CurrentPaymentData) String() string { return proto.CompactTextString(m) }
func (*CurrentPaymentData) ProtoMessage()    {}
func (*CurrentPaymentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{9}
}
func (m *CurrentPaymentData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentPaymentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentPaymentData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CurrentPaymentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentPaymentData.Merge(dst, src)
}
func (m *CurrentPaymentData) XXX_Size() int {
	return m.Size()
}
func (m *CurrentPaymentData) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentPaymentData.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentPaymentData proto.InternalMessageInfo

func (m *CurrentPaymentData) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *CurrentPaymentData) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *CurrentPaymentData) GetCard() int64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *CurrentPaymentData) GetCardId() int64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *CurrentPaymentData) GetCardCvc() string {
	if m != nil {
		return m.CardCvc
	}
	return ""
}

func (m *CurrentPaymentData) GetInstallmentPeriod() int32 {
	if m != nil {
		return m.InstallmentPeriod
	}
	return 0
}

func (m *CurrentPaymentData) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *CurrentPaymentData) GetBankId() uint32 {
	if m != nil {
		return m.BankId
	}
	return 0
}

func (m *CurrentPaymentData) GetBins() []string {
	if m != nil {
		return m.Bins
	}
	return nil
}

type Payment struct {
	PaymentName          string             `protobuf:"bytes,1,opt,name=payment_name,proto3" json:"payment_name,omitempty"`
	PaymentCode          string             `protobuf:"bytes,2,opt,name=payment_code,proto3" json:"payment_code,omitempty"`
	IsDisable            bool               `protobuf:"varint,4,opt,name=is_disable,proto3" json:"is_disable,omitempty"`
	ReasonDisable        string             `protobuf:"bytes,5,opt,name=reason_disable,proto3" json:"reason_disable,omitempty"`
	PaymentText          string             `protobuf:"bytes,6,opt,name=payment_text,proto3" json:"payment_text,omitempty"`
	InstallmentPlans     []*InstallmentPlan `protobuf:"bytes,7,rep,name=installment_plans" json:"installment_plans,omitempty"`
	BankList             []*BanksConfig     `protobuf:"bytes,8,rep,name=bank_list" json:"bank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{10}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(dst, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetPaymentName() string {
	if m != nil {
		return m.PaymentName
	}
	return ""
}

func (m *Payment) GetPaymentCode() string {
	if m != nil {
		return m.PaymentCode
	}
	return ""
}

func (m *Payment) GetIsDisable() bool {
	if m != nil {
		return m.IsDisable
	}
	return false
}

func (m *Payment) GetReasonDisable() string {
	if m != nil {
		return m.ReasonDisable
	}
	return ""
}

func (m *Payment) GetPaymentText() string {
	if m != nil {
		return m.PaymentText
	}
	return ""
}

func (m *Payment) GetInstallmentPlans() []*InstallmentPlan {
	if m != nil {
		return m.InstallmentPlans
	}
	return nil
}

func (m *Payment) GetBankList() []*BanksConfig {
	if m != nil {
		return m.BankList
	}
	return nil
}

type BanksConfig struct {
	BankId               uint32                  `protobuf:"varint,1,opt,name=bank_id,proto3" json:"bank_id,omitempty"`
	BankFullname         string                  `protobuf:"bytes,2,opt,name=bank_fullname,proto3" json:"bank_fullname,omitempty"`
	BankName             string                  `protobuf:"bytes,3,opt,name=bank_name,proto3" json:"bank_name,omitempty"`
	Logo                 string                  `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Sort                 uint32                  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	BankInstallmentTerms []*BankInstallmentTerms `protobuf:"bytes,7,rep,name=bank_installment_terms" json:"bank_installment_terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BanksConfig) Reset()         { *m = BanksConfig{} }
func (m *BanksConfig) String() string { return proto.CompactTextString(m) }
func (*BanksConfig) ProtoMessage()    {}
func (*BanksConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{11}
}
func (m *BanksConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BanksConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BanksConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BanksConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanksConfig.Merge(dst, src)
}
func (m *BanksConfig) XXX_Size() int {
	return m.Size()
}
func (m *BanksConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BanksConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BanksConfig proto.InternalMessageInfo

func (m *BanksConfig) GetBankId() uint32 {
	if m != nil {
		return m.BankId
	}
	return 0
}

func (m *BanksConfig) GetBankFullname() string {
	if m != nil {
		return m.BankFullname
	}
	return ""
}

func (m *BanksConfig) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *BanksConfig) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *BanksConfig) GetSort() uint32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *BanksConfig) GetBankInstallmentTerms() []*BankInstallmentTerms {
	if m != nil {
		return m.BankInstallmentTerms
	}
	return nil
}

type BankInstallmentTerms struct {
	Period               uint32   `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	InstallmentPlan      uint32   `protobuf:"varint,2,opt,name=installment_plan,proto3" json:"installment_plan,omitempty"`
	Label                string   `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BankInstallmentTerms) Reset()         { *m = BankInstallmentTerms{} }
func (m *BankInstallmentTerms) String() string { return proto.CompactTextString(m) }
func (*BankInstallmentTerms) ProtoMessage()    {}
func (*BankInstallmentTerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{12}
}
func (m *BankInstallmentTerms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankInstallmentTerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankInstallmentTerms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BankInstallmentTerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankInstallmentTerms.Merge(dst, src)
}
func (m *BankInstallmentTerms) XXX_Size() int {
	return m.Size()
}
func (m *BankInstallmentTerms) XXX_DiscardUnknown() {
	xxx_messageInfo_BankInstallmentTerms.DiscardUnknown(m)
}

var xxx_messageInfo_BankInstallmentTerms proto.InternalMessageInfo

func (m *BankInstallmentTerms) GetPeriod() uint32 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *BankInstallmentTerms) GetInstallmentPlan() uint32 {
	if m != nil {
		return m.InstallmentPlan
	}
	return 0
}

func (m *BankInstallmentTerms) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type InstallmentPlan struct {
	InstallmentPeriod    int32    `protobuf:"varint,1,opt,name=installment_period,proto3" json:"installment_period,omitempty"`
	PeriodicPayment      int32    `protobuf:"varint,2,opt,name=periodic_payment,proto3" json:"periodic_payment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallmentPlan) Reset()         { *m = InstallmentPlan{} }
func (m *InstallmentPlan) String() string { return proto.CompactTextString(m) }
func (*InstallmentPlan) ProtoMessage()    {}
func (*InstallmentPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{13}
}
func (m *InstallmentPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallmentPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallmentPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *InstallmentPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallmentPlan.Merge(dst, src)
}
func (m *InstallmentPlan) XXX_Size() int {
	return m.Size()
}
func (m *InstallmentPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallmentPlan.DiscardUnknown(m)
}

var xxx_messageInfo_InstallmentPlan proto.InternalMessageInfo

func (m *InstallmentPlan) GetInstallmentPeriod() int32 {
	if m != nil {
		return m.InstallmentPeriod
	}
	return 0
}

func (m *InstallmentPlan) GetPeriodicPayment() int32 {
	if m != nil {
		return m.PeriodicPayment
	}
	return 0
}

type ShippingCarrierShop struct {
	ListCarrier          []*ShippingCarrier `protobuf:"bytes,1,rep,name=list_carrier" json:"list_carrier,omitempty"`
	CurrentCarrier       string             `protobuf:"bytes,2,opt,name=current_carrier,proto3" json:"current_carrier,omitempty"`
	ChangeCurrent        int32              `protobuf:"varint,3,opt,name=change_current,proto3" json:"change_current,omitempty"`
	Error                string             `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	ErrorMessage         string             `protobuf:"bytes,5,opt,name=error_message,proto3" json:"error_message,omitempty"`
	FreeShippingMessage  string             `protobuf:"bytes,6,opt,name=free_shipping_message,proto3" json:"free_shipping_message,omitempty"`
	Param                string             `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ShippingCarrierShop) Reset()         { *m = ShippingCarrierShop{} }
func (m *ShippingCarrierShop) String() string { return proto.CompactTextString(m) }
func (*ShippingCarrierShop) ProtoMessage()    {}
func (*ShippingCarrierShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{14}
}
func (m *ShippingCarrierShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShippingCarrierShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShippingCarrierShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShippingCarrierShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShippingCarrierShop.Merge(dst, src)
}
func (m *ShippingCarrierShop) XXX_Size() int {
	return m.Size()
}
func (m *ShippingCarrierShop) XXX_DiscardUnknown() {
	xxx_messageInfo_ShippingCarrierShop.DiscardUnknown(m)
}

var xxx_messageInfo_ShippingCarrierShop proto.InternalMessageInfo

func (m *ShippingCarrierShop) GetListCarrier() []*ShippingCarrier {
	if m != nil {
		return m.ListCarrier
	}
	return nil
}

func (m *ShippingCarrierShop) GetCurrentCarrier() string {
	if m != nil {
		return m.CurrentCarrier
	}
	return ""
}

func (m *ShippingCarrierShop) GetChangeCurrent() int32 {
	if m != nil {
		return m.ChangeCurrent
	}
	return 0
}

func (m *ShippingCarrierShop) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ShippingCarrierShop) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *ShippingCarrierShop) GetFreeShippingMessage() string {
	if m != nil {
		return m.FreeShippingMessage
	}
	return ""
}

func (m *ShippingCarrierShop) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

type ShippingCarrier struct {
	CarrierId                  int64                  `protobuf:"varint,1,opt,name=carrier_id,proto3" json:"carrier_id,omitempty"`
	CarrierCode                string                 `protobuf:"bytes,2,opt,name=carrier_code,proto3" json:"carrier_code,omitempty"`
	CarrierName                string                 `protobuf:"bytes,3,opt,name=carrier_name,proto3" json:"carrier_name,omitempty"`
	CarrierLogo                string                 `protobuf:"bytes,4,opt,name=carrier_logo,proto3" json:"carrier_logo,omitempty"`
	IsCurrentCarrier           bool                   `protobuf:"varint,5,opt,name=is_current_carrier,proto3" json:"is_current_carrier,omitempty"`
	OriginalFee                float32                `protobuf:"fixed32,6,opt,name=original_fee,proto3" json:"original_fee,omitempty"`
	DeliveryFee                float32                `protobuf:"fixed32,7,opt,name=delivery_fee,proto3" json:"delivery_fee,omitempty"`
	SubFee                     float32                `protobuf:"fixed32,8,opt,name=sub_fee,proto3" json:"sub_fee,omitempty"`
	CodFee                     float32                `protobuf:"fixed32,9,opt,name=cod_fee,proto3" json:"cod_fee,omitempty"`
	DeliveryFeeDiscount        float32                `protobuf:"fixed32,10,opt,name=delivery_fee_discount,proto3" json:"delivery_fee_discount,omitempty"`
	CodFeeDiscount             float32                `protobuf:"fixed32,11,opt,name=cod_fee_discount,proto3" json:"cod_fee_discount,omitempty"`
	SendoDiscountFee           float32                `protobuf:"fixed32,13,opt,name=sendo_discount_fee,proto3" json:"sendo_discount_fee,omitempty"`
	ShopDiscountFee            float32                `protobuf:"fixed32,14,opt,name=shop_discount_fee,proto3" json:"shop_discount_fee,omitempty"`
	EventDiscountId            int64                  `protobuf:"varint,15,opt,name=event_discount_id,proto3" json:"event_discount_id,omitempty"`
	DeliveryDuration           int64                  `protobuf:"varint,16,opt,name=delivery_duration,proto3" json:"delivery_duration,omitempty"`
	DeliveryDurationNote       string                 `protobuf:"bytes,17,opt,name=delivery_duration_note,proto3" json:"delivery_duration_note,omitempty"`
	ProductInfo                []*ProductShippingInfo `protobuf:"bytes,18,rep,name=product_info" json:"product_info,omitempty"`
	CarrierNote                []string               `protobuf:"bytes,19,rep,name=carrier_note" json:"carrier_note,omitempty"`
	UseMap                     bool                   `protobuf:"varint,20,opt,name=use_map,proto3" json:"use_map,omitempty"`
	Error                      string                 `protobuf:"bytes,21,opt,name=error,proto3" json:"error,omitempty"`
	ServiceName                string                 `protobuf:"bytes,22,opt,name=service_name,proto3" json:"service_name,omitempty"`
	OpcUrl                     string                 `protobuf:"bytes,23,opt,name=opc_url,proto3" json:"opc_url,omitempty"`
	NotSupportedPaymentMethods []string               `protobuf:"bytes,24,rep,name=not_supported_payment_methods" json:"not_supported_payment_methods,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}               `json:"-"`
	XXX_unrecognized           []byte                 `json:"-"`
	XXX_sizecache              int32                  `json:"-"`
}

func (m *ShippingCarrier) Reset()         { *m = ShippingCarrier{} }
func (m *ShippingCarrier) String() string { return proto.CompactTextString(m) }
func (*ShippingCarrier) ProtoMessage()    {}
func (*ShippingCarrier) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{15}
}
func (m *ShippingCarrier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShippingCarrier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShippingCarrier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShippingCarrier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShippingCarrier.Merge(dst, src)
}
func (m *ShippingCarrier) XXX_Size() int {
	return m.Size()
}
func (m *ShippingCarrier) XXX_DiscardUnknown() {
	xxx_messageInfo_ShippingCarrier.DiscardUnknown(m)
}

var xxx_messageInfo_ShippingCarrier proto.InternalMessageInfo

func (m *ShippingCarrier) GetCarrierId() int64 {
	if m != nil {
		return m.CarrierId
	}
	return 0
}

func (m *ShippingCarrier) GetCarrierCode() string {
	if m != nil {
		return m.CarrierCode
	}
	return ""
}

func (m *ShippingCarrier) GetCarrierName() string {
	if m != nil {
		return m.CarrierName
	}
	return ""
}

func (m *ShippingCarrier) GetCarrierLogo() string {
	if m != nil {
		return m.CarrierLogo
	}
	return ""
}

func (m *ShippingCarrier) GetIsCurrentCarrier() bool {
	if m != nil {
		return m.IsCurrentCarrier
	}
	return false
}

func (m *ShippingCarrier) GetOriginalFee() float32 {
	if m != nil {
		return m.OriginalFee
	}
	return 0
}

func (m *ShippingCarrier) GetDeliveryFee() float32 {
	if m != nil {
		return m.DeliveryFee
	}
	return 0
}

func (m *ShippingCarrier) GetSubFee() float32 {
	if m != nil {
		return m.SubFee
	}
	return 0
}

func (m *ShippingCarrier) GetCodFee() float32 {
	if m != nil {
		return m.CodFee
	}
	return 0
}

func (m *ShippingCarrier) GetDeliveryFeeDiscount() float32 {
	if m != nil {
		return m.DeliveryFeeDiscount
	}
	return 0
}

func (m *ShippingCarrier) GetCodFeeDiscount() float32 {
	if m != nil {
		return m.CodFeeDiscount
	}
	return 0
}

func (m *ShippingCarrier) GetSendoDiscountFee() float32 {
	if m != nil {
		return m.SendoDiscountFee
	}
	return 0
}

func (m *ShippingCarrier) GetShopDiscountFee() float32 {
	if m != nil {
		return m.ShopDiscountFee
	}
	return 0
}

func (m *ShippingCarrier) GetEventDiscountId() int64 {
	if m != nil {
		return m.EventDiscountId
	}
	return 0
}

func (m *ShippingCarrier) GetDeliveryDuration() int64 {
	if m != nil {
		return m.DeliveryDuration
	}
	return 0
}

func (m *ShippingCarrier) GetDeliveryDurationNote() string {
	if m != nil {
		return m.DeliveryDurationNote
	}
	return ""
}

func (m *ShippingCarrier) GetProductInfo() []*ProductShippingInfo {
	if m != nil {
		return m.ProductInfo
	}
	return nil
}

func (m *ShippingCarrier) GetCarrierNote() []string {
	if m != nil {
		return m.CarrierNote
	}
	return nil
}

func (m *ShippingCarrier) GetUseMap() bool {
	if m != nil {
		return m.UseMap
	}
	return false
}

func (m *ShippingCarrier) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ShippingCarrier) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ShippingCarrier) GetOpcUrl() string {
	if m != nil {
		return m.OpcUrl
	}
	return ""
}

func (m *ShippingCarrier) GetNotSupportedPaymentMethods() []string {
	if m != nil {
		return m.NotSupportedPaymentMethods
	}
	return nil
}

type ProductShippingInfo struct {
	ProductId            int64    `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	Weight               int64    `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductShippingInfo) Reset()         { *m = ProductShippingInfo{} }
func (m *ProductShippingInfo) String() string { return proto.CompactTextString(m) }
func (*ProductShippingInfo) ProtoMessage()    {}
func (*ProductShippingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{16}
}
func (m *ProductShippingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductShippingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductShippingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductShippingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductShippingInfo.Merge(dst, src)
}
func (m *ProductShippingInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProductShippingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductShippingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProductShippingInfo proto.InternalMessageInfo

func (m *ProductShippingInfo) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductShippingInfo) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type ShopInfo struct {
	ShopId                  int64                  `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	ExternalId              int64                  `protobuf:"varint,2,opt,name=external_id,proto3" json:"external_id,omitempty"`
	Name                    string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Telephone               string                 `protobuf:"bytes,4,opt,name=telephone,proto3" json:"telephone,omitempty"`
	Email                   string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Logo                    string                 `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`
	LoyaltyConfig           *LoyaltyConfig         `protobuf:"bytes,7,opt,name=loyalty_config" json:"loyalty_config,omitempty"`
	IsCertified             bool                   `protobuf:"varint,8,opt,name=is_certified,proto3" json:"is_certified,omitempty"`
	ShopType                int64                  `protobuf:"varint,9,opt,name=shop_type,proto3" json:"shop_type,omitempty"`
	CanUseSuperFastDelivery bool                   `protobuf:"varint,10,opt,name=can_use_super_fast_delivery,proto3" json:"can_use_super_fast_delivery,omitempty"`
	WareHouse               *ShopWareHouse         `protobuf:"bytes,11,opt,name=ware_house" json:"ware_house,omitempty"`
	MerchantServices        []*MerchantService     `protobuf:"bytes,12,rep,name=merchant_services" json:"merchant_services,omitempty"`
	SupportConfig           *MerchantSupportConfig `protobuf:"bytes,13,opt,name=support_config" json:"support_config,omitempty"`
	IsShopTvc               bool                   `protobuf:"varint,14,opt,name=is_shop_tvc,proto3" json:"is_shop_tvc,omitempty"`
	ListIdRegionSupport     []string               `protobuf:"bytes,15,rep,name=list_id_region_support" json:"list_id_region_support,omitempty"`
	ListRegionSupport       []string               `protobuf:"bytes,16,rep,name=list_region_support" json:"list_region_support,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}               `json:"-"`
	XXX_unrecognized        []byte                 `json:"-"`
	XXX_sizecache           int32                  `json:"-"`
}

func (m *ShopInfo) Reset()         { *m = ShopInfo{} }
func (m *ShopInfo) String() string { return proto.CompactTextString(m) }
func (*ShopInfo) ProtoMessage()    {}
func (*ShopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{17}
}
func (m *ShopInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopInfo.Merge(dst, src)
}
func (m *ShopInfo) XXX_Size() int {
	return m.Size()
}
func (m *ShopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShopInfo proto.InternalMessageInfo

func (m *ShopInfo) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *ShopInfo) GetExternalId() int64 {
	if m != nil {
		return m.ExternalId
	}
	return 0
}

func (m *ShopInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShopInfo) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *ShopInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ShopInfo) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *ShopInfo) GetLoyaltyConfig() *LoyaltyConfig {
	if m != nil {
		return m.LoyaltyConfig
	}
	return nil
}

func (m *ShopInfo) GetIsCertified() bool {
	if m != nil {
		return m.IsCertified
	}
	return false
}

func (m *ShopInfo) GetShopType() int64 {
	if m != nil {
		return m.ShopType
	}
	return 0
}

func (m *ShopInfo) GetCanUseSuperFastDelivery() bool {
	if m != nil {
		return m.CanUseSuperFastDelivery
	}
	return false
}

func (m *ShopInfo) GetWareHouse() *ShopWareHouse {
	if m != nil {
		return m.WareHouse
	}
	return nil
}

func (m *ShopInfo) GetMerchantServices() []*MerchantService {
	if m != nil {
		return m.MerchantServices
	}
	return nil
}

func (m *ShopInfo) GetSupportConfig() *MerchantSupportConfig {
	if m != nil {
		return m.SupportConfig
	}
	return nil
}

func (m *ShopInfo) GetIsShopTvc() bool {
	if m != nil {
		return m.IsShopTvc
	}
	return false
}

func (m *ShopInfo) GetListIdRegionSupport() []string {
	if m != nil {
		return m.ListIdRegionSupport
	}
	return nil
}

func (m *ShopInfo) GetListRegionSupport() []string {
	if m != nil {
		return m.ListRegionSupport
	}
	return nil
}

type MerchantSupportConfig struct {
	UseCod               bool              `protobuf:"varint,1,opt,name=use_cod,json=order_amount,proto3" json:"use_cod,omitempty"`
	UseSenpay            bool              `protobuf:"varint,2,opt,name=use_senpay,proto3" json:"use_senpay,omitempty"`
	HasDiscount          bool              `protobuf:"varint,3,opt,name=has_discount,proto3" json:"has_discount,omitempty"`
	DiscountValue        float32           `protobuf:"fixed32,4,opt,name=discount_value,proto3" json:"discount_value,omitempty"`
	OrderAmount          float32           `protobuf:"fixed32,5,opt,name=order_amount,proto3" json:"order_amount,omitempty"`
	SenpayDiscount       []*DiscountConfig `protobuf:"bytes,6,rep,name=senpay_discount" json:"senpay_discount,omitempty"`
	AppDiscount          []*DiscountConfig `protobuf:"bytes,7,rep,name=app_discount" json:"app_discount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MerchantSupportConfig) Reset()         { *m = MerchantSupportConfig{} }
func (m *MerchantSupportConfig) String() string { return proto.CompactTextString(m) }
func (*MerchantSupportConfig) ProtoMessage()    {}
func (*MerchantSupportConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{18}
}
func (m *MerchantSupportConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerchantSupportConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerchantSupportConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MerchantSupportConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantSupportConfig.Merge(dst, src)
}
func (m *MerchantSupportConfig) XXX_Size() int {
	return m.Size()
}
func (m *MerchantSupportConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantSupportConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantSupportConfig proto.InternalMessageInfo

func (m *MerchantSupportConfig) GetUseCod() bool {
	if m != nil {
		return m.UseCod
	}
	return false
}

func (m *MerchantSupportConfig) GetUseSenpay() bool {
	if m != nil {
		return m.UseSenpay
	}
	return false
}

func (m *MerchantSupportConfig) GetHasDiscount() bool {
	if m != nil {
		return m.HasDiscount
	}
	return false
}

func (m *MerchantSupportConfig) GetDiscountValue() float32 {
	if m != nil {
		return m.DiscountValue
	}
	return 0
}

func (m *MerchantSupportConfig) GetOrderAmount() float32 {
	if m != nil {
		return m.OrderAmount
	}
	return 0
}

func (m *MerchantSupportConfig) GetSenpayDiscount() []*DiscountConfig {
	if m != nil {
		return m.SenpayDiscount
	}
	return nil
}

func (m *MerchantSupportConfig) GetAppDiscount() []*DiscountConfig {
	if m != nil {
		return m.AppDiscount
	}
	return nil
}

type DiscountConfig struct {
	OrderAmount          float32  `protobuf:"fixed32,1,opt,name=order_amount,proto3" json:"order_amount,omitempty"`
	DiscountPercent      int32    `protobuf:"varint,2,opt,name=discount_percent,proto3" json:"discount_percent,omitempty"`
	Position             int32    `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	IsActive             bool     `protobuf:"varint,4,opt,name=is_active,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscountConfig) Reset()         { *m = DiscountConfig{} }
func (m *DiscountConfig) String() string { return proto.CompactTextString(m) }
func (*DiscountConfig) ProtoMessage()    {}
func (*DiscountConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{19}
}
func (m *DiscountConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscountConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscountConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DiscountConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscountConfig.Merge(dst, src)
}
func (m *DiscountConfig) XXX_Size() int {
	return m.Size()
}
func (m *DiscountConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscountConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DiscountConfig proto.InternalMessageInfo

func (m *DiscountConfig) GetOrderAmount() float32 {
	if m != nil {
		return m.OrderAmount
	}
	return 0
}

func (m *DiscountConfig) GetDiscountPercent() int32 {
	if m != nil {
		return m.DiscountPercent
	}
	return 0
}

func (m *DiscountConfig) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *DiscountConfig) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type MerchantService struct {
	ServiceCode          string   `protobuf:"bytes,1,opt,name=service_code,proto3" json:"service_code,omitempty"`
	IsActive             int32    `protobuf:"varint,2,opt,name=is_active,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerchantService) Reset()         { *m = MerchantService{} }
func (m *MerchantService) String() string { return proto.CompactTextString(m) }
func (*MerchantService) ProtoMessage()    {}
func (*MerchantService) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{20}
}
func (m *MerchantService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerchantService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerchantService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MerchantService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantService.Merge(dst, src)
}
func (m *MerchantService) XXX_Size() int {
	return m.Size()
}
func (m *MerchantService) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantService.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantService proto.InternalMessageInfo

func (m *MerchantService) GetServiceCode() string {
	if m != nil {
		return m.ServiceCode
	}
	return ""
}

func (m *MerchantService) GetIsActive() int32 {
	if m != nil {
		return m.IsActive
	}
	return 0
}

type LoyaltyConfig struct {
	StoreId              int64    `protobuf:"varint,1,opt,name=store_id,proto3" json:"store_id,omitempty"`
	IsActive             bool     `protobuf:"varint,2,opt,name=is_active,proto3" json:"is_active,omitempty"`
	Percent              int32    `protobuf:"varint,3,opt,name=percent,proto3" json:"percent,omitempty"`
	UpdateTime           int64    `protobuf:"varint,4,opt,name=update_time,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoyaltyConfig) Reset()         { *m = LoyaltyConfig{} }
func (m *LoyaltyConfig) String() string { return proto.CompactTextString(m) }
func (*LoyaltyConfig) ProtoMessage()    {}
func (*LoyaltyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{21}
}
func (m *LoyaltyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoyaltyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoyaltyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoyaltyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoyaltyConfig.Merge(dst, src)
}
func (m *LoyaltyConfig) XXX_Size() int {
	return m.Size()
}
func (m *LoyaltyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LoyaltyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LoyaltyConfig proto.InternalMessageInfo

func (m *LoyaltyConfig) GetStoreId() int64 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *LoyaltyConfig) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *LoyaltyConfig) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *LoyaltyConfig) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

type ShopWareHouse struct {
	CityId               int32    `protobuf:"varint,1,opt,name=city_id,proto3" json:"city_id,omitempty" bson:"city_id"`
	CityName             string   `protobuf:"bytes,2,opt,name=city_name,proto3" json:"city_name,omitempty" bson:"city_name"`
	DistrictId           int32    `protobuf:"varint,3,opt,name=district_id,proto3" json:"district_id,omitempty" bson:"district_id"`
	DistrictName         string   `protobuf:"bytes,4,opt,name=district_name,proto3" json:"district_name,omitempty" bson:"district_name"`
	WardId               int32    `protobuf:"varint,5,opt,name=ward_id,proto3" json:"ward_id,omitempty" bson:"ward_id"`
	WardName             string   `protobuf:"bytes,6,opt,name=ward_name,proto3" json:"ward_name,omitempty" bson:"ward_name"`
	Latitude             float32  `protobuf:"fixed32,7,opt,name=latitude,proto3" json:"latitude,omitempty" bson:"latitude"`
	Longitude            float32  `protobuf:"fixed32,8,opt,name=longitude,proto3" json:"longitude,omitempty" bson:"longitude"`
	Address              string   `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty" bson:"address"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShopWareHouse) Reset()         { *m = ShopWareHouse{} }
func (m *ShopWareHouse) String() string { return proto.CompactTextString(m) }
func (*ShopWareHouse) ProtoMessage()    {}
func (*ShopWareHouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{22}
}
func (m *ShopWareHouse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopWareHouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopWareHouse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShopWareHouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopWareHouse.Merge(dst, src)
}
func (m *ShopWareHouse) XXX_Size() int {
	return m.Size()
}
func (m *ShopWareHouse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopWareHouse.DiscardUnknown(m)
}

var xxx_messageInfo_ShopWareHouse proto.InternalMessageInfo

func (m *ShopWareHouse) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *ShopWareHouse) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

func (m *ShopWareHouse) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *ShopWareHouse) GetDistrictName() string {
	if m != nil {
		return m.DistrictName
	}
	return ""
}

func (m *ShopWareHouse) GetWardId() int32 {
	if m != nil {
		return m.WardId
	}
	return 0
}

func (m *ShopWareHouse) GetWardName() string {
	if m != nil {
		return m.WardName
	}
	return ""
}

func (m *ShopWareHouse) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *ShopWareHouse) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *ShopWareHouse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ProductCheckout struct {
	Products             []*ProductItem `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
	TotalPrice           float32        `protobuf:"fixed32,2,opt,name=total_price,proto3" json:"total_price,omitempty"`
	TotalSubsidyAmount   float32        `protobuf:"fixed32,3,opt,name=total_subsidy_amount,proto3" json:"total_subsidy_amount,omitempty"`
	ProductHashes        []string       `protobuf:"bytes,4,rep,name=product_hashes" json:"product_hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProductCheckout) Reset()         { *m = ProductCheckout{} }
func (m *ProductCheckout) String() string { return proto.CompactTextString(m) }
func (*ProductCheckout) ProtoMessage()    {}
func (*ProductCheckout) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{23}
}
func (m *ProductCheckout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductCheckout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductCheckout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductCheckout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductCheckout.Merge(dst, src)
}
func (m *ProductCheckout) XXX_Size() int {
	return m.Size()
}
func (m *ProductCheckout) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductCheckout.DiscardUnknown(m)
}

var xxx_messageInfo_ProductCheckout proto.InternalMessageInfo

func (m *ProductCheckout) GetProducts() []*ProductItem {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *ProductCheckout) GetTotalPrice() float32 {
	if m != nil {
		return m.TotalPrice
	}
	return 0
}

func (m *ProductCheckout) GetTotalSubsidyAmount() float32 {
	if m != nil {
		return m.TotalSubsidyAmount
	}
	return 0
}

func (m *ProductCheckout) GetProductHashes() []string {
	if m != nil {
		return m.ProductHashes
	}
	return nil
}

type CustomerData struct {
	Customer             *Customer          `protobuf:"bytes,1,opt,name=customer" json:"customer,omitempty"`
	CustomerAddress      []*CustomerAddress `protobuf:"bytes,2,rep,name=customer_address" json:"customer_address,omitempty"`
	BadBuyerInfo         *BadBuyerInfo      `protobuf:"bytes,3,opt,name=bad_buyer_info" json:"bad_buyer_info,omitempty"`
	CurrentAddressId     int64              `protobuf:"varint,4,opt,name=current_address_id,proto3" json:"current_address_id,omitempty"`
	ClientInfo           *ClientInfo        `protobuf:"bytes,5,opt,name=client_info" json:"client_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CustomerData) Reset()         { *m = CustomerData{} }
func (m *CustomerData) String() string { return proto.CompactTextString(m) }
func (*CustomerData) ProtoMessage()    {}
func (*CustomerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{24}
}
func (m *CustomerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CustomerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerData.Merge(dst, src)
}
func (m *CustomerData) XXX_Size() int {
	return m.Size()
}
func (m *CustomerData) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerData.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerData proto.InternalMessageInfo

func (m *CustomerData) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *CustomerData) GetCustomerAddress() []*CustomerAddress {
	if m != nil {
		return m.CustomerAddress
	}
	return nil
}

func (m *CustomerData) GetBadBuyerInfo() *BadBuyerInfo {
	if m != nil {
		return m.BadBuyerInfo
	}
	return nil
}

func (m *CustomerData) GetCurrentAddressId() int64 {
	if m != nil {
		return m.CurrentAddressId
	}
	return 0
}

func (m *CustomerData) GetClientInfo() *ClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

type ClientInfo struct {
	ClientIp             string   `protobuf:"bytes,1,opt,name=client_ip,proto3" json:"client_ip,omitempty"`
	Platform             string   `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceId             string   `protobuf:"bytes,3,opt,name=device_id,proto3" json:"device_id,omitempty"`
	TrackingOrderSource  int32    `protobuf:"varint,4,opt,name=tracking_order_source,proto3" json:"tracking_order_source,omitempty"`
	BrowserId            string   `protobuf:"bytes,5,opt,name=browser_id,proto3" json:"browser_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{25}
}
func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(dst, src)
}
func (m *ClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *ClientInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ClientInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ClientInfo) GetTrackingOrderSource() int32 {
	if m != nil {
		return m.TrackingOrderSource
	}
	return 0
}

func (m *ClientInfo) GetBrowserId() string {
	if m != nil {
		return m.BrowserId
	}
	return ""
}

type Customer struct {
	CustomerId           int64    `protobuf:"varint,1,opt,name=customer_id,proto3" json:"customer_id,omitempty"`
	FptId                int64    `protobuf:"varint,2,opt,name=fpt_id,proto3" json:"fpt_id,omitempty"`
	Telephone            string   `protobuf:"bytes,3,opt,name=telephone,proto3" json:"telephone,omitempty"`
	FirstName            string   `protobuf:"bytes,4,opt,name=first_name,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,5,opt,name=last_name,proto3" json:"last_name,omitempty"`
	Email                string   `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Avatar               string   `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	DefaultShipping      int64    `protobuf:"varint,8,opt,name=default_shipping,proto3" json:"default_shipping,omitempty"`
	IsOtpPhone           bool     `protobuf:"varint,9,opt,name=is_otp_phone,proto3" json:"is_otp_phone,omitempty"`
	IsVerifyCheckout     bool     `protobuf:"varint,10,opt,name=is_verify_checkout,proto3" json:"is_verify_checkout,omitempty"`
	IsFirstOrder         bool     `protobuf:"varint,11,opt,name=is_first_order,proto3" json:"is_first_order,omitempty"`
	RegisteredBy         string   `protobuf:"bytes,12,opt,name=registered_by,proto3" json:"registered_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Customer) Reset()         { *m = Customer{} }
func (m *Customer) String() string { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()    {}
func (*Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{26}
}
func (m *Customer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Customer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Customer.Merge(dst, src)
}
func (m *Customer) XXX_Size() int {
	return m.Size()
}
func (m *Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Customer proto.InternalMessageInfo

func (m *Customer) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *Customer) GetFptId() int64 {
	if m != nil {
		return m.FptId
	}
	return 0
}

func (m *Customer) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *Customer) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Customer) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Customer) GetDefaultShipping() int64 {
	if m != nil {
		return m.DefaultShipping
	}
	return 0
}

func (m *Customer) GetIsOtpPhone() bool {
	if m != nil {
		return m.IsOtpPhone
	}
	return false
}

func (m *Customer) GetIsVerifyCheckout() bool {
	if m != nil {
		return m.IsVerifyCheckout
	}
	return false
}

func (m *Customer) GetIsFirstOrder() bool {
	if m != nil {
		return m.IsFirstOrder
	}
	return false
}

func (m *Customer) GetRegisteredBy() string {
	if m != nil {
		return m.RegisteredBy
	}
	return ""
}

type BadBuyerInfo struct {
	ShopBlock            bool     `protobuf:"varint,1,opt,name=shop_block,proto3" json:"shop_block,omitempty"`
	BlockCod             bool     `protobuf:"varint,2,opt,name=block_cod,proto3" json:"block_cod,omitempty"`
	OtpCod               bool     `protobuf:"varint,3,opt,name=otp_cod,proto3" json:"otp_cod,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BadBuyerInfo) Reset()         { *m = BadBuyerInfo{} }
func (m *BadBuyerInfo) String() string { return proto.CompactTextString(m) }
func (*BadBuyerInfo) ProtoMessage()    {}
func (*BadBuyerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{27}
}
func (m *BadBuyerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadBuyerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadBuyerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BadBuyerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadBuyerInfo.Merge(dst, src)
}
func (m *BadBuyerInfo) XXX_Size() int {
	return m.Size()
}
func (m *BadBuyerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BadBuyerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BadBuyerInfo proto.InternalMessageInfo

func (m *BadBuyerInfo) GetShopBlock() bool {
	if m != nil {
		return m.ShopBlock
	}
	return false
}

func (m *BadBuyerInfo) GetBlockCod() bool {
	if m != nil {
		return m.BlockCod
	}
	return false
}

func (m *BadBuyerInfo) GetOtpCod() bool {
	if m != nil {
		return m.OtpCod
	}
	return false
}

type ProductItem struct {
	ProductId               int64                    `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	Name                    string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Categories              string                   `protobuf:"bytes,3,opt,name=categories,proto3" json:"categories,omitempty"`
	BrandId                 int64                    `protobuf:"varint,4,opt,name=brand_id,proto3" json:"brand_id,omitempty"`
	SourceUrl               string                   `protobuf:"bytes,5,opt,name=source_url,proto3" json:"source_url,omitempty"`
	SourcePageId            string                   `protobuf:"bytes,6,opt,name=source_page_id,proto3" json:"source_page_id,omitempty"`
	SourceBlockId           string                   `protobuf:"bytes,7,opt,name=source_block_id,proto3" json:"source_block_id,omitempty"`
	SourceInfo              string                   `protobuf:"bytes,8,opt,name=source_info,proto3" json:"source_info,omitempty"`
	Price                   float32                  `protobuf:"fixed32,9,opt,name=price,proto3" json:"price,omitempty"`
	FinalPrice              float32                  `protobuf:"fixed32,10,opt,name=final_price,proto3" json:"final_price,omitempty"`
	Weight                  int32                    `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	LengthProduct           int32                    `protobuf:"varint,12,opt,name=length_product,proto3" json:"length_product,omitempty"`
	WitdhProduct            int32                    `protobuf:"varint,13,opt,name=witdh_product,proto3" json:"witdh_product,omitempty"`
	HeightProduct           int32                    `protobuf:"varint,14,opt,name=height_product,proto3" json:"height_product,omitempty"`
	Qty                     int32                    `protobuf:"varint,15,opt,name=qty,proto3" json:"qty,omitempty"`
	OptionData              []*ProductOption         `protobuf:"bytes,16,rep,name=option_data" json:"option_data,omitempty"`
	Hash                    string                   `protobuf:"bytes,17,opt,name=hash,proto3" json:"hash,omitempty"`
	Image                   string                   `protobuf:"bytes,18,opt,name=image,proto3" json:"image,omitempty"`
	ImageResize             *ImageResize             `protobuf:"bytes,19,opt,name=image_resize" json:"image_resize,omitempty"`
	Promotion               *flashdeal.FlashDeal     `protobuf:"bytes,20,opt,name=promotion" json:"promotion,omitempty"`
	OriginFinalPrice        float32                  `protobuf:"fixed32,21,opt,name=origin_final_price,proto3" json:"origin_final_price,omitempty"`
	Sku                     string                   `protobuf:"bytes,22,opt,name=sku,proto3" json:"sku,omitempty"`
	SkuUser                 string                   `protobuf:"bytes,23,opt,name=sku_user,proto3" json:"sku_user,omitempty"`
	AttributeHash           string                   `protobuf:"bytes,24,opt,name=attribute_hash,proto3" json:"attribute_hash,omitempty"`
	CategoryId              int32                    `protobuf:"varint,25,opt,name=category_id,proto3" json:"category_id,omitempty"`
	CheckoutWeight          int64                    `protobuf:"varint,26,opt,name=checkout_weight,proto3" json:"checkout_weight,omitempty"`
	CatPath                 string                   `protobuf:"bytes,27,opt,name=cat_path,proto3" json:"cat_path,omitempty"`
	ExtendedShippingPackage *ExtendedShippingPackage `protobuf:"bytes,28,opt,name=extended_shipping_package" json:"extended_shipping_package,omitempty"`
	UnitId                  int32                    `protobuf:"varint,29,opt,name=unit_id,proto3" json:"unit_id,omitempty"`
	IsValid                 bool                     `protobuf:"varint,30,opt,name=is_valid,proto3" json:"is_valid,omitempty"`
	StatusLabel             string                   `protobuf:"bytes,31,opt,name=status_label,proto3" json:"status_label,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                 `json:"-"`
	XXX_unrecognized        []byte                   `json:"-"`
	XXX_sizecache           int32                    `json:"-"`
}

func (m *ProductItem) Reset()         { *m = ProductItem{} }
func (m *ProductItem) String() string { return proto.CompactTextString(m) }
func (*ProductItem) ProtoMessage()    {}
func (*ProductItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{28}
}
func (m *ProductItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductItem.Merge(dst, src)
}
func (m *ProductItem) XXX_Size() int {
	return m.Size()
}
func (m *ProductItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductItem.DiscardUnknown(m)
}

var xxx_messageInfo_ProductItem proto.InternalMessageInfo

func (m *ProductItem) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductItem) GetCategories() string {
	if m != nil {
		return m.Categories
	}
	return ""
}

func (m *ProductItem) GetBrandId() int64 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *ProductItem) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

func (m *ProductItem) GetSourcePageId() string {
	if m != nil {
		return m.SourcePageId
	}
	return ""
}

func (m *ProductItem) GetSourceBlockId() string {
	if m != nil {
		return m.SourceBlockId
	}
	return ""
}

func (m *ProductItem) GetSourceInfo() string {
	if m != nil {
		return m.SourceInfo
	}
	return ""
}

func (m *ProductItem) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ProductItem) GetFinalPrice() float32 {
	if m != nil {
		return m.FinalPrice
	}
	return 0
}

func (m *ProductItem) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ProductItem) GetLengthProduct() int32 {
	if m != nil {
		return m.LengthProduct
	}
	return 0
}

func (m *ProductItem) GetWitdhProduct() int32 {
	if m != nil {
		return m.WitdhProduct
	}
	return 0
}

func (m *ProductItem) GetHeightProduct() int32 {
	if m != nil {
		return m.HeightProduct
	}
	return 0
}

func (m *ProductItem) GetQty() int32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

func (m *ProductItem) GetOptionData() []*ProductOption {
	if m != nil {
		return m.OptionData
	}
	return nil
}

func (m *ProductItem) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ProductItem) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ProductItem) GetImageResize() *ImageResize {
	if m != nil {
		return m.ImageResize
	}
	return nil
}

func (m *ProductItem) GetPromotion() *flashdeal.FlashDeal {
	if m != nil {
		return m.Promotion
	}
	return nil
}

func (m *ProductItem) GetOriginFinalPrice() float32 {
	if m != nil {
		return m.OriginFinalPrice
	}
	return 0
}

func (m *ProductItem) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *ProductItem) GetSkuUser() string {
	if m != nil {
		return m.SkuUser
	}
	return ""
}

func (m *ProductItem) GetAttributeHash() string {
	if m != nil {
		return m.AttributeHash
	}
	return ""
}

func (m *ProductItem) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *ProductItem) GetCheckoutWeight() int64 {
	if m != nil {
		return m.CheckoutWeight
	}
	return 0
}

func (m *ProductItem) GetCatPath() string {
	if m != nil {
		return m.CatPath
	}
	return ""
}

func (m *ProductItem) GetExtendedShippingPackage() *ExtendedShippingPackage {
	if m != nil {
		return m.ExtendedShippingPackage
	}
	return nil
}

func (m *ProductItem) GetUnitId() int32 {
	if m != nil {
		return m.UnitId
	}
	return 0
}

func (m *ProductItem) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *ProductItem) GetStatusLabel() string {
	if m != nil {
		return m.StatusLabel
	}
	return ""
}

type ImageResize struct {
	Image                string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Image_50X50          string   `protobuf:"bytes,2,opt,name=image_50x50,proto3" json:"image_50x50,omitempty"`
	Image_100X100        string   `protobuf:"bytes,3,opt,name=image_100x100,proto3" json:"image_100x100,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageResize) Reset()         { *m = ImageResize{} }
func (m *ImageResize) String() string { return proto.CompactTextString(m) }
func (*ImageResize) ProtoMessage()    {}
func (*ImageResize) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{29}
}
func (m *ImageResize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageResize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageResize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImageResize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageResize.Merge(dst, src)
}
func (m *ImageResize) XXX_Size() int {
	return m.Size()
}
func (m *ImageResize) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageResize.DiscardUnknown(m)
}

var xxx_messageInfo_ImageResize proto.InternalMessageInfo

func (m *ImageResize) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ImageResize) GetImage_50X50() string {
	if m != nil {
		return m.Image_50X50
	}
	return ""
}

func (m *ImageResize) GetImage_100X100() string {
	if m != nil {
		return m.Image_100X100
	}
	return ""
}

type ExtendedShippingPackage struct {
	IsUsingInstant       bool     `protobuf:"varint,1,opt,name=is_using_instant,proto3" json:"is_using_instant,omitempty"`
	IsUsingInDay         bool     `protobuf:"varint,2,opt,name=is_using_in_day,proto3" json:"is_using_in_day,omitempty"`
	IsSelfShipping       bool     `protobuf:"varint,3,opt,name=is_self_shipping,proto3" json:"is_self_shipping,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtendedShippingPackage) Reset()         { *m = ExtendedShippingPackage{} }
func (m *ExtendedShippingPackage) String() string { return proto.CompactTextString(m) }
func (*ExtendedShippingPackage) ProtoMessage()    {}
func (*ExtendedShippingPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{30}
}
func (m *ExtendedShippingPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedShippingPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedShippingPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExtendedShippingPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedShippingPackage.Merge(dst, src)
}
func (m *ExtendedShippingPackage) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedShippingPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedShippingPackage.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedShippingPackage proto.InternalMessageInfo

func (m *ExtendedShippingPackage) GetIsUsingInstant() bool {
	if m != nil {
		return m.IsUsingInstant
	}
	return false
}

func (m *ExtendedShippingPackage) GetIsUsingInDay() bool {
	if m != nil {
		return m.IsUsingInDay
	}
	return false
}

func (m *ExtendedShippingPackage) GetIsSelfShipping() bool {
	if m != nil {
		return m.IsSelfShipping
	}
	return false
}

type ProductOption struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	OptionId             int64    `protobuf:"varint,2,opt,name=option_id,proto3" json:"option_id,omitempty"`
	ProductOptionId      string   `protobuf:"bytes,3,opt,name=product_option_id,proto3" json:"product_option_id,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	AttributeId          int64    `protobuf:"varint,6,opt,name=attribute_id,proto3" json:"attribute_id,omitempty"`
	ProductOption        string   `protobuf:"bytes,7,opt,name=product_option,proto3" json:"product_option,omitempty"`
	AttributeCode        string   `protobuf:"bytes,8,opt,name=attribute_code,proto3" json:"attribute_code,omitempty"`
	ColorHexRgb          string   `protobuf:"bytes,9,opt,name=color_hex_rgb,proto3" json:"color_hex_rgb,omitempty"`
	Image                string   `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	ColorId              int64    `protobuf:"varint,11,opt,name=color_id,proto3" json:"color_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductOption) Reset()         { *m = ProductOption{} }
func (m *ProductOption) String() string { return proto.CompactTextString(m) }
func (*ProductOption) ProtoMessage()    {}
func (*ProductOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{31}
}
func (m *ProductOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductOption.Merge(dst, src)
}
func (m *ProductOption) XXX_Size() int {
	return m.Size()
}
func (m *ProductOption) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductOption.DiscardUnknown(m)
}

var xxx_messageInfo_ProductOption proto.InternalMessageInfo

func (m *ProductOption) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ProductOption) GetOptionId() int64 {
	if m != nil {
		return m.OptionId
	}
	return 0
}

func (m *ProductOption) GetProductOptionId() string {
	if m != nil {
		return m.ProductOptionId
	}
	return ""
}

func (m *ProductOption) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductOption) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProductOption) GetAttributeId() int64 {
	if m != nil {
		return m.AttributeId
	}
	return 0
}

func (m *ProductOption) GetProductOption() string {
	if m != nil {
		return m.ProductOption
	}
	return ""
}

func (m *ProductOption) GetAttributeCode() string {
	if m != nil {
		return m.AttributeCode
	}
	return ""
}

func (m *ProductOption) GetColorHexRgb() string {
	if m != nil {
		return m.ColorHexRgb
	}
	return ""
}

func (m *ProductOption) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ProductOption) GetColorId() int64 {
	if m != nil {
		return m.ColorId
	}
	return 0
}

type PaymentTransferInfo struct {
	ListBanks            []*BankTransferInfo `protobuf:"bytes,1,rep,name=list_banks" json:"list_banks,omitempty"`
	PaymentTransferId    string              `protobuf:"bytes,2,opt,name=payment_transfer_id,proto3" json:"payment_transfer_id,omitempty"`
	ConfirmationExchange string              `protobuf:"bytes,3,opt,name=confirmation_exchange,proto3" json:"confirmation_exchange,omitempty"`
	ConfirmationTime     string              `protobuf:"bytes,4,opt,name=confirmation_time,proto3" json:"confirmation_time,omitempty"`
	ConfirmationSmsFee   string              `protobuf:"bytes,5,opt,name=confirmation_sms_fee,proto3" json:"confirmation_sms_fee,omitempty"`
	ConfirmationUrl      string              `protobuf:"bytes,6,opt,name=confirmation_url,proto3" json:"confirmation_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PaymentTransferInfo) Reset()         { *m = PaymentTransferInfo{} }
func (m *PaymentTransferInfo) String() string { return proto.CompactTextString(m) }
func (*PaymentTransferInfo) ProtoMessage()    {}
func (*PaymentTransferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{32}
}
func (m *PaymentTransferInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentTransferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentTransferInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PaymentTransferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentTransferInfo.Merge(dst, src)
}
func (m *PaymentTransferInfo) XXX_Size() int {
	return m.Size()
}
func (m *PaymentTransferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentTransferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentTransferInfo proto.InternalMessageInfo

func (m *PaymentTransferInfo) GetListBanks() []*BankTransferInfo {
	if m != nil {
		return m.ListBanks
	}
	return nil
}

func (m *PaymentTransferInfo) GetPaymentTransferId() string {
	if m != nil {
		return m.PaymentTransferId
	}
	return ""
}

func (m *PaymentTransferInfo) GetConfirmationExchange() string {
	if m != nil {
		return m.ConfirmationExchange
	}
	return ""
}

func (m *PaymentTransferInfo) GetConfirmationTime() string {
	if m != nil {
		return m.ConfirmationTime
	}
	return ""
}

func (m *PaymentTransferInfo) GetConfirmationSmsFee() string {
	if m != nil {
		return m.ConfirmationSmsFee
	}
	return ""
}

func (m *PaymentTransferInfo) GetConfirmationUrl() string {
	if m != nil {
		return m.ConfirmationUrl
	}
	return ""
}

type PaymentWalletInfo struct {
	PaymentWalletId      string   `protobuf:"bytes,1,opt,name=payment_wallet_id,proto3" json:"payment_wallet_id,omitempty"`
	WalletConfirmType    int32    `protobuf:"varint,2,opt,name=wallet_confirm_type,proto3" json:"wallet_confirm_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentWalletInfo) Reset()         { *m = PaymentWalletInfo{} }
func (m *PaymentWalletInfo) String() string { return proto.CompactTextString(m) }
func (*PaymentWalletInfo) ProtoMessage()    {}
func (*PaymentWalletInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{33}
}
func (m *PaymentWalletInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentWalletInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentWalletInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PaymentWalletInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentWalletInfo.Merge(dst, src)
}
func (m *PaymentWalletInfo) XXX_Size() int {
	return m.Size()
}
func (m *PaymentWalletInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentWalletInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentWalletInfo proto.InternalMessageInfo

func (m *PaymentWalletInfo) GetPaymentWalletId() string {
	if m != nil {
		return m.PaymentWalletId
	}
	return ""
}

func (m *PaymentWalletInfo) GetWalletConfirmType() int32 {
	if m != nil {
		return m.WalletConfirmType
	}
	return 0
}

type BankTransferInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Logo                 string   `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	AccountName          string   `protobuf:"bytes,3,opt,name=account_name,proto3" json:"account_name,omitempty"`
	AccountNumber        string   `protobuf:"bytes,4,opt,name=account_number,proto3" json:"account_number,omitempty"`
	BranchName           string   `protobuf:"bytes,5,opt,name=branch_name,proto3" json:"branch_name,omitempty"`
	BranchLocation       string   `protobuf:"bytes,6,opt,name=branch_location,proto3" json:"branch_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BankTransferInfo) Reset()         { *m = BankTransferInfo{} }
func (m *BankTransferInfo) String() string { return proto.CompactTextString(m) }
func (*BankTransferInfo) ProtoMessage()    {}
func (*BankTransferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{34}
}
func (m *BankTransferInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankTransferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankTransferInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BankTransferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankTransferInfo.Merge(dst, src)
}
func (m *BankTransferInfo) XXX_Size() int {
	return m.Size()
}
func (m *BankTransferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BankTransferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BankTransferInfo proto.InternalMessageInfo

func (m *BankTransferInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BankTransferInfo) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *BankTransferInfo) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *BankTransferInfo) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

func (m *BankTransferInfo) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *BankTransferInfo) GetBranchLocation() string {
	if m != nil {
		return m.BranchLocation
	}
	return ""
}

type CustomerAddress struct {
	CustomerId           int64    `protobuf:"varint,1,opt,name=customer_id,proto3" json:"customer_id,omitempty"`
	FptId                int64    `protobuf:"varint,2,opt,name=fpt_id,proto3" json:"fpt_id,omitempty"`
	CreatedAt            int64    `protobuf:"varint,3,opt,name=created_at,proto3" json:"created_at,omitempty"`
	AddressId            int64    `protobuf:"varint,4,opt,name=address_id,proto3" json:"address_id,omitempty"`
	FirstName            string   `protobuf:"bytes,5,opt,name=first_name,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,6,opt,name=last_name,proto3" json:"last_name,omitempty"`
	City                 string   `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	CityId               int32    `protobuf:"varint,8,opt,name=city_id,proto3" json:"city_id,omitempty"`
	District             string   `protobuf:"bytes,9,opt,name=district,proto3" json:"district,omitempty"`
	DistrictId           int32    `protobuf:"varint,10,opt,name=district_id,proto3" json:"district_id,omitempty"`
	Ward                 string   `protobuf:"bytes,11,opt,name=ward,proto3" json:"ward,omitempty"`
	WardId               int32    `protobuf:"varint,12,opt,name=ward_id,proto3" json:"ward_id,omitempty"`
	Region               string   `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`
	Street               string   `protobuf:"bytes,14,opt,name=street,proto3" json:"street,omitempty"`
	Telephone            string   `protobuf:"bytes,15,opt,name=telephone,proto3" json:"telephone,omitempty"`
	Email                string   `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`
	Latitude             float32  `protobuf:"fixed32,17,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,18,opt,name=longitude,proto3" json:"longitude,omitempty"`
	FullAddress          string   `protobuf:"bytes,19,opt,name=full_address,proto3" json:"full_address,omitempty"`
	IsDefaultShipping    bool     `protobuf:"varint,20,opt,name=is_default_shipping,proto3" json:"is_default_shipping,omitempty"`
	IsNew                bool     `protobuf:"varint,21,opt,name=is_new,proto3" json:"is_new,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerAddress) Reset()         { *m = CustomerAddress{} }
func (m *CustomerAddress) String() string { return proto.CompactTextString(m) }
func (*CustomerAddress) ProtoMessage()    {}
func (*CustomerAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{35}
}
func (m *CustomerAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CustomerAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerAddress.Merge(dst, src)
}
func (m *CustomerAddress) XXX_Size() int {
	return m.Size()
}
func (m *CustomerAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerAddress.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerAddress proto.InternalMessageInfo

func (m *CustomerAddress) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *CustomerAddress) GetFptId() int64 {
	if m != nil {
		return m.FptId
	}
	return 0
}

func (m *CustomerAddress) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CustomerAddress) GetAddressId() int64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

func (m *CustomerAddress) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CustomerAddress) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CustomerAddress) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CustomerAddress) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *CustomerAddress) GetDistrict() string {
	if m != nil {
		return m.District
	}
	return ""
}

func (m *CustomerAddress) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *CustomerAddress) GetWard() string {
	if m != nil {
		return m.Ward
	}
	return ""
}

func (m *CustomerAddress) GetWardId() int32 {
	if m != nil {
		return m.WardId
	}
	return 0
}

func (m *CustomerAddress) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CustomerAddress) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *CustomerAddress) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *CustomerAddress) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CustomerAddress) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *CustomerAddress) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *CustomerAddress) GetFullAddress() string {
	if m != nil {
		return m.FullAddress
	}
	return ""
}

func (m *CustomerAddress) GetIsDefaultShipping() bool {
	if m != nil {
		return m.IsDefaultShipping
	}
	return false
}

func (m *CustomerAddress) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

type Region struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CityId               int32    `protobuf:"varint,2,opt,name=city_id,proto3" json:"city_id,omitempty"`
	DistrictId           int32    `protobuf:"varint,3,opt,name=district_id,proto3" json:"district_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{36}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(dst, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Region) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *Region) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

type City struct {
	CityId               int32       `protobuf:"varint,1,opt,name=city_id,proto3" json:"city_id,omitempty"`
	CityName             string      `protobuf:"bytes,2,opt,name=city_name,proto3" json:"city_name,omitempty"`
	Districts            []*District `protobuf:"bytes,3,rep,name=districts" json:"districts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *City) Reset()         { *m = City{} }
func (m *City) String() string { return proto.CompactTextString(m) }
func (*City) ProtoMessage()    {}
func (*City) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{37}
}
func (m *City) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *City) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_City.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *City) XXX_Merge(src proto.Message) {
	xxx_messageInfo_City.Merge(dst, src)
}
func (m *City) XXX_Size() int {
	return m.Size()
}
func (m *City) XXX_DiscardUnknown() {
	xxx_messageInfo_City.DiscardUnknown(m)
}

var xxx_messageInfo_City proto.InternalMessageInfo

func (m *City) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *City) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

func (m *City) GetDistricts() []*District {
	if m != nil {
		return m.Districts
	}
	return nil
}

type District struct {
	DistrictId           int32    `protobuf:"varint,1,opt,name=district_id,proto3" json:"district_id,omitempty"`
	DistrictName         string   `protobuf:"bytes,2,opt,name=district_name,proto3" json:"district_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *District) Reset()         { *m = District{} }
func (m *District) String() string { return proto.CompactTextString(m) }
func (*District) ProtoMessage()    {}
func (*District) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{38}
}
func (m *District) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *District) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_District.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *District) XXX_Merge(src proto.Message) {
	xxx_messageInfo_District.Merge(dst, src)
}
func (m *District) XXX_Size() int {
	return m.Size()
}
func (m *District) XXX_DiscardUnknown() {
	xxx_messageInfo_District.DiscardUnknown(m)
}

var xxx_messageInfo_District proto.InternalMessageInfo

func (m *District) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *District) GetDistrictName() string {
	if m != nil {
		return m.DistrictName
	}
	return ""
}

type Ward struct {
	WardId               int32    `protobuf:"varint,1,opt,name=ward_id,proto3" json:"ward_id,omitempty"`
	WardName             string   `protobuf:"bytes,2,opt,name=ward_name,proto3" json:"ward_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ward) Reset()         { *m = Ward{} }
func (m *Ward) String() string { return proto.CompactTextString(m) }
func (*Ward) ProtoMessage()    {}
func (*Ward) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{39}
}
func (m *Ward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Ward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ward.Merge(dst, src)
}
func (m *Ward) XXX_Size() int {
	return m.Size()
}
func (m *Ward) XXX_DiscardUnknown() {
	xxx_messageInfo_Ward.DiscardUnknown(m)
}

var xxx_messageInfo_Ward proto.InternalMessageInfo

func (m *Ward) GetWardId() int32 {
	if m != nil {
		return m.WardId
	}
	return 0
}

func (m *Ward) GetWardName() string {
	if m != nil {
		return m.WardName
	}
	return ""
}

type Error struct {
	Code                 int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	InvalidFields        []*InvalidField `protobuf:"bytes,3,rep,name=invalid_fields" json:"invalid_fields,omitempty"`
	ErrorActions         []*ErrorAction  `protobuf:"bytes,4,rep,name=error_actions" json:"error_actions,omitempty"`
	ProductId            int64           `protobuf:"varint,5,opt,name=product_id,proto3" json:"product_id,omitempty"`
	Type                 string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{40}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetInvalidFields() []*InvalidField {
	if m != nil {
		return m.InvalidFields
	}
	return nil
}

func (m *Error) GetErrorActions() []*ErrorAction {
	if m != nil {
		return m.ErrorActions
	}
	return nil
}

func (m *Error) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Error) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ErrorAction struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Action               string   `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorAction) Reset()         { *m = ErrorAction{} }
func (m *ErrorAction) String() string { return proto.CompactTextString(m) }
func (*ErrorAction) ProtoMessage()    {}
func (*ErrorAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{41}
}
func (m *ErrorAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ErrorAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorAction.Merge(dst, src)
}
func (m *ErrorAction) XXX_Size() int {
	return m.Size()
}
func (m *ErrorAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorAction.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorAction proto.InternalMessageInfo

func (m *ErrorAction) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ErrorAction) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type InvalidField struct {
	InvalidCode          int32    `protobuf:"varint,1,opt,name=invalid_code,proto3" json:"invalid_code,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	InvalidMessage       string   `protobuf:"bytes,3,opt,name=invalid_message,proto3" json:"invalid_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvalidField) Reset()         { *m = InvalidField{} }
func (m *InvalidField) String() string { return proto.CompactTextString(m) }
func (*InvalidField) ProtoMessage()    {}
func (*InvalidField) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{42}
}
func (m *InvalidField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *InvalidField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidField.Merge(dst, src)
}
func (m *InvalidField) XXX_Size() int {
	return m.Size()
}
func (m *InvalidField) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidField.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidField proto.InternalMessageInfo

func (m *InvalidField) GetInvalidCode() int32 {
	if m != nil {
		return m.InvalidCode
	}
	return 0
}

func (m *InvalidField) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *InvalidField) GetInvalidMessage() string {
	if m != nil {
		return m.InvalidMessage
	}
	return ""
}

// cart
type CheckoutLoadRequest struct {
	ShopId               int64               `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	ItemHash             string              `protobuf:"bytes,2,opt,name=item_hash,proto3" json:"item_hash,omitempty"`
	CurrentAddressId     int64               `protobuf:"varint,3,opt,name=current_address_id,proto3" json:"current_address_id,omitempty"`
	CurrentCarrier       string              `protobuf:"bytes,4,opt,name=current_carrier,proto3" json:"current_carrier,omitempty"`
	CurrentPaymentMethod *CurrentPaymentData `protobuf:"bytes,5,opt,name=current_payment_method" json:"current_payment_method,omitempty"`
	CurrentVoucher       *VoucherInfo        `protobuf:"bytes,6,opt,name=current_voucher" json:"current_voucher,omitempty"`
	CurrentLoyalty       *LoyaltyInfo        `protobuf:"bytes,7,opt,name=current_loyalty" json:"current_loyalty,omitempty"`
	SendoPlatform        string              `protobuf:"bytes,8,opt,name=sendo_platform,proto3" json:"sendo_platform,omitempty"`
	CurrentProducts      []*ProductInfo      `protobuf:"bytes,9,rep,name=current_products" json:"current_products,omitempty"`
	DeviceId             string              `protobuf:"bytes,10,opt,name=device_id,proto3" json:"device_id,omitempty"`
	OtpCode              string              `protobuf:"bytes,11,opt,name=otp_code,proto3" json:"otp_code,omitempty"`
	SenpayToken          string              `protobuf:"bytes,12,opt,name=senpay_token,proto3" json:"senpay_token,omitempty"`
	SenpayRefreshToken   string              `protobuf:"bytes,13,opt,name=senpay_refresh_token,proto3" json:"senpay_refresh_token,omitempty"`
	CustomerNote         string              `protobuf:"bytes,14,opt,name=customer_note,proto3" json:"customer_note,omitempty"`
	EnableTracking       bool                `protobuf:"varint,15,opt,name=enable_tracking,proto3" json:"enable_tracking,omitempty"`
	IgnoreInvalidProduct int32               `protobuf:"varint,16,opt,name=ignore_invalid_product,proto3" json:"ignore_invalid_product,omitempty"`
	ProductHashes        []string            `protobuf:"bytes,17,rep,name=product_hashes" json:"product_hashes,omitempty"`
	Version              float32             `protobuf:"fixed32,18,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CheckoutLoadRequest) Reset()         { *m = CheckoutLoadRequest{} }
func (m *CheckoutLoadRequest) String() string { return proto.CompactTextString(m) }
func (*CheckoutLoadRequest) ProtoMessage()    {}
func (*CheckoutLoadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{43}
}
func (m *CheckoutLoadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckoutLoadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckoutLoadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckoutLoadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckoutLoadRequest.Merge(dst, src)
}
func (m *CheckoutLoadRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckoutLoadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckoutLoadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckoutLoadRequest proto.InternalMessageInfo

func (m *CheckoutLoadRequest) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *CheckoutLoadRequest) GetItemHash() string {
	if m != nil {
		return m.ItemHash
	}
	return ""
}

func (m *CheckoutLoadRequest) GetCurrentAddressId() int64 {
	if m != nil {
		return m.CurrentAddressId
	}
	return 0
}

func (m *CheckoutLoadRequest) GetCurrentCarrier() string {
	if m != nil {
		return m.CurrentCarrier
	}
	return ""
}

func (m *CheckoutLoadRequest) GetCurrentPaymentMethod() *CurrentPaymentData {
	if m != nil {
		return m.CurrentPaymentMethod
	}
	return nil
}

func (m *CheckoutLoadRequest) GetCurrentVoucher() *VoucherInfo {
	if m != nil {
		return m.CurrentVoucher
	}
	return nil
}

func (m *CheckoutLoadRequest) GetCurrentLoyalty() *LoyaltyInfo {
	if m != nil {
		return m.CurrentLoyalty
	}
	return nil
}

func (m *CheckoutLoadRequest) GetSendoPlatform() string {
	if m != nil {
		return m.SendoPlatform
	}
	return ""
}

func (m *CheckoutLoadRequest) GetCurrentProducts() []*ProductInfo {
	if m != nil {
		return m.CurrentProducts
	}
	return nil
}

func (m *CheckoutLoadRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *CheckoutLoadRequest) GetOtpCode() string {
	if m != nil {
		return m.OtpCode
	}
	return ""
}

func (m *CheckoutLoadRequest) GetSenpayToken() string {
	if m != nil {
		return m.SenpayToken
	}
	return ""
}

func (m *CheckoutLoadRequest) GetSenpayRefreshToken() string {
	if m != nil {
		return m.SenpayRefreshToken
	}
	return ""
}

func (m *CheckoutLoadRequest) GetCustomerNote() string {
	if m != nil {
		return m.CustomerNote
	}
	return ""
}

func (m *CheckoutLoadRequest) GetEnableTracking() bool {
	if m != nil {
		return m.EnableTracking
	}
	return false
}

func (m *CheckoutLoadRequest) GetIgnoreInvalidProduct() int32 {
	if m != nil {
		return m.IgnoreInvalidProduct
	}
	return 0
}

func (m *CheckoutLoadRequest) GetProductHashes() []string {
	if m != nil {
		return m.ProductHashes
	}
	return nil
}

func (m *CheckoutLoadRequest) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CheckoutLoadResponse struct {
	Data                 *CheckoutData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Errors               []*Error      `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	IsError              bool          `protobuf:"varint,3,opt,name=is_error,proto3" json:"is_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CheckoutLoadResponse) Reset()         { *m = CheckoutLoadResponse{} }
func (m *CheckoutLoadResponse) String() string { return proto.CompactTextString(m) }
func (*CheckoutLoadResponse) ProtoMessage()    {}
func (*CheckoutLoadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{44}
}
func (m *CheckoutLoadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckoutLoadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckoutLoadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckoutLoadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckoutLoadResponse.Merge(dst, src)
}
func (m *CheckoutLoadResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckoutLoadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckoutLoadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckoutLoadResponse proto.InternalMessageInfo

func (m *CheckoutLoadResponse) GetData() *CheckoutData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CheckoutLoadResponse) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *CheckoutLoadResponse) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

// GetCustomerAddress
type GetCustomerAddressRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCustomerAddressRequest) Reset()         { *m = GetCustomerAddressRequest{} }
func (m *GetCustomerAddressRequest) String() string { return proto.CompactTextString(m) }
func (*GetCustomerAddressRequest) ProtoMessage()    {}
func (*GetCustomerAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{45}
}
func (m *GetCustomerAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCustomerAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCustomerAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCustomerAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerAddressRequest.Merge(dst, src)
}
func (m *GetCustomerAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCustomerAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerAddressRequest proto.InternalMessageInfo

type GetCustomerAddressResponse struct {
	Data                 []*CustomerAddress `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Error                *Error             `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetCustomerAddressResponse) Reset()         { *m = GetCustomerAddressResponse{} }
func (m *GetCustomerAddressResponse) String() string { return proto.CompactTextString(m) }
func (*GetCustomerAddressResponse) ProtoMessage()    {}
func (*GetCustomerAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{46}
}
func (m *GetCustomerAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCustomerAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCustomerAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCustomerAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerAddressResponse.Merge(dst, src)
}
func (m *GetCustomerAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCustomerAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerAddressResponse proto.InternalMessageInfo

func (m *GetCustomerAddressResponse) GetData() []*CustomerAddress {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetCustomerAddressResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// get Customer voucher
type GetCustomerVoucherRequest struct {
	ShopId               int64    `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCustomerVoucherRequest) Reset()         { *m = GetCustomerVoucherRequest{} }
func (m *GetCustomerVoucherRequest) String() string { return proto.CompactTextString(m) }
func (*GetCustomerVoucherRequest) ProtoMessage()    {}
func (*GetCustomerVoucherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{47}
}
func (m *GetCustomerVoucherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCustomerVoucherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCustomerVoucherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCustomerVoucherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerVoucherRequest.Merge(dst, src)
}
func (m *GetCustomerVoucherRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCustomerVoucherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerVoucherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerVoucherRequest proto.InternalMessageInfo

func (m *GetCustomerVoucherRequest) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

type GetCustomerVoucherResponse struct {
	Sendo                []*VoucherInfo `protobuf:"bytes,1,rep,name=sendo" json:"sendo,omitempty"`
	Shop                 []*VoucherInfo `protobuf:"bytes,2,rep,name=shop" json:"shop,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetCustomerVoucherResponse) Reset()         { *m = GetCustomerVoucherResponse{} }
func (m *GetCustomerVoucherResponse) String() string { return proto.CompactTextString(m) }
func (*GetCustomerVoucherResponse) ProtoMessage()    {}
func (*GetCustomerVoucherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{48}
}
func (m *GetCustomerVoucherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCustomerVoucherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCustomerVoucherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCustomerVoucherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerVoucherResponse.Merge(dst, src)
}
func (m *GetCustomerVoucherResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCustomerVoucherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerVoucherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerVoucherResponse proto.InternalMessageInfo

func (m *GetCustomerVoucherResponse) GetSendo() []*VoucherInfo {
	if m != nil {
		return m.Sendo
	}
	return nil
}

func (m *GetCustomerVoucherResponse) GetShop() []*VoucherInfo {
	if m != nil {
		return m.Shop
	}
	return nil
}

// AddCustomerAddress
type AddCustomerAddressRequest struct {
	CityId               int32    `protobuf:"varint,1,opt,name=city_id,proto3" json:"city_id,omitempty"`
	DistrictId           int32    `protobuf:"varint,2,opt,name=district_id,proto3" json:"district_id,omitempty"`
	WardId               int32    `protobuf:"varint,3,opt,name=ward_id,proto3" json:"ward_id,omitempty"`
	Street               string   `protobuf:"bytes,4,opt,name=street,proto3" json:"street,omitempty"`
	Latitude             float32  `protobuf:"fixed32,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	FirstName            string   `protobuf:"bytes,7,opt,name=first_name,proto3" json:"first_name,omitempty"`
	MiddleName           string   `protobuf:"bytes,8,opt,name=middle_name,proto3" json:"middle_name,omitempty"`
	LastName             string   `protobuf:"bytes,9,opt,name=last_name,proto3" json:"last_name,omitempty"`
	Fax                  string   `protobuf:"bytes,10,opt,name=fax,proto3" json:"fax,omitempty"`
	Telephone            string   `protobuf:"bytes,11,opt,name=telephone,proto3" json:"telephone,omitempty"`
	Email                string   `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	SetToDefault         bool     `protobuf:"varint,13,opt,name=set_to_default,proto3" json:"set_to_default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCustomerAddressRequest) Reset()         { *m = AddCustomerAddressRequest{} }
func (m *AddCustomerAddressRequest) String() string { return proto.CompactTextString(m) }
func (*AddCustomerAddressRequest) ProtoMessage()    {}
func (*AddCustomerAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{49}
}
func (m *AddCustomerAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCustomerAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCustomerAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddCustomerAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCustomerAddressRequest.Merge(dst, src)
}
func (m *AddCustomerAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddCustomerAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCustomerAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCustomerAddressRequest proto.InternalMessageInfo

func (m *AddCustomerAddressRequest) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *AddCustomerAddressRequest) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *AddCustomerAddressRequest) GetWardId() int32 {
	if m != nil {
		return m.WardId
	}
	return 0
}

func (m *AddCustomerAddressRequest) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *AddCustomerAddressRequest) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *AddCustomerAddressRequest) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *AddCustomerAddressRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *AddCustomerAddressRequest) GetMiddleName() string {
	if m != nil {
		return m.MiddleName
	}
	return ""
}

func (m *AddCustomerAddressRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *AddCustomerAddressRequest) GetFax() string {
	if m != nil {
		return m.Fax
	}
	return ""
}

func (m *AddCustomerAddressRequest) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *AddCustomerAddressRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AddCustomerAddressRequest) GetSetToDefault() bool {
	if m != nil {
		return m.SetToDefault
	}
	return false
}

type AddCustomerAddressResponse struct {
	Data                 []*CustomerAddress `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Error                *Error             `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AddCustomerAddressResponse) Reset()         { *m = AddCustomerAddressResponse{} }
func (m *AddCustomerAddressResponse) String() string { return proto.CompactTextString(m) }
func (*AddCustomerAddressResponse) ProtoMessage()    {}
func (*AddCustomerAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{50}
}
func (m *AddCustomerAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCustomerAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCustomerAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddCustomerAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCustomerAddressResponse.Merge(dst, src)
}
func (m *AddCustomerAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddCustomerAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCustomerAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCustomerAddressResponse proto.InternalMessageInfo

func (m *AddCustomerAddressResponse) GetData() []*CustomerAddress {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AddCustomerAddressResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RepushAffiliateRequest struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	FromDate             int64    `protobuf:"varint,2,opt,name=from_date,proto3" json:"from_date,omitempty"`
	ToDate               int64    `protobuf:"varint,3,opt,name=to_date,proto3" json:"to_date,omitempty"`
	Provider             string   `protobuf:"bytes,4,opt,name=provider,json=provide,proto3" json:"provider,omitempty"`
	IsLog                bool     `protobuf:"varint,5,opt,name=is_log,proto3" json:"is_log,omitempty"`
	Limit                int32    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepushAffiliateRequest) Reset()         { *m = RepushAffiliateRequest{} }
func (m *RepushAffiliateRequest) String() string { return proto.CompactTextString(m) }
func (*RepushAffiliateRequest) ProtoMessage()    {}
func (*RepushAffiliateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{51}
}
func (m *RepushAffiliateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepushAffiliateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepushAffiliateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RepushAffiliateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepushAffiliateRequest.Merge(dst, src)
}
func (m *RepushAffiliateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RepushAffiliateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RepushAffiliateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RepushAffiliateRequest proto.InternalMessageInfo

func (m *RepushAffiliateRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RepushAffiliateRequest) GetFromDate() int64 {
	if m != nil {
		return m.FromDate
	}
	return 0
}

func (m *RepushAffiliateRequest) GetToDate() int64 {
	if m != nil {
		return m.ToDate
	}
	return 0
}

func (m *RepushAffiliateRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *RepushAffiliateRequest) GetIsLog() bool {
	if m != nil {
		return m.IsLog
	}
	return false
}

func (m *RepushAffiliateRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type RepushAffiliateResponse struct {
	SuccessTransactionIds []string `protobuf:"bytes,1,rep,name=success_transaction_ids" json:"success_transaction_ids,omitempty"`
	FailTransactionIds    []string `protobuf:"bytes,2,rep,name=fail_transaction_ids,json=success_transaction_ids" json:"fail_transaction_ids,omitempty"`
	Pushed                int64    `protobuf:"varint,3,opt,name=pushed,proto3" json:"pushed,omitempty"`
	Success               int64    `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Fail                  int64    `protobuf:"varint,5,opt,name=fail,proto3" json:"fail,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RepushAffiliateResponse) Reset()         { *m = RepushAffiliateResponse{} }
func (m *RepushAffiliateResponse) String() string { return proto.CompactTextString(m) }
func (*RepushAffiliateResponse) ProtoMessage()    {}
func (*RepushAffiliateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{52}
}
func (m *RepushAffiliateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepushAffiliateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepushAffiliateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RepushAffiliateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepushAffiliateResponse.Merge(dst, src)
}
func (m *RepushAffiliateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RepushAffiliateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RepushAffiliateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RepushAffiliateResponse proto.InternalMessageInfo

func (m *RepushAffiliateResponse) GetSuccessTransactionIds() []string {
	if m != nil {
		return m.SuccessTransactionIds
	}
	return nil
}

func (m *RepushAffiliateResponse) GetFailTransactionIds() []string {
	if m != nil {
		return m.FailTransactionIds
	}
	return nil
}

func (m *RepushAffiliateResponse) GetPushed() int64 {
	if m != nil {
		return m.Pushed
	}
	return 0
}

func (m *RepushAffiliateResponse) GetSuccess() int64 {
	if m != nil {
		return m.Success
	}
	return 0
}

func (m *RepushAffiliateResponse) GetFail() int64 {
	if m != nil {
		return m.Fail
	}
	return 0
}

// UpdateCustomerAddress
type UpdateCustomerAddressRequest struct {
	AddressId            int64    `protobuf:"varint,1,opt,name=address_id,proto3" json:"address_id,omitempty"`
	CityId               int32    `protobuf:"varint,2,opt,name=city_id,proto3" json:"city_id,omitempty"`
	DistrictId           int32    `protobuf:"varint,3,opt,name=district_id,proto3" json:"district_id,omitempty"`
	WardId               int32    `protobuf:"varint,4,opt,name=ward_id,proto3" json:"ward_id,omitempty"`
	Street               string   `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	Latitude             float32  `protobuf:"fixed32,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	FirstName            string   `protobuf:"bytes,8,opt,name=first_name,proto3" json:"first_name,omitempty"`
	MiddleName           string   `protobuf:"bytes,9,opt,name=middle_name,proto3" json:"middle_name,omitempty"`
	LastName             string   `protobuf:"bytes,10,opt,name=last_name,proto3" json:"last_name,omitempty"`
	Fax                  string   `protobuf:"bytes,11,opt,name=fax,proto3" json:"fax,omitempty"`
	Telephone            string   `protobuf:"bytes,12,opt,name=telephone,proto3" json:"telephone,omitempty"`
	Email                string   `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	UpdateToDefault      bool     `protobuf:"varint,14,opt,name=update_to_default,proto3" json:"update_to_default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCustomerAddressRequest) Reset()         { *m = UpdateCustomerAddressRequest{} }
func (m *UpdateCustomerAddressRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCustomerAddressRequest) ProtoMessage()    {}
func (*UpdateCustomerAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{53}
}
func (m *UpdateCustomerAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCustomerAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCustomerAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateCustomerAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCustomerAddressRequest.Merge(dst, src)
}
func (m *UpdateCustomerAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCustomerAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCustomerAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCustomerAddressRequest proto.InternalMessageInfo

func (m *UpdateCustomerAddressRequest) GetAddressId() int64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

func (m *UpdateCustomerAddressRequest) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *UpdateCustomerAddressRequest) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *UpdateCustomerAddressRequest) GetWardId() int32 {
	if m != nil {
		return m.WardId
	}
	return 0
}

func (m *UpdateCustomerAddressRequest) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *UpdateCustomerAddressRequest) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *UpdateCustomerAddressRequest) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *UpdateCustomerAddressRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateCustomerAddressRequest) GetMiddleName() string {
	if m != nil {
		return m.MiddleName
	}
	return ""
}

func (m *UpdateCustomerAddressRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateCustomerAddressRequest) GetFax() string {
	if m != nil {
		return m.Fax
	}
	return ""
}

func (m *UpdateCustomerAddressRequest) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *UpdateCustomerAddressRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateCustomerAddressRequest) GetUpdateToDefault() bool {
	if m != nil {
		return m.UpdateToDefault
	}
	return false
}

type UpdateCustomerAddressResponse struct {
	Data                 []*CustomerAddress `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Error                *Error             `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpdateCustomerAddressResponse) Reset()         { *m = UpdateCustomerAddressResponse{} }
func (m *UpdateCustomerAddressResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateCustomerAddressResponse) ProtoMessage()    {}
func (*UpdateCustomerAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{54}
}
func (m *UpdateCustomerAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCustomerAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCustomerAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateCustomerAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCustomerAddressResponse.Merge(dst, src)
}
func (m *UpdateCustomerAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCustomerAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCustomerAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCustomerAddressResponse proto.InternalMessageInfo

func (m *UpdateCustomerAddressResponse) GetData() []*CustomerAddress {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateCustomerAddressResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// DeleteCustomerAddress
type DeleteCustomerAddressRequest struct {
	AddressId            int64    `protobuf:"varint,1,opt,name=address_id,proto3" json:"address_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCustomerAddressRequest) Reset()         { *m = DeleteCustomerAddressRequest{} }
func (m *DeleteCustomerAddressRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCustomerAddressRequest) ProtoMessage()    {}
func (*DeleteCustomerAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{55}
}
func (m *DeleteCustomerAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCustomerAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCustomerAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCustomerAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCustomerAddressRequest.Merge(dst, src)
}
func (m *DeleteCustomerAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCustomerAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCustomerAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCustomerAddressRequest proto.InternalMessageInfo

func (m *DeleteCustomerAddressRequest) GetAddressId() int64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

type DeleteCustomerAddressResponse struct {
	Data                 []*CustomerAddress `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Error                *Error             `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DeleteCustomerAddressResponse) Reset()         { *m = DeleteCustomerAddressResponse{} }
func (m *DeleteCustomerAddressResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteCustomerAddressResponse) ProtoMessage()    {}
func (*DeleteCustomerAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{56}
}
func (m *DeleteCustomerAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCustomerAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCustomerAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCustomerAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCustomerAddressResponse.Merge(dst, src)
}
func (m *DeleteCustomerAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCustomerAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCustomerAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCustomerAddressResponse proto.InternalMessageInfo

func (m *DeleteCustomerAddressResponse) GetData() []*CustomerAddress {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DeleteCustomerAddressResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// GetRegionsList
type GetRegionsListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRegionsListRequest) Reset()         { *m = GetRegionsListRequest{} }
func (m *GetRegionsListRequest) String() string { return proto.CompactTextString(m) }
func (*GetRegionsListRequest) ProtoMessage()    {}
func (*GetRegionsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{57}
}
func (m *GetRegionsListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegionsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegionsListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRegionsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegionsListRequest.Merge(dst, src)
}
func (m *GetRegionsListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRegionsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegionsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegionsListRequest proto.InternalMessageInfo

type GetRegionsListResponse struct {
	Data                 []*Region `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Error                *Error    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetRegionsListResponse) Reset()         { *m = GetRegionsListResponse{} }
func (m *GetRegionsListResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegionsListResponse) ProtoMessage()    {}
func (*GetRegionsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{58}
}
func (m *GetRegionsListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegionsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegionsListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRegionsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegionsListResponse.Merge(dst, src)
}
func (m *GetRegionsListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRegionsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegionsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegionsListResponse proto.InternalMessageInfo

func (m *GetRegionsListResponse) GetData() []*Region {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetRegionsListResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// GetWardsList
type GetWardsListRequest struct {
	DistrictId           int32    `protobuf:"varint,1,opt,name=district_id,proto3" json:"district_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWardsListRequest) Reset()         { *m = GetWardsListRequest{} }
func (m *GetWardsListRequest) String() string { return proto.CompactTextString(m) }
func (*GetWardsListRequest) ProtoMessage()    {}
func (*GetWardsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{59}
}
func (m *GetWardsListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWardsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWardsListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetWardsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWardsListRequest.Merge(dst, src)
}
func (m *GetWardsListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWardsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWardsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWardsListRequest proto.InternalMessageInfo

func (m *GetWardsListRequest) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

type GetWardsListResponse struct {
	Data                 []*Ward  `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWardsListResponse) Reset()         { *m = GetWardsListResponse{} }
func (m *GetWardsListResponse) String() string { return proto.CompactTextString(m) }
func (*GetWardsListResponse) ProtoMessage()    {}
func (*GetWardsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{60}
}
func (m *GetWardsListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWardsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWardsListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetWardsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWardsListResponse.Merge(dst, src)
}
func (m *GetWardsListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWardsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWardsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWardsListResponse proto.InternalMessageInfo

func (m *GetWardsListResponse) GetData() []*Ward {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetWardsListResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetShippingCarriersRequest struct {
	ShopId               int64    `protobuf:"varint,1,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	AddressId            int64    `protobuf:"varint,2,opt,name=address_id,proto3" json:"address_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetShippingCarriersRequest) Reset()         { *m = GetShippingCarriersRequest{} }
func (m *GetShippingCarriersRequest) String() string { return proto.CompactTextString(m) }
func (*GetShippingCarriersRequest) ProtoMessage()    {}
func (*GetShippingCarriersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{61}
}
func (m *GetShippingCarriersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShippingCarriersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShippingCarriersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetShippingCarriersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShippingCarriersRequest.Merge(dst, src)
}
func (m *GetShippingCarriersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetShippingCarriersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShippingCarriersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShippingCarriersRequest proto.InternalMessageInfo

func (m *GetShippingCarriersRequest) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetShippingCarriersRequest) GetAddressId() int64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

type GetShippingCarriersResponse struct {
	Data                 []*ShippingCarrier `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetShippingCarriersResponse) Reset()         { *m = GetShippingCarriersResponse{} }
func (m *GetShippingCarriersResponse) String() string { return proto.CompactTextString(m) }
func (*GetShippingCarriersResponse) ProtoMessage()    {}
func (*GetShippingCarriersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{62}
}
func (m *GetShippingCarriersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShippingCarriersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShippingCarriersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetShippingCarriersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShippingCarriersResponse.Merge(dst, src)
}
func (m *GetShippingCarriersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetShippingCarriersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShippingCarriersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShippingCarriersResponse proto.InternalMessageInfo

func (m *GetShippingCarriersResponse) GetData() []*ShippingCarrier {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetOrderInfoRequest struct {
	OrderIncrementId     int64    `protobuf:"varint,1,opt,name=order_increment_id,proto3" json:"order_increment_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken         string   `protobuf:"bytes,3,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderInfoRequest) Reset()         { *m = GetOrderInfoRequest{} }
func (m *GetOrderInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderInfoRequest) ProtoMessage()    {}
func (*GetOrderInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{63}
}
func (m *GetOrderInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrderInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrderInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOrderInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderInfoRequest.Merge(dst, src)
}
func (m *GetOrderInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrderInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderInfoRequest proto.InternalMessageInfo

func (m *GetOrderInfoRequest) GetOrderIncrementId() int64 {
	if m != nil {
		return m.OrderIncrementId
	}
	return 0
}

func (m *GetOrderInfoRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetOrderInfoRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type GetOrderInfoResponse struct {
	IncrementId          int64                 `protobuf:"varint,1,opt,name=increment_id,proto3" json:"increment_id,omitempty"`
	CustomerName         string                `protobuf:"bytes,2,opt,name=customer_name,proto3" json:"customer_name,omitempty"`
	ShopName             string                `protobuf:"bytes,3,opt,name=shop_name,proto3" json:"shop_name,omitempty"`
	GrandTotal           float32               `protobuf:"fixed32,4,opt,name=grand_total,proto3" json:"grand_total,omitempty"`
	OrderCurrencyCode    string                `protobuf:"bytes,5,opt,name=order_currency_code,proto3" json:"order_currency_code,omitempty"`
	PaymentStatus        int32                 `protobuf:"varint,7,opt,name=payment_status,proto3" json:"payment_status,omitempty"`
	PaymentStatusLabel   string                `protobuf:"bytes,8,opt,name=payment_status_label,proto3" json:"payment_status_label,omitempty"`
	PaymentMethod        string                `protobuf:"bytes,9,opt,name=payment_method,proto3" json:"payment_method,omitempty"`
	PaymentMethodLabel   string                `protobuf:"bytes,10,opt,name=payment_method_label,proto3" json:"payment_method_label,omitempty"`
	PaymentType          string                `protobuf:"bytes,11,opt,name=payment_type,proto3" json:"payment_type,omitempty"`
	PaymentTransferInfo  *PaymentTransferInfo  `protobuf:"bytes,12,opt,name=payment_transfer_info" json:"payment_transfer_info,omitempty"`
	PaymentWalletInfo    *PaymentWalletInfo    `protobuf:"bytes,13,opt,name=payment_wallet_info" json:"payment_wallet_info,omitempty"`
	Actions              []*ActionAfterSuccess `protobuf:"bytes,14,rep,name=actions" json:"actions,omitempty"`
	AppActions           []*ActionAfterSuccess `protobuf:"bytes,15,rep,name=app_actions" json:"app_actions,omitempty"`
	Viewed               bool                  `protobuf:"varint,16,opt,name=viewed,proto3" json:"viewed,omitempty"`
	TrackingData         *TrackingData         `protobuf:"bytes,17,opt,name=tracking_data,json=track_data" json:"tracking_data,omitempty"`
	Error                *Error                `protobuf:"bytes,18,opt,name=error" json:"error,omitempty"`
	DeliveryDurationNote string                `protobuf:"bytes,19,opt,name=delivery_duration_note,proto3" json:"delivery_duration_note,omitempty"`
	CustomerData         *CustomerData         `protobuf:"bytes,20,opt,name=CustomerData,json=customer_data" json:"CustomerData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetOrderInfoResponse) Reset()         { *m = GetOrderInfoResponse{} }
func (m *GetOrderInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrderInfoResponse) ProtoMessage()    {}
func (*GetOrderInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{64}
}
func (m *GetOrderInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrderInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrderInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOrderInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderInfoResponse.Merge(dst, src)
}
func (m *GetOrderInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrderInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderInfoResponse proto.InternalMessageInfo

func (m *GetOrderInfoResponse) GetIncrementId() int64 {
	if m != nil {
		return m.IncrementId
	}
	return 0
}

func (m *GetOrderInfoResponse) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

func (m *GetOrderInfoResponse) GetShopName() string {
	if m != nil {
		return m.ShopName
	}
	return ""
}

func (m *GetOrderInfoResponse) GetGrandTotal() float32 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *GetOrderInfoResponse) GetOrderCurrencyCode() string {
	if m != nil {
		return m.OrderCurrencyCode
	}
	return ""
}

func (m *GetOrderInfoResponse) GetPaymentStatus() int32 {
	if m != nil {
		return m.PaymentStatus
	}
	return 0
}

func (m *GetOrderInfoResponse) GetPaymentStatusLabel() string {
	if m != nil {
		return m.PaymentStatusLabel
	}
	return ""
}

func (m *GetOrderInfoResponse) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *GetOrderInfoResponse) GetPaymentMethodLabel() string {
	if m != nil {
		return m.PaymentMethodLabel
	}
	return ""
}

func (m *GetOrderInfoResponse) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *GetOrderInfoResponse) GetPaymentTransferInfo() *PaymentTransferInfo {
	if m != nil {
		return m.PaymentTransferInfo
	}
	return nil
}

func (m *GetOrderInfoResponse) GetPaymentWalletInfo() *PaymentWalletInfo {
	if m != nil {
		return m.PaymentWalletInfo
	}
	return nil
}

func (m *GetOrderInfoResponse) GetActions() []*ActionAfterSuccess {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *GetOrderInfoResponse) GetAppActions() []*ActionAfterSuccess {
	if m != nil {
		return m.AppActions
	}
	return nil
}

func (m *GetOrderInfoResponse) GetViewed() bool {
	if m != nil {
		return m.Viewed
	}
	return false
}

func (m *GetOrderInfoResponse) GetTrackingData() *TrackingData {
	if m != nil {
		return m.TrackingData
	}
	return nil
}

func (m *GetOrderInfoResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GetOrderInfoResponse) GetDeliveryDurationNote() string {
	if m != nil {
		return m.DeliveryDurationNote
	}
	return ""
}

func (m *GetOrderInfoResponse) GetCustomerData() *CustomerData {
	if m != nil {
		return m.CustomerData
	}
	return nil
}

type UpdateOrderViewedRequest struct {
	OrderIncrementId     int64    `protobuf:"varint,1,opt,name=order_increment_id,proto3" json:"order_increment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateOrderViewedRequest) Reset()         { *m = UpdateOrderViewedRequest{} }
func (m *UpdateOrderViewedRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOrderViewedRequest) ProtoMessage()    {}
func (*UpdateOrderViewedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{65}
}
func (m *UpdateOrderViewedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrderViewedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrderViewedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateOrderViewedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrderViewedRequest.Merge(dst, src)
}
func (m *UpdateOrderViewedRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrderViewedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrderViewedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrderViewedRequest proto.InternalMessageInfo

func (m *UpdateOrderViewedRequest) GetOrderIncrementId() int64 {
	if m != nil {
		return m.OrderIncrementId
	}
	return 0
}

type UpdateOrderViewedResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateOrderViewedResponse) Reset()         { *m = UpdateOrderViewedResponse{} }
func (m *UpdateOrderViewedResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateOrderViewedResponse) ProtoMessage()    {}
func (*UpdateOrderViewedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{66}
}
func (m *UpdateOrderViewedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrderViewedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrderViewedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateOrderViewedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrderViewedResponse.Merge(dst, src)
}
func (m *UpdateOrderViewedResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrderViewedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrderViewedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrderViewedResponse proto.InternalMessageInfo

func (m *UpdateOrderViewedResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateOrderViewedResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ActionAfterSuccess struct {
	Type                 int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionAfterSuccess) Reset()         { *m = ActionAfterSuccess{} }
func (m *ActionAfterSuccess) String() string { return proto.CompactTextString(m) }
func (*ActionAfterSuccess) ProtoMessage()    {}
func (*ActionAfterSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{67}
}
func (m *ActionAfterSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionAfterSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionAfterSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionAfterSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionAfterSuccess.Merge(dst, src)
}
func (m *ActionAfterSuccess) XXX_Size() int {
	return m.Size()
}
func (m *ActionAfterSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionAfterSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_ActionAfterSuccess proto.InternalMessageInfo

func (m *ActionAfterSuccess) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ActionAfterSuccess) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ActionAfterSuccess) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type GetSenpayTokenRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken         string   `protobuf:"bytes,2,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSenpayTokenRequest) Reset()         { *m = GetSenpayTokenRequest{} }
func (m *GetSenpayTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetSenpayTokenRequest) ProtoMessage()    {}
func (*GetSenpayTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{68}
}
func (m *GetSenpayTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSenpayTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSenpayTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSenpayTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSenpayTokenRequest.Merge(dst, src)
}
func (m *GetSenpayTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSenpayTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSenpayTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSenpayTokenRequest proto.InternalMessageInfo

func (m *GetSenpayTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetSenpayTokenRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type GetSenpayTokenResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken         string   `protobuf:"bytes,2,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"`
	ExpireIn             int32    `protobuf:"varint,3,opt,name=expire_in,proto3" json:"expire_in,omitempty"`
	Error                *Error   `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSenpayTokenResponse) Reset()         { *m = GetSenpayTokenResponse{} }
func (m *GetSenpayTokenResponse) String() string { return proto.CompactTextString(m) }
func (*GetSenpayTokenResponse) ProtoMessage()    {}
func (*GetSenpayTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{69}
}
func (m *GetSenpayTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSenpayTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSenpayTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSenpayTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSenpayTokenResponse.Merge(dst, src)
}
func (m *GetSenpayTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSenpayTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSenpayTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSenpayTokenResponse proto.InternalMessageInfo

func (m *GetSenpayTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetSenpayTokenResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *GetSenpayTokenResponse) GetExpireIn() int32 {
	if m != nil {
		return m.ExpireIn
	}
	return 0
}

func (m *GetSenpayTokenResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SenpayOtpRequest struct {
	OrderIncrementId     int64    `protobuf:"varint,1,opt,name=order_increment_id,proto3" json:"order_increment_id,omitempty"`
	PaymentWalletId      string   `protobuf:"bytes,2,opt,name=payment_wallet_id,proto3" json:"payment_wallet_id,omitempty"`
	WalletConfirmType    int32    `protobuf:"varint,3,opt,name=wallet_confirm_type,proto3" json:"wallet_confirm_type,omitempty"`
	VerifyCode           string   `protobuf:"bytes,4,opt,name=verify_code,proto3" json:"verify_code,omitempty"`
	Token                string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken         string   `protobuf:"bytes,6,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SenpayOtpRequest) Reset()         { *m = SenpayOtpRequest{} }
func (m *SenpayOtpRequest) String() string { return proto.CompactTextString(m) }
func (*SenpayOtpRequest) ProtoMessage()    {}
func (*SenpayOtpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{70}
}
func (m *SenpayOtpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SenpayOtpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SenpayOtpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SenpayOtpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SenpayOtpRequest.Merge(dst, src)
}
func (m *SenpayOtpRequest) XXX_Size() int {
	return m.Size()
}
func (m *SenpayOtpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SenpayOtpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SenpayOtpRequest proto.InternalMessageInfo

func (m *SenpayOtpRequest) GetOrderIncrementId() int64 {
	if m != nil {
		return m.OrderIncrementId
	}
	return 0
}

func (m *SenpayOtpRequest) GetPaymentWalletId() string {
	if m != nil {
		return m.PaymentWalletId
	}
	return ""
}

func (m *SenpayOtpRequest) GetWalletConfirmType() int32 {
	if m != nil {
		return m.WalletConfirmType
	}
	return 0
}

func (m *SenpayOtpRequest) GetVerifyCode() string {
	if m != nil {
		return m.VerifyCode
	}
	return ""
}

func (m *SenpayOtpRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SenpayOtpRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type SenpayOtpResponse struct {
	OrderIncrementId     int64    `protobuf:"varint,1,opt,name=order_increment_id,proto3" json:"order_increment_id,omitempty"`
	PaymentStatus        int32    `protobuf:"varint,2,opt,name=payment_status,proto3" json:"payment_status,omitempty"`
	PaymentStatusLabel   string   `protobuf:"bytes,3,opt,name=payment_status_label,proto3" json:"payment_status_label,omitempty"`
	Error                *Error   `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SenpayOtpResponse) Reset()         { *m = SenpayOtpResponse{} }
func (m *SenpayOtpResponse) String() string { return proto.CompactTextString(m) }
func (*SenpayOtpResponse) ProtoMessage()    {}
func (*SenpayOtpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{71}
}
func (m *SenpayOtpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SenpayOtpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SenpayOtpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SenpayOtpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SenpayOtpResponse.Merge(dst, src)
}
func (m *SenpayOtpResponse) XXX_Size() int {
	return m.Size()
}
func (m *SenpayOtpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SenpayOtpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SenpayOtpResponse proto.InternalMessageInfo

func (m *SenpayOtpResponse) GetOrderIncrementId() int64 {
	if m != nil {
		return m.OrderIncrementId
	}
	return 0
}

func (m *SenpayOtpResponse) GetPaymentStatus() int32 {
	if m != nil {
		return m.PaymentStatus
	}
	return 0
}

func (m *SenpayOtpResponse) GetPaymentStatusLabel() string {
	if m != nil {
		return m.PaymentStatusLabel
	}
	return ""
}

func (m *SenpayOtpResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type CodOtpRequest struct {
	MerchantExternalId   int64    `protobuf:"varint,1,opt,name=merchant_external_id,proto3" json:"merchant_external_id,omitempty"`
	Telephone            string   `protobuf:"bytes,2,opt,name=telephone,proto3" json:"telephone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodOtpRequest) Reset()         { *m = CodOtpRequest{} }
func (m *CodOtpRequest) String() string { return proto.CompactTextString(m) }
func (*CodOtpRequest) ProtoMessage()    {}
func (*CodOtpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{72}
}
func (m *CodOtpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodOtpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodOtpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CodOtpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodOtpRequest.Merge(dst, src)
}
func (m *CodOtpRequest) XXX_Size() int {
	return m.Size()
}
func (m *CodOtpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CodOtpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CodOtpRequest proto.InternalMessageInfo

func (m *CodOtpRequest) GetMerchantExternalId() int64 {
	if m != nil {
		return m.MerchantExternalId
	}
	return 0
}

func (m *CodOtpRequest) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

type CodOtpResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode            int32    `protobuf:"varint,3,opt,name=error_code,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodOtpResponse) Reset()         { *m = CodOtpResponse{} }
func (m *CodOtpResponse) String() string { return proto.CompactTextString(m) }
func (*CodOtpResponse) ProtoMessage()    {}
func (*CodOtpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{73}
}
func (m *CodOtpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodOtpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodOtpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CodOtpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodOtpResponse.Merge(dst, src)
}
func (m *CodOtpResponse) XXX_Size() int {
	return m.Size()
}
func (m *CodOtpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CodOtpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CodOtpResponse proto.InternalMessageInfo

func (m *CodOtpResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CodOtpResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CodOtpResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// /Tracking
type TrackingTransaction struct {
	TransactionId        string   `protobuf:"bytes,1,opt,name=transaction_id,proto3" json:"transaction_id,omitempty"`
	Affiliation          string   `protobuf:"bytes,2,opt,name=affiliation,proto3" json:"affiliation,omitempty"`
	Total                string   `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	Tax                  string   `protobuf:"bytes,4,opt,name=tax,proto3" json:"tax,omitempty"`
	Shipping             string   `protobuf:"bytes,5,opt,name=shipping,proto3" json:"shipping,omitempty"`
	City                 string   `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	Province             string   `protobuf:"bytes,7,opt,name=province,proto3" json:"province,omitempty"`
	Country              string   `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackingTransaction) Reset()         { *m = TrackingTransaction{} }
func (m *TrackingTransaction) String() string { return proto.CompactTextString(m) }
func (*TrackingTransaction) ProtoMessage()    {}
func (*TrackingTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{74}
}
func (m *TrackingTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingTransaction.Merge(dst, src)
}
func (m *TrackingTransaction) XXX_Size() int {
	return m.Size()
}
func (m *TrackingTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingTransaction proto.InternalMessageInfo

func (m *TrackingTransaction) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *TrackingTransaction) GetAffiliation() string {
	if m != nil {
		return m.Affiliation
	}
	return ""
}

func (m *TrackingTransaction) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *TrackingTransaction) GetTax() string {
	if m != nil {
		return m.Tax
	}
	return ""
}

func (m *TrackingTransaction) GetShipping() string {
	if m != nil {
		return m.Shipping
	}
	return ""
}

func (m *TrackingTransaction) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *TrackingTransaction) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *TrackingTransaction) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type TrackingItem struct {
	TransactionId        string   `protobuf:"bytes,1,opt,name=transaction_id,proto3" json:"transaction_id,omitempty"`
	Sku                  string   `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Category             string   `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Price                string   `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	Quantity             string   `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackingItem) Reset()         { *m = TrackingItem{} }
func (m *TrackingItem) String() string { return proto.CompactTextString(m) }
func (*TrackingItem) ProtoMessage()    {}
func (*TrackingItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{75}
}
func (m *TrackingItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingItem.Merge(dst, src)
}
func (m *TrackingItem) XXX_Size() int {
	return m.Size()
}
func (m *TrackingItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingItem.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingItem proto.InternalMessageInfo

func (m *TrackingItem) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *TrackingItem) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *TrackingItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackingItem) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *TrackingItem) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *TrackingItem) GetQuantity() string {
	if m != nil {
		return m.Quantity
	}
	return ""
}

type TrackingCustomer struct {
	Index                string   `protobuf:"bytes,1,opt,name=index,json=transaction_id,proto3" json:"index,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=transaction_id,proto3" json:"name,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,json=transaction_id,proto3" json:"value,omitempty"`
	OptScope             string   `protobuf:"bytes,4,opt,name=opt_scope,json=transaction_id,proto3" json:"opt_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackingCustomer) Reset()         { *m = TrackingCustomer{} }
func (m *TrackingCustomer) String() string { return proto.CompactTextString(m) }
func (*TrackingCustomer) ProtoMessage()    {}
func (*TrackingCustomer) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{76}
}
func (m *TrackingCustomer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingCustomer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingCustomer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingCustomer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingCustomer.Merge(dst, src)
}
func (m *TrackingCustomer) XXX_Size() int {
	return m.Size()
}
func (m *TrackingCustomer) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingCustomer.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingCustomer proto.InternalMessageInfo

func (m *TrackingCustomer) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *TrackingCustomer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackingCustomer) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TrackingCustomer) GetOptScope() string {
	if m != nil {
		return m.OptScope
	}
	return ""
}

type TrackingActionFeild struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Affiliation          string   `protobuf:"bytes,2,opt,name=affiliation,proto3" json:"affiliation,omitempty"`
	Revenue              string   `protobuf:"bytes,3,opt,name=revenue,proto3" json:"revenue,omitempty"`
	Tax                  string   `protobuf:"bytes,4,opt,name=tax,proto3" json:"tax,omitempty"`
	Shipping             string   `protobuf:"bytes,5,opt,name=shipping,proto3" json:"shipping,omitempty"`
	Coupon               string   `protobuf:"bytes,6,opt,name=coupon,proto3" json:"coupon,omitempty"`
	Option               string   `protobuf:"bytes,7,opt,name=option,proto3" json:"option,omitempty"`
	Action               string   `protobuf:"bytes,8,opt,name=action,proto3" json:"action,omitempty"`
	LotusPointsUsed      string   `protobuf:"bytes,9,opt,name=lotus_points_used,proto3" json:"lotus_points_used,omitempty"`
	ShipTime             int64    `protobuf:"varint,10,opt,name=ship_time,proto3" json:"ship_time,omitempty"`
	ShipTo               string   `protobuf:"bytes,11,opt,name=ship_to,proto3" json:"ship_to,omitempty"`
	Express              string   `protobuf:"bytes,12,opt,name=express,proto3" json:"express,omitempty"`
	Step                 int64    `protobuf:"varint,13,opt,name=step,proto3" json:"step,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackingActionFeild) Reset()         { *m = TrackingActionFeild{} }
func (m *TrackingActionFeild) String() string { return proto.CompactTextString(m) }
func (*TrackingActionFeild) ProtoMessage()    {}
func (*TrackingActionFeild) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{77}
}
func (m *TrackingActionFeild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingActionFeild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingActionFeild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingActionFeild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingActionFeild.Merge(dst, src)
}
func (m *TrackingActionFeild) XXX_Size() int {
	return m.Size()
}
func (m *TrackingActionFeild) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingActionFeild.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingActionFeild proto.InternalMessageInfo

func (m *TrackingActionFeild) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackingActionFeild) GetAffiliation() string {
	if m != nil {
		return m.Affiliation
	}
	return ""
}

func (m *TrackingActionFeild) GetRevenue() string {
	if m != nil {
		return m.Revenue
	}
	return ""
}

func (m *TrackingActionFeild) GetTax() string {
	if m != nil {
		return m.Tax
	}
	return ""
}

func (m *TrackingActionFeild) GetShipping() string {
	if m != nil {
		return m.Shipping
	}
	return ""
}

func (m *TrackingActionFeild) GetCoupon() string {
	if m != nil {
		return m.Coupon
	}
	return ""
}

func (m *TrackingActionFeild) GetOption() string {
	if m != nil {
		return m.Option
	}
	return ""
}

func (m *TrackingActionFeild) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *TrackingActionFeild) GetLotusPointsUsed() string {
	if m != nil {
		return m.LotusPointsUsed
	}
	return ""
}

func (m *TrackingActionFeild) GetShipTime() int64 {
	if m != nil {
		return m.ShipTime
	}
	return 0
}

func (m *TrackingActionFeild) GetShipTo() string {
	if m != nil {
		return m.ShipTo
	}
	return ""
}

func (m *TrackingActionFeild) GetExpress() string {
	if m != nil {
		return m.Express
	}
	return ""
}

func (m *TrackingActionFeild) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

type TrackingShopReputation struct {
	Point                string   `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackingShopReputation) Reset()         { *m = TrackingShopReputation{} }
func (m *TrackingShopReputation) String() string { return proto.CompactTextString(m) }
func (*TrackingShopReputation) ProtoMessage()    {}
func (*TrackingShopReputation) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{78}
}
func (m *TrackingShopReputation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingShopReputation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingShopReputation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingShopReputation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingShopReputation.Merge(dst, src)
}
func (m *TrackingShopReputation) XXX_Size() int {
	return m.Size()
}
func (m *TrackingShopReputation) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingShopReputation.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingShopReputation proto.InternalMessageInfo

func (m *TrackingShopReputation) GetPoint() string {
	if m != nil {
		return m.Point
	}
	return ""
}

func (m *TrackingShopReputation) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type TrackingCategory struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug                 string   `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackingCategory) Reset()         { *m = TrackingCategory{} }
func (m *TrackingCategory) String() string { return proto.CompactTextString(m) }
func (*TrackingCategory) ProtoMessage()    {}
func (*TrackingCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{79}
}
func (m *TrackingCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingCategory.Merge(dst, src)
}
func (m *TrackingCategory) XXX_Size() int {
	return m.Size()
}
func (m *TrackingCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingCategory.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingCategory proto.InternalMessageInfo

func (m *TrackingCategory) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TrackingCategory) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *TrackingCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TrackingGoogleTagParams struct {
	EcommPagetype        string   `protobuf:"bytes,1,opt,name=ecomm_pagetype,proto3" json:"ecomm_pagetype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackingGoogleTagParams) Reset()         { *m = TrackingGoogleTagParams{} }
func (m *TrackingGoogleTagParams) String() string { return proto.CompactTextString(m) }
func (*TrackingGoogleTagParams) ProtoMessage()    {}
func (*TrackingGoogleTagParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{80}
}
func (m *TrackingGoogleTagParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingGoogleTagParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingGoogleTagParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingGoogleTagParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingGoogleTagParams.Merge(dst, src)
}
func (m *TrackingGoogleTagParams) XXX_Size() int {
	return m.Size()
}
func (m *TrackingGoogleTagParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingGoogleTagParams.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingGoogleTagParams proto.InternalMessageInfo

func (m *TrackingGoogleTagParams) GetEcommPagetype() string {
	if m != nil {
		return m.EcommPagetype
	}
	return ""
}

type TrackingProduct struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Price                int32                   `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Brand                string                  `protobuf:"bytes,4,opt,name=brand,proto3" json:"brand,omitempty"`
	Category             string                  `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	Variant              string                  `protobuf:"bytes,6,opt,name=variant,proto3" json:"variant,omitempty"`
	Quantity             int32                   `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Coupon               string                  `protobuf:"bytes,8,opt,name=coupon,proto3" json:"coupon,omitempty"`
	ShopId               int64                   `protobuf:"varint,9,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	ShopExtId            int64                   `protobuf:"varint,10,opt,name=shop_ext_id,proto3" json:"shop_ext_id,omitempty"`
	ShopReputation       *TrackingShopReputation `protobuf:"bytes,11,opt,name=shop_reputation" json:"shop_reputation,omitempty"`
	SourceBlockId        string                  `protobuf:"bytes,12,opt,name=source_block_id,proto3" json:"source_block_id,omitempty"`
	SourcePageId         string                  `protobuf:"bytes,13,opt,name=source_page_id,proto3" json:"source_page_id,omitempty"`
	SourceUrl            string                  `protobuf:"bytes,14,opt,name=source_url,proto3" json:"source_url,omitempty"`
	SourceInfo           string                  `protobuf:"bytes,15,opt,name=source_info,proto3" json:"source_info,omitempty"`
	Categories           []*TrackingCategory     `protobuf:"bytes,16,rep,name=categories" json:"categories,omitempty"`
	FinalPrice           int32                   `protobuf:"varint,17,opt,name=final_price,proto3" json:"final_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TrackingProduct) Reset()         { *m = TrackingProduct{} }
func (m *TrackingProduct) String() string { return proto.CompactTextString(m) }
func (*TrackingProduct) ProtoMessage()    {}
func (*TrackingProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{81}
}
func (m *TrackingProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingProduct.Merge(dst, src)
}
func (m *TrackingProduct) XXX_Size() int {
	return m.Size()
}
func (m *TrackingProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingProduct.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingProduct proto.InternalMessageInfo

func (m *TrackingProduct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackingProduct) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackingProduct) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TrackingProduct) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *TrackingProduct) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *TrackingProduct) GetVariant() string {
	if m != nil {
		return m.Variant
	}
	return ""
}

func (m *TrackingProduct) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *TrackingProduct) GetCoupon() string {
	if m != nil {
		return m.Coupon
	}
	return ""
}

func (m *TrackingProduct) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *TrackingProduct) GetShopExtId() int64 {
	if m != nil {
		return m.ShopExtId
	}
	return 0
}

func (m *TrackingProduct) GetShopReputation() *TrackingShopReputation {
	if m != nil {
		return m.ShopReputation
	}
	return nil
}

func (m *TrackingProduct) GetSourceBlockId() string {
	if m != nil {
		return m.SourceBlockId
	}
	return ""
}

func (m *TrackingProduct) GetSourcePageId() string {
	if m != nil {
		return m.SourcePageId
	}
	return ""
}

func (m *TrackingProduct) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

func (m *TrackingProduct) GetSourceInfo() string {
	if m != nil {
		return m.SourceInfo
	}
	return ""
}

func (m *TrackingProduct) GetCategories() []*TrackingCategory {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *TrackingProduct) GetFinalPrice() int32 {
	if m != nil {
		return m.FinalPrice
	}
	return 0
}

type TrackingPurchase struct {
	ActionField          *TrackingActionFeild `protobuf:"bytes,1,opt,name=action_field,json=actionField" json:"action_field,omitempty"`
	Products             []*TrackingProduct   `protobuf:"bytes,2,rep,name=products" json:"products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TrackingPurchase) Reset()         { *m = TrackingPurchase{} }
func (m *TrackingPurchase) String() string { return proto.CompactTextString(m) }
func (*TrackingPurchase) ProtoMessage()    {}
func (*TrackingPurchase) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{82}
}
func (m *TrackingPurchase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingPurchase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingPurchase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingPurchase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingPurchase.Merge(dst, src)
}
func (m *TrackingPurchase) XXX_Size() int {
	return m.Size()
}
func (m *TrackingPurchase) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingPurchase.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingPurchase proto.InternalMessageInfo

func (m *TrackingPurchase) GetActionField() *TrackingActionFeild {
	if m != nil {
		return m.ActionField
	}
	return nil
}

func (m *TrackingPurchase) GetProducts() []*TrackingProduct {
	if m != nil {
		return m.Products
	}
	return nil
}

type TrackingCheckout struct {
	ActionField          *TrackingActionFeild `protobuf:"bytes,1,opt,name=action_field,json=actionField" json:"action_field,omitempty"`
	Products             []*TrackingProduct   `protobuf:"bytes,2,rep,name=products" json:"products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TrackingCheckout) Reset()         { *m = TrackingCheckout{} }
func (m *TrackingCheckout) String() string { return proto.CompactTextString(m) }
func (*TrackingCheckout) ProtoMessage()    {}
func (*TrackingCheckout) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{83}
}
func (m *TrackingCheckout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingCheckout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingCheckout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingCheckout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingCheckout.Merge(dst, src)
}
func (m *TrackingCheckout) XXX_Size() int {
	return m.Size()
}
func (m *TrackingCheckout) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingCheckout.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingCheckout proto.InternalMessageInfo

func (m *TrackingCheckout) GetActionField() *TrackingActionFeild {
	if m != nil {
		return m.ActionField
	}
	return nil
}

func (m *TrackingCheckout) GetProducts() []*TrackingProduct {
	if m != nil {
		return m.Products
	}
	return nil
}

type TrackingEcommerce struct {
	Purchase             *TrackingPurchase `protobuf:"bytes,1,opt,name=purchase" json:"purchase,omitempty"`
	Checkout             *TrackingCheckout `protobuf:"bytes,2,opt,name=checkout" json:"checkout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TrackingEcommerce) Reset()         { *m = TrackingEcommerce{} }
func (m *TrackingEcommerce) String() string { return proto.CompactTextString(m) }
func (*TrackingEcommerce) ProtoMessage()    {}
func (*TrackingEcommerce) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{84}
}
func (m *TrackingEcommerce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingEcommerce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingEcommerce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingEcommerce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingEcommerce.Merge(dst, src)
}
func (m *TrackingEcommerce) XXX_Size() int {
	return m.Size()
}
func (m *TrackingEcommerce) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingEcommerce.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingEcommerce proto.InternalMessageInfo

func (m *TrackingEcommerce) GetPurchase() *TrackingPurchase {
	if m != nil {
		return m.Purchase
	}
	return nil
}

func (m *TrackingEcommerce) GetCheckout() *TrackingCheckout {
	if m != nil {
		return m.Checkout
	}
	return nil
}

type TrackingEcommerceData struct {
	Ecommerce            *TrackingEcommerce       `protobuf:"bytes,1,opt,name=ecommerce" json:"ecommerce,omitempty"`
	Event                string                   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	SendoPlatform        string                   `protobuf:"bytes,3,opt,name=sendo_platform,proto3" json:"sendo_platform,omitempty"`
	GoogleTagParams      *TrackingGoogleTagParams `protobuf:"bytes,4,opt,name=google_tag_params" json:"google_tag_params,omitempty"`
	Pageurl              string                   `protobuf:"bytes,5,opt,name=pageurl,proto3" json:"pageurl,omitempty"`
	Email                string                   `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Userid               string                   `protobuf:"bytes,7,opt,name=userid,proto3" json:"userid,omitempty"`
	LoginType            string                   `protobuf:"bytes,8,opt,name=login_type,proto3" json:"login_type,omitempty"`
	IsFirstOrder         string                   `protobuf:"bytes,9,opt,name=is_first_order,proto3" json:"is_first_order,omitempty"`
	ClientTime           int64                    `protobuf:"varint,10,opt,name=client_time,proto3" json:"client_time,omitempty"`
	IpClient             string                   `protobuf:"bytes,11,opt,name=ip_client,proto3" json:"ip_client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TrackingEcommerceData) Reset()         { *m = TrackingEcommerceData{} }
func (m *TrackingEcommerceData) String() string { return proto.CompactTextString(m) }
func (*TrackingEcommerceData) ProtoMessage()    {}
func (*TrackingEcommerceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{85}
}
func (m *TrackingEcommerceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingEcommerceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingEcommerceData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingEcommerceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingEcommerceData.Merge(dst, src)
}
func (m *TrackingEcommerceData) XXX_Size() int {
	return m.Size()
}
func (m *TrackingEcommerceData) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingEcommerceData.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingEcommerceData proto.InternalMessageInfo

func (m *TrackingEcommerceData) GetEcommerce() *TrackingEcommerce {
	if m != nil {
		return m.Ecommerce
	}
	return nil
}

func (m *TrackingEcommerceData) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *TrackingEcommerceData) GetSendoPlatform() string {
	if m != nil {
		return m.SendoPlatform
	}
	return ""
}

func (m *TrackingEcommerceData) GetGoogleTagParams() *TrackingGoogleTagParams {
	if m != nil {
		return m.GoogleTagParams
	}
	return nil
}

func (m *TrackingEcommerceData) GetPageurl() string {
	if m != nil {
		return m.Pageurl
	}
	return ""
}

func (m *TrackingEcommerceData) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *TrackingEcommerceData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *TrackingEcommerceData) GetLoginType() string {
	if m != nil {
		return m.LoginType
	}
	return ""
}

func (m *TrackingEcommerceData) GetIsFirstOrder() string {
	if m != nil {
		return m.IsFirstOrder
	}
	return ""
}

func (m *TrackingEcommerceData) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *TrackingEcommerceData) GetIpClient() string {
	if m != nil {
		return m.IpClient
	}
	return ""
}

type TrackingData struct {
	View                 bool                   `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	NewUser              bool                   `protobuf:"varint,2,opt,name=newUser,proto3" json:"newUser,omitempty"`
	Transaction          *TrackingTransaction   `protobuf:"bytes,3,opt,name=transaction" json:"transaction,omitempty"`
	Items                []*TrackingItem        `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Customer             *TrackingCustomer      `protobuf:"bytes,5,opt,name=customer" json:"customer,omitempty"`
	EcommerceData        *TrackingEcommerceData `protobuf:"bytes,6,opt,name=ecommerce_data" json:"ecommerce_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TrackingData) Reset()         { *m = TrackingData{} }
func (m *TrackingData) String() string { return proto.CompactTextString(m) }
func (*TrackingData) ProtoMessage()    {}
func (*TrackingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{86}
}
func (m *TrackingData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackingData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TrackingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingData.Merge(dst, src)
}
func (m *TrackingData) XXX_Size() int {
	return m.Size()
}
func (m *TrackingData) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingData.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingData proto.InternalMessageInfo

func (m *TrackingData) GetView() bool {
	if m != nil {
		return m.View
	}
	return false
}

func (m *TrackingData) GetNewUser() bool {
	if m != nil {
		return m.NewUser
	}
	return false
}

func (m *TrackingData) GetTransaction() *TrackingTransaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TrackingData) GetItems() []*TrackingItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *TrackingData) GetCustomer() *TrackingCustomer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *TrackingData) GetEcommerceData() *TrackingEcommerceData {
	if m != nil {
		return m.EcommerceData
	}
	return nil
}

// Repush order to OPC request & response
type RepushOPCOrderRequest struct {
	OrderIds             []int64  `protobuf:"varint,1,rep,packed,name=order_ids" json:"order_ids,omitempty"`
	Rebuild              bool     `protobuf:"varint,2,opt,name=rebuild,proto3" json:"rebuild,omitempty"`
	IsOldOrder           bool     `protobuf:"varint,3,opt,name=is_old_order,proto3" json:"is_old_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepushOPCOrderRequest) Reset()         { *m = RepushOPCOrderRequest{} }
func (m *RepushOPCOrderRequest) String() string { return proto.CompactTextString(m) }
func (*RepushOPCOrderRequest) ProtoMessage()    {}
func (*RepushOPCOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{87}
}
func (m *RepushOPCOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepushOPCOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepushOPCOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RepushOPCOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepushOPCOrderRequest.Merge(dst, src)
}
func (m *RepushOPCOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *RepushOPCOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RepushOPCOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RepushOPCOrderRequest proto.InternalMessageInfo

func (m *RepushOPCOrderRequest) GetOrderIds() []int64 {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

func (m *RepushOPCOrderRequest) GetRebuild() bool {
	if m != nil {
		return m.Rebuild
	}
	return false
}

func (m *RepushOPCOrderRequest) GetIsOldOrder() bool {
	if m != nil {
		return m.IsOldOrder
	}
	return false
}

type RepushOPCOrderResponse struct {
	IsError              bool     `protobuf:"varint,1,opt,name=is_error,proto3" json:"is_error,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FailedOrderIds       []int64  `protobuf:"varint,4,rep,packed,name=failed_order_ids" json:"failed_order_ids,omitempty"`
	DetailErrors         []string `protobuf:"bytes,3,rep,name=detail_errors" json:"detail_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepushOPCOrderResponse) Reset()         { *m = RepushOPCOrderResponse{} }
func (m *RepushOPCOrderResponse) String() string { return proto.CompactTextString(m) }
func (*RepushOPCOrderResponse) ProtoMessage()    {}
func (*RepushOPCOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkout_ad8695e994df4374, []int{88}
}
func (m *RepushOPCOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepushOPCOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepushOPCOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RepushOPCOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepushOPCOrderResponse.Merge(dst, src)
}
func (m *RepushOPCOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *RepushOPCOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RepushOPCOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RepushOPCOrderResponse proto.InternalMessageInfo

func (m *RepushOPCOrderResponse) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *RepushOPCOrderResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RepushOPCOrderResponse) GetFailedOrderIds() []int64 {
	if m != nil {
		return m.FailedOrderIds
	}
	return nil
}

func (m *RepushOPCOrderResponse) GetDetailErrors() []string {
	if m != nil {
		return m.DetailErrors
	}
	return nil
}

func init() {
	proto.RegisterType((*SaveOrderResponse)(nil), "sendo.v1.api.checkout.SaveOrderResponse")
	proto.RegisterType((*CheckoutData)(nil), "sendo.v1.api.checkout.CheckoutData")
	proto.RegisterType((*TotalOrderInfo)(nil), "sendo.v1.api.checkout.TotalOrderInfo")
	proto.RegisterType((*TotalDetailItem)(nil), "sendo.v1.api.checkout.TotalDetailItem")
	proto.RegisterType((*LoyaltyInfo)(nil), "sendo.v1.api.checkout.LoyaltyInfo")
	proto.RegisterType((*VoucherInfo)(nil), "sendo.v1.api.checkout.VoucherInfo")
	proto.RegisterType((*PaymentInfo)(nil), "sendo.v1.api.checkout.PaymentInfo")
	proto.RegisterType((*ProductInfo)(nil), "sendo.v1.api.checkout.ProductInfo")
	proto.RegisterType((*CurrentPayment)(nil), "sendo.v1.api.checkout.CurrentPayment")
	proto.RegisterType((*CurrentPaymentData)(nil), "sendo.v1.api.checkout.CurrentPaymentData")
	proto.RegisterType((*Payment)(nil), "sendo.v1.api.checkout.Payment")
	proto.RegisterType((*BanksConfig)(nil), "sendo.v1.api.checkout.BanksConfig")
	proto.RegisterType((*BankInstallmentTerms)(nil), "sendo.v1.api.checkout.BankInstallmentTerms")
	proto.RegisterType((*InstallmentPlan)(nil), "sendo.v1.api.checkout.InstallmentPlan")
	proto.RegisterType((*ShippingCarrierShop)(nil), "sendo.v1.api.checkout.ShippingCarrierShop")
	proto.RegisterType((*ShippingCarrier)(nil), "sendo.v1.api.checkout.ShippingCarrier")
	proto.RegisterType((*ProductShippingInfo)(nil), "sendo.v1.api.checkout.ProductShippingInfo")
	proto.RegisterType((*ShopInfo)(nil), "sendo.v1.api.checkout.ShopInfo")
	proto.RegisterType((*MerchantSupportConfig)(nil), "sendo.v1.api.checkout.MerchantSupportConfig")
	proto.RegisterType((*DiscountConfig)(nil), "sendo.v1.api.checkout.DiscountConfig")
	proto.RegisterType((*MerchantService)(nil), "sendo.v1.api.checkout.MerchantService")
	proto.RegisterType((*LoyaltyConfig)(nil), "sendo.v1.api.checkout.LoyaltyConfig")
	proto.RegisterType((*ShopWareHouse)(nil), "sendo.v1.api.checkout.ShopWareHouse")
	proto.RegisterType((*ProductCheckout)(nil), "sendo.v1.api.checkout.ProductCheckout")
	proto.RegisterType((*CustomerData)(nil), "sendo.v1.api.checkout.CustomerData")
	proto.RegisterType((*ClientInfo)(nil), "sendo.v1.api.checkout.ClientInfo")
	proto.RegisterType((*Customer)(nil), "sendo.v1.api.checkout.Customer")
	proto.RegisterType((*BadBuyerInfo)(nil), "sendo.v1.api.checkout.BadBuyerInfo")
	proto.RegisterType((*ProductItem)(nil), "sendo.v1.api.checkout.ProductItem")
	proto.RegisterType((*ImageResize)(nil), "sendo.v1.api.checkout.ImageResize")
	proto.RegisterType((*ExtendedShippingPackage)(nil), "sendo.v1.api.checkout.ExtendedShippingPackage")
	proto.RegisterType((*ProductOption)(nil), "sendo.v1.api.checkout.ProductOption")
	proto.RegisterType((*PaymentTransferInfo)(nil), "sendo.v1.api.checkout.PaymentTransferInfo")
	proto.RegisterType((*PaymentWalletInfo)(nil), "sendo.v1.api.checkout.PaymentWalletInfo")
	proto.RegisterType((*BankTransferInfo)(nil), "sendo.v1.api.checkout.BankTransferInfo")
	proto.RegisterType((*CustomerAddress)(nil), "sendo.v1.api.checkout.CustomerAddress")
	proto.RegisterType((*Region)(nil), "sendo.v1.api.checkout.Region")
	proto.RegisterType((*City)(nil), "sendo.v1.api.checkout.City")
	proto.RegisterType((*District)(nil), "sendo.v1.api.checkout.District")
	proto.RegisterType((*Ward)(nil), "sendo.v1.api.checkout.Ward")
	proto.RegisterType((*Error)(nil), "sendo.v1.api.checkout.Error")
	proto.RegisterType((*ErrorAction)(nil), "sendo.v1.api.checkout.ErrorAction")
	proto.RegisterType((*InvalidField)(nil), "sendo.v1.api.checkout.InvalidField")
	proto.RegisterType((*CheckoutLoadRequest)(nil), "sendo.v1.api.checkout.CheckoutLoadRequest")
	proto.RegisterType((*CheckoutLoadResponse)(nil), "sendo.v1.api.checkout.CheckoutLoadResponse")
	proto.RegisterType((*GetCustomerAddressRequest)(nil), "sendo.v1.api.checkout.GetCustomerAddressRequest")
	proto.RegisterType((*GetCustomerAddressResponse)(nil), "sendo.v1.api.checkout.GetCustomerAddressResponse")
	proto.RegisterType((*GetCustomerVoucherRequest)(nil), "sendo.v1.api.checkout.GetCustomerVoucherRequest")
	proto.RegisterType((*GetCustomerVoucherResponse)(nil), "sendo.v1.api.checkout.GetCustomerVoucherResponse")
	proto.RegisterType((*AddCustomerAddressRequest)(nil), "sendo.v1.api.checkout.AddCustomerAddressRequest")
	proto.RegisterType((*AddCustomerAddressResponse)(nil), "sendo.v1.api.checkout.AddCustomerAddressResponse")
	proto.RegisterType((*RepushAffiliateRequest)(nil), "sendo.v1.api.checkout.RepushAffiliateRequest")
	proto.RegisterType((*RepushAffiliateResponse)(nil), "sendo.v1.api.checkout.RepushAffiliateResponse")
	proto.RegisterType((*UpdateCustomerAddressRequest)(nil), "sendo.v1.api.checkout.UpdateCustomerAddressRequest")
	proto.RegisterType((*UpdateCustomerAddressResponse)(nil), "sendo.v1.api.checkout.UpdateCustomerAddressResponse")
	proto.RegisterType((*DeleteCustomerAddressRequest)(nil), "sendo.v1.api.checkout.DeleteCustomerAddressRequest")
	proto.RegisterType((*DeleteCustomerAddressResponse)(nil), "sendo.v1.api.checkout.DeleteCustomerAddressResponse")
	proto.RegisterType((*GetRegionsListRequest)(nil), "sendo.v1.api.checkout.GetRegionsListRequest")
	proto.RegisterType((*GetRegionsListResponse)(nil), "sendo.v1.api.checkout.GetRegionsListResponse")
	proto.RegisterType((*GetWardsListRequest)(nil), "sendo.v1.api.checkout.GetWardsListRequest")
	proto.RegisterType((*GetWardsListResponse)(nil), "sendo.v1.api.checkout.GetWardsListResponse")
	proto.RegisterType((*GetShippingCarriersRequest)(nil), "sendo.v1.api.checkout.GetShippingCarriersRequest")
	proto.RegisterType((*GetShippingCarriersResponse)(nil), "sendo.v1.api.checkout.GetShippingCarriersResponse")
	proto.RegisterType((*GetOrderInfoRequest)(nil), "sendo.v1.api.checkout.GetOrderInfoRequest")
	proto.RegisterType((*GetOrderInfoResponse)(nil), "sendo.v1.api.checkout.GetOrderInfoResponse")
	proto.RegisterType((*UpdateOrderViewedRequest)(nil), "sendo.v1.api.checkout.UpdateOrderViewedRequest")
	proto.RegisterType((*UpdateOrderViewedResponse)(nil), "sendo.v1.api.checkout.UpdateOrderViewedResponse")
	proto.RegisterType((*ActionAfterSuccess)(nil), "sendo.v1.api.checkout.ActionAfterSuccess")
	proto.RegisterType((*GetSenpayTokenRequest)(nil), "sendo.v1.api.checkout.GetSenpayTokenRequest")
	proto.RegisterType((*GetSenpayTokenResponse)(nil), "sendo.v1.api.checkout.GetSenpayTokenResponse")
	proto.RegisterType((*SenpayOtpRequest)(nil), "sendo.v1.api.checkout.SenpayOtpRequest")
	proto.RegisterType((*SenpayOtpResponse)(nil), "sendo.v1.api.checkout.SenpayOtpResponse")
	proto.RegisterType((*CodOtpRequest)(nil), "sendo.v1.api.checkout.CodOtpRequest")
	proto.RegisterType((*CodOtpResponse)(nil), "sendo.v1.api.checkout.CodOtpResponse")
	proto.RegisterType((*TrackingTransaction)(nil), "sendo.v1.api.checkout.TrackingTransaction")
	proto.RegisterType((*TrackingItem)(nil), "sendo.v1.api.checkout.TrackingItem")
	proto.RegisterType((*TrackingCustomer)(nil), "sendo.v1.api.checkout.TrackingCustomer")
	proto.RegisterType((*TrackingActionFeild)(nil), "sendo.v1.api.checkout.TrackingActionFeild")
	proto.RegisterType((*TrackingShopReputation)(nil), "sendo.v1.api.checkout.TrackingShopReputation")
	proto.RegisterType((*TrackingCategory)(nil), "sendo.v1.api.checkout.TrackingCategory")
	proto.RegisterType((*TrackingGoogleTagParams)(nil), "sendo.v1.api.checkout.TrackingGoogleTagParams")
	proto.RegisterType((*TrackingProduct)(nil), "sendo.v1.api.checkout.TrackingProduct")
	proto.RegisterType((*TrackingPurchase)(nil), "sendo.v1.api.checkout.TrackingPurchase")
	proto.RegisterType((*TrackingCheckout)(nil), "sendo.v1.api.checkout.TrackingCheckout")
	proto.RegisterType((*TrackingEcommerce)(nil), "sendo.v1.api.checkout.TrackingEcommerce")
	proto.RegisterType((*TrackingEcommerceData)(nil), "sendo.v1.api.checkout.TrackingEcommerceData")
	proto.RegisterType((*TrackingData)(nil), "sendo.v1.api.checkout.TrackingData")
	proto.RegisterType((*RepushOPCOrderRequest)(nil), "sendo.v1.api.checkout.RepushOPCOrderRequest")
	proto.RegisterType((*RepushOPCOrderResponse)(nil), "sendo.v1.api.checkout.RepushOPCOrderResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CheckoutServiceClient is the client API for CheckoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckoutServiceClient interface {
	GetCustomerAddress(ctx context.Context, in *GetCustomerAddressRequest, opts ...grpc.CallOption) (*GetCustomerAddressResponse, error)
	GetCustomerVoucher(ctx context.Context, in *GetCustomerVoucherRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error)
	AddCustomerAddress(ctx context.Context, in *AddCustomerAddressRequest, opts ...grpc.CallOption) (*AddCustomerAddressResponse, error)
	RepushAffiliate(ctx context.Context, in *RepushAffiliateRequest, opts ...grpc.CallOption) (*RepushAffiliateResponse, error)
	UpdateCustomerAddress(ctx context.Context, in *UpdateCustomerAddressRequest, opts ...grpc.CallOption) (*UpdateCustomerAddressResponse, error)
	DeleteCustomerAddress(ctx context.Context, in *DeleteCustomerAddressRequest, opts ...grpc.CallOption) (*DeleteCustomerAddressResponse, error)
	GetRegionsList(ctx context.Context, in *GetRegionsListRequest, opts ...grpc.CallOption) (*GetRegionsListResponse, error)
	GetWardsList(ctx context.Context, in *GetWardsListRequest, opts ...grpc.CallOption) (*GetWardsListResponse, error)
	CheckoutLoad(ctx context.Context, in *CheckoutLoadRequest, opts ...grpc.CallOption) (*CheckoutLoadResponse, error)
	GetShippingCarrier(ctx context.Context, in *GetShippingCarriersRequest, opts ...grpc.CallOption) (*GetShippingCarriersResponse, error)
	SaveOrder(ctx context.Context, in *CheckoutLoadRequest, opts ...grpc.CallOption) (*SaveOrderResponse, error)
	GetOrderInfo(ctx context.Context, in *GetOrderInfoRequest, opts ...grpc.CallOption) (*GetOrderInfoResponse, error)
	UpdateOrderViewed(ctx context.Context, in *UpdateOrderViewedRequest, opts ...grpc.CallOption) (*UpdateOrderViewedResponse, error)
	GetSenpayToken(ctx context.Context, in *GetSenpayTokenRequest, opts ...grpc.CallOption) (*GetSenpayTokenResponse, error)
	SenpayOtp(ctx context.Context, in *SenpayOtpRequest, opts ...grpc.CallOption) (*SenpayOtpResponse, error)
	CodOtp(ctx context.Context, in *CodOtpRequest, opts ...grpc.CallOption) (*CodOtpResponse, error)
	RepushOrderToOPC(ctx context.Context, in *RepushOPCOrderRequest, opts ...grpc.CallOption) (*RepushOPCOrderResponse, error)
}

type checkoutServiceClient struct {
	cc *grpc.ClientConn
}

func NewCheckoutServiceClient(cc *grpc.ClientConn) CheckoutServiceClient {
	return &checkoutServiceClient{cc}
}

func (c *checkoutServiceClient) GetCustomerAddress(ctx context.Context, in *GetCustomerAddressRequest, opts ...grpc.CallOption) (*GetCustomerAddressResponse, error) {
	out := new(GetCustomerAddressResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/GetCustomerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) GetCustomerVoucher(ctx context.Context, in *GetCustomerVoucherRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error) {
	out := new(GetCustomerVoucherResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/GetCustomerVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) AddCustomerAddress(ctx context.Context, in *AddCustomerAddressRequest, opts ...grpc.CallOption) (*AddCustomerAddressResponse, error) {
	out := new(AddCustomerAddressResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/AddCustomerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) RepushAffiliate(ctx context.Context, in *RepushAffiliateRequest, opts ...grpc.CallOption) (*RepushAffiliateResponse, error) {
	out := new(RepushAffiliateResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/RepushAffiliate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) UpdateCustomerAddress(ctx context.Context, in *UpdateCustomerAddressRequest, opts ...grpc.CallOption) (*UpdateCustomerAddressResponse, error) {
	out := new(UpdateCustomerAddressResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/UpdateCustomerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) DeleteCustomerAddress(ctx context.Context, in *DeleteCustomerAddressRequest, opts ...grpc.CallOption) (*DeleteCustomerAddressResponse, error) {
	out := new(DeleteCustomerAddressResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/DeleteCustomerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) GetRegionsList(ctx context.Context, in *GetRegionsListRequest, opts ...grpc.CallOption) (*GetRegionsListResponse, error) {
	out := new(GetRegionsListResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/GetRegionsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) GetWardsList(ctx context.Context, in *GetWardsListRequest, opts ...grpc.CallOption) (*GetWardsListResponse, error) {
	out := new(GetWardsListResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/GetWardsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) CheckoutLoad(ctx context.Context, in *CheckoutLoadRequest, opts ...grpc.CallOption) (*CheckoutLoadResponse, error) {
	out := new(CheckoutLoadResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/CheckoutLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) GetShippingCarrier(ctx context.Context, in *GetShippingCarriersRequest, opts ...grpc.CallOption) (*GetShippingCarriersResponse, error) {
	out := new(GetShippingCarriersResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/GetShippingCarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) SaveOrder(ctx context.Context, in *CheckoutLoadRequest, opts ...grpc.CallOption) (*SaveOrderResponse, error) {
	out := new(SaveOrderResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/SaveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) GetOrderInfo(ctx context.Context, in *GetOrderInfoRequest, opts ...grpc.CallOption) (*GetOrderInfoResponse, error) {
	out := new(GetOrderInfoResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/GetOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) UpdateOrderViewed(ctx context.Context, in *UpdateOrderViewedRequest, opts ...grpc.CallOption) (*UpdateOrderViewedResponse, error) {
	out := new(UpdateOrderViewedResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/UpdateOrderViewed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) GetSenpayToken(ctx context.Context, in *GetSenpayTokenRequest, opts ...grpc.CallOption) (*GetSenpayTokenResponse, error) {
	out := new(GetSenpayTokenResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/GetSenpayToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) SenpayOtp(ctx context.Context, in *SenpayOtpRequest, opts ...grpc.CallOption) (*SenpayOtpResponse, error) {
	out := new(SenpayOtpResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/SenpayOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) CodOtp(ctx context.Context, in *CodOtpRequest, opts ...grpc.CallOption) (*CodOtpResponse, error) {
	out := new(CodOtpResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/CodOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutServiceClient) RepushOrderToOPC(ctx context.Context, in *RepushOPCOrderRequest, opts ...grpc.CallOption) (*RepushOPCOrderResponse, error) {
	out := new(RepushOPCOrderResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.checkout.CheckoutService/RepushOrderToOPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckoutServiceServer is the server API for CheckoutService service.
type CheckoutServiceServer interface {
	GetCustomerAddress(context.Context, *GetCustomerAddressRequest) (*GetCustomerAddressResponse, error)
	GetCustomerVoucher(context.Context, *GetCustomerVoucherRequest) (*GetCustomerVoucherResponse, error)
	AddCustomerAddress(context.Context, *AddCustomerAddressRequest) (*AddCustomerAddressResponse, error)
	RepushAffiliate(context.Context, *RepushAffiliateRequest) (*RepushAffiliateResponse, error)
	UpdateCustomerAddress(context.Context, *UpdateCustomerAddressRequest) (*UpdateCustomerAddressResponse, error)
	DeleteCustomerAddress(context.Context, *DeleteCustomerAddressRequest) (*DeleteCustomerAddressResponse, error)
	GetRegionsList(context.Context, *GetRegionsListRequest) (*GetRegionsListResponse, error)
	GetWardsList(context.Context, *GetWardsListRequest) (*GetWardsListResponse, error)
	CheckoutLoad(context.Context, *CheckoutLoadRequest) (*CheckoutLoadResponse, error)
	GetShippingCarrier(context.Context, *GetShippingCarriersRequest) (*GetShippingCarriersResponse, error)
	SaveOrder(context.Context, *CheckoutLoadRequest) (*SaveOrderResponse, error)
	GetOrderInfo(context.Context, *GetOrderInfoRequest) (*GetOrderInfoResponse, error)
	UpdateOrderViewed(context.Context, *UpdateOrderViewedRequest) (*UpdateOrderViewedResponse, error)
	GetSenpayToken(context.Context, *GetSenpayTokenRequest) (*GetSenpayTokenResponse, error)
	SenpayOtp(context.Context, *SenpayOtpRequest) (*SenpayOtpResponse, error)
	CodOtp(context.Context, *CodOtpRequest) (*CodOtpResponse, error)
	RepushOrderToOPC(context.Context, *RepushOPCOrderRequest) (*RepushOPCOrderResponse, error)
}

func RegisterCheckoutServiceServer(s *grpc.Server, srv CheckoutServiceServer) {
	s.RegisterService(&_CheckoutService_serviceDesc, srv)
}

func _CheckoutService_GetCustomerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).GetCustomerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/GetCustomerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).GetCustomerAddress(ctx, req.(*GetCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_GetCustomerVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).GetCustomerVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/GetCustomerVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).GetCustomerVoucher(ctx, req.(*GetCustomerVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_AddCustomerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).AddCustomerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/AddCustomerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).AddCustomerAddress(ctx, req.(*AddCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_RepushAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepushAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).RepushAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/RepushAffiliate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).RepushAffiliate(ctx, req.(*RepushAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_UpdateCustomerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).UpdateCustomerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/UpdateCustomerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).UpdateCustomerAddress(ctx, req.(*UpdateCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_DeleteCustomerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).DeleteCustomerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/DeleteCustomerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).DeleteCustomerAddress(ctx, req.(*DeleteCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_GetRegionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).GetRegionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/GetRegionsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).GetRegionsList(ctx, req.(*GetRegionsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_GetWardsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWardsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).GetWardsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/GetWardsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).GetWardsList(ctx, req.(*GetWardsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_CheckoutLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).CheckoutLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/CheckoutLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).CheckoutLoad(ctx, req.(*CheckoutLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_GetShippingCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingCarriersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).GetShippingCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/GetShippingCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).GetShippingCarrier(ctx, req.(*GetShippingCarriersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_SaveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).SaveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/SaveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).SaveOrder(ctx, req.(*CheckoutLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_GetOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).GetOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/GetOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).GetOrderInfo(ctx, req.(*GetOrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_UpdateOrderViewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderViewedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).UpdateOrderViewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/UpdateOrderViewed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).UpdateOrderViewed(ctx, req.(*UpdateOrderViewedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_GetSenpayToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSenpayTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).GetSenpayToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/GetSenpayToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).GetSenpayToken(ctx, req.(*GetSenpayTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_SenpayOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SenpayOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).SenpayOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/SenpayOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).SenpayOtp(ctx, req.(*SenpayOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_CodOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).CodOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/CodOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).CodOtp(ctx, req.(*CodOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutService_RepushOrderToOPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepushOPCOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).RepushOrderToOPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.checkout.CheckoutService/RepushOrderToOPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).RepushOrderToOPC(ctx, req.(*RepushOPCOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckoutService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.checkout.CheckoutService",
	HandlerType: (*CheckoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomerAddress",
			Handler:    _CheckoutService_GetCustomerAddress_Handler,
		},
		{
			MethodName: "GetCustomerVoucher",
			Handler:    _CheckoutService_GetCustomerVoucher_Handler,
		},
		{
			MethodName: "AddCustomerAddress",
			Handler:    _CheckoutService_AddCustomerAddress_Handler,
		},
		{
			MethodName: "RepushAffiliate",
			Handler:    _CheckoutService_RepushAffiliate_Handler,
		},
		{
			MethodName: "UpdateCustomerAddress",
			Handler:    _CheckoutService_UpdateCustomerAddress_Handler,
		},
		{
			MethodName: "DeleteCustomerAddress",
			Handler:    _CheckoutService_DeleteCustomerAddress_Handler,
		},
		{
			MethodName: "GetRegionsList",
			Handler:    _CheckoutService_GetRegionsList_Handler,
		},
		{
			MethodName: "GetWardsList",
			Handler:    _CheckoutService_GetWardsList_Handler,
		},
		{
			MethodName: "CheckoutLoad",
			Handler:    _CheckoutService_CheckoutLoad_Handler,
		},
		{
			MethodName: "GetShippingCarrier",
			Handler:    _CheckoutService_GetShippingCarrier_Handler,
		},
		{
			MethodName: "SaveOrder",
			Handler:    _CheckoutService_SaveOrder_Handler,
		},
		{
			MethodName: "GetOrderInfo",
			Handler:    _CheckoutService_GetOrderInfo_Handler,
		},
		{
			MethodName: "UpdateOrderViewed",
			Handler:    _CheckoutService_UpdateOrderViewed_Handler,
		},
		{
			MethodName: "GetSenpayToken",
			Handler:    _CheckoutService_GetSenpayToken_Handler,
		},
		{
			MethodName: "SenpayOtp",
			Handler:    _CheckoutService_SenpayOtp_Handler,
		},
		{
			MethodName: "CodOtp",
			Handler:    _CheckoutService_CodOtp_Handler,
		},
		{
			MethodName: "RepushOrderToOPC",
			Handler:    _CheckoutService_RepushOrderToOPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkout/checkout.proto",
}

func (m *SaveOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsError {
		dAtA[i] = 0x8
		i++
		if m.IsError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Errors) > 0 {
		for _, msg := range m.Errors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IncrementId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.IncrementId))
	}
	if len(m.PaymentType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentType)))
		i += copy(dAtA[i:], m.PaymentType)
	}
	if m.PaymentFailed {
		dAtA[i] = 0x28
		i++
		if m.PaymentFailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PaymentFailedReason) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentFailedReason)))
		i += copy(dAtA[i:], m.PaymentFailedReason)
	}
	if len(m.PaymentId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentId)))
		i += copy(dAtA[i:], m.PaymentId)
	}
	if m.PaymentConfirmType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.PaymentConfirmType))
	}
	if len(m.PaymentUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentUrl)))
		i += copy(dAtA[i:], m.PaymentUrl)
	}
	if m.DisableSaveOrder {
		dAtA[i] = 0x58
		i++
		if m.DisableSaveOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.VerifyUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.VerifyUrl)))
		i += copy(dAtA[i:], m.VerifyUrl)
	}
	if len(m.CurrentProducts) > 0 {
		for _, msg := range m.CurrentProducts {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IgnoreInvalidProduct != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.IgnoreInvalidProduct))
	}
	if len(m.ProductHashes) > 0 {
		for _, s := range m.ProductHashes {
			dAtA[i] = 0x7a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckoutData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckoutData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CustomerData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CustomerData.Size()))
		n1, err := m.CustomerData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ProductsCheckout != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ProductsCheckout.Size()))
		n2, err := m.ProductsCheckout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ShopInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopInfo.Size()))
		n3, err := m.ShopInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ShippingInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShippingInfo.Size()))
		n4, err := m.ShippingInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PaymentInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.PaymentInfo.Size()))
		n5, err := m.PaymentInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.VoucherInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.VoucherInfo.Size()))
		n6, err := m.VoucherInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.LoyaltyInfo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.LoyaltyInfo.Size()))
		n7, err := m.LoyaltyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.TotalInfo != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.TotalInfo.Size()))
		n8, err := m.TotalInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.CustomerNote) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CustomerNote)))
		i += copy(dAtA[i:], m.CustomerNote)
	}
	if m.DisableSaveOrder {
		dAtA[i] = 0x50
		i++
		if m.DisableSaveOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EcommerceTracking != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.EcommerceTracking.Size()))
		n9, err := m.EcommerceTracking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.IgnoreInvalidProduct != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.IgnoreInvalidProduct))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TotalOrderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalOrderInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubTotal != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubTotal))))
		i += 4
	}
	if m.VoucherAmount != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VoucherAmount))))
		i += 4
	}
	if m.LoyaltyAmount != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LoyaltyAmount))))
		i += 4
	}
	if m.DeliveryFee != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DeliveryFee))))
		i += 4
	}
	if m.CodFee != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CodFee))))
		i += 4
	}
	if m.SendoDiscountFee != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SendoDiscountFee))))
		i += 4
	}
	if m.ShopDiscountFee != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShopDiscountFee))))
		i += 4
	}
	if m.SendoDiscountPrice != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SendoDiscountPrice))))
		i += 4
	}
	if m.ShopDiscountMobile != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShopDiscountMobile))))
		i += 4
	}
	if m.ShopDiscountOnlinePayment != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShopDiscountOnlinePayment))))
		i += 4
	}
	if m.GrandTotal != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GrandTotal))))
		i += 4
	}
	if m.TotalSubsidyAmount != 0 {
		dAtA[i] = 0x65
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalSubsidyAmount))))
		i += 4
	}
	if len(m.TotalDetail) > 0 {
		for _, msg := range m.TotalDetail {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TotalDetailItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalDetailItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Index))
	}
	if len(m.Field) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if m.Value != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Sign != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Sign))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoyaltyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoyaltyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i += 4
	}
	if m.UseScore != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UseScore))))
		i += 4
	}
	if m.BonusScore != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BonusScore))))
		i += 4
	}
	if len(m.SuggestedMsg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SuggestedMsg)))
		i += copy(dAtA[i:], m.SuggestedMsg)
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if len(m.SuggestScore) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SuggestScore)))
		i += copy(dAtA[i:], m.SuggestScore)
	}
	if len(m.SuggestMessage) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SuggestMessage)))
		i += copy(dAtA[i:], m.SuggestMessage)
	}
	if m.DisableLoyalty {
		dAtA[i] = 0x40
		i++
		if m.DisableLoyalty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SuggestedUseScoreMsg) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SuggestedUseScoreMsg)))
		i += copy(dAtA[i:], m.SuggestedUseScoreMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VoucherInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnableSuggestVoucher {
		dAtA[i] = 0x8
		i++
		if m.EnableSuggestVoucher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.VoucherCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.VoucherCode)))
		i += copy(dAtA[i:], m.VoucherCode)
	}
	if m.VoucherValue != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VoucherValue))))
		i += 4
	}
	if m.IsShopVoucher {
		dAtA[i] = 0x20
		i++
		if m.IsShopVoucher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.VoucherCampaignCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.VoucherCampaignCode)))
		i += copy(dAtA[i:], m.VoucherCampaignCode)
	}
	if m.SubTotal != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubTotal))))
		i += 4
	}
	if len(m.PaymentMethod) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentMethod)))
		i += copy(dAtA[i:], m.PaymentMethod)
	}
	if m.TrackingOrderSource != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.TrackingOrderSource))
	}
	if m.RedeemedAt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.RedeemedAt))
	}
	if m.IsEnableCaptcha {
		dAtA[i] = 0x50
		i++
		if m.IsEnableCaptcha {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CaptchaResponse) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CaptchaResponse)))
		i += copy(dAtA[i:], m.CaptchaResponse)
	}
	if len(m.SuggestedMessage) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SuggestedMessage)))
		i += copy(dAtA[i:], m.SuggestedMessage)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaymentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ListPayment) > 0 {
		for _, msg := range m.ListPayment {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CurrentPaymentData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CurrentPaymentData.Size()))
		n10, err := m.CurrentPaymentData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ProductId))
	}
	if m.FinalPrice != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FinalPrice))))
		i += 4
	}
	if m.Promotion != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Promotion.Size()))
		n11, err := m.Promotion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CurrentPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentPayment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopId))
	}
	if m.CurrentPaymentData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CurrentPaymentData.Size()))
		n12, err := m.CurrentPaymentData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CurrentPaymentData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentPaymentData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.CardType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CardType)))
		i += copy(dAtA[i:], m.CardType)
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Card))
	}
	if m.CardId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CardId))
	}
	if len(m.CardCvc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CardCvc)))
		i += copy(dAtA[i:], m.CardCvc)
	}
	if m.InstallmentPeriod != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.InstallmentPeriod))
	}
	if len(m.BankName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.BankName)))
		i += copy(dAtA[i:], m.BankName)
	}
	if m.BankId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.BankId))
	}
	if len(m.Bins) > 0 {
		for _, s := range m.Bins {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PaymentName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentName)))
		i += copy(dAtA[i:], m.PaymentName)
	}
	if len(m.PaymentCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentCode)))
		i += copy(dAtA[i:], m.PaymentCode)
	}
	if m.IsDisable {
		dAtA[i] = 0x20
		i++
		if m.IsDisable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ReasonDisable) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ReasonDisable)))
		i += copy(dAtA[i:], m.ReasonDisable)
	}
	if len(m.PaymentText) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentText)))
		i += copy(dAtA[i:], m.PaymentText)
	}
	if len(m.InstallmentPlans) > 0 {
		for _, msg := range m.InstallmentPlans {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BankList) > 0 {
		for _, msg := range m.BankList {
			dAtA[i] = 0x42
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BanksConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BanksConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BankId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.BankId))
	}
	if len(m.BankFullname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.BankFullname)))
		i += copy(dAtA[i:], m.BankFullname)
	}
	if len(m.BankName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.BankName)))
		i += copy(dAtA[i:], m.BankName)
	}
	if len(m.Logo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Logo)))
		i += copy(dAtA[i:], m.Logo)
	}
	if m.Sort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Sort))
	}
	if len(m.BankInstallmentTerms) > 0 {
		for _, msg := range m.BankInstallmentTerms {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BankInstallmentTerms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankInstallmentTerms) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Period))
	}
	if m.InstallmentPlan != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.InstallmentPlan))
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InstallmentPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallmentPlan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstallmentPeriod != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.InstallmentPeriod))
	}
	if m.PeriodicPayment != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.PeriodicPayment))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShippingCarrierShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShippingCarrierShop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ListCarrier) > 0 {
		for _, msg := range m.ListCarrier {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CurrentCarrier) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CurrentCarrier)))
		i += copy(dAtA[i:], m.CurrentCarrier)
	}
	if m.ChangeCurrent != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ChangeCurrent))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	if len(m.FreeShippingMessage) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.FreeShippingMessage)))
		i += copy(dAtA[i:], m.FreeShippingMessage)
	}
	if len(m.Param) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Param)))
		i += copy(dAtA[i:], m.Param)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShippingCarrier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShippingCarrier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CarrierId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CarrierId))
	}
	if len(m.CarrierCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CarrierCode)))
		i += copy(dAtA[i:], m.CarrierCode)
	}
	if len(m.CarrierName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CarrierName)))
		i += copy(dAtA[i:], m.CarrierName)
	}
	if len(m.CarrierLogo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CarrierLogo)))
		i += copy(dAtA[i:], m.CarrierLogo)
	}
	if m.IsCurrentCarrier {
		dAtA[i] = 0x28
		i++
		if m.IsCurrentCarrier {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OriginalFee != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginalFee))))
		i += 4
	}
	if m.DeliveryFee != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DeliveryFee))))
		i += 4
	}
	if m.SubFee != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubFee))))
		i += 4
	}
	if m.CodFee != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CodFee))))
		i += 4
	}
	if m.DeliveryFeeDiscount != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DeliveryFeeDiscount))))
		i += 4
	}
	if m.CodFeeDiscount != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CodFeeDiscount))))
		i += 4
	}
	if m.SendoDiscountFee != 0 {
		dAtA[i] = 0x6d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SendoDiscountFee))))
		i += 4
	}
	if m.ShopDiscountFee != 0 {
		dAtA[i] = 0x75
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShopDiscountFee))))
		i += 4
	}
	if m.EventDiscountId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.EventDiscountId))
	}
	if m.DeliveryDuration != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DeliveryDuration))
	}
	if len(m.DeliveryDurationNote) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.DeliveryDurationNote)))
		i += copy(dAtA[i:], m.DeliveryDurationNote)
	}
	if len(m.ProductInfo) > 0 {
		for _, msg := range m.ProductInfo {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CarrierNote) > 0 {
		for _, s := range m.CarrierNote {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.UseMap {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.UseMap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.OpcUrl) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.OpcUrl)))
		i += copy(dAtA[i:], m.OpcUrl)
	}
	if len(m.NotSupportedPaymentMethods) > 0 {
		for _, s := range m.NotSupportedPaymentMethods {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductShippingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductShippingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ProductId))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Weight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopId))
	}
	if m.ExternalId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ExternalId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Logo) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Logo)))
		i += copy(dAtA[i:], m.Logo)
	}
	if m.LoyaltyConfig != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.LoyaltyConfig.Size()))
		n13, err := m.LoyaltyConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.IsCertified {
		dAtA[i] = 0x40
		i++
		if m.IsCertified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShopType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopType))
	}
	if m.CanUseSuperFastDelivery {
		dAtA[i] = 0x50
		i++
		if m.CanUseSuperFastDelivery {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WareHouse != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WareHouse.Size()))
		n14, err := m.WareHouse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.MerchantServices) > 0 {
		for _, msg := range m.MerchantServices {
			dAtA[i] = 0x62
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SupportConfig != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.SupportConfig.Size()))
		n15, err := m.SupportConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.IsShopTvc {
		dAtA[i] = 0x70
		i++
		if m.IsShopTvc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ListIdRegionSupport) > 0 {
		for _, s := range m.ListIdRegionSupport {
			dAtA[i] = 0x7a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ListRegionSupport) > 0 {
		for _, s := range m.ListRegionSupport {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MerchantSupportConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerchantSupportConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UseCod {
		dAtA[i] = 0x8
		i++
		if m.UseCod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UseSenpay {
		dAtA[i] = 0x10
		i++
		if m.UseSenpay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasDiscount {
		dAtA[i] = 0x18
		i++
		if m.HasDiscount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DiscountValue != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DiscountValue))))
		i += 4
	}
	if m.OrderAmount != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OrderAmount))))
		i += 4
	}
	if len(m.SenpayDiscount) > 0 {
		for _, msg := range m.SenpayDiscount {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AppDiscount) > 0 {
		for _, msg := range m.AppDiscount {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiscountConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscountConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderAmount != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OrderAmount))))
		i += 4
	}
	if m.DiscountPercent != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DiscountPercent))
	}
	if m.Position != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Position))
	}
	if m.IsActive {
		dAtA[i] = 0x20
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MerchantService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerchantService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ServiceCode)))
		i += copy(dAtA[i:], m.ServiceCode)
	}
	if m.IsActive != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.IsActive))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoyaltyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoyaltyConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StoreId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.StoreId))
	}
	if m.IsActive {
		dAtA[i] = 0x10
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Percent != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Percent))
	}
	if m.UpdateTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopWareHouse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopWareHouse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CityId))
	}
	if len(m.CityName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CityName)))
		i += copy(dAtA[i:], m.CityName)
	}
	if m.DistrictId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DistrictId))
	}
	if len(m.DistrictName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.DistrictName)))
		i += copy(dAtA[i:], m.DistrictName)
	}
	if m.WardId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WardId))
	}
	if len(m.WardName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.WardName)))
		i += copy(dAtA[i:], m.WardName)
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i += 4
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i += 4
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductCheckout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductCheckout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Products) > 0 {
		for _, msg := range m.Products {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalPrice != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalPrice))))
		i += 4
	}
	if m.TotalSubsidyAmount != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalSubsidyAmount))))
		i += 4
	}
	if len(m.ProductHashes) > 0 {
		for _, s := range m.ProductHashes {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CustomerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Customer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Customer.Size()))
		n16, err := m.Customer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.CustomerAddress) > 0 {
		for _, msg := range m.CustomerAddress {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BadBuyerInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.BadBuyerInfo.Size()))
		n17, err := m.BadBuyerInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.CurrentAddressId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CurrentAddressId))
	}
	if m.ClientInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ClientInfo.Size()))
		n18, err := m.ClientInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.DeviceId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.DeviceId)))
		i += copy(dAtA[i:], m.DeviceId)
	}
	if m.TrackingOrderSource != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.TrackingOrderSource))
	}
	if len(m.BrowserId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.BrowserId)))
		i += copy(dAtA[i:], m.BrowserId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Customer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Customer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CustomerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CustomerId))
	}
	if m.FptId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.FptId))
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.DefaultShipping != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DefaultShipping))
	}
	if m.IsOtpPhone {
		dAtA[i] = 0x48
		i++
		if m.IsOtpPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsVerifyCheckout {
		dAtA[i] = 0x50
		i++
		if m.IsVerifyCheckout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsFirstOrder {
		dAtA[i] = 0x58
		i++
		if m.IsFirstOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RegisteredBy) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.RegisteredBy)))
		i += copy(dAtA[i:], m.RegisteredBy)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BadBuyerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadBuyerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopBlock {
		dAtA[i] = 0x8
		i++
		if m.ShopBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BlockCod {
		dAtA[i] = 0x10
		i++
		if m.BlockCod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OtpCod {
		dAtA[i] = 0x18
		i++
		if m.OtpCod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ProductId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Categories) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Categories)))
		i += copy(dAtA[i:], m.Categories)
	}
	if m.BrandId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.BrandId))
	}
	if len(m.SourceUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SourceUrl)))
		i += copy(dAtA[i:], m.SourceUrl)
	}
	if len(m.SourcePageId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SourcePageId)))
		i += copy(dAtA[i:], m.SourcePageId)
	}
	if len(m.SourceBlockId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SourceBlockId)))
		i += copy(dAtA[i:], m.SourceBlockId)
	}
	if len(m.SourceInfo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SourceInfo)))
		i += copy(dAtA[i:], m.SourceInfo)
	}
	if m.Price != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i += 4
	}
	if m.FinalPrice != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FinalPrice))))
		i += 4
	}
	if m.Weight != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Weight))
	}
	if m.LengthProduct != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.LengthProduct))
	}
	if m.WitdhProduct != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WitdhProduct))
	}
	if m.HeightProduct != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.HeightProduct))
	}
	if m.Qty != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Qty))
	}
	if len(m.OptionData) > 0 {
		for _, msg := range m.OptionData {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.ImageResize != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ImageResize.Size()))
		n19, err := m.ImageResize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Promotion != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Promotion.Size()))
		n20, err := m.Promotion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.OriginFinalPrice != 0 {
		dAtA[i] = 0xad
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginFinalPrice))))
		i += 4
	}
	if len(m.Sku) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Sku)))
		i += copy(dAtA[i:], m.Sku)
	}
	if len(m.SkuUser) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SkuUser)))
		i += copy(dAtA[i:], m.SkuUser)
	}
	if len(m.AttributeHash) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.AttributeHash)))
		i += copy(dAtA[i:], m.AttributeHash)
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CategoryId))
	}
	if m.CheckoutWeight != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CheckoutWeight))
	}
	if len(m.CatPath) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CatPath)))
		i += copy(dAtA[i:], m.CatPath)
	}
	if m.ExtendedShippingPackage != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ExtendedShippingPackage.Size()))
		n21, err := m.ExtendedShippingPackage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.UnitId != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.UnitId))
	}
	if m.IsValid {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.StatusLabel) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.StatusLabel)))
		i += copy(dAtA[i:], m.StatusLabel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ImageResize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageResize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Image_50X50) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Image_50X50)))
		i += copy(dAtA[i:], m.Image_50X50)
	}
	if len(m.Image_100X100) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Image_100X100)))
		i += copy(dAtA[i:], m.Image_100X100)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExtendedShippingPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedShippingPackage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsUsingInstant {
		dAtA[i] = 0x8
		i++
		if m.IsUsingInstant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsUsingInDay {
		dAtA[i] = 0x10
		i++
		if m.IsUsingInDay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsSelfShipping {
		dAtA[i] = 0x18
		i++
		if m.IsSelfShipping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.OptionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.OptionId))
	}
	if len(m.ProductOptionId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ProductOptionId)))
		i += copy(dAtA[i:], m.ProductOptionId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.AttributeId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.AttributeId))
	}
	if len(m.ProductOption) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ProductOption)))
		i += copy(dAtA[i:], m.ProductOption)
	}
	if len(m.AttributeCode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.AttributeCode)))
		i += copy(dAtA[i:], m.AttributeCode)
	}
	if len(m.ColorHexRgb) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ColorHexRgb)))
		i += copy(dAtA[i:], m.ColorHexRgb)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.ColorId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ColorId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaymentTransferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentTransferInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ListBanks) > 0 {
		for _, msg := range m.ListBanks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PaymentTransferId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentTransferId)))
		i += copy(dAtA[i:], m.PaymentTransferId)
	}
	if len(m.ConfirmationExchange) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ConfirmationExchange)))
		i += copy(dAtA[i:], m.ConfirmationExchange)
	}
	if len(m.ConfirmationTime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ConfirmationTime)))
		i += copy(dAtA[i:], m.ConfirmationTime)
	}
	if len(m.ConfirmationSmsFee) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ConfirmationSmsFee)))
		i += copy(dAtA[i:], m.ConfirmationSmsFee)
	}
	if len(m.ConfirmationUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ConfirmationUrl)))
		i += copy(dAtA[i:], m.ConfirmationUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaymentWalletInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentWalletInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PaymentWalletId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentWalletId)))
		i += copy(dAtA[i:], m.PaymentWalletId)
	}
	if m.WalletConfirmType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WalletConfirmType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BankTransferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankTransferInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Logo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Logo)))
		i += copy(dAtA[i:], m.Logo)
	}
	if len(m.AccountName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.AccountName)))
		i += copy(dAtA[i:], m.AccountName)
	}
	if len(m.AccountNumber) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.AccountNumber)))
		i += copy(dAtA[i:], m.AccountNumber)
	}
	if len(m.BranchName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.BranchName)))
		i += copy(dAtA[i:], m.BranchName)
	}
	if len(m.BranchLocation) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.BranchLocation)))
		i += copy(dAtA[i:], m.BranchLocation)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CustomerAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CustomerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CustomerId))
	}
	if m.FptId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.FptId))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CreatedAt))
	}
	if m.AddressId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.AddressId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if m.CityId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CityId))
	}
	if len(m.District) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.District)))
		i += copy(dAtA[i:], m.District)
	}
	if m.DistrictId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DistrictId))
	}
	if len(m.Ward) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Ward)))
		i += copy(dAtA[i:], m.Ward)
	}
	if m.WardId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WardId))
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if len(m.Street) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Street)))
		i += copy(dAtA[i:], m.Street)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x8d
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i += 4
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x95
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i += 4
	}
	if len(m.FullAddress) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.FullAddress)))
		i += copy(dAtA[i:], m.FullAddress)
	}
	if m.IsDefaultShipping {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsDefaultShipping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsNew {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.CityId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DistrictId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *City) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *City) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CityId))
	}
	if len(m.CityName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CityName)))
		i += copy(dAtA[i:], m.CityName)
	}
	if len(m.Districts) > 0 {
		for _, msg := range m.Districts {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *District) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *District) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DistrictId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DistrictId))
	}
	if len(m.DistrictName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.DistrictName)))
		i += copy(dAtA[i:], m.DistrictName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WardId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WardId))
	}
	if len(m.WardName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.WardName)))
		i += copy(dAtA[i:], m.WardName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.InvalidFields) > 0 {
		for _, msg := range m.InvalidFields {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ErrorActions) > 0 {
		for _, msg := range m.ErrorActions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ProductId))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ErrorAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InvalidField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidField) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvalidCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.InvalidCode))
	}
	if len(m.Field) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if len(m.InvalidMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.InvalidMessage)))
		i += copy(dAtA[i:], m.InvalidMessage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckoutLoadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckoutLoadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopId))
	}
	if len(m.ItemHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ItemHash)))
		i += copy(dAtA[i:], m.ItemHash)
	}
	if m.CurrentAddressId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CurrentAddressId))
	}
	if len(m.CurrentCarrier) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CurrentCarrier)))
		i += copy(dAtA[i:], m.CurrentCarrier)
	}
	if m.CurrentPaymentMethod != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CurrentPaymentMethod.Size()))
		n22, err := m.CurrentPaymentMethod.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.CurrentVoucher != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CurrentVoucher.Size()))
		n23, err := m.CurrentVoucher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.CurrentLoyalty != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CurrentLoyalty.Size()))
		n24, err := m.CurrentLoyalty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if len(m.SendoPlatform) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SendoPlatform)))
		i += copy(dAtA[i:], m.SendoPlatform)
	}
	if len(m.CurrentProducts) > 0 {
		for _, msg := range m.CurrentProducts {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeviceId) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.DeviceId)))
		i += copy(dAtA[i:], m.DeviceId)
	}
	if len(m.OtpCode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.OtpCode)))
		i += copy(dAtA[i:], m.OtpCode)
	}
	if len(m.SenpayToken) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SenpayToken)))
		i += copy(dAtA[i:], m.SenpayToken)
	}
	if len(m.SenpayRefreshToken) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SenpayRefreshToken)))
		i += copy(dAtA[i:], m.SenpayRefreshToken)
	}
	if len(m.CustomerNote) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CustomerNote)))
		i += copy(dAtA[i:], m.CustomerNote)
	}
	if m.EnableTracking {
		dAtA[i] = 0x78
		i++
		if m.EnableTracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IgnoreInvalidProduct != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.IgnoreInvalidProduct))
	}
	if len(m.ProductHashes) > 0 {
		for _, s := range m.ProductHashes {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Version != 0 {
		dAtA[i] = 0x95
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Version))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckoutLoadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckoutLoadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Data.Size()))
		n25, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if len(m.Errors) > 0 {
		for _, msg := range m.Errors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsError {
		dAtA[i] = 0x18
		i++
		if m.IsError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCustomerAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCustomerAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n26, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCustomerVoucherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerVoucherRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCustomerVoucherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerVoucherResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sendo) > 0 {
		for _, msg := range m.Sendo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Shop) > 0 {
		for _, msg := range m.Shop {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddCustomerAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCustomerAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DistrictId))
	}
	if m.WardId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WardId))
	}
	if len(m.Street) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Street)))
		i += copy(dAtA[i:], m.Street)
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i += 4
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i += 4
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.MiddleName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.MiddleName)))
		i += copy(dAtA[i:], m.MiddleName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Fax) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Fax)))
		i += copy(dAtA[i:], m.Fax)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.SetToDefault {
		dAtA[i] = 0x68
		i++
		if m.SetToDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddCustomerAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCustomerAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n27, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepushAffiliateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepushAffiliateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.FromDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.FromDate))
	}
	if m.ToDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ToDate))
	}
	if len(m.Provider) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Provider)))
		i += copy(dAtA[i:], m.Provider)
	}
	if m.IsLog {
		dAtA[i] = 0x28
		i++
		if m.IsLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Limit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepushAffiliateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepushAffiliateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SuccessTransactionIds) > 0 {
		for _, s := range m.SuccessTransactionIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FailTransactionIds) > 0 {
		for _, s := range m.FailTransactionIds {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Pushed != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Pushed))
	}
	if m.Success != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Success))
	}
	if m.Fail != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Fail))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateCustomerAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCustomerAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddressId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.AddressId))
	}
	if m.CityId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DistrictId))
	}
	if m.WardId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WardId))
	}
	if len(m.Street) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Street)))
		i += copy(dAtA[i:], m.Street)
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i += 4
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i += 4
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.MiddleName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.MiddleName)))
		i += copy(dAtA[i:], m.MiddleName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Fax) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Fax)))
		i += copy(dAtA[i:], m.Fax)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.UpdateToDefault {
		dAtA[i] = 0x70
		i++
		if m.UpdateToDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateCustomerAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCustomerAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n28, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCustomerAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCustomerAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddressId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCustomerAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCustomerAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n29, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRegionsListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegionsListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRegionsListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegionsListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n30, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetWardsListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWardsListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DistrictId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.DistrictId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetWardsListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWardsListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n31, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetShippingCarriersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShippingCarriersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopId))
	}
	if m.AddressId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetShippingCarriersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShippingCarriersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOrderInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderIncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.OrderIncrementId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOrderInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.IncrementId))
	}
	if len(m.CustomerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.CustomerName)))
		i += copy(dAtA[i:], m.CustomerName)
	}
	if len(m.ShopName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ShopName)))
		i += copy(dAtA[i:], m.ShopName)
	}
	if m.GrandTotal != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GrandTotal))))
		i += 4
	}
	if len(m.OrderCurrencyCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.OrderCurrencyCode)))
		i += copy(dAtA[i:], m.OrderCurrencyCode)
	}
	if m.PaymentStatus != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.PaymentStatus))
	}
	if len(m.PaymentStatusLabel) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentStatusLabel)))
		i += copy(dAtA[i:], m.PaymentStatusLabel)
	}
	if len(m.PaymentMethod) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentMethod)))
		i += copy(dAtA[i:], m.PaymentMethod)
	}
	if len(m.PaymentMethodLabel) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentMethodLabel)))
		i += copy(dAtA[i:], m.PaymentMethodLabel)
	}
	if len(m.PaymentType) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentType)))
		i += copy(dAtA[i:], m.PaymentType)
	}
	if m.PaymentTransferInfo != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.PaymentTransferInfo.Size()))
		n32, err := m.PaymentTransferInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.PaymentWalletInfo != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.PaymentWalletInfo.Size()))
		n33, err := m.PaymentWalletInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			dAtA[i] = 0x72
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AppActions) > 0 {
		for _, msg := range m.AppActions {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Viewed {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.Viewed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TrackingData != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.TrackingData.Size()))
		n34, err := m.TrackingData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.Error != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n35, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if len(m.DeliveryDurationNote) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.DeliveryDurationNote)))
		i += copy(dAtA[i:], m.DeliveryDurationNote)
	}
	if m.CustomerData != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.CustomerData.Size()))
		n36, err := m.CustomerData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateOrderViewedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrderViewedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderIncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.OrderIncrementId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateOrderViewedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrderViewedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActionAfterSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionAfterSuccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Type))
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSenpayTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSenpayTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSenpayTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSenpayTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.ExpireIn != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ExpireIn))
	}
	if m.Error != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n37, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SenpayOtpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SenpayOtpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderIncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.OrderIncrementId))
	}
	if len(m.PaymentWalletId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentWalletId)))
		i += copy(dAtA[i:], m.PaymentWalletId)
	}
	if m.WalletConfirmType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.WalletConfirmType))
	}
	if len(m.VerifyCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.VerifyCode)))
		i += copy(dAtA[i:], m.VerifyCode)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SenpayOtpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SenpayOtpResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderIncrementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.OrderIncrementId))
	}
	if m.PaymentStatus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.PaymentStatus))
	}
	if len(m.PaymentStatusLabel) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.PaymentStatusLabel)))
		i += copy(dAtA[i:], m.PaymentStatusLabel)
	}
	if m.Error != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Error.Size()))
		n38, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CodOtpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodOtpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantExternalId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.MerchantExternalId))
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CodOtpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodOtpResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingTransaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.TransactionId)))
		i += copy(dAtA[i:], m.TransactionId)
	}
	if len(m.Affiliation) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Affiliation)))
		i += copy(dAtA[i:], m.Affiliation)
	}
	if len(m.Total) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Total)))
		i += copy(dAtA[i:], m.Total)
	}
	if len(m.Tax) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Tax)))
		i += copy(dAtA[i:], m.Tax)
	}
	if len(m.Shipping) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Shipping)))
		i += copy(dAtA[i:], m.Shipping)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Province) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Province)))
		i += copy(dAtA[i:], m.Province)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.TransactionId)))
		i += copy(dAtA[i:], m.TransactionId)
	}
	if len(m.Sku) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Sku)))
		i += copy(dAtA[i:], m.Sku)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Price) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Price)))
		i += copy(dAtA[i:], m.Price)
	}
	if len(m.Quantity) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Quantity)))
		i += copy(dAtA[i:], m.Quantity)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingCustomer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingCustomer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Index)))
		i += copy(dAtA[i:], m.Index)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.OptScope) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.OptScope)))
		i += copy(dAtA[i:], m.OptScope)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingActionFeild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingActionFeild) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Affiliation) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Affiliation)))
		i += copy(dAtA[i:], m.Affiliation)
	}
	if len(m.Revenue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Revenue)))
		i += copy(dAtA[i:], m.Revenue)
	}
	if len(m.Tax) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Tax)))
		i += copy(dAtA[i:], m.Tax)
	}
	if len(m.Shipping) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Shipping)))
		i += copy(dAtA[i:], m.Shipping)
	}
	if len(m.Coupon) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Coupon)))
		i += copy(dAtA[i:], m.Coupon)
	}
	if len(m.Option) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Option)))
		i += copy(dAtA[i:], m.Option)
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.LotusPointsUsed) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.LotusPointsUsed)))
		i += copy(dAtA[i:], m.LotusPointsUsed)
	}
	if m.ShipTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShipTime))
	}
	if len(m.ShipTo) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.ShipTo)))
		i += copy(dAtA[i:], m.ShipTo)
	}
	if len(m.Express) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Express)))
		i += copy(dAtA[i:], m.Express)
	}
	if m.Step != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Step))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingShopReputation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingShopReputation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Point) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Point)))
		i += copy(dAtA[i:], m.Point)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingCategory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Id))
	}
	if len(m.Slug) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingGoogleTagParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingGoogleTagParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EcommPagetype) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.EcommPagetype)))
		i += copy(dAtA[i:], m.EcommPagetype)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingProduct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Price != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Price))
	}
	if len(m.Brand) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Brand)))
		i += copy(dAtA[i:], m.Brand)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Variant) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Variant)))
		i += copy(dAtA[i:], m.Variant)
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Quantity))
	}
	if len(m.Coupon) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Coupon)))
		i += copy(dAtA[i:], m.Coupon)
	}
	if m.ShopId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopId))
	}
	if m.ShopExtId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopExtId))
	}
	if m.ShopReputation != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ShopReputation.Size()))
		n39, err := m.ShopReputation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if len(m.SourceBlockId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SourceBlockId)))
		i += copy(dAtA[i:], m.SourceBlockId)
	}
	if len(m.SourcePageId) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SourcePageId)))
		i += copy(dAtA[i:], m.SourcePageId)
	}
	if len(m.SourceUrl) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SourceUrl)))
		i += copy(dAtA[i:], m.SourceUrl)
	}
	if len(m.SourceInfo) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SourceInfo)))
		i += copy(dAtA[i:], m.SourceInfo)
	}
	if len(m.Categories) > 0 {
		for _, msg := range m.Categories {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FinalPrice != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.FinalPrice))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingPurchase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingPurchase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActionField != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ActionField.Size()))
		n40, err := m.ActionField.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if len(m.Products) > 0 {
		for _, msg := range m.Products {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingCheckout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingCheckout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActionField != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ActionField.Size()))
		n41, err := m.ActionField.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if len(m.Products) > 0 {
		for _, msg := range m.Products {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingEcommerce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingEcommerce) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Purchase != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Purchase.Size()))
		n42, err := m.Purchase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.Checkout != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Checkout.Size()))
		n43, err := m.Checkout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingEcommerceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingEcommerceData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ecommerce != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Ecommerce.Size()))
		n44, err := m.Ecommerce.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.SendoPlatform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.SendoPlatform)))
		i += copy(dAtA[i:], m.SendoPlatform)
	}
	if m.GoogleTagParams != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.GoogleTagParams.Size()))
		n45, err := m.GoogleTagParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if len(m.Pageurl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Pageurl)))
		i += copy(dAtA[i:], m.Pageurl)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.LoginType) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.LoginType)))
		i += copy(dAtA[i:], m.LoginType)
	}
	if len(m.IsFirstOrder) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.IsFirstOrder)))
		i += copy(dAtA[i:], m.IsFirstOrder)
	}
	if m.ClientTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.ClientTime))
	}
	if len(m.IpClient) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.IpClient)))
		i += copy(dAtA[i:], m.IpClient)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrackingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackingData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View {
		dAtA[i] = 0x8
		i++
		if m.View {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NewUser {
		dAtA[i] = 0x10
		i++
		if m.NewUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Transaction != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Transaction.Size()))
		n46, err := m.Transaction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCheckout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Customer != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.Customer.Size()))
		n47, err := m.Customer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.EcommerceData != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(m.EcommerceData.Size()))
		n48, err := m.EcommerceData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepushOPCOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepushOPCOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		dAtA50 := make([]byte, len(m.OrderIds)*10)
		var j49 int
		for _, num1 := range m.OrderIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA50[j49] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j49++
			}
			dAtA50[j49] = uint8(num)
			j49++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(j49))
		i += copy(dAtA[i:], dAtA50[:j49])
	}
	if m.Rebuild {
		dAtA[i] = 0x10
		i++
		if m.Rebuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOldOrder {
		dAtA[i] = 0x18
		i++
		if m.IsOldOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepushOPCOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepushOPCOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsError {
		dAtA[i] = 0x8
		i++
		if m.IsError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.DetailErrors) > 0 {
		for _, s := range m.DetailErrors {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FailedOrderIds) > 0 {
		dAtA52 := make([]byte, len(m.FailedOrderIds)*10)
		var j51 int
		for _, num1 := range m.FailedOrderIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA52[j51] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j51++
			}
			dAtA52[j51] = uint8(num)
			j51++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckout(dAtA, i, uint64(j51))
		i += copy(dAtA[i:], dAtA52[:j51])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCheckout(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SaveOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsError {
		n += 2
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.IncrementId != 0 {
		n += 1 + sovCheckout(uint64(m.IncrementId))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.PaymentFailed {
		n += 2
	}
	l = len(m.PaymentFailedReason)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.PaymentId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.PaymentConfirmType != 0 {
		n += 1 + sovCheckout(uint64(m.PaymentConfirmType))
	}
	l = len(m.PaymentUrl)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.DisableSaveOrder {
		n += 2
	}
	l = len(m.VerifyUrl)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.CurrentProducts) > 0 {
		for _, e := range m.CurrentProducts {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.IgnoreInvalidProduct != 0 {
		n += 1 + sovCheckout(uint64(m.IgnoreInvalidProduct))
	}
	if len(m.ProductHashes) > 0 {
		for _, s := range m.ProductHashes {
			l = len(s)
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckoutData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomerData != nil {
		l = m.CustomerData.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ProductsCheckout != nil {
		l = m.ProductsCheckout.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ShopInfo != nil {
		l = m.ShopInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ShippingInfo != nil {
		l = m.ShippingInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.PaymentInfo != nil {
		l = m.PaymentInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.VoucherInfo != nil {
		l = m.VoucherInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.LoyaltyInfo != nil {
		l = m.LoyaltyInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.TotalInfo != nil {
		l = m.TotalInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.CustomerNote)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.DisableSaveOrder {
		n += 2
	}
	if m.EcommerceTracking != nil {
		l = m.EcommerceTracking.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.IgnoreInvalidProduct != 0 {
		n += 1 + sovCheckout(uint64(m.IgnoreInvalidProduct))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TotalOrderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubTotal != 0 {
		n += 5
	}
	if m.VoucherAmount != 0 {
		n += 5
	}
	if m.LoyaltyAmount != 0 {
		n += 5
	}
	if m.DeliveryFee != 0 {
		n += 5
	}
	if m.CodFee != 0 {
		n += 5
	}
	if m.SendoDiscountFee != 0 {
		n += 5
	}
	if m.ShopDiscountFee != 0 {
		n += 5
	}
	if m.SendoDiscountPrice != 0 {
		n += 5
	}
	if m.ShopDiscountMobile != 0 {
		n += 5
	}
	if m.ShopDiscountOnlinePayment != 0 {
		n += 5
	}
	if m.GrandTotal != 0 {
		n += 5
	}
	if m.TotalSubsidyAmount != 0 {
		n += 5
	}
	if len(m.TotalDetail) > 0 {
		for _, e := range m.TotalDetail {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TotalDetailItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovCheckout(uint64(m.Index))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Value != 0 {
		n += 5
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Sign != 0 {
		n += 1 + sovCheckout(uint64(m.Sign))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoyaltyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 5
	}
	if m.UseScore != 0 {
		n += 5
	}
	if m.BonusScore != 0 {
		n += 5
	}
	l = len(m.SuggestedMsg)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SuggestScore)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SuggestMessage)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.DisableLoyalty {
		n += 2
	}
	l = len(m.SuggestedUseScoreMsg)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableSuggestVoucher {
		n += 2
	}
	l = len(m.VoucherCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.VoucherValue != 0 {
		n += 5
	}
	if m.IsShopVoucher {
		n += 2
	}
	l = len(m.VoucherCampaignCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.SubTotal != 0 {
		n += 5
	}
	l = len(m.PaymentMethod)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.TrackingOrderSource != 0 {
		n += 1 + sovCheckout(uint64(m.TrackingOrderSource))
	}
	if m.RedeemedAt != 0 {
		n += 1 + sovCheckout(uint64(m.RedeemedAt))
	}
	if m.IsEnableCaptcha {
		n += 2
	}
	l = len(m.CaptchaResponse)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SuggestedMessage)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ListPayment) > 0 {
		for _, e := range m.ListPayment {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.CurrentPaymentData != nil {
		l = m.CurrentPaymentData.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovCheckout(uint64(m.ProductId))
	}
	if m.FinalPrice != 0 {
		n += 5
	}
	if m.Promotion != nil {
		l = m.Promotion.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CurrentPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovCheckout(uint64(m.ShopId))
	}
	if m.CurrentPaymentData != nil {
		l = m.CurrentPaymentData.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CurrentPaymentData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Card != 0 {
		n += 1 + sovCheckout(uint64(m.Card))
	}
	if m.CardId != 0 {
		n += 1 + sovCheckout(uint64(m.CardId))
	}
	l = len(m.CardCvc)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.InstallmentPeriod != 0 {
		n += 1 + sovCheckout(uint64(m.InstallmentPeriod))
	}
	l = len(m.BankName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.BankId != 0 {
		n += 1 + sovCheckout(uint64(m.BankId))
	}
	if len(m.Bins) > 0 {
		for _, s := range m.Bins {
			l = len(s)
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PaymentName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.PaymentCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.IsDisable {
		n += 2
	}
	l = len(m.ReasonDisable)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.PaymentText)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.InstallmentPlans) > 0 {
		for _, e := range m.InstallmentPlans {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.BankList) > 0 {
		for _, e := range m.BankList {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BanksConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BankId != 0 {
		n += 1 + sovCheckout(uint64(m.BankId))
	}
	l = len(m.BankFullname)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.BankName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovCheckout(uint64(m.Sort))
	}
	if len(m.BankInstallmentTerms) > 0 {
		for _, e := range m.BankInstallmentTerms {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankInstallmentTerms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovCheckout(uint64(m.Period))
	}
	if m.InstallmentPlan != 0 {
		n += 1 + sovCheckout(uint64(m.InstallmentPlan))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallmentPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstallmentPeriod != 0 {
		n += 1 + sovCheckout(uint64(m.InstallmentPeriod))
	}
	if m.PeriodicPayment != 0 {
		n += 1 + sovCheckout(uint64(m.PeriodicPayment))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShippingCarrierShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ListCarrier) > 0 {
		for _, e := range m.ListCarrier {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	l = len(m.CurrentCarrier)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ChangeCurrent != 0 {
		n += 1 + sovCheckout(uint64(m.ChangeCurrent))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.FreeShippingMessage)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShippingCarrier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CarrierId != 0 {
		n += 1 + sovCheckout(uint64(m.CarrierId))
	}
	l = len(m.CarrierCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.CarrierName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.CarrierLogo)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.IsCurrentCarrier {
		n += 2
	}
	if m.OriginalFee != 0 {
		n += 5
	}
	if m.DeliveryFee != 0 {
		n += 5
	}
	if m.SubFee != 0 {
		n += 5
	}
	if m.CodFee != 0 {
		n += 5
	}
	if m.DeliveryFeeDiscount != 0 {
		n += 5
	}
	if m.CodFeeDiscount != 0 {
		n += 5
	}
	if m.SendoDiscountFee != 0 {
		n += 5
	}
	if m.ShopDiscountFee != 0 {
		n += 5
	}
	if m.EventDiscountId != 0 {
		n += 1 + sovCheckout(uint64(m.EventDiscountId))
	}
	if m.DeliveryDuration != 0 {
		n += 2 + sovCheckout(uint64(m.DeliveryDuration))
	}
	l = len(m.DeliveryDurationNote)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if len(m.ProductInfo) > 0 {
		for _, e := range m.ProductInfo {
			l = e.Size()
			n += 2 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.CarrierNote) > 0 {
		for _, s := range m.CarrierNote {
			l = len(s)
			n += 2 + l + sovCheckout(uint64(l))
		}
	}
	if m.UseMap {
		n += 3
	}
	l = len(m.Error)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	l = len(m.OpcUrl)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if len(m.NotSupportedPaymentMethods) > 0 {
		for _, s := range m.NotSupportedPaymentMethods {
			l = len(s)
			n += 2 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductShippingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovCheckout(uint64(m.ProductId))
	}
	if m.Weight != 0 {
		n += 1 + sovCheckout(uint64(m.Weight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovCheckout(uint64(m.ShopId))
	}
	if m.ExternalId != 0 {
		n += 1 + sovCheckout(uint64(m.ExternalId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.LoyaltyConfig != nil {
		l = m.LoyaltyConfig.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.IsCertified {
		n += 2
	}
	if m.ShopType != 0 {
		n += 1 + sovCheckout(uint64(m.ShopType))
	}
	if m.CanUseSuperFastDelivery {
		n += 2
	}
	if m.WareHouse != nil {
		l = m.WareHouse.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.MerchantServices) > 0 {
		for _, e := range m.MerchantServices {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.SupportConfig != nil {
		l = m.SupportConfig.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.IsShopTvc {
		n += 2
	}
	if len(m.ListIdRegionSupport) > 0 {
		for _, s := range m.ListIdRegionSupport {
			l = len(s)
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.ListRegionSupport) > 0 {
		for _, s := range m.ListRegionSupport {
			l = len(s)
			n += 2 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MerchantSupportConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseCod {
		n += 2
	}
	if m.UseSenpay {
		n += 2
	}
	if m.HasDiscount {
		n += 2
	}
	if m.DiscountValue != 0 {
		n += 5
	}
	if m.OrderAmount != 0 {
		n += 5
	}
	if len(m.SenpayDiscount) > 0 {
		for _, e := range m.SenpayDiscount {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.AppDiscount) > 0 {
		for _, e := range m.AppDiscount {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscountConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderAmount != 0 {
		n += 5
	}
	if m.DiscountPercent != 0 {
		n += 1 + sovCheckout(uint64(m.DiscountPercent))
	}
	if m.Position != 0 {
		n += 1 + sovCheckout(uint64(m.Position))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MerchantService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.IsActive != 0 {
		n += 1 + sovCheckout(uint64(m.IsActive))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoyaltyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoreId != 0 {
		n += 1 + sovCheckout(uint64(m.StoreId))
	}
	if m.IsActive {
		n += 2
	}
	if m.Percent != 0 {
		n += 1 + sovCheckout(uint64(m.Percent))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovCheckout(uint64(m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopWareHouse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CityId != 0 {
		n += 1 + sovCheckout(uint64(m.CityId))
	}
	l = len(m.CityName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.DistrictId != 0 {
		n += 1 + sovCheckout(uint64(m.DistrictId))
	}
	l = len(m.DistrictName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.WardId != 0 {
		n += 1 + sovCheckout(uint64(m.WardId))
	}
	l = len(m.WardName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductCheckout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.TotalPrice != 0 {
		n += 5
	}
	if m.TotalSubsidyAmount != 0 {
		n += 5
	}
	if len(m.ProductHashes) > 0 {
		for _, s := range m.ProductHashes {
			l = len(s)
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Customer != nil {
		l = m.Customer.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.CustomerAddress) > 0 {
		for _, e := range m.CustomerAddress {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.BadBuyerInfo != nil {
		l = m.BadBuyerInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.CurrentAddressId != 0 {
		n += 1 + sovCheckout(uint64(m.CurrentAddressId))
	}
	if m.ClientInfo != nil {
		l = m.ClientInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.TrackingOrderSource != 0 {
		n += 1 + sovCheckout(uint64(m.TrackingOrderSource))
	}
	l = len(m.BrowserId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Customer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomerId != 0 {
		n += 1 + sovCheckout(uint64(m.CustomerId))
	}
	if m.FptId != 0 {
		n += 1 + sovCheckout(uint64(m.FptId))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.DefaultShipping != 0 {
		n += 1 + sovCheckout(uint64(m.DefaultShipping))
	}
	if m.IsOtpPhone {
		n += 2
	}
	if m.IsVerifyCheckout {
		n += 2
	}
	if m.IsFirstOrder {
		n += 2
	}
	l = len(m.RegisteredBy)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BadBuyerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopBlock {
		n += 2
	}
	if m.BlockCod {
		n += 2
	}
	if m.OtpCod {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovCheckout(uint64(m.ProductId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Categories)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.BrandId != 0 {
		n += 1 + sovCheckout(uint64(m.BrandId))
	}
	l = len(m.SourceUrl)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SourcePageId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SourceBlockId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SourceInfo)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.FinalPrice != 0 {
		n += 5
	}
	if m.Weight != 0 {
		n += 1 + sovCheckout(uint64(m.Weight))
	}
	if m.LengthProduct != 0 {
		n += 1 + sovCheckout(uint64(m.LengthProduct))
	}
	if m.WitdhProduct != 0 {
		n += 1 + sovCheckout(uint64(m.WitdhProduct))
	}
	if m.HeightProduct != 0 {
		n += 1 + sovCheckout(uint64(m.HeightProduct))
	}
	if m.Qty != 0 {
		n += 1 + sovCheckout(uint64(m.Qty))
	}
	if len(m.OptionData) > 0 {
		for _, e := range m.OptionData {
			l = e.Size()
			n += 2 + l + sovCheckout(uint64(l))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.ImageResize != nil {
		l = m.ImageResize.Size()
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.Promotion != nil {
		l = m.Promotion.Size()
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.OriginFinalPrice != 0 {
		n += 6
	}
	l = len(m.Sku)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	l = len(m.SkuUser)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	l = len(m.AttributeHash)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.CategoryId != 0 {
		n += 2 + sovCheckout(uint64(m.CategoryId))
	}
	if m.CheckoutWeight != 0 {
		n += 2 + sovCheckout(uint64(m.CheckoutWeight))
	}
	l = len(m.CatPath)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.ExtendedShippingPackage != nil {
		l = m.ExtendedShippingPackage.Size()
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.UnitId != 0 {
		n += 2 + sovCheckout(uint64(m.UnitId))
	}
	if m.IsValid {
		n += 3
	}
	l = len(m.StatusLabel)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageResize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Image_50X50)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Image_100X100)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtendedShippingPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsUsingInstant {
		n += 2
	}
	if m.IsUsingInDay {
		n += 2
	}
	if m.IsSelfShipping {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.OptionId != 0 {
		n += 1 + sovCheckout(uint64(m.OptionId))
	}
	l = len(m.ProductOptionId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.AttributeId != 0 {
		n += 1 + sovCheckout(uint64(m.AttributeId))
	}
	l = len(m.ProductOption)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.AttributeCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ColorHexRgb)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ColorId != 0 {
		n += 1 + sovCheckout(uint64(m.ColorId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentTransferInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ListBanks) > 0 {
		for _, e := range m.ListBanks {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	l = len(m.PaymentTransferId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ConfirmationExchange)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ConfirmationTime)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ConfirmationSmsFee)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ConfirmationUrl)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentWalletInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PaymentWalletId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.WalletConfirmType != 0 {
		n += 1 + sovCheckout(uint64(m.WalletConfirmType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankTransferInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.AccountNumber)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.BranchName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.BranchLocation)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomerAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomerId != 0 {
		n += 1 + sovCheckout(uint64(m.CustomerId))
	}
	if m.FptId != 0 {
		n += 1 + sovCheckout(uint64(m.FptId))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovCheckout(uint64(m.CreatedAt))
	}
	if m.AddressId != 0 {
		n += 1 + sovCheckout(uint64(m.AddressId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovCheckout(uint64(m.CityId))
	}
	l = len(m.District)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.DistrictId != 0 {
		n += 1 + sovCheckout(uint64(m.DistrictId))
	}
	l = len(m.Ward)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.WardId != 0 {
		n += 1 + sovCheckout(uint64(m.WardId))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.Latitude != 0 {
		n += 6
	}
	if m.Longitude != 0 {
		n += 6
	}
	l = len(m.FullAddress)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.IsDefaultShipping {
		n += 3
	}
	if m.IsNew {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovCheckout(uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		n += 1 + sovCheckout(uint64(m.DistrictId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *City) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CityId != 0 {
		n += 1 + sovCheckout(uint64(m.CityId))
	}
	l = len(m.CityName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.Districts) > 0 {
		for _, e := range m.Districts {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *District) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistrictId != 0 {
		n += 1 + sovCheckout(uint64(m.DistrictId))
	}
	l = len(m.DistrictName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WardId != 0 {
		n += 1 + sovCheckout(uint64(m.WardId))
	}
	l = len(m.WardName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCheckout(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.InvalidFields) > 0 {
		for _, e := range m.InvalidFields {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.ErrorActions) > 0 {
		for _, e := range m.ErrorActions {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.ProductId != 0 {
		n += 1 + sovCheckout(uint64(m.ProductId))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ErrorAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvalidField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidCode != 0 {
		n += 1 + sovCheckout(uint64(m.InvalidCode))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.InvalidMessage)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckoutLoadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovCheckout(uint64(m.ShopId))
	}
	l = len(m.ItemHash)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.CurrentAddressId != 0 {
		n += 1 + sovCheckout(uint64(m.CurrentAddressId))
	}
	l = len(m.CurrentCarrier)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.CurrentPaymentMethod != nil {
		l = m.CurrentPaymentMethod.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.CurrentVoucher != nil {
		l = m.CurrentVoucher.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.CurrentLoyalty != nil {
		l = m.CurrentLoyalty.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SendoPlatform)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.CurrentProducts) > 0 {
		for _, e := range m.CurrentProducts {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.OtpCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SenpayToken)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SenpayRefreshToken)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.CustomerNote)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.EnableTracking {
		n += 2
	}
	if m.IgnoreInvalidProduct != 0 {
		n += 2 + sovCheckout(uint64(m.IgnoreInvalidProduct))
	}
	if len(m.ProductHashes) > 0 {
		for _, s := range m.ProductHashes {
			l = len(s)
			n += 2 + l + sovCheckout(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 6
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckoutLoadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.IsError {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCustomerAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCustomerAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCustomerVoucherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovCheckout(uint64(m.ShopId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCustomerVoucherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sendo) > 0 {
		for _, e := range m.Sendo {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.Shop) > 0 {
		for _, e := range m.Shop {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddCustomerAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CityId != 0 {
		n += 1 + sovCheckout(uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		n += 1 + sovCheckout(uint64(m.DistrictId))
	}
	if m.WardId != 0 {
		n += 1 + sovCheckout(uint64(m.WardId))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.MiddleName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Fax)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.SetToDefault {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddCustomerAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepushAffiliateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.FromDate != 0 {
		n += 1 + sovCheckout(uint64(m.FromDate))
	}
	if m.ToDate != 0 {
		n += 1 + sovCheckout(uint64(m.ToDate))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.IsLog {
		n += 2
	}
	if m.Limit != 0 {
		n += 1 + sovCheckout(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepushAffiliateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuccessTransactionIds) > 0 {
		for _, s := range m.SuccessTransactionIds {
			l = len(s)
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.FailTransactionIds) > 0 {
		for _, s := range m.FailTransactionIds {
			l = len(s)
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Pushed != 0 {
		n += 1 + sovCheckout(uint64(m.Pushed))
	}
	if m.Success != 0 {
		n += 1 + sovCheckout(uint64(m.Success))
	}
	if m.Fail != 0 {
		n += 1 + sovCheckout(uint64(m.Fail))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCustomerAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressId != 0 {
		n += 1 + sovCheckout(uint64(m.AddressId))
	}
	if m.CityId != 0 {
		n += 1 + sovCheckout(uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		n += 1 + sovCheckout(uint64(m.DistrictId))
	}
	if m.WardId != 0 {
		n += 1 + sovCheckout(uint64(m.WardId))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.MiddleName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Fax)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.UpdateToDefault {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCustomerAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCustomerAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressId != 0 {
		n += 1 + sovCheckout(uint64(m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCustomerAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRegionsListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRegionsListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWardsListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistrictId != 0 {
		n += 1 + sovCheckout(uint64(m.DistrictId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWardsListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShippingCarriersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovCheckout(uint64(m.ShopId))
	}
	if m.AddressId != 0 {
		n += 1 + sovCheckout(uint64(m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShippingCarriersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrderInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderIncrementId != 0 {
		n += 1 + sovCheckout(uint64(m.OrderIncrementId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrderInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncrementId != 0 {
		n += 1 + sovCheckout(uint64(m.IncrementId))
	}
	l = len(m.CustomerName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.ShopName)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.GrandTotal != 0 {
		n += 5
	}
	l = len(m.OrderCurrencyCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.PaymentStatus != 0 {
		n += 1 + sovCheckout(uint64(m.PaymentStatus))
	}
	l = len(m.PaymentStatusLabel)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.PaymentMethod)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.PaymentMethodLabel)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.PaymentTransferInfo != nil {
		l = m.PaymentTransferInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.PaymentWalletInfo != nil {
		l = m.PaymentWalletInfo.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.AppActions) > 0 {
		for _, e := range m.AppActions {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Viewed {
		n += 3
	}
	if m.TrackingData != nil {
		l = m.TrackingData.Size()
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 2 + l + sovCheckout(uint64(l))
	}
	l = len(m.DeliveryDurationNote)
	if l > 0 {
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.CustomerData != nil {
		l = m.CustomerData.Size()
		n += 2 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateOrderViewedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderIncrementId != 0 {
		n += 1 + sovCheckout(uint64(m.OrderIncrementId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateOrderViewedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCheckout(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionAfterSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCheckout(uint64(m.Type))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSenpayTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSenpayTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ExpireIn != 0 {
		n += 1 + sovCheckout(uint64(m.ExpireIn))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SenpayOtpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderIncrementId != 0 {
		n += 1 + sovCheckout(uint64(m.OrderIncrementId))
	}
	l = len(m.PaymentWalletId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.WalletConfirmType != 0 {
		n += 1 + sovCheckout(uint64(m.WalletConfirmType))
	}
	l = len(m.VerifyCode)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SenpayOtpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderIncrementId != 0 {
		n += 1 + sovCheckout(uint64(m.OrderIncrementId))
	}
	if m.PaymentStatus != 0 {
		n += 1 + sovCheckout(uint64(m.PaymentStatus))
	}
	l = len(m.PaymentStatusLabel)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CodOtpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantExternalId != 0 {
		n += 1 + sovCheckout(uint64(m.MerchantExternalId))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CodOtpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCheckout(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovCheckout(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Affiliation)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Tax)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Shipping)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Sku)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Quantity)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingCustomer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.OptScope)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingActionFeild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Affiliation)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Revenue)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Tax)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Shipping)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Coupon)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.LotusPointsUsed)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ShipTime != 0 {
		n += 1 + sovCheckout(uint64(m.ShipTime))
	}
	l = len(m.ShipTo)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Express)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Step != 0 {
		n += 1 + sovCheckout(uint64(m.Step))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingShopReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Point)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCheckout(uint64(m.Id))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingGoogleTagParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EcommPagetype)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovCheckout(uint64(m.Price))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Variant)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovCheckout(uint64(m.Quantity))
	}
	l = len(m.Coupon)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ShopId != 0 {
		n += 1 + sovCheckout(uint64(m.ShopId))
	}
	if m.ShopExtId != 0 {
		n += 1 + sovCheckout(uint64(m.ShopExtId))
	}
	if m.ShopReputation != nil {
		l = m.ShopReputation.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SourceBlockId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SourcePageId)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SourceUrl)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SourceInfo)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.Categories) > 0 {
		for _, e := range m.Categories {
			l = e.Size()
			n += 2 + l + sovCheckout(uint64(l))
		}
	}
	if m.FinalPrice != 0 {
		n += 2 + sovCheckout(uint64(m.FinalPrice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingPurchase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionField != nil {
		l = m.ActionField.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingCheckout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionField != nil {
		l = m.ActionField.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingEcommerce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Purchase != nil {
		l = m.Purchase.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.Checkout != nil {
		l = m.Checkout.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingEcommerceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecommerce != nil {
		l = m.Ecommerce.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.SendoPlatform)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.GoogleTagParams != nil {
		l = m.GoogleTagParams.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Pageurl)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.LoginType)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	l = len(m.IsFirstOrder)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.ClientTime != 0 {
		n += 1 + sovCheckout(uint64(m.ClientTime))
	}
	l = len(m.IpClient)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackingData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View {
		n += 2
	}
	if m.NewUser {
		n += 2
	}
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if m.Customer != nil {
		l = m.Customer.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.EcommerceData != nil {
		l = m.EcommerceData.Size()
		n += 1 + l + sovCheckout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepushOPCOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		l = 0
		for _, e := range m.OrderIds {
			l += sovCheckout(uint64(e))
		}
		n += 1 + sovCheckout(uint64(l)) + l
	}
	if m.Rebuild {
		n += 2
	}
	if m.IsOldOrder {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepushOPCOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsError {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCheckout(uint64(l))
	}
	if len(m.DetailErrors) > 0 {
		for _, s := range m.DetailErrors {
			l = len(s)
			n += 1 + l + sovCheckout(uint64(l))
		}
	}
	if len(m.FailedOrderIds) > 0 {
		l = 0
		for _, e := range m.FailedOrderIds {
			l += sovCheckout(uint64(e))
		}
		n += 1 + sovCheckout(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCheckout(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCheckout(x uint64) (n int) {
	return sovCheckout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SaveOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsError = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &Error{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementId", wireType)
			}
			m.IncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentFailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentFailed = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentFailedReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentFailedReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentConfirmType", wireType)
			}
			m.PaymentConfirmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentConfirmType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSaveOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableSaveOrder = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentProducts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentProducts = append(m.CurrentProducts, &ProductItem{})
			if err := m.CurrentProducts[len(m.CurrentProducts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreInvalidProduct", wireType)
			}
			m.IgnoreInvalidProduct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgnoreInvalidProduct |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductHashes = append(m.ProductHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckoutData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckoutData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckoutData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomerData == nil {
				m.CustomerData = &CustomerData{}
			}
			if err := m.CustomerData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductsCheckout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProductsCheckout == nil {
				m.ProductsCheckout = &ProductCheckout{}
			}
			if err := m.ProductsCheckout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopInfo == nil {
				m.ShopInfo = &ShopInfo{}
			}
			if err := m.ShopInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingInfo == nil {
				m.ShippingInfo = &ShippingCarrierShop{}
			}
			if err := m.ShippingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentInfo == nil {
				m.PaymentInfo = &PaymentInfo{}
			}
			if err := m.PaymentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoucherInfo == nil {
				m.VoucherInfo = &VoucherInfo{}
			}
			if err := m.VoucherInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoyaltyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoyaltyInfo == nil {
				m.LoyaltyInfo = &LoyaltyInfo{}
			}
			if err := m.LoyaltyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalInfo == nil {
				m.TotalInfo = &TotalOrderInfo{}
			}
			if err := m.TotalInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerNote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSaveOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableSaveOrder = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcommerceTracking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcommerceTracking == nil {
				m.EcommerceTracking = &TrackingEcommerceData{}
			}
			if err := m.EcommerceTracking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreInvalidProduct", wireType)
			}
			m.IgnoreInvalidProduct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgnoreInvalidProduct |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalOrderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalOrderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalOrderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTotal", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubTotal = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.VoucherAmount = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoyaltyAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LoyaltyAmount = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DeliveryFee = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CodFee = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoDiscountFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SendoDiscountFee = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopDiscountFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShopDiscountFee = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoDiscountPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SendoDiscountPrice = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopDiscountMobile", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShopDiscountMobile = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopDiscountOnlinePayment", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShopDiscountOnlinePayment = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GrandTotal = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSubsidyAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalSubsidyAmount = float32(math.Float32frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDetail = append(m.TotalDetail, &TotalDetailItem{})
			if err := m.TotalDetail[len(m.TotalDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalDetailItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalDetailItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalDetailItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			m.Sign = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sign |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoyaltyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoyaltyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoyaltyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UseScore = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BonusScore = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableLoyalty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableLoyalty = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedUseScoreMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedUseScoreMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSuggestVoucher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSuggestVoucher = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoucherCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.VoucherValue = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShopVoucher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShopVoucher = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherCampaignCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoucherCampaignCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTotal", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubTotal = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingOrderSource", wireType)
			}
			m.TrackingOrderSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackingOrderSource |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemedAt", wireType)
			}
			m.RedeemedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedeemedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnableCaptcha", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnableCaptcha = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptchaResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListPayment = append(m.ListPayment, &Payment{})
			if err := m.ListPayment[len(m.ListPayment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPaymentData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentPaymentData == nil {
				m.CurrentPaymentData = &CurrentPaymentData{}
			}
			if err := m.CurrentPaymentData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FinalPrice = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promotion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Promotion == nil {
				m.Promotion = &flashdeal.FlashDeal{}
			}
			if err := m.Promotion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPaymentData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentPaymentData == nil {
				m.CurrentPaymentData = &CurrentPaymentData{}
			}
			if err := m.CurrentPaymentData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentPaymentData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentPaymentData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentPaymentData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardCvc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardCvc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentPeriod", wireType)
			}
			m.InstallmentPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstallmentPeriod |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			m.BankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bins = append(m.Bins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDisable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDisable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonDisable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReasonDisable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallmentPlans = append(m.InstallmentPlans, &InstallmentPlan{})
			if err := m.InstallmentPlans[len(m.InstallmentPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankList = append(m.BankList, &BanksConfig{})
			if err := m.BankList[len(m.BankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BanksConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BanksConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BanksConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			m.BankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankFullname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankFullname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankInstallmentTerms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankInstallmentTerms = append(m.BankInstallmentTerms, &BankInstallmentTerms{})
			if err := m.BankInstallmentTerms[len(m.BankInstallmentTerms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankInstallmentTerms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankInstallmentTerms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankInstallmentTerms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentPlan", wireType)
			}
			m.InstallmentPlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstallmentPlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallmentPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallmentPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallmentPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentPeriod", wireType)
			}
			m.InstallmentPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstallmentPeriod |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicPayment", wireType)
			}
			m.PeriodicPayment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodicPayment |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShippingCarrierShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingCarrierShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingCarrierShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListCarrier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListCarrier = append(m.ListCarrier, &ShippingCarrier{})
			if err := m.ListCarrier[len(m.ListCarrier)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCarrier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCarrier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCurrent", wireType)
			}
			m.ChangeCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeCurrent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeShippingMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreeShippingMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShippingCarrier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingCarrier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingCarrier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierId", wireType)
			}
			m.CarrierId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarrierId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarrierCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarrierName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarrierLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCurrentCarrier", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCurrentCarrier = bool(v != 0)
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginalFee = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DeliveryFee = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubFee = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CodFee = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryFeeDiscount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DeliveryFeeDiscount = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodFeeDiscount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CodFeeDiscount = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoDiscountFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SendoDiscountFee = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopDiscountFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShopDiscountFee = float32(math.Float32frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDiscountId", wireType)
			}
			m.EventDiscountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventDiscountId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDuration", wireType)
			}
			m.DeliveryDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliveryDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDurationNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveryDurationNote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductInfo = append(m.ProductInfo, &ProductShippingInfo{})
			if err := m.ProductInfo[len(m.ProductInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarrierNote = append(m.CarrierNote, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMap = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpcUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpcUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotSupportedPaymentMethods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotSupportedPaymentMethods = append(m.NotSupportedPaymentMethods, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductShippingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductShippingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductShippingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			m.ExternalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoyaltyConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoyaltyConfig == nil {
				m.LoyaltyConfig = &LoyaltyConfig{}
			}
			if err := m.LoyaltyConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCertified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCertified = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopType", wireType)
			}
			m.ShopType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUseSuperFastDelivery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanUseSuperFastDelivery = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WareHouse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WareHouse == nil {
				m.WareHouse = &ShopWareHouse{}
			}
			if err := m.WareHouse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerchantServices = append(m.MerchantServices, &MerchantService{})
			if err := m.MerchantServices[len(m.MerchantServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupportConfig == nil {
				m.SupportConfig = &MerchantSupportConfig{}
			}
			if err := m.SupportConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShopTvc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShopTvc = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListIdRegionSupport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListIdRegionSupport = append(m.ListIdRegionSupport, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListRegionSupport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListRegionSupport = append(m.ListRegionSupport, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerchantSupportConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerchantSupportConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerchantSupportConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCod = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseSenpay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseSenpay = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasDiscount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasDiscount = bool(v != 0)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DiscountValue = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OrderAmount = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenpayDiscount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenpayDiscount = append(m.SenpayDiscount, &DiscountConfig{})
			if err := m.SenpayDiscount[len(m.SenpayDiscount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppDiscount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppDiscount = append(m.AppDiscount, &DiscountConfig{})
			if err := m.AppDiscount[len(m.AppDiscount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscountConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscountConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscountConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OrderAmount = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPercent", wireType)
			}
			m.DiscountPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscountPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerchantService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerchantService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerchantService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			m.IsActive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsActive |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoyaltyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoyaltyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoyaltyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			m.StoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			m.Percent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopWareHouse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopWareHouse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopWareHouse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrictName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardId", wireType)
			}
			m.WardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WardId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WardName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductCheckout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductCheckout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductCheckout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &ProductItem{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalPrice = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSubsidyAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalSubsidyAmount = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductHashes = append(m.ProductHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Customer == nil {
				m.Customer = &Customer{}
			}
			if err := m.Customer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerAddress = append(m.CustomerAddress, &CustomerAddress{})
			if err := m.CustomerAddress[len(m.CustomerAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadBuyerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BadBuyerInfo == nil {
				m.BadBuyerInfo = &BadBuyerInfo{}
			}
			if err := m.BadBuyerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAddressId", wireType)
			}
			m.CurrentAddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentAddressId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientInfo == nil {
				m.ClientInfo = &ClientInfo{}
			}
			if err := m.ClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingOrderSource", wireType)
			}
			m.TrackingOrderSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackingOrderSource |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrowserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrowserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Customer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Customer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Customer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			m.CustomerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FptId", wireType)
			}
			m.FptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FptId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultShipping", wireType)
			}
			m.DefaultShipping = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultShipping |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOtpPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOtpPhone = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerifyCheckout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerifyCheckout = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirstOrder = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadBuyerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadBuyerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadBuyerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopBlock = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockCod = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpCod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtpCod = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FinalPrice = float32(math.Float32frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LengthProduct", wireType)
			}
			m.LengthProduct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LengthProduct |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitdhProduct", wireType)
			}
			m.WitdhProduct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WitdhProduct |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightProduct", wireType)
			}
			m.HeightProduct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightProduct |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			m.Qty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qty |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionData = append(m.OptionData, &ProductOption{})
			if err := m.OptionData[len(m.OptionData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageResize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageResize == nil {
				m.ImageResize = &ImageResize{}
			}
			if err := m.ImageResize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promotion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Promotion == nil {
				m.Promotion = &flashdeal.FlashDeal{}
			}
			if err := m.Promotion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginFinalPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginFinalPrice = float32(math.Float32frombits(v))
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sku", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sku = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkuUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkuUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckoutWeight", wireType)
			}
			m.CheckoutWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckoutWeight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CatPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedShippingPackage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedShippingPackage == nil {
				m.ExtendedShippingPackage = &ExtendedShippingPackage{}
			}
			if err := m.ExtendedShippingPackage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitId", wireType)
			}
			m.UnitId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageResize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageResize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageResize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_50X50", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image_50X50 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_100X100", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image_100X100 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedShippingPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedShippingPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedShippingPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUsingInstant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUsingInstant = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUsingInDay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUsingInDay = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelfShipping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelfShipping = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionId", wireType)
			}
			m.OptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductOptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductOptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeId", wireType)
			}
			m.AttributeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributeId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorHexRgb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColorHexRgb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorId", wireType)
			}
			m.ColorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentTransferInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentTransferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentTransferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListBanks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListBanks = append(m.ListBanks, &BankTransferInfo{})
			if err := m.ListBanks[len(m.ListBanks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTransferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentTransferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmationExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmationTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationSmsFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmationSmsFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentWalletInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentWalletInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentWalletInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentWalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentWalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletConfirmType", wireType)
			}
			m.WalletConfirmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletConfirmType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankTransferInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankTransferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankTransferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			m.CustomerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FptId", wireType)
			}
			m.FptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FptId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.District = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardId", wireType)
			}
			m.WardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WardId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefaultShipping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefaultShipping = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNew = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *City) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: City: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: City: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Districts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Districts = append(m.Districts, &District{})
			if err := m.Districts[len(m.Districts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *District) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: District: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: District: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrictName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardId", wireType)
			}
			m.WardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WardId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WardName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidFields = append(m.InvalidFields, &InvalidField{})
			if err := m.InvalidFields[len(m.InvalidFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorActions = append(m.ErrorActions, &ErrorAction{})
			if err := m.ErrorActions[len(m.ErrorActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidCode", wireType)
			}
			m.InvalidCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckoutLoadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckoutLoadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckoutLoadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAddressId", wireType)
			}
			m.CurrentAddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentAddressId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCarrier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCarrier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPaymentMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentPaymentMethod == nil {
				m.CurrentPaymentMethod = &CurrentPaymentData{}
			}
			if err := m.CurrentPaymentMethod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVoucher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentVoucher == nil {
				m.CurrentVoucher = &VoucherInfo{}
			}
			if err := m.CurrentVoucher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLoyalty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentLoyalty == nil {
				m.CurrentLoyalty = &LoyaltyInfo{}
			}
			if err := m.CurrentLoyalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendoPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentProducts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentProducts = append(m.CurrentProducts, &ProductInfo{})
			if err := m.CurrentProducts[len(m.CurrentProducts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtpCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenpayToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenpayToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenpayRefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenpayRefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerNote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTracking = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreInvalidProduct", wireType)
			}
			m.IgnoreInvalidProduct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgnoreInvalidProduct |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductHashes = append(m.ProductHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Version = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckoutLoadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckoutLoadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckoutLoadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CheckoutData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &Error{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsError = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CustomerAddress{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerVoucherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerVoucherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerVoucherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerVoucherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerVoucherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerVoucherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sendo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sendo = append(m.Sendo, &VoucherInfo{})
			if err := m.Sendo[len(m.Sendo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shop = append(m.Shop, &VoucherInfo{})
			if err := m.Shop[len(m.Shop)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCustomerAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCustomerAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCustomerAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardId", wireType)
			}
			m.WardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WardId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetToDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetToDefault = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCustomerAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCustomerAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCustomerAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CustomerAddress{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepushAffiliateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepushAffiliateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepushAffiliateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDate", wireType)
			}
			m.FromDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDate", wireType)
			}
			m.ToDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLog = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepushAffiliateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepushAffiliateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepushAffiliateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessTransactionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessTransactionIds = append(m.SuccessTransactionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailTransactionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailTransactionIds = append(m.FailTransactionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pushed", wireType)
			}
			m.Pushed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pushed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			m.Success = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Success |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fail", wireType)
			}
			m.Fail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fail |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCustomerAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCustomerAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCustomerAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardId", wireType)
			}
			m.WardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WardId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateToDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateToDefault = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCustomerAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCustomerAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCustomerAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CustomerAddress{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCustomerAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCustomerAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCustomerAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCustomerAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCustomerAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCustomerAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CustomerAddress{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegionsListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegionsListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegionsListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegionsListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegionsListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegionsListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Region{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWardsListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWardsListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWardsListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWardsListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWardsListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWardsListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Ward{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShippingCarriersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShippingCarriersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShippingCarriersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShippingCarriersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShippingCarriersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShippingCarriersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ShippingCarrier{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrderInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIncrementId", wireType)
			}
			m.OrderIncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderIncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrderInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementId", wireType)
			}
			m.IncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShopName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GrandTotal = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCurrencyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCurrencyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatus", wireType)
			}
			m.PaymentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatusLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentStatusLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethodLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethodLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTransferInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentTransferInfo == nil {
				m.PaymentTransferInfo = &PaymentTransferInfo{}
			}
			if err := m.PaymentTransferInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentWalletInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentWalletInfo == nil {
				m.PaymentWalletInfo = &PaymentWalletInfo{}
			}
			if err := m.PaymentWalletInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &ActionAfterSuccess{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppActions = append(m.AppActions, &ActionAfterSuccess{})
			if err := m.AppActions[len(m.AppActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Viewed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Viewed = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrackingData == nil {
				m.TrackingData = &TrackingData{}
			}
			if err := m.TrackingData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDurationNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveryDurationNote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomerData == nil {
				m.CustomerData = &CustomerData{}
			}
			if err := m.CustomerData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrderViewedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrderViewedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrderViewedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIncrementId", wireType)
			}
			m.OrderIncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderIncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrderViewedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrderViewedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrderViewedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionAfterSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionAfterSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionAfterSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSenpayTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSenpayTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSenpayTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSenpayTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSenpayTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSenpayTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireIn", wireType)
			}
			m.ExpireIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireIn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SenpayOtpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SenpayOtpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SenpayOtpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIncrementId", wireType)
			}
			m.OrderIncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderIncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentWalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentWalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletConfirmType", wireType)
			}
			m.WalletConfirmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletConfirmType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SenpayOtpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SenpayOtpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SenpayOtpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIncrementId", wireType)
			}
			m.OrderIncrementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderIncrementId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatus", wireType)
			}
			m.PaymentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatusLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentStatusLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodOtpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodOtpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodOtpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantExternalId", wireType)
			}
			m.MerchantExternalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantExternalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodOtpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodOtpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodOtpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affiliation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affiliation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shipping", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shipping = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sku", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sku = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quantity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingCustomer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingCustomer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingCustomer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptScope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptScope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingActionFeild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingActionFeild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingActionFeild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affiliation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affiliation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revenue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shipping", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shipping = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotusPointsUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotusPointsUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipTime", wireType)
			}
			m.ShipTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShipTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Express", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Express = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingShopReputation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingShopReputation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingShopReputation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Point = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingGoogleTagParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingGoogleTagParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingGoogleTagParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcommPagetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcommPagetype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopExtId", wireType)
			}
			m.ShopExtId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopExtId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopReputation == nil {
				m.ShopReputation = &TrackingShopReputation{}
			}
			if err := m.ShopReputation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, &TrackingCategory{})
			if err := m.Categories[len(m.Categories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPrice", wireType)
			}
			m.FinalPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalPrice |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingPurchase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingPurchase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingPurchase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionField", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionField == nil {
				m.ActionField = &TrackingActionFeild{}
			}
			if err := m.ActionField.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &TrackingProduct{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingCheckout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingCheckout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingCheckout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionField", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionField == nil {
				m.ActionField = &TrackingActionFeild{}
			}
			if err := m.ActionField.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &TrackingProduct{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingEcommerce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingEcommerce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingEcommerce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Purchase == nil {
				m.Purchase = &TrackingPurchase{}
			}
			if err := m.Purchase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkout == nil {
				m.Checkout = &TrackingCheckout{}
			}
			if err := m.Checkout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingEcommerceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingEcommerceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingEcommerceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecommerce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecommerce == nil {
				m.Ecommerce = &TrackingEcommerce{}
			}
			if err := m.Ecommerce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendoPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleTagParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoogleTagParams == nil {
				m.GoogleTagParams = &TrackingGoogleTagParams{}
			}
			if err := m.GoogleTagParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pageurl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pageurl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsFirstOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpClient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpClient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.View = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewUser = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &TrackingTransaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TrackingItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Customer == nil {
				m.Customer = &TrackingCustomer{}
			}
			if err := m.Customer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcommerceData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcommerceData == nil {
				m.EcommerceData = &TrackingEcommerceData{}
			}
			if err := m.EcommerceData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepushOPCOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepushOPCOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepushOPCOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheckout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OrderIds = append(m.OrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheckout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCheckout
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OrderIds) == 0 {
					m.OrderIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheckout
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OrderIds = append(m.OrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rebuild = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOldOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOldOrder = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepushOPCOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepushOPCOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepushOPCOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsError = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailErrors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailErrors = append(m.DetailErrors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheckout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FailedOrderIds = append(m.FailedOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheckout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCheckout
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FailedOrderIds) == 0 {
					m.FailedOrderIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheckout
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FailedOrderIds = append(m.FailedOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedOrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCheckout
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheckout
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheckout(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheckout = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckout   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("checkout/checkout.proto", fileDescriptor_checkout_ad8695e994df4374) }

var fileDescriptor_checkout_ad8695e994df4374 = []byte{
	// 6985 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7d, 0x5b, 0x88, 0x24, 0xc9,
	0x75, 0x28, 0x59, 0xd5, 0x55, 0x5d, 0x75, 0xfa, 0x1d, 0xdd, 0xd3, 0x53, 0xd3, 0xdb, 0x3b, 0x33,
	0x9b, 0x1a, 0xad, 0x46, 0xa3, 0xe9, 0xe9, 0xd9, 0xd1, 0xae, 0x1e, 0x2b, 0xb4, 0x57, 0x3b, 0x33,
	0x9a, 0xd5, 0x4a, 0xbb, 0xda, 0x21, 0x67, 0xb4, 0x7b, 0xaf, 0xd0, 0x25, 0x6f, 0x76, 0x65, 0x54,
	0x75, 0x32, 0x59, 0x99, 0xa5, 0xcc, 0xac, 0x9e, 0x99, 0xbb, 0x2c, 0x96, 0x04, 0x06, 0x1b, 0x8c,
	0xbd, 0xc2, 0x06, 0x83, 0x6d, 0x61, 0xd9, 0x60, 0x1b, 0x6c, 0xeb, 0xcb, 0xe0, 0x0f, 0xf9, 0xdb,
	0x60, 0x10, 0xd8, 0xc2, 0xb2, 0xc1, 0x60, 0x58, 0xcb, 0x8b, 0x0d, 0x06, 0x63, 0x0c, 0xfb, 0x65,
	0xfc, 0x65, 0xe2, 0xc4, 0x89, 0xcc, 0x88, 0x7c, 0x54, 0x77, 0xcf, 0x62, 0xe4, 0xbf, 0x8c, 0x13,
	0x8f, 0x3a, 0x11, 0x71, 0xce, 0x89, 0xf3, 0x8a, 0x28, 0x38, 0x3b, 0x3c, 0xe4, 0xc3, 0x07, 0xf1,
	0x2c, 0xdb, 0x57, 0x1f, 0xd7, 0xa6, 0x49, 0x9c, 0xc5, 0xec, 0x4c, 0xca, 0x23, 0x3f, 0xbe, 0x76,
	0xf4, 0xdc, 0x35, 0x6f, 0x1a, 0x5c, 0x53, 0x95, 0x3b, 0x7b, 0xe3, 0x20, 0x3b, 0x9c, 0x1d, 0x5c,
	0x1b, 0xc6, 0x93, 0xfd, 0x71, 0x3c, 0x8e, 0xf7, 0xb1, 0xf5, 0xc1, 0x6c, 0x84, 0x25, 0x2c, 0xe0,
	0x97, 0x1c, 0x65, 0x67, 0x77, 0x1c, 0xc7, 0xe3, 0x90, 0xef, 0x7b, 0xd3, 0x60, 0xdf, 0x8b, 0xa2,
	0x38, 0xf3, 0xb2, 0x20, 0x8e, 0x52, 0xaa, 0xbd, 0x3c, 0x4d, 0x62, 0x7f, 0x36, 0xcc, 0xf6, 0x47,
	0xa1, 0x97, 0x1e, 0xfa, 0xdc, 0x0b, 0xf7, 0x09, 0x92, 0x03, 0x64, 0x4b, 0xfb, 0xdb, 0x1d, 0xd8,
	0xb8, 0xe7, 0x1d, 0xf1, 0x37, 0x12, 0x9f, 0x27, 0x0e, 0x4f, 0xa7, 0x71, 0x94, 0x72, 0xb6, 0x03,
	0xbd, 0x20, 0x75, 0x79, 0x92, 0xc4, 0xc9, 0xc0, 0xba, 0x68, 0x5d, 0xee, 0x39, 0x79, 0x99, 0x3d,
	0x0f, 0x5d, 0xfc, 0x48, 0x07, 0xad, 0x8b, 0xed, 0xcb, 0x4b, 0x37, 0x76, 0xaf, 0xd5, 0x4e, 0xe8,
	0xda, 0x17, 0x45, 0x23, 0x87, 0xda, 0x32, 0x1b, 0x96, 0x83, 0x68, 0x98, 0xf0, 0x09, 0x8f, 0x32,
	0x37, 0xf0, 0x07, 0xed, 0x8b, 0xd6, 0xe5, 0xb6, 0x63, 0xc0, 0x44, 0x9b, 0xa9, 0xf7, 0x18, 0x4b,
	0xd9, 0xe3, 0x29, 0x1f, 0x2c, 0x5c, 0xb4, 0x2e, 0xf7, 0x1d, 0x03, 0xc6, 0x9e, 0x85, 0x55, 0x55,
	0x1e, 0x79, 0x41, 0xc8, 0xfd, 0x41, 0x07, 0xf1, 0x2b, 0x41, 0xd9, 0xf3, 0x70, 0xc6, 0x84, 0xb8,
	0x09, 0xf7, 0xd2, 0x38, 0x1a, 0x74, 0x71, 0xd0, 0xfa, 0x4a, 0x76, 0x1e, 0x40, 0x55, 0x04, 0xfe,
	0x60, 0x11, 0x9b, 0x6a, 0x10, 0x76, 0x03, 0xb6, 0x54, 0x69, 0x18, 0x47, 0xa3, 0x20, 0x99, 0x48,
	0x4c, 0xfb, 0x17, 0xad, 0xcb, 0x1d, 0xa7, 0xb6, 0x8e, 0x5d, 0x84, 0x25, 0x05, 0x9f, 0x25, 0xe1,
	0x00, 0x70, 0x50, 0x1d, 0xc4, 0xae, 0x01, 0xf3, 0x83, 0xd4, 0x3b, 0x08, 0xb9, 0x9b, 0x7a, 0x47,
	0xdc, 0x8d, 0xc5, 0x5e, 0x0c, 0x96, 0x70, 0x5e, 0x35, 0x35, 0x02, 0xcb, 0x23, 0x9e, 0x04, 0xa3,
	0xc7, 0x38, 0xe0, 0xb2, 0xc4, 0xb2, 0x80, 0xb0, 0xaf, 0xc2, 0xfa, 0x70, 0x96, 0x24, 0x62, 0x78,
	0xda, 0xf5, 0x74, 0xb0, 0x82, 0x7b, 0x65, 0x37, 0xec, 0xd5, 0x5d, 0xd9, 0xec, 0xd5, 0x8c, 0x4f,
	0x9c, 0x4a, 0x5f, 0xf6, 0x29, 0xd8, 0x0e, 0xc6, 0x51, 0x9c, 0x70, 0x37, 0x88, 0x8e, 0xbc, 0x30,
	0xf0, 0x55, 0xd5, 0x60, 0x15, 0xe7, 0xdd, 0x50, 0x8b, 0x7b, 0x25, 0x3f, 0xdd, 0x43, 0x2f, 0x3d,
	0xe4, 0xe9, 0x60, 0xed, 0x62, 0xfb, 0x72, 0xdf, 0x29, 0x41, 0xed, 0x1f, 0x75, 0x61, 0xf9, 0x16,
	0xa1, 0x72, 0xdb, 0xcb, 0x3c, 0xf6, 0x2a, 0xac, 0x0c, 0x67, 0x69, 0x16, 0x4f, 0x78, 0xe2, 0xfa,
	0x5e, 0xe6, 0x21, 0x0d, 0x2e, 0xdd, 0xf8, 0x48, 0x03, 0xf6, 0xb7, 0xa8, 0xad, 0xe8, 0xeb, 0x98,
	0x3d, 0xd9, 0x7d, 0xd8, 0x50, 0xf3, 0x70, 0x55, 0x87, 0x41, 0x0b, 0x87, 0x7b, 0x76, 0xfe, 0x62,
	0x28, 0x8c, 0x9c, 0xea, 0x00, 0xec, 0xf3, 0xd0, 0x4f, 0x0f, 0xe3, 0xa9, 0x1b, 0x44, 0xa3, 0x18,
	0x49, 0x79, 0xe9, 0xc6, 0x85, 0x86, 0xd1, 0xee, 0x1d, 0xc6, 0xd3, 0x57, 0xa3, 0x51, 0xec, 0x14,
	0x3d, 0xd8, 0x5d, 0x58, 0x49, 0x0f, 0x83, 0xe9, 0x34, 0x88, 0xc6, 0x72, 0x88, 0x05, 0x1c, 0xe2,
	0x4a, 0xe3, 0x10, 0xb2, 0xed, 0x2d, 0x2f, 0x49, 0x02, 0x9e, 0x88, 0x11, 0x1d, 0x73, 0x00, 0x76,
	0xa7, 0x60, 0x1d, 0x1c, 0xb0, 0x83, 0x03, 0x36, 0x6e, 0xb7, 0x6c, 0x8a, 0x68, 0x19, 0xfd, 0xc4,
	0x38, 0x47, 0xf1, 0x6c, 0x78, 0xc8, 0x13, 0x39, 0x4e, 0x77, 0xee, 0x38, 0x6f, 0xca, 0xa6, 0x72,
	0x1c, 0xbd, 0x9f, 0x18, 0x27, 0x8c, 0x1f, 0x7b, 0x61, 0xf6, 0x58, 0x8e, 0xb3, 0x38, 0x77, 0x9c,
	0xd7, 0x64, 0x53, 0x39, 0x8e, 0xde, 0x8f, 0x7d, 0x11, 0x20, 0x8b, 0x33, 0x2f, 0x94, 0xa3, 0xf4,
	0x70, 0x94, 0x8f, 0x36, 0x8c, 0x72, 0x5f, 0x34, 0x44, 0x39, 0x86, 0x03, 0x69, 0x1d, 0xd9, 0x25,
	0x8d, 0xa0, 0xa2, 0x38, 0x93, 0x0c, 0xdb, 0x77, 0x4c, 0x60, 0x03, 0x1f, 0x42, 0x23, 0x1f, 0x7e,
	0x03, 0x18, 0x1f, 0xc6, 0x93, 0x09, 0x4f, 0x86, 0xdc, 0xcd, 0x12, 0x6f, 0xf8, 0x20, 0x88, 0xc6,
	0xc8, 0xb7, 0x4b, 0x37, 0xae, 0x36, 0x21, 0x49, 0xcd, 0xbe, 0xa8, 0x3a, 0x22, 0xd1, 0xd6, 0x8c,
	0x33, 0x87, 0xeb, 0x96, 0xe7, 0x71, 0x9d, 0xfd, 0x2f, 0x0b, 0xb0, 0x6a, 0x2e, 0x05, 0xdb, 0x85,
	0x7e, 0x3a, 0x3b, 0x70, 0x71, 0x41, 0x90, 0x97, 0x5a, 0x4e, 0x01, 0x10, 0x6c, 0xaa, 0xf6, 0xce,
	0x9b, 0xc4, 0xb3, 0x48, 0xf2, 0x47, 0xcb, 0x29, 0x41, 0x45, 0x3b, 0xb5, 0x37, 0xd4, 0xae, 0x2d,
	0xdb, 0x99, 0x50, 0x21, 0xc6, 0x7d, 0x1e, 0x06, 0x47, 0x3c, 0x79, 0xec, 0x8e, 0xb8, 0x14, 0xe3,
	0x2d, 0xc7, 0x80, 0xb1, 0x01, 0x2c, 0x0e, 0x63, 0x1f, 0xab, 0x3b, 0x58, 0xad, 0x8a, 0x62, 0x13,
	0x70, 0xe5, 0x5c, 0x3f, 0x48, 0x87, 0x62, 0x3c, 0x6c, 0xd4, 0xc5, 0x46, 0x35, 0x35, 0xec, 0x2a,
	0x6c, 0x20, 0x63, 0x19, 0xcd, 0x17, 0xb1, 0x79, 0xb5, 0x42, 0x08, 0xf0, 0xd2, 0x18, 0xd3, 0x24,
	0x18, 0x72, 0xa4, 0xac, 0x96, 0x53, 0x5b, 0x87, 0x7d, 0x8c, 0x81, 0x26, 0xf1, 0x41, 0x10, 0x4a,
	0x1a, 0x12, 0x7d, 0x6a, 0xea, 0xd8, 0x4d, 0xd8, 0x35, 0xe1, 0x71, 0x14, 0x06, 0x11, 0x77, 0x89,
	0xd9, 0x90, 0xa8, 0x5a, 0xce, 0xdc, 0x36, 0xe2, 0xe0, 0x18, 0x27, 0x5e, 0xe4, 0xd3, 0xbe, 0x2d,
	0x61, 0x17, 0x1d, 0x24, 0x30, 0x93, 0x44, 0x9e, 0xce, 0x0e, 0xd2, 0xc0, 0xcf, 0xf7, 0x65, 0x59,
	0x62, 0x56, 0x57, 0xc7, 0xbe, 0x0c, 0xcb, 0x12, 0xee, 0xf3, 0xcc, 0x0b, 0x42, 0x3a, 0x18, 0x9e,
	0x9d, 0xc7, 0x53, 0xb7, 0xb1, 0x25, 0x1e, 0x0e, 0x46, 0x5f, 0xfb, 0x1d, 0x58, 0x2b, 0x35, 0x60,
	0x5b, 0xd0, 0x09, 0x22, 0x9f, 0x3f, 0x42, 0x32, 0xeb, 0x38, 0xb2, 0x20, 0xa0, 0xa3, 0x80, 0x87,
	0x3e, 0x52, 0x56, 0xdf, 0x91, 0x05, 0x01, 0x3d, 0xf2, 0xc2, 0x19, 0x27, 0x3a, 0x92, 0x05, 0x01,
	0x0d, 0xbd, 0x03, 0x1e, 0xd2, 0xf1, 0x2f, 0x0b, 0x8c, 0xc1, 0x42, 0x1a, 0x8c, 0x23, 0xa4, 0x96,
	0x8e, 0x83, 0xdf, 0xf6, 0xdf, 0xb7, 0x60, 0x49, 0x13, 0x1d, 0xa2, 0x67, 0x3a, 0x8c, 0x13, 0x4e,
	0x24, 0x2e, 0x0b, 0x82, 0xf8, 0x67, 0x29, 0x77, 0x65, 0x8d, 0xa4, 0xec, 0x02, 0x20, 0x16, 0xf9,
	0x20, 0x8e, 0x66, 0x29, 0xd5, 0x4b, 0x4c, 0x74, 0x90, 0x90, 0x1d, 0xe9, 0x6c, 0x3c, 0xe6, 0x69,
	0xc6, 0x7d, 0x77, 0x92, 0x8e, 0x09, 0x2f, 0x13, 0x28, 0x7e, 0x05, 0x35, 0x1d, 0x6c, 0xd1, 0xc1,
	0x16, 0x05, 0x40, 0x1b, 0x83, 0x7e, 0xa7, 0x6b, 0x8c, 0x41, 0xbf, 0x74, 0x19, 0xd6, 0x14, 0x60,
	0xc2, 0xd3, 0xd4, 0x1b, 0x73, 0x52, 0x41, 0xca, 0x60, 0xd1, 0x52, 0xc9, 0x23, 0x62, 0x3e, 0xa4,
	0xe0, 0x9e, 0x53, 0x06, 0xb3, 0xcf, 0xc0, 0xd9, 0x02, 0xd1, 0x7c, 0xda, 0x88, 0xa5, 0x94, 0x81,
	0x4d, 0xd5, 0xf6, 0x1f, 0x2d, 0xc0, 0x92, 0x26, 0xe0, 0x85, 0x3c, 0xe2, 0x91, 0x14, 0x81, 0x84,
	0x0d, 0xc9, 0x07, 0xd2, 0x10, 0x1b, 0x6a, 0x85, 0x38, 0x50, 0x82, 0x64, 0x18, 0xfb, 0x9c, 0x48,
	0xc0, 0x80, 0x89, 0xf5, 0x51, 0x65, 0x9d, 0x22, 0x4c, 0xa0, 0x98, 0x75, 0x90, 0xba, 0xc8, 0x33,
	0xea, 0xa7, 0x17, 0xe4, 0xac, 0x4b, 0x60, 0xa1, 0xfd, 0xe5, 0xe3, 0x7b, 0x93, 0xa9, 0x17, 0x8c,
	0x23, 0xf9, 0xe3, 0x72, 0x67, 0xea, 0x2b, 0x4d, 0x31, 0xd9, 0xad, 0x11, 0x93, 0xea, 0xa8, 0x9c,
	0xf0, 0xec, 0x30, 0x56, 0xfa, 0x61, 0x09, 0x2a, 0x7e, 0x5b, 0xc9, 0x70, 0x79, 0x4e, 0xb8, 0x69,
	0x3c, 0x4b, 0x48, 0xc6, 0x74, 0x9c, 0xfa, 0x4a, 0x41, 0x87, 0x09, 0xf7, 0x39, 0x9f, 0x70, 0xdf,
	0xf5, 0x32, 0xdc, 0x9b, 0xb6, 0xa3, 0x83, 0x84, 0xa0, 0x13, 0x3a, 0xb8, 0x5c, 0xe4, 0xa1, 0x37,
	0xcd, 0x86, 0x87, 0x1e, 0x1d, 0x4e, 0xd5, 0x0a, 0x76, 0x05, 0xd6, 0xe9, 0xd3, 0x4d, 0x48, 0xab,
	0x47, 0x09, 0xd2, 0x77, 0x2a, 0x70, 0x14, 0xa1, 0x05, 0x31, 0x13, 0xe5, 0x49, 0xb5, 0xb2, 0x5a,
	0x21, 0xb8, 0x4c, 0x1a, 0x06, 0x2b, 0x92, 0x3f, 0xb1, 0x60, 0xff, 0xa5, 0x05, 0x4b, 0x9a, 0x5a,
	0xc1, 0x6e, 0xc2, 0x72, 0x18, 0xa4, 0x59, 0x2e, 0xf0, 0x2c, 0x14, 0x33, 0xe7, 0xe7, 0x2b, 0x24,
	0x8e, 0xd1, 0x87, 0xfd, 0x5f, 0xd8, 0xca, 0x75, 0x51, 0x5a, 0x63, 0xd4, 0x06, 0xa5, 0xfa, 0xf6,
	0xf1, 0x46, 0x6d, 0x10, 0xbb, 0xd0, 0x90, 0x78, 0xbc, 0xd6, 0x0e, 0x63, 0xb2, 0x6c, 0xbb, 0xc4,
	0xb2, 0xf6, 0x1f, 0x8b, 0x09, 0x91, 0x5a, 0x2c, 0x26, 0x24, 0x4c, 0x03, 0x52, 0x5b, 0x03, 0x1f,
	0x49, 0xbe, 0xed, 0x68, 0x10, 0xb1, 0x81, 0xa3, 0x20, 0xf2, 0x42, 0x3a, 0x50, 0xa4, 0xa0, 0xd1,
	0x41, 0xec, 0x15, 0xe8, 0x4f, 0x93, 0x78, 0x12, 0x0b, 0x43, 0x8d, 0x94, 0xc6, 0xd2, 0x1c, 0x68,
	0xb8, 0x6b, 0x85, 0x91, 0x76, 0x47, 0x7c, 0xdd, 0xe6, 0x5e, 0xe8, 0x14, 0x7d, 0x85, 0x2c, 0x14,
	0x9a, 0x33, 0x09, 0x22, 0xfc, 0xb6, 0x7f, 0xd1, 0x82, 0x55, 0x73, 0xe6, 0xe2, 0x8c, 0x95, 0x2a,
	0xa7, 0x42, 0x57, 0x15, 0xff, 0x9b, 0x17, 0xd6, 0x7e, 0xb7, 0x05, 0xac, 0xda, 0x98, 0x6d, 0x43,
	0x97, 0x18, 0xc7, 0x42, 0xc4, 0xa9, 0x24, 0xf6, 0x61, 0xe8, 0x25, 0xbe, 0xb4, 0xa4, 0xa4, 0x74,
	0x28, 0x00, 0x62, 0xb2, 0xa2, 0x40, 0x06, 0x23, 0x7e, 0xa3, 0xf6, 0x20, 0x1a, 0x04, 0x3e, 0xae,
	0x41, 0xdb, 0x51, 0x45, 0x61, 0xb8, 0xe2, 0xe7, 0xf0, 0x68, 0x48, 0xbc, 0x9e, 0x97, 0x85, 0x66,
	0x11, 0x44, 0x69, 0xe6, 0x85, 0x21, 0xa2, 0x3a, 0xe5, 0x49, 0x10, 0xfb, 0xc8, 0xe7, 0x1d, 0xa7,
	0xa6, 0x46, 0xe0, 0x75, 0xe0, 0x45, 0x0f, 0xdc, 0xc8, 0x9b, 0x28, 0x41, 0x5c, 0x00, 0x04, 0x0e,
	0x58, 0x08, 0x7c, 0x64, 0xec, 0x15, 0x47, 0x15, 0x05, 0xc6, 0x07, 0x41, 0x94, 0x0e, 0xfa, 0x68,
	0xec, 0xe0, 0xb7, 0xfd, 0xb7, 0x2d, 0x58, 0x54, 0xfb, 0xa2, 0x99, 0xb9, 0x38, 0xb4, 0x65, 0x9a,
	0xb9, 0x38, 0xba, 0xd6, 0x46, 0x17, 0x9a, 0x3a, 0x4c, 0x50, 0x64, 0x90, 0xba, 0x24, 0xf0, 0x49,
	0x12, 0x6a, 0x10, 0x21, 0xb0, 0xa4, 0x59, 0x9b, 0xb7, 0x91, 0x2b, 0x52, 0x82, 0x1a, 0x66, 0x37,
	0x7f, 0x94, 0xd1, 0xd9, 0x64, 0xc0, 0x84, 0x19, 0x65, 0xac, 0x50, 0xe8, 0x45, 0xe9, 0x60, 0x71,
	0xae, 0xea, 0xf0, 0x6a, 0xd1, 0xfe, 0x6e, 0xe8, 0x45, 0x4e, 0x75, 0x00, 0xf6, 0x05, 0x5a, 0x61,
	0xc1, 0xf5, 0x83, 0xde, 0x5c, 0x0b, 0xf5, 0xa6, 0x17, 0x3d, 0x48, 0x6f, 0x09, 0xbb, 0x7a, 0xec,
	0x14, 0x9d, 0xec, 0xff, 0xb0, 0x60, 0x49, 0xab, 0xd2, 0x77, 0xc5, 0x32, 0x77, 0xe5, 0x12, 0xac,
	0xe0, 0xe7, 0x68, 0x16, 0x86, 0xb8, 0xec, 0x72, 0x49, 0x4d, 0xa0, 0xb9, 0xe7, 0xed, 0xf2, 0x9e,
	0x33, 0x58, 0x08, 0xe3, 0x71, 0xac, 0x18, 0x4f, 0x7c, 0xa3, 0x62, 0x12, 0x27, 0x19, 0xae, 0xed,
	0x8a, 0x83, 0xdf, 0x6c, 0x08, 0xdb, 0xf2, 0x67, 0xb5, 0x19, 0x67, 0x3c, 0x99, 0xa8, 0x25, 0xfb,
	0xc4, 0x9c, 0x49, 0x6a, 0xcb, 0x76, 0x5f, 0x74, 0x71, 0x1a, 0x86, 0xb2, 0xa7, 0xb0, 0x55, 0xd7,
	0x5e, 0xb0, 0x19, 0x91, 0xb6, 0x5c, 0x01, 0x2a, 0x89, 0x13, 0xa1, 0xbc, 0x03, 0xb8, 0x06, 0x2b,
	0x4e, 0x05, 0x5e, 0xe8, 0x60, 0x6d, 0x4d, 0x07, 0xb3, 0x27, 0xb0, 0x56, 0xda, 0xd4, 0x06, 0x9e,
	0xb2, 0x1a, 0x79, 0xea, 0x0a, 0xac, 0xcb, 0xaf, 0x60, 0x98, 0x1f, 0x0d, 0x2d, 0x6c, 0x5d, 0x81,
	0xdb, 0x7f, 0xd6, 0x82, 0xcd, 0x1a, 0xd3, 0x57, 0x68, 0xb0, 0x78, 0x4c, 0x0c, 0x25, 0x8c, 0x8e,
	0x96, 0x67, 0x4f, 0x66, 0x3c, 0x3b, 0x46, 0x5f, 0xa1, 0x52, 0x28, 0x11, 0xa6, 0x86, 0x93, 0x74,
	0x51, 0x06, 0x0b, 0x6e, 0x1a, 0x1e, 0x7a, 0xd1, 0x98, 0xbb, 0x54, 0x83, 0x6b, 0xd3, 0x71, 0x4a,
	0xd0, 0xe2, 0x78, 0x5c, 0xd0, 0x8e, 0x47, 0x41, 0x7d, 0x74, 0xb4, 0xd0, 0xf1, 0x2a, 0x59, 0xd1,
	0x04, 0x0a, 0xd5, 0x61, 0x94, 0x70, 0xee, 0xe6, 0xb6, 0xbd, 0x6a, 0x4d, 0x4e, 0xab, 0xda, 0x4a,
	0xf1, 0x8b, 0x53, 0x2f, 0xf1, 0x26, 0x24, 0xa3, 0x64, 0xc1, 0xfe, 0xf3, 0x45, 0x58, 0x2b, 0xcd,
	0x5d, 0x48, 0x0c, 0x9a, 0x8e, 0x76, 0x86, 0x15, 0x10, 0x21, 0x09, 0x54, 0x49, 0x97, 0x3a, 0x3a,
	0x4c, 0x6f, 0xa3, 0x31, 0x89, 0x01, 0xd3, 0xdb, 0x68, 0xfc, 0x62, 0xc0, 0x90, 0x72, 0x52, 0xb7,
	0xbc, 0xf8, 0xd2, 0x99, 0x57, 0x53, 0x23, 0xc6, 0x8c, 0x93, 0x60, 0x8c, 0xe7, 0x69, 0x61, 0x11,
	0x1a, 0xb0, 0x8a, 0xe5, 0xb9, 0x58, 0x6f, 0x79, 0x0a, 0x9d, 0x4e, 0x54, 0x4b, 0xa3, 0x4f, 0x15,
	0x75, 0x9b, 0xb4, 0x6f, 0xda, 0xa4, 0xcf, 0xc3, 0x19, 0x7d, 0x8c, 0xdc, 0x62, 0x23, 0x33, 0xae,
	0xbe, 0x12, 0x55, 0x30, 0x39, 0x40, 0xd1, 0x41, 0x1a, 0x71, 0x15, 0x78, 0x83, 0xd5, 0xbb, 0x72,
	0x3a, 0xab, 0x77, 0xb5, 0xc9, 0xea, 0xbd, 0x0a, 0x1b, 0xfc, 0x08, 0x8f, 0x67, 0x05, 0x0d, 0xfc,
	0xc1, 0x1a, 0x6e, 0x7f, 0xb5, 0x42, 0xb4, 0xce, 0x27, 0xe4, 0xcf, 0x12, 0x74, 0x2c, 0x0f, 0xd6,
	0x65, 0xeb, 0x4a, 0x85, 0x30, 0x0b, 0x2a, 0x40, 0xe9, 0x63, 0xd9, 0xc0, 0x5d, 0x6f, 0xa8, 0x65,
	0x5f, 0x85, 0xe5, 0x5c, 0x7b, 0x8a, 0x46, 0xf1, 0x80, 0x21, 0x17, 0x5f, 0x99, 0xef, 0x93, 0x53,
	0x04, 0x4d, 0x9e, 0x2b, 0xad, 0xbf, 0x41, 0x97, 0xe2, 0xd7, 0x37, 0xf1, 0xf4, 0x35, 0x60, 0x62,
	0x87, 0x85, 0x8d, 0x33, 0xf1, 0xa6, 0x83, 0x2d, 0x24, 0x34, 0x55, 0x2c, 0xb8, 0xf6, 0x8c, 0xce,
	0xb5, 0x36, 0x2c, 0xa7, 0x3c, 0x39, 0x0a, 0x86, 0x5c, 0xd2, 0xfa, 0xb6, 0xa4, 0x63, 0x1d, 0x26,
	0xc6, 0x8c, 0xa7, 0x43, 0xf4, 0xc4, 0x9e, 0xc5, 0x6a, 0x55, 0x64, 0xb7, 0xe1, 0xe9, 0x28, 0xce,
	0xdc, 0x74, 0x36, 0x9d, 0xc6, 0x89, 0xd0, 0xa0, 0x4d, 0x43, 0x21, 0x1d, 0x0c, 0x10, 0xc5, 0xf9,
	0x8d, 0xec, 0xd7, 0x61, 0xb3, 0x66, 0xf2, 0xc7, 0xaa, 0xa3, 0xdb, 0xd0, 0x7d, 0xc8, 0x83, 0xf1,
	0xa1, 0x14, 0xaf, 0x6d, 0x87, 0x4a, 0xf6, 0x07, 0x1d, 0xe8, 0x29, 0x97, 0xe4, 0x1c, 0x0d, 0xf1,
	0x22, 0x2c, 0xf1, 0x47, 0x19, 0x4f, 0x04, 0x67, 0x05, 0x3e, 0x8d, 0xa1, 0x83, 0xc4, 0xb9, 0xa7,
	0xf1, 0xff, 0x82, 0x3a, 0x3d, 0x33, 0x1e, 0xf2, 0xe9, 0x61, 0x1c, 0x29, 0xef, 0x7d, 0x01, 0xc0,
	0x35, 0x9e, 0x78, 0x41, 0x48, 0xb2, 0x4f, 0x16, 0xf2, 0x33, 0xb5, 0xab, 0x9d, 0xa9, 0xaf, 0x15,
	0x9e, 0x26, 0x74, 0xa5, 0x8f, 0xc9, 0x7f, 0x78, 0x69, 0xbe, 0xff, 0x90, 0xd4, 0x83, 0x52, 0x5f,
	0x0c, 0x3d, 0xa4, 0xee, 0x90, 0x27, 0x59, 0x30, 0x0a, 0xb8, 0x4f, 0x96, 0xb2, 0x01, 0x43, 0xd3,
	0x4f, 0x4c, 0x3d, 0xf7, 0xe6, 0xb7, 0x9d, 0x02, 0xc0, 0xbe, 0x00, 0x4f, 0x0d, 0xbd, 0x48, 0xda,
	0xc7, 0xb3, 0x29, 0x4f, 0xdc, 0x91, 0x97, 0x66, 0xae, 0x22, 0x6c, 0x32, 0xc2, 0xe6, 0x35, 0x61,
	0xb7, 0x01, 0x1e, 0x7a, 0x09, 0x77, 0x0f, 0xe3, 0x19, 0x19, 0x62, 0xcd, 0xb3, 0x11, 0xdb, 0xf3,
	0x96, 0x97, 0xf0, 0x2f, 0x89, 0xb6, 0x8e, 0xd6, 0x4f, 0x68, 0x61, 0x13, 0x9e, 0x88, 0x03, 0x27,
	0x73, 0x89, 0x08, 0xd3, 0xc1, 0xf2, 0xdc, 0xe3, 0xef, 0x75, 0x6a, 0x7f, 0x4f, 0x36, 0x77, 0xaa,
	0x03, 0xb0, 0xfb, 0xb0, 0x4a, 0xe4, 0xa7, 0x56, 0x7b, 0x65, 0xae, 0x0b, 0x33, 0x1f, 0x52, 0x76,
	0x52, 0xab, 0x6e, 0x8e, 0x21, 0x28, 0x48, 0x59, 0xe5, 0xd9, 0xd1, 0x10, 0x65, 0x53, 0xcf, 0xd1,
	0x41, 0x42, 0x72, 0xe0, 0x59, 0x1c, 0xf8, 0x6e, 0xc2, 0xc7, 0x42, 0x30, 0xd0, 0x10, 0x14, 0x26,
	0x68, 0xa8, 0x65, 0xd7, 0x61, 0x13, 0x6b, 0x4a, 0x9d, 0xd6, 0xb1, 0x53, 0x5d, 0x95, 0xfd, 0x7e,
	0x0b, 0xce, 0xd4, 0x62, 0xcd, 0x9e, 0x96, 0x12, 0x61, 0x48, 0x4a, 0x4b, 0x4f, 0x1c, 0x28, 0x7e,
	0xe1, 0xf2, 0x3c, 0x0f, 0x80, 0x3b, 0xca, 0xa3, 0xa9, 0xf7, 0x18, 0xb9, 0xa0, 0xe7, 0x68, 0x10,
	0x41, 0x5a, 0x87, 0x5e, 0x5a, 0x88, 0xf7, 0xb6, 0x1c, 0x43, 0x87, 0x09, 0xc5, 0x21, 0x97, 0xae,
	0xd2, 0xb9, 0x21, 0x1d, 0xa2, 0x25, 0xa8, 0x3c, 0xe0, 0x8a, 0xdf, 0x26, 0xbf, 0xa8, 0x89, 0xcf,
	0x1b, 0xb0, 0x26, 0x7f, 0xb9, 0xf8, 0xc9, 0x2e, 0x6e, 0x7f, 0x93, 0x4f, 0xfc, 0x36, 0x35, 0xa3,
	0x4d, 0x2a, 0xf7, 0x66, 0xaf, 0xc2, 0xb2, 0x37, 0x2d, 0x4e, 0x0b, 0xd2, 0x4f, 0x4f, 0x38, 0x9a,
	0xd1, 0xd5, 0xfe, 0x0d, 0x0b, 0x56, 0xcd, 0x06, 0x95, 0x29, 0x59, 0x35, 0x53, 0xba, 0x02, 0xeb,
	0x85, 0xbf, 0x95, 0x27, 0x43, 0x4d, 0x23, 0x2c, 0xc3, 0x85, 0x75, 0x37, 0x8d, 0xd3, 0x20, 0x37,
	0xa0, 0x3b, 0x4e, 0x5e, 0x16, 0x1c, 0x1c, 0xa4, 0xae, 0x37, 0xcc, 0x82, 0x23, 0x65, 0x0c, 0x15,
	0x00, 0xfb, 0x1e, 0xac, 0x95, 0x38, 0x41, 0x17, 0xee, 0xa8, 0xec, 0x58, 0xa6, 0x70, 0x57, 0x1e,
	0xa1, 0x62, 0x50, 0x89, 0x95, 0x36, 0xe8, 0xcf, 0x5b, 0xb0, 0x62, 0x88, 0x1e, 0x81, 0x60, 0x9a,
	0xa1, 0x53, 0x5e, 0x49, 0xd4, 0xbc, 0x5c, 0x1d, 0x4b, 0x47, 0x50, 0x88, 0x62, 0x35, 0x7b, 0x39,
	0x33, 0x55, 0x14, 0x8c, 0x34, 0x9b, 0xfa, 0x5e, 0xc6, 0xdd, 0x2c, 0x98, 0x70, 0x32, 0x78, 0x75,
	0x90, 0xfd, 0xd3, 0x36, 0xac, 0x18, 0x42, 0x83, 0x5d, 0x85, 0xc5, 0x61, 0x90, 0x3d, 0x56, 0x68,
	0x74, 0x6e, 0xb2, 0x0f, 0xde, 0xbb, 0xb0, 0x7a, 0x90, 0xc6, 0xd1, 0x8b, 0x36, 0x55, 0xd8, 0x8e,
	0x6a, 0xc2, 0x6e, 0x40, 0x1f, 0x3f, 0x0b, 0xb3, 0xe8, 0xe6, 0xd6, 0x07, 0xef, 0x5d, 0x58, 0xd7,
	0xda, 0x8b, 0x2a, 0xdb, 0x29, 0x9a, 0xb1, 0xcf, 0xc0, 0x92, 0x1f, 0xa4, 0x59, 0x12, 0x0c, 0xf3,
	0x70, 0x6e, 0xe7, 0xe6, 0xf6, 0x07, 0xef, 0x5d, 0x60, 0xb2, 0x97, 0x56, 0x69, 0x3b, 0x7a, 0x53,
	0xf6, 0x12, 0xac, 0xe4, 0x45, 0xfc, 0x45, 0x3c, 0x28, 0x6e, 0x0e, 0x3e, 0x78, 0xef, 0xc2, 0x56,
	0xa9, 0xaf, 0xfc, 0x55, 0xb3, 0xb9, 0x98, 0xdb, 0x43, 0x32, 0xfe, 0x3b, 0xe5, 0xb9, 0x51, 0x85,
	0xed, 0xa8, 0x26, 0x62, 0x6e, 0xf8, 0x89, 0xbf, 0xd4, 0x2d, 0xcf, 0x2d, 0xaf, 0xb2, 0x9d, 0xa2,
	0x19, 0xdb, 0x87, 0x5e, 0xe8, 0x65, 0x41, 0x36, 0xf3, 0x49, 0x85, 0xbc, 0xb9, 0xf9, 0xc1, 0x7b,
	0x17, 0xd6, 0x64, 0x17, 0x55, 0x63, 0x3b, 0x79, 0x23, 0xf1, 0x23, 0x61, 0x1c, 0x8d, 0x65, 0x0f,
	0xd4, 0x2a, 0xf5, 0x1f, 0xc9, 0xab, 0x6c, 0xa7, 0x68, 0x26, 0xa6, 0xe1, 0xf9, 0x7e, 0xc2, 0xd3,
	0x54, 0x3a, 0x62, 0xf5, 0x69, 0x50, 0x85, 0xed, 0xa8, 0x26, 0xf6, 0x5f, 0x59, 0xb0, 0x56, 0x8a,
	0x4b, 0xb2, 0x97, 0xa0, 0x97, 0x87, 0x77, 0xad, 0x13, 0x87, 0x77, 0xf3, 0x3e, 0x82, 0xb0, 0xa4,
	0x37, 0xdf, 0xf0, 0x58, 0x69, 0xa0, 0xc6, 0xf8, 0x42, 0x7b, 0x4e, 0x7c, 0xa1, 0x1a, 0xf4, 0x5d,
	0xa8, 0x0d, 0xfa, 0xfe, 0x63, 0x0b, 0x96, 0xf5, 0xc0, 0x2d, 0xfb, 0x1c, 0xf4, 0x54, 0x38, 0x8e,
	0xe2, 0xbd, 0x17, 0x8e, 0x89, 0xf7, 0x3a, 0x79, 0x07, 0xe6, 0xc0, 0x7a, 0x1e, 0xcb, 0x53, 0xcb,
	0xda, 0x9a, 0x7b, 0x30, 0xaa, 0x41, 0x5e, 0x96, 0xad, 0x9d, 0x4a, 0x7f, 0xf6, 0x15, 0x58, 0x3d,
	0xf0, 0x7c, 0xf7, 0x60, 0xf6, 0x58, 0x45, 0x43, 0xdb, 0x73, 0xc3, 0xd0, 0x37, 0x3d, 0xff, 0xa6,
	0x68, 0x8b, 0xca, 0x69, 0xa9, 0xab, 0x50, 0xf0, 0x95, 0x45, 0x43, 0xe3, 0x17, 0xde, 0xab, 0x9a,
	0x1a, 0x76, 0x0b, 0x96, 0x86, 0x61, 0x50, 0x8a, 0xe7, 0x3e, 0xd3, 0x34, 0x17, 0x6c, 0x89, 0xbf,
	0xab, 0xf7, 0xb2, 0x7f, 0x68, 0x01, 0x14, 0x75, 0xe8, 0x68, 0xa3, 0xda, 0x29, 0x89, 0xbb, 0x02,
	0x80, 0xc2, 0x35, 0xf4, 0xb2, 0x51, 0x9c, 0x4c, 0xc8, 0xf0, 0xcb, 0xcb, 0xa2, 0xa7, 0xcf, 0x51,
	0x2c, 0x12, 0xaf, 0xf7, 0x9d, 0x02, 0xd0, 0xec, 0xf1, 0x5e, 0x98, 0xe7, 0xf1, 0x3e, 0x0f, 0x70,
	0x90, 0xc4, 0x0f, 0x53, 0x69, 0x8c, 0x4a, 0x9d, 0x50, 0x83, 0xd8, 0xbf, 0xd5, 0x86, 0x9e, 0xda,
	0x24, 0x41, 0xab, 0xf9, 0xfe, 0xe4, 0xb2, 0x55, 0x07, 0x09, 0x85, 0x77, 0x34, 0xcd, 0x0a, 0x65,
	0x95, 0x4a, 0xa6, 0x4e, 0xda, 0x2e, 0xeb, 0xa4, 0xe7, 0x01, 0x46, 0x41, 0x92, 0xea, 0x92, 0xc8,
	0xd1, 0x20, 0xa2, 0x77, 0xe8, 0xa9, 0x6a, 0x0a, 0xeb, 0xe4, 0x80, 0x42, 0xa3, 0xed, 0xea, 0x1a,
	0xed, 0x36, 0x74, 0xbd, 0x23, 0x2f, 0xf3, 0x12, 0x32, 0xc8, 0xa9, 0x84, 0x27, 0x1d, 0x1f, 0x79,
	0xb3, 0x30, 0xcb, 0x6d, 0x78, 0x14, 0x16, 0x6d, 0xa7, 0x02, 0x27, 0x9d, 0x35, 0xce, 0xa6, 0xae,
	0x44, 0xbc, 0x9f, 0xeb, 0xac, 0x39, 0x8c, 0x2c, 0x68, 0xca, 0xfb, 0xc8, 0x73, 0x1b, 0x20, 0xb7,
	0xa0, 0x4b, 0x35, 0x82, 0x33, 0x83, 0xd4, 0x95, 0x93, 0xd3, 0x53, 0x4c, 0x4a, 0x50, 0x76, 0x09,
	0x56, 0x84, 0xfe, 0x94, 0x66, 0x3c, 0xe1, 0xbe, 0x7b, 0xf0, 0x98, 0x42, 0x01, 0x26, 0xd0, 0x1e,
	0xc1, 0xb2, 0x4e, 0xf0, 0x62, 0x25, 0x51, 0xb3, 0x3b, 0x08, 0xe3, 0xe1, 0x03, 0x52, 0xa6, 0x34,
	0x08, 0x7a, 0xd6, 0xc4, 0x07, 0xea, 0x5a, 0x74, 0xfc, 0xe5, 0x00, 0xb4, 0xa2, 0xb2, 0x29, 0xd6,
	0x49, 0x1d, 0x4a, 0x15, 0xed, 0xdf, 0xed, 0x17, 0x7e, 0xf8, 0x8c, 0x4f, 0x8e, 0x35, 0x7c, 0x94,
	0x5d, 0xd2, 0xd2, 0xec, 0x12, 0xf4, 0x7b, 0x64, 0x7c, 0x1c, 0x27, 0x01, 0x4f, 0x89, 0x08, 0x34,
	0x88, 0x20, 0xfd, 0x03, 0x0c, 0xab, 0xe6, 0x2c, 0x99, 0x97, 0x71, 0x5e, 0x48, 0xb0, 0x68, 0xe2,
	0x11, 0x99, 0x16, 0x10, 0xb1, 0xaa, 0x54, 0x9a, 0x7a, 0x63, 0xe4, 0x0f, 0x49, 0x0c, 0x25, 0x28,
	0x06, 0xf7, 0x24, 0x44, 0xce, 0x3a, 0xcf, 0x2f, 0x2a, 0x83, 0x05, 0xad, 0x13, 0x28, 0x4f, 0x7a,
	0xe8, 0x3b, 0x3a, 0x08, 0x3d, 0x3e, 0x28, 0xb3, 0xa5, 0x9f, 0x42, 0x16, 0xca, 0x11, 0x08, 0xa8,
	0x46, 0x20, 0x0a, 0xa3, 0x70, 0x09, 0x39, 0x93, 0x4a, 0x18, 0xd9, 0xe7, 0xd1, 0x38, 0x3b, 0x2c,
	0xa5, 0x18, 0x94, 0xa0, 0x82, 0x32, 0x1e, 0x06, 0x99, 0x5f, 0x34, 0x5b, 0xc1, 0x66, 0x26, 0x50,
	0x8c, 0x76, 0x88, 0xe3, 0x96, 0xd2, 0x84, 0x4a, 0x50, 0xb6, 0x0e, 0xed, 0x6f, 0x66, 0x8f, 0xd1,
	0x0f, 0xd1, 0x71, 0xc4, 0x27, 0xbb, 0x03, 0x4b, 0xf1, 0x14, 0x5d, 0x04, 0x18, 0x8e, 0x58, 0x47,
	0x01, 0x7e, 0x69, 0xfe, 0xa1, 0xf6, 0x06, 0x76, 0x70, 0xf4, 0x8e, 0x79, 0x80, 0x64, 0xa3, 0x08,
	0x90, 0x60, 0x60, 0x7a, 0xe2, 0x8d, 0xf9, 0x80, 0x49, 0x5e, 0xc5, 0x02, 0xbb, 0x03, 0xcb, 0xf8,
	0xe1, 0x26, 0x3c, 0x0d, 0xfe, 0x3f, 0x1f, 0x6c, 0xce, 0xcd, 0x53, 0x79, 0x55, 0x34, 0x75, 0xb0,
	0xa5, 0x63, 0xf4, 0x33, 0x63, 0x3b, 0x5b, 0x1f, 0x22, 0xb6, 0x73, 0x0d, 0x98, 0x74, 0x69, 0xb9,
	0xfa, 0x5e, 0x9e, 0x91, 0x8e, 0xa0, 0x6a, 0x8d, 0x58, 0xc4, 0xf4, 0xc1, 0x8c, 0x3c, 0x13, 0xe2,
	0x13, 0x75, 0xd0, 0x07, 0x33, 0x61, 0x89, 0x26, 0xe4, 0x91, 0xc8, 0xcb, 0x62, 0x6b, 0xbc, 0x2c,
	0x4b, 0x82, 0x83, 0x59, 0xc6, 0xf1, 0x20, 0x1e, 0x0c, 0x24, 0xb1, 0x9a, 0x50, 0x14, 0xb7, 0x92,
	0x3d, 0x50, 0x87, 0x3c, 0x87, 0x5b, 0xa4, 0x83, 0xd0, 0x71, 0x4a, 0xcb, 0xe2, 0x12, 0x4d, 0xed,
	0x20, 0xe7, 0x94, 0xc1, 0x32, 0x24, 0x93, 0xb9, 0x53, 0x2f, 0x3b, 0x1c, 0x3c, 0xa5, 0x42, 0x32,
	0xb2, 0xcc, 0x42, 0x38, 0xc7, 0x1f, 0x65, 0x3c, 0xf2, 0xb9, 0x5f, 0xf8, 0x35, 0xa7, 0xde, 0xf0,
	0x81, 0xd8, 0xa8, 0x5d, 0x5c, 0xc6, 0x6b, 0x4d, 0xe9, 0x85, 0xd4, 0x4f, 0x79, 0x45, 0xee, 0xca,
	0x5e, 0x4e, 0xf3, 0x80, 0xe8, 0xfe, 0x89, 0x02, 0x94, 0x1b, 0x4f, 0x4b, 0x1d, 0x9b, 0x8a, 0x94,
	0xef, 0x88, 0x79, 0x34, 0x83, 0xf3, 0x79, 0xbe, 0x23, 0x96, 0xd1, 0x4e, 0xc8, 0xbc, 0x6c, 0x96,
	0xba, 0xd2, 0x25, 0x7e, 0x81, 0xec, 0x04, 0x0d, 0x66, 0x3f, 0x80, 0x25, 0x8d, 0x36, 0x0a, 0x5a,
	0xb3, 0x74, 0x5a, 0x13, 0x16, 0x31, 0xd2, 0xcc, 0x0b, 0xd7, 0x1f, 0xbd, 0x70, 0x9d, 0x04, 0x94,
	0x0e, 0x12, 0xfc, 0x25, 0x8b, 0xcf, 0x5d, 0xbf, 0xfe, 0xe8, 0xb9, 0xeb, 0xd7, 0x49, 0x54, 0x99,
	0x40, 0xfb, 0x37, 0x2d, 0x38, 0xdb, 0x30, 0x7b, 0x74, 0xf2, 0xa7, 0xee, 0x2c, 0x95, 0x89, 0x61,
	0x69, 0xe6, 0x91, 0xd5, 0xd5, 0x73, 0x2a, 0x70, 0x0a, 0xa7, 0x2b, 0x98, 0xeb, 0xe7, 0x16, 0x6e,
	0x19, 0x4c, 0xa3, 0xa6, 0x3c, 0x1c, 0x15, 0x27, 0x57, 0x3b, 0x1f, 0xd5, 0x80, 0xdb, 0xff, 0xdc,
	0x82, 0x15, 0x83, 0x35, 0x8b, 0x34, 0x0f, 0x5a, 0x0d, 0x69, 0xee, 0xee, 0x42, 0x9f, 0x58, 0x36,
	0x3f, 0xb2, 0x0b, 0x00, 0xbb, 0x9a, 0xa7, 0xed, 0xb9, 0x45, 0x2b, 0xb9, 0x1a, 0xd5, 0x8a, 0x5c,
	0xe6, 0x2f, 0x68, 0x32, 0x9f, 0xc1, 0x02, 0x3a, 0x73, 0xa4, 0xc4, 0xc6, 0x6f, 0xb1, 0x95, 0x05,
	0xa1, 0x93, 0xa4, 0x6e, 0x3b, 0x06, 0x4c, 0xd7, 0x5f, 0xe5, 0x0f, 0xe4, 0x61, 0x7e, 0x03, 0x6a,
	0xb2, 0x12, 0x1a, 0x90, 0xbd, 0x32, 0x2b, 0xa9, 0xd4, 0x86, 0x61, 0x1c, 0xc6, 0x89, 0x7b, 0xc8,
	0x1f, 0xb9, 0xc9, 0xf8, 0x20, 0x4f, 0x3d, 0xd3, 0x81, 0x05, 0xc5, 0x80, 0x4e, 0x31, 0x82, 0x75,
	0xb0, 0x59, 0xe0, 0xa3, 0xc4, 0x6e, 0x3b, 0x79, 0xd9, 0xfe, 0x9b, 0x16, 0x6c, 0x52, 0x44, 0xf1,
	0x7e, 0xe2, 0x45, 0xe9, 0x88, 0xce, 0xe1, 0x57, 0x00, 0xd0, 0x05, 0x72, 0xe0, 0x45, 0x0f, 0x94,
	0x5d, 0xf0, 0xb1, 0x39, 0xf1, 0x26, 0xbd, 0xb3, 0xa3, 0x75, 0x65, 0xd7, 0x61, 0x33, 0x0f, 0x01,
	0x52, 0x1b, 0xb5, 0x55, 0x7d, 0xa7, 0xae, 0x4a, 0xe8, 0x81, 0x94, 0xf9, 0x2a, 0xfd, 0xbc, 0xfc,
	0x91, 0x8c, 0x8d, 0xd0, 0xc6, 0xd5, 0x57, 0x8a, 0xad, 0x36, 0x2a, 0x72, 0x2b, 0xb7, 0xef, 0x54,
	0x2b, 0x84, 0x49, 0x62, 0x00, 0xd3, 0x49, 0x9a, 0x67, 0x91, 0xf5, 0x9d, 0xda, 0x3a, 0xe9, 0x88,
	0xd7, 0xe0, 0xe2, 0x20, 0xef, 0x52, 0x2e, 0x44, 0x09, 0x6e, 0xa7, 0xb0, 0x41, 0xab, 0xfa, 0x96,
	0x17, 0x86, 0x5c, 0x2a, 0xce, 0x82, 0x1a, 0x69, 0xbe, 0x0f, 0x11, 0xaa, 0x54, 0x0f, 0x41, 0x8d,
	0xe5, 0x0a, 0xb1, 0x70, 0x54, 0x30, 0x72, 0x84, 0xa5, 0xfb, 0xa0, 0xae, 0xca, 0xfe, 0x6b, 0x0b,
	0xd6, 0xcb, 0x7b, 0x91, 0x13, 0xb5, 0x65, 0x12, 0x35, 0x3a, 0x4b, 0x5b, 0x9a, 0xb3, 0x54, 0x10,
	0xf5, 0x50, 0xfa, 0x49, 0xf4, 0x80, 0x8c, 0x0e, 0x43, 0x62, 0x55, 0xe5, 0xd9, 0xe4, 0x80, 0xab,
	0xe8, 0x54, 0x09, 0x8a, 0xd9, 0x50, 0x89, 0x17, 0x0d, 0x0f, 0x75, 0x85, 0x57, 0x07, 0x09, 0xa1,
	0x41, 0xc5, 0x30, 0x1e, 0xca, 0xd0, 0x80, 0x5c, 0xca, 0x32, 0xd8, 0xfe, 0xf7, 0x05, 0x58, 0x2b,
	0x19, 0x59, 0x1f, 0x42, 0x8d, 0x17, 0x2a, 0x5c, 0xc2, 0xbd, 0x4c, 0xa6, 0xc7, 0xb4, 0x29, 0x74,
	0x95, 0x43, 0x44, 0x7d, 0xc5, 0xae, 0xd2, 0x20, 0x25, 0x45, 0xbf, 0x33, 0x5f, 0xd1, 0xef, 0x96,
	0x15, 0x7d, 0x06, 0x0b, 0xc3, 0x20, 0x7b, 0x4c, 0xa2, 0x00, 0xbf, 0x31, 0x5c, 0x44, 0x3e, 0x16,
	0x99, 0xd9, 0x93, 0xfb, 0x53, 0x76, 0xa0, 0xa7, 0x5c, 0x16, 0xc4, 0xed, 0x79, 0x59, 0xac, 0x80,
	0xee, 0x37, 0x01, 0x79, 0xb2, 0xea, 0xfe, 0x11, 0x06, 0x0b, 0x0f, 0xbd, 0xc4, 0xa7, 0x6c, 0x1d,
	0xfc, 0x16, 0xbf, 0xa5, 0x7c, 0x1e, 0x52, 0x33, 0xcb, 0xfd, 0x1b, 0xdb, 0xd0, 0x95, 0xce, 0x4e,
	0x4a, 0xc7, 0xa1, 0x92, 0x80, 0xa7, 0x59, 0xc2, 0xb9, 0x54, 0xbe, 0xfa, 0x0e, 0x95, 0x4c, 0x73,
	0x68, 0xad, 0xd1, 0x45, 0xbf, 0xae, 0x1b, 0x34, 0x3b, 0x9a, 0x3f, 0x64, 0x03, 0x35, 0x91, 0xc2,
	0xf5, 0xb1, 0xab, 0xbb, 0x3e, 0x98, 0xcc, 0x99, 0x2a, 0x9c, 0x1c, 0x36, 0x2c, 0x8f, 0x66, 0x61,
	0x98, 0x9b, 0xe4, 0x9b, 0x92, 0x36, 0x75, 0x98, 0x60, 0x97, 0x20, 0x75, 0x2b, 0x96, 0x91, 0x0c,
	0xd0, 0xd4, 0x55, 0x89, 0xb9, 0x05, 0xa9, 0x1b, 0xf1, 0x87, 0xa8, 0x17, 0xf5, 0x1c, 0x2a, 0xd9,
	0xff, 0x1b, 0xba, 0x8e, 0x9c, 0x7d, 0x1d, 0xef, 0x68, 0xfb, 0xd5, 0x32, 0xf7, 0xeb, 0x62, 0x8d,
	0x2f, 0xcb, 0xd8, 0x13, 0xfb, 0x1d, 0x58, 0xb8, 0x55, 0xda, 0x73, 0xcb, 0x1c, 0x63, 0xb7, 0xe2,
	0x43, 0xd3, 0xbd, 0x65, 0x9f, 0x87, 0xbe, 0x1a, 0x4e, 0xd8, 0x1f, 0xed, 0x39, 0xce, 0x8d, 0xdb,
	0xd4, 0xce, 0x29, 0x7a, 0xd8, 0x0e, 0xf4, 0x6e, 0x37, 0x10, 0x90, 0x55, 0x25, 0xa0, 0x4b, 0x65,
	0x07, 0x1b, 0x65, 0x3a, 0x98, 0x6e, 0xb5, 0x97, 0x60, 0xe1, 0xad, 0x12, 0x69, 0x59, 0x26, 0x69,
	0xed, 0xea, 0xae, 0x33, 0x9a, 0x52, 0xe1, 0x30, 0xfb, 0x56, 0x0b, 0x3a, 0x78, 0xc5, 0x03, 0x99,
	0x43, 0x39, 0x50, 0x3b, 0x0e, 0x7e, 0x8b, 0x51, 0x55, 0xec, 0x5a, 0xf6, 0x54, 0x45, 0xf6, 0x15,
	0x58, 0x55, 0x19, 0xcb, 0x98, 0x05, 0xaa, 0xd6, 0xe3, 0x23, 0x8d, 0x69, 0x24, 0xd8, 0xf8, 0x8e,
	0x68, 0xeb, 0x94, 0xba, 0xb2, 0x2f, 0xa9, 0xb0, 0xba, 0x37, 0xc4, 0xeb, 0x2f, 0xe8, 0x6b, 0x6a,
	0xd6, 0xdf, 0x11, 0xdf, 0x97, 0xb1, 0xa9, 0x63, 0x76, 0x2c, 0x99, 0x95, 0x9d, 0x3a, 0xb3, 0x12,
	0xa5, 0x78, 0xb7, 0x50, 0x27, 0xec, 0xcf, 0xc1, 0x92, 0x36, 0x62, 0x91, 0x34, 0x61, 0xe9, 0x89,
	0xab, 0xdb, 0xd0, 0x95, 0xbf, 0x41, 0x0b, 0x41, 0x25, 0x3b, 0x81, 0x65, 0x7d, 0x6a, 0xf2, 0x82,
	0x8c, 0x9c, 0x9c, 0xb6, 0x9a, 0x06, 0xac, 0x21, 0x8d, 0x56, 0xe8, 0x71, 0xd4, 0x4a, 0xad, 0xb9,
	0x3c, 0x03, 0xca, 0x60, 0xfb, 0x3f, 0xbb, 0xb0, 0xa9, 0xdc, 0x87, 0xaf, 0xc5, 0x9e, 0xef, 0xf0,
	0x6f, 0xce, 0x78, 0x3a, 0x2f, 0x53, 0x6c, 0x17, 0xfa, 0x41, 0xc6, 0x27, 0xd2, 0x56, 0x20, 0x1a,
	0xc8, 0x01, 0x0d, 0x4e, 0xad, 0x76, 0xa3, 0x53, 0xab, 0x26, 0xdb, 0x62, 0xa1, 0x3e, 0xdb, 0xc2,
	0x83, 0xed, 0x72, 0x6a, 0x19, 0xe5, 0x8e, 0x75, 0x4e, 0x9b, 0xa3, 0xd6, 0x30, 0x10, 0x7b, 0xad,
	0x40, 0x46, 0x65, 0x93, 0x9e, 0xfc, 0xb6, 0x43, 0xb9, 0xab, 0x3e, 0x9a, 0xca, 0xc8, 0x3d, 0xf9,
	0x9d, 0x87, 0x72, 0x57, 0x74, 0x2a, 0x60, 0xd0, 0x3f, 0xf7, 0xc8, 0x91, 0x72, 0x69, 0x42, 0x6b,
	0x6f, 0xfa, 0xf4, 0x4f, 0xe4, 0x0a, 0x16, 0x3f, 0x5b, 0xbd, 0xe9, 0x63, 0xf8, 0xf9, 0xa0, 0xec,
	0xe7, 0xdb, 0x81, 0x1e, 0x79, 0x65, 0x54, 0x2e, 0x69, 0x5e, 0x96, 0xd1, 0x14, 0x8c, 0x2d, 0x65,
	0xf1, 0x03, 0x1e, 0x91, 0xcf, 0xc8, 0x80, 0x51, 0xf2, 0xbd, 0x28, 0x27, 0x7c, 0x94, 0xf0, 0xf4,
	0x90, 0xda, 0xca, 0x93, 0xab, 0xb6, 0xae, 0x7a, 0x73, 0x63, 0xb5, 0xee, 0xe6, 0xc6, 0x65, 0x58,
	0xa3, 0xfc, 0xd7, 0xfc, 0x1a, 0xc6, 0x9a, 0x34, 0x65, 0x4a, 0xe0, 0x39, 0xb7, 0x2a, 0xd6, 0x4f,
	0x79, 0x97, 0x69, 0xa3, 0xce, 0xad, 0x2d, 0x58, 0xe9, 0x88, 0x27, 0xa9, 0xe0, 0x77, 0x79, 0x1a,
	0xaa, 0xa2, 0xfd, 0x3b, 0x16, 0x6c, 0x99, 0xcc, 0x47, 0xe9, 0xb7, 0x9f, 0x86, 0x85, 0x93, 0x5c,
	0x72, 0xd2, 0x2e, 0x48, 0x39, 0xd8, 0xe1, 0x09, 0x6f, 0xe2, 0xe9, 0x77, 0xfb, 0xda, 0xe6, 0xdd,
	0x3e, 0xfb, 0x29, 0x38, 0xf7, 0x0a, 0xcf, 0xca, 0xae, 0x71, 0x29, 0x25, 0xec, 0x5f, 0xb2, 0x60,
	0xa7, 0xae, 0x96, 0xa6, 0xf1, 0x62, 0x3e, 0x8d, 0xd3, 0xb8, 0xdd, 0xe5, 0x4c, 0x6e, 0xa8, 0xf4,
	0x0b, 0x99, 0x81, 0x3a, 0x7f, 0x22, 0x94, 0x71, 0xfc, 0x82, 0x81, 0x2b, 0x31, 0xe7, 0xb1, 0x12,
	0xcd, 0xfe, 0x65, 0x73, 0x16, 0x79, 0x3f, 0x9a, 0xc5, 0x67, 0xa0, 0x83, 0xbf, 0x7d, 0x4c, 0x44,
	0x45, 0x97, 0x05, 0xb2, 0x03, 0xfb, 0x14, 0x2c, 0x88, 0xdf, 0xa0, 0xbd, 0x38, 0x49, 0x47, 0x6c,
	0x6f, 0x7f, 0xb7, 0x0d, 0xe7, 0x5e, 0xf6, 0xfd, 0xfa, 0x45, 0x9f, 0xa3, 0x71, 0x94, 0x14, 0x81,
	0x56, 0x55, 0x11, 0xd0, 0x8e, 0xf6, 0x76, 0x45, 0x6b, 0x24, 0xed, 0x70, 0xc1, 0xd0, 0x0e, 0x75,
	0x4d, 0xaf, 0x33, 0x4f, 0xd3, 0xeb, 0x96, 0x35, 0x3d, 0x53, 0xbf, 0x5e, 0xac, 0xe8, 0xd7, 0x17,
	0x61, 0x69, 0x12, 0xf8, 0x7e, 0x48, 0x99, 0x34, 0xe4, 0xd4, 0xd4, 0x40, 0xa6, 0x06, 0xde, 0x2f,
	0x6b, 0xe0, 0xeb, 0xd0, 0x1e, 0x79, 0x8f, 0x48, 0x26, 0x89, 0x4f, 0x53, 0x93, 0x5d, 0x6a, 0xd4,
	0x64, 0x97, 0x75, 0x4d, 0x16, 0xe5, 0x6a, 0xe6, 0x66, 0xb1, 0x52, 0x2a, 0x51, 0xf6, 0xf4, 0x9c,
	0x12, 0x14, 0x49, 0xbd, 0x6e, 0x4f, 0x7e, 0x46, 0xa4, 0xfe, 0x03, 0x0b, 0xb6, 0x1d, 0x3e, 0x9d,
	0xa5, 0x87, 0x2f, 0x8f, 0x46, 0x41, 0x18, 0x78, 0x19, 0x57, 0xf4, 0xa1, 0xf4, 0x12, 0x4b, 0x73,
	0x73, 0xec, 0x42, 0x7f, 0x94, 0xc4, 0x13, 0xd7, 0xf7, 0x32, 0xae, 0x5c, 0x2b, 0x39, 0x40, 0x50,
	0x85, 0x98, 0xa9, 0xa8, 0x93, 0x27, 0xb5, 0x2a, 0xb2, 0x73, 0x18, 0x50, 0x3c, 0x0a, 0xfc, 0xfc,
	0x5c, 0x5e, 0xa4, 0x32, 0xa9, 0xdc, 0x61, 0x3c, 0xa6, 0x0c, 0x3d, 0x2a, 0xa1, 0xce, 0x13, 0x4c,
	0x82, 0x8c, 0xd2, 0xa8, 0x65, 0xc1, 0xfe, 0xb1, 0x05, 0x67, 0x2b, 0xf8, 0xe6, 0x0c, 0x76, 0x36,
	0x9d, 0x0d, 0x87, 0x42, 0x23, 0x40, 0xdf, 0x81, 0x54, 0x87, 0xdc, 0xc0, 0x97, 0xce, 0x0a, 0xbc,
	0x90, 0x52, 0x5b, 0xcd, 0x5e, 0x80, 0xad, 0x91, 0x17, 0x84, 0x95, 0x6e, 0xad, 0xf9, 0xdd, 0xb6,
	0xa1, 0x2b, 0x30, 0xe1, 0x4a, 0x31, 0xa1, 0x92, 0x4c, 0x04, 0xc4, 0x2e, 0x2a, 0x89, 0x9c, 0x8a,
	0x62, 0x4d, 0x47, 0x2a, 0x4f, 0xa9, 0xed, 0xe0, 0xb7, 0xfd, 0xc3, 0x36, 0xec, 0x7e, 0x0d, 0x63,
	0xee, 0x0d, 0x8c, 0x6a, 0x1a, 0xa0, 0x56, 0xc5, 0x00, 0xfd, 0x10, 0xe6, 0x87, 0xce, 0xc8, 0x0b,
	0x4d, 0x8c, 0xdc, 0x69, 0x64, 0xe4, 0xee, 0x3c, 0x46, 0x5e, 0x9c, 0xcf, 0xc8, 0xbd, 0xe3, 0x18,
	0xb9, 0x7f, 0x0c, 0x23, 0x43, 0x03, 0x23, 0x2f, 0x35, 0x30, 0xf2, 0x72, 0x23, 0x23, 0xaf, 0xe8,
	0x8c, 0x7c, 0x15, 0x36, 0x54, 0x06, 0x44, 0xc1, 0xcb, 0x32, 0xc7, 0xa8, 0x5a, 0x61, 0xff, 0x8a,
	0x05, 0x4f, 0x37, 0x6c, 0xde, 0xcf, 0x88, 0xa3, 0x5f, 0x82, 0xdd, 0xdb, 0x3c, 0xe4, 0x4f, 0x4a,
	0x4d, 0x38, 0xa3, 0x86, 0x01, 0x7e, 0x46, 0x33, 0x3a, 0x0b, 0x67, 0x5e, 0xe1, 0x99, 0xb4, 0xbf,
	0xd3, 0xd7, 0x82, 0x34, 0x53, 0x6a, 0xc3, 0xcf, 0xc1, 0x76, 0xb9, 0x82, 0x50, 0x7c, 0xce, 0x40,
	0xf1, 0xe9, 0x86, 0x5f, 0x91, 0x3d, 0x3f, 0x04, 0x66, 0x9f, 0x86, 0xcd, 0x57, 0x78, 0x26, 0x8c,
	0x5d, 0x1d, 0xaf, 0xe3, 0x0d, 0x69, 0xfb, 0x6d, 0xd8, 0x32, 0x3b, 0x12, 0xde, 0xfb, 0x06, 0xde,
	0x4f, 0x35, 0xe0, 0x20, 0xfa, 0x7d, 0x08, 0xac, 0xdf, 0x44, 0x35, 0xa5, 0x94, 0xc1, 0x9d, 0x1e,
	0x6f, 0xb1, 0x99, 0x94, 0xd3, 0xaa, 0x50, 0xce, 0xff, 0x81, 0xa7, 0x6a, 0xc7, 0x3d, 0x15, 0xd9,
	0x94, 0x93, 0xea, 0xb1, 0x8f, 0xfd, 0x6d, 0x0b, 0x57, 0xba, 0xb8, 0x82, 0x4d, 0xc8, 0x62, 0x4c,
	0xcb, 0xc7, 0x4c, 0x08, 0xed, 0x05, 0x08, 0x89, 0x77, 0x4d, 0x8d, 0x60, 0x79, 0x69, 0x18, 0x90,
	0x99, 0x9b, 0x5b, 0x02, 0xa6, 0xd9, 0xd0, 0x56, 0x61, 0x69, 0x0d, 0x68, 0xff, 0x5a, 0x0f, 0x37,
	0x4d, 0xc3, 0x81, 0x26, 0x56, 0x7e, 0x80, 0xc2, 0xaa, 0x79, 0x80, 0xc2, 0x30, 0x36, 0x34, 0xcf,
	0x89, 0x01, 0xcc, 0x73, 0x45, 0xf5, 0x3b, 0x22, 0x39, 0xa0, 0x7c, 0x6b, 0x77, 0xa1, 0x7a, 0x6b,
	0xf7, 0x3a, 0x6c, 0xca, 0x49, 0x4b, 0xf3, 0x6b, 0xf8, 0x58, 0xbf, 0x9a, 0x58, 0x57, 0xa5, 0x5f,
	0x3d, 0x94, 0x61, 0x27, 0x14, 0xdb, 0x1d, 0xa7, 0x04, 0xd5, 0x9f, 0xa7, 0x30, 0x42, 0x56, 0x52,
	0x8a, 0xd7, 0xd6, 0xd5, 0x5c, 0x6b, 0xec, 0xd7, 0x5e, 0x6b, 0xd4, 0xc6, 0x96, 0x10, 0x1a, 0x1b,
	0xcc, 0xb1, 0xf5, 0xba, 0xca, 0x83, 0x1e, 0x4b, 0x35, 0x0f, 0x7a, 0xfc, 0xbf, 0xe2, 0xa1, 0x8e,
	0x22, 0x96, 0x10, 0x8d, 0x62, 0x3c, 0x09, 0xe6, 0x24, 0x84, 0x57, 0x43, 0x1f, 0x4e, 0xfd, 0x40,
	0xec, 0xeb, 0x45, 0x20, 0x43, 0x39, 0xe9, 0xc5, 0xf8, 0x32, 0xc9, 0xf5, 0xf2, 0xfc, 0xf1, 0x8b,
	0x20, 0x80, 0x53, 0x37, 0x08, 0xbb, 0x05, 0x8b, 0xca, 0xf5, 0xb4, 0x8a, 0x1c, 0xd3, 0xe4, 0x98,
	0x90, 0x3e, 0xa2, 0x97, 0x47, 0x19, 0x4f, 0xee, 0x49, 0x35, 0xc3, 0x51, 0x3d, 0xd9, 0x57, 0x60,
	0xc9, 0x9b, 0x4e, 0x73, 0x1f, 0xd6, 0xda, 0x69, 0x07, 0xd2, 0x7b, 0x0b, 0x8d, 0xe0, 0x28, 0xe0,
	0x0f, 0xb9, 0x8f, 0x06, 0x6d, 0xcf, 0xa1, 0x12, 0xbb, 0x03, 0x2b, 0x79, 0x1e, 0x0e, 0x72, 0xf8,
	0xc6, 0x5c, 0x73, 0x53, 0xbd, 0x53, 0x80, 0xe6, 0x26, 0x60, 0x4f, 0xd7, 0x94, 0x65, 0xec, 0xc4,
	0xb2, 0x6c, 0xce, 0x1d, 0x81, 0xcd, 0xb9, 0x77, 0x04, 0xbe, 0x64, 0xa6, 0x88, 0x51, 0x60, 0xfd,
	0x09, 0x9e, 0x01, 0xb1, 0xbf, 0x0c, 0x03, 0xa9, 0x00, 0xa0, 0x60, 0x78, 0x13, 0x97, 0xe4, 0x09,
	0xc5, 0x93, 0xfd, 0x3a, 0x9c, 0xab, 0x19, 0x8b, 0xc4, 0x0c, 0x2a, 0x64, 0xc8, 0xa2, 0xf2, 0x40,
	0xa1, 0x52, 0xb3, 0x43, 0xd4, 0x7e, 0x13, 0x58, 0x75, 0x4f, 0x0d, 0xbd, 0xbe, 0x43, 0x7a, 0x7d,
	0xee, 0x60, 0x6c, 0xd5, 0x3b, 0x18, 0xdb, 0x86, 0x83, 0xf1, 0x1e, 0x1e, 0xc8, 0xf7, 0xd0, 0xa9,
	0x72, 0x5f, 0xc8, 0x46, 0x35, 0xdf, 0x5c, 0xbc, 0x5a, 0x73, 0xc5, 0x6b, 0xab, 0x4e, 0xbc, 0xfe,
	0xbe, 0x85, 0xa7, 0xb9, 0x31, 0x2a, 0xcd, 0xfc, 0x43, 0x0c, 0x8b, 0x57, 0x71, 0x1f, 0x4d, 0x03,
	0xf4, 0xbb, 0x90, 0x02, 0x5c, 0x00, 0x0a, 0x92, 0x5b, 0x38, 0xf9, 0xf1, 0xf9, 0xad, 0x16, 0xac,
	0x4b, 0x2c, 0xdf, 0xc8, 0xa6, 0x4f, 0x7a, 0x10, 0xd5, 0xc6, 0xfd, 0x5a, 0xa7, 0x8c, 0xfb, 0xb5,
	0x1b, 0xe3, 0x7e, 0xe2, 0xac, 0x50, 0x49, 0x5a, 0xe2, 0x04, 0x90, 0x36, 0x97, 0x0e, 0x2a, 0x16,
	0xb5, 0x33, 0x77, 0x51, 0xbb, 0x75, 0x7b, 0xf5, 0x13, 0x0b, 0x36, 0xb4, 0x25, 0xa0, 0x6d, 0x3a,
	0xed, 0x1a, 0x54, 0xcf, 0x9e, 0xd6, 0xa9, 0xce, 0x9e, 0xf6, 0x9c, 0xb3, 0xe7, 0x49, 0x36, 0xd6,
	0x83, 0x95, 0x5b, 0xb1, 0xaf, 0x6d, 0xea, 0x0d, 0xd8, 0xca, 0xef, 0x34, 0xe8, 0x77, 0x56, 0xe4,
	0x94, 0x6a, 0xeb, 0x4c, 0x93, 0xa3, 0x55, 0x32, 0x39, 0xec, 0x03, 0x58, 0x55, 0x3f, 0xf1, 0xa4,
	0x5c, 0x2d, 0xd4, 0x30, 0x19, 0x60, 0xc0, 0x9d, 0x95, 0x34, 0xa0, 0x41, 0xec, 0x7f, 0xb3, 0x60,
	0x53, 0xc9, 0xd8, 0xfb, 0x85, 0xc5, 0x2a, 0x96, 0xdb, 0x34, 0x60, 0x89, 0x9d, 0x4a, 0x50, 0x41,
	0x3a, 0x1e, 0xd9, 0xd6, 0x45, 0x6c, 0x41, 0x07, 0x49, 0xd2, 0x11, 0x2a, 0x48, 0x5b, 0x91, 0x8e,
	0x50, 0x3e, 0xd6, 0xa1, 0x9d, 0x79, 0x8f, 0x88, 0xd4, 0xc4, 0x27, 0xe6, 0x0b, 0xa9, 0xa0, 0x1b,
	0x5d, 0x99, 0xce, 0x23, 0x6d, 0x2a, 0xee, 0xd9, 0xd5, 0xe2, 0x9e, 0x3b, 0xe4, 0x25, 0x88, 0x86,
	0xca, 0xcf, 0x93, 0x97, 0xe5, 0x15, 0xba, 0x59, 0x94, 0x25, 0x8f, 0x49, 0xe7, 0x50, 0x45, 0xfb,
	0x0f, 0x2d, 0x58, 0x56, 0xf3, 0xc5, 0x3c, 0xbe, 0x93, 0x4e, 0x94, 0x12, 0x9c, 0x5a, 0x45, 0x82,
	0x53, 0xdd, 0xcd, 0x23, 0x99, 0x64, 0x84, 0xd9, 0x49, 0x34, 0xb7, 0xbc, 0x5c, 0x64, 0xcb, 0x11,
	0x0f, 0xc9, 0xc4, 0xa9, 0x1d, 0xe8, 0x7d, 0x73, 0xe6, 0x45, 0x59, 0x31, 0xbd, 0xbc, 0x6c, 0x7f,
	0xd7, 0x82, 0x75, 0x85, 0x6c, 0x9e, 0x82, 0xfa, 0xb4, 0xfe, 0xb2, 0x49, 0x15, 0xcf, 0x5d, 0x23,
	0xef, 0xb0, 0x5c, 0xfb, 0xb4, 0xfe, 0xd4, 0x49, 0xb5, 0xfa, 0x19, 0x4c, 0x86, 0x71, 0xd3, 0x61,
	0x9c, 0x3f, 0x7b, 0x56, 0x6a, 0x62, 0xff, 0x6b, 0xab, 0x20, 0x18, 0x79, 0x5e, 0xdc, 0xe1, 0x41,
	0xe8, 0xb3, 0x55, 0x68, 0xe5, 0x6b, 0xd7, 0x3a, 0x11, 0x61, 0x0c, 0x60, 0x31, 0xe1, 0x47, 0x3c,
	0xca, 0xb1, 0x51, 0xc5, 0x53, 0x12, 0xc7, 0x36, 0x74, 0x87, 0xf1, 0x6c, 0x9a, 0x67, 0x00, 0x50,
	0x49, 0xc0, 0x8d, 0xcc, 0x19, 0x2a, 0x69, 0x07, 0x55, 0x4f, 0x3f, 0xa8, 0x84, 0x94, 0x0d, 0x63,
	0x21, 0x14, 0xa6, 0x71, 0x10, 0x65, 0xa9, 0x3b, 0x4b, 0xb9, 0x52, 0x42, 0xab, 0x15, 0x52, 0xfb,
	0x0e, 0xa6, 0x32, 0x4d, 0x04, 0xd4, 0x4d, 0x2d, 0x02, 0x48, 0xbb, 0x48, 0x14, 0x62, 0x52, 0x36,
	0x55, 0x51, 0xd4, 0xf0, 0x47, 0x53, 0x8c, 0x42, 0x4b, 0x1f, 0x83, 0x2a, 0xe2, 0x0d, 0xee, 0x8c,
	0x4f, 0x51, 0x21, 0x6c, 0x3b, 0xf8, 0x6d, 0xdf, 0x84, 0x6d, 0xb5, 0xd8, 0xf8, 0xdc, 0x16, 0x9f,
	0xce, 0xb2, 0x9c, 0xad, 0x10, 0x1d, 0x75, 0xcc, 0x61, 0x21, 0x3f, 0xae, 0x5b, 0x5a, 0x78, 0xf0,
	0xcb, 0x1a, 0x11, 0x29, 0x5a, 0x2c, 0x76, 0xab, 0x8d, 0xbb, 0x25, 0x7e, 0x3b, 0x9c, 0x8d, 0x55,
	0x3f, 0xf1, 0x5d, 0x47, 0xdf, 0xf6, 0xcb, 0x70, 0x56, 0x8d, 0xf5, 0x0a, 0x3e, 0xfc, 0x77, 0xdf,
	0x1b, 0xdf, 0xf5, 0x12, 0x6f, 0x92, 0x0a, 0x46, 0xc2, 0xd7, 0xa3, 0x30, 0xd3, 0x54, 0xf3, 0x05,
	0x96, 0xa0, 0xf6, 0x3f, 0x2c, 0xc0, 0x9a, 0x1a, 0x83, 0xa2, 0x40, 0xb5, 0x71, 0x72, 0x89, 0x62,
	0x2b, 0x27, 0xa8, 0x9c, 0x7d, 0xa4, 0x10, 0x23, 0xf6, 0xd9, 0x82, 0x0e, 0xa6, 0xc8, 0xaa, 0x6b,
	0xce, 0x58, 0x30, 0xd8, 0xb0, 0x53, 0x62, 0xc3, 0x01, 0x2c, 0x1e, 0x79, 0x49, 0xe0, 0x45, 0xea,
	0x85, 0x01, 0x55, 0x34, 0x58, 0x51, 0x1a, 0x36, 0x79, 0x59, 0x23, 0xb2, 0x9e, 0x41, 0x64, 0x9a,
	0x01, 0xdc, 0xaf, 0x5c, 0x5d, 0xc4, 0x4f, 0xfe, 0x28, 0xcf, 0xb0, 0x68, 0x3b, 0x3a, 0x88, 0xbd,
	0x05, 0x6b, 0x58, 0x4c, 0xf2, 0x5d, 0xa5, 0x1b, 0x79, 0x7b, 0xc7, 0x28, 0xc3, 0x26, 0x29, 0x38,
	0xe5, 0x51, 0xea, 0x72, 0x7c, 0x97, 0xeb, 0x73, 0x7c, 0xab, 0x59, 0xc3, 0x2b, 0xb5, 0x59, 0xc3,
	0x66, 0xf6, 0xf1, 0x6a, 0x25, 0xfb, 0xb8, 0x94, 0x2b, 0xbc, 0x56, 0xcd, 0x15, 0x7e, 0xc5, 0xc8,
	0x7d, 0x5e, 0x9f, 0x9b, 0x0f, 0x56, 0x26, 0x57, 0x23, 0x49, 0xba, 0x94, 0x5e, 0xbc, 0x21, 0xfd,
	0x25, 0x1a, 0xc8, 0xfe, 0x3d, 0x4d, 0x6c, 0xde, 0x9d, 0x89, 0x63, 0x37, 0xe5, 0xec, 0x75, 0x58,
	0x26, 0x21, 0x26, 0x43, 0xd7, 0xd6, 0x5c, 0xb3, 0xae, 0x46, 0xc2, 0x39, 0x4b, 0xb2, 0xbf, 0x0c,
	0x93, 0xdf, 0xd4, 0x2e, 0xbd, 0xcc, 0xbf, 0xe0, 0x51, 0xa2, 0xf5, 0xe2, 0xe2, 0x8b, 0x81, 0x67,
	0x7e, 0x9b, 0xe6, 0x7f, 0x20, 0x9e, 0xdf, 0xb3, 0x60, 0xa3, 0xf2, 0x5e, 0x1c, 0xbb, 0x05, 0xbd,
	0x29, 0x2d, 0x2e, 0x21, 0x79, 0xdc, 0x76, 0xaa, 0xbd, 0x70, 0xf2, 0x8e, 0x62, 0x90, 0xd2, 0x6b,
	0x88, 0xc7, 0xd2, 0x84, 0x7a, 0x0e, 0x31, 0xef, 0x68, 0xff, 0xa8, 0x0d, 0x67, 0x6a, 0xdf, 0xb3,
	0x63, 0x77, 0xa0, 0x9f, 0xbf, 0x68, 0x47, 0x48, 0x5e, 0x3e, 0xe9, 0x83, 0x78, 0x4e, 0xd1, 0x15,
	0x9d, 0xbf, 0x47, 0xea, 0x46, 0x60, 0xdf, 0x91, 0x85, 0x9a, 0xe8, 0x78, 0xbb, 0x36, 0x3a, 0xfe,
	0x0d, 0xd8, 0x90, 0xaf, 0xa4, 0xba, 0x99, 0x37, 0x76, 0xf1, 0x59, 0x84, 0x94, 0x54, 0xcd, 0x6b,
	0xc7, 0x60, 0x53, 0x12, 0xb2, 0x4e, 0x75, 0x20, 0xbc, 0xb1, 0xe7, 0x8d, 0x79, 0x71, 0x2b, 0x40,
	0x15, 0x9b, 0xaf, 0x85, 0xcc, 0x52, 0x9e, 0xe4, 0x79, 0xff, 0x54, 0x12, 0x2c, 0x1e, 0xc6, 0xe3,
	0x20, 0x92, 0xd6, 0x02, 0x39, 0xdc, 0x0b, 0x48, 0xcd, 0xb5, 0x0d, 0x72, 0xd0, 0x94, 0xae, 0x6d,
	0x5c, 0xcc, 0x6f, 0x0c, 0x69, 0x47, 0xa3, 0x0e, 0xc2, 0x64, 0x8e, 0xa9, 0x2b, 0x21, 0x2a, 0x62,
	0x96, 0x03, 0xec, 0x9f, 0xb6, 0x0a, 0x0d, 0xed, 0x36, 0x65, 0xd1, 0x1f, 0x05, 0xfc, 0x21, 0xe5,
	0x0f, 0xe3, 0xb7, 0x98, 0x74, 0xc4, 0x1f, 0x7e, 0x2d, 0xa5, 0x77, 0x32, 0x7a, 0x8e, 0x2a, 0xb2,
	0xd7, 0x60, 0x49, 0xd3, 0x58, 0xe8, 0xaa, 0xd4, 0x71, 0xec, 0xa3, 0x69, 0xbe, 0x8e, 0xde, 0x9d,
	0x7d, 0x16, 0x3a, 0x41, 0xc6, 0x27, 0x2a, 0xa1, 0xe7, 0x38, 0x2f, 0x05, 0xde, 0x6c, 0x93, 0x3d,
	0x90, 0xb4, 0xd5, 0x3d, 0xb2, 0xce, 0xc9, 0x48, 0xbb, 0x7a, 0x9f, 0xec, 0x3e, 0x1d, 0xaa, 0xf8,
	0x24, 0x23, 0xba, 0x4b, 0xba, 0x4f, 0xf0, 0xac, 0x63, 0x69, 0x0c, 0x3b, 0x85, 0x33, 0x32, 0x2c,
	0xf6, 0xc6, 0xdd, 0x5b, 0xf4, 0xe0, 0xae, 0xb4, 0x61, 0x76, 0xa1, 0x4f, 0xa6, 0x17, 0x85, 0xc1,
	0xda, 0x4e, 0x01, 0x90, 0x0a, 0xdb, 0xc1, 0x2c, 0x08, 0xd5, 0xc5, 0x19, 0x55, 0x54, 0xd7, 0x84,
	0x42, 0x9f, 0x28, 0xa3, 0x5d, 0x5c, 0x13, 0x52, 0x30, 0xfb, 0xfb, 0x79, 0xf0, 0xb0, 0xf8, 0xd5,
	0x13, 0x3c, 0xf3, 0xdb, 0x6c, 0xda, 0x5c, 0x82, 0x15, 0xf9, 0xfe, 0x9f, 0x4b, 0xd9, 0x07, 0x6d,
	0x0c, 0xc0, 0x99, 0x40, 0x76, 0x05, 0xd6, 0xe9, 0x6d, 0xdd, 0x62, 0x66, 0x0b, 0x38, 0xb3, 0x0a,
	0xfc, 0xc6, 0xdf, 0x6d, 0xc1, 0x9a, 0x92, 0x2f, 0xea, 0x7a, 0xee, 0xf7, 0x2c, 0x60, 0xd5, 0x6c,
	0x03, 0x76, 0xbd, 0x61, 0x03, 0x1a, 0xd3, 0x16, 0x76, 0x9e, 0x3b, 0x45, 0x0f, 0xb9, 0x2e, 0xb6,
	0xfd, 0x9d, 0x9f, 0xfc, 0xd3, 0xaf, 0xb6, 0x76, 0xd9, 0xce, 0x7e, 0xf1, 0x88, 0x33, 0x35, 0xdd,
	0x53, 0x69, 0x8b, 0x7f, 0x60, 0xe2, 0x47, 0x71, 0xfd, 0x93, 0xe0, 0x67, 0xa6, 0x2a, 0x9c, 0x04,
	0xbf, 0x52, 0x92, 0x82, 0x7d, 0x15, 0xf1, 0x7b, 0x96, 0x5d, 0xaa, 0xc1, 0x8f, 0x12, 0x92, 0xf6,
	0xdf, 0x26, 0x7d, 0xe8, 0x1d, 0xf6, 0x7d, 0x0b, 0x58, 0x35, 0x98, 0xdd, 0x88, 0x69, 0x63, 0x2e,
	0x42, 0x23, 0xa6, 0xcd, 0x91, 0x72, 0xfb, 0xa3, 0x88, 0xe9, 0x05, 0x7b, 0xce, 0x4a, 0xbe, 0x68,
	0x5d, 0x61, 0xbf, 0x6e, 0xc1, 0x5a, 0x29, 0x60, 0xcc, 0xf6, 0x1a, 0xe3, 0x41, 0x75, 0x81, 0xf0,
	0x9d, 0x6b, 0x27, 0x6d, 0xde, 0x8c, 0x59, 0x82, 0x4d, 0xf7, 0x94, 0xad, 0xc4, 0x05, 0x66, 0x7f,
	0x6a, 0xc1, 0x99, 0xda, 0xd0, 0x21, 0xfb, 0x64, 0xc3, 0x0f, 0xce, 0x8b, 0x12, 0xef, 0x3c, 0x7f,
	0xba, 0x4e, 0x84, 0xeb, 0x0d, 0xc4, 0xf5, 0xea, 0xce, 0xc7, 0x9a, 0x57, 0x71, 0xff, 0xed, 0x22,
	0xc6, 0xf3, 0x8e, 0x40, 0xfc, 0x4f, 0x2c, 0x38, 0x53, 0x1b, 0x21, 0x6c, 0x44, 0x7c, 0x5e, 0x40,
	0xb2, 0x11, 0xf1, 0xb9, 0x41, 0x48, 0x7b, 0x1f, 0x11, 0xff, 0xf8, 0x95, 0x93, 0x22, 0xce, 0x7e,
	0xc1, 0x82, 0x55, 0x33, 0x5a, 0xc8, 0xae, 0x36, 0xf3, 0x47, 0x35, 0xda, 0xb8, 0xb3, 0x77, 0xc2,
	0xd6, 0x84, 0xe0, 0x39, 0x44, 0x70, 0x93, 0x6d, 0xe8, 0x54, 0x80, 0xcd, 0xd8, 0xbb, 0x16, 0x2c,
	0xeb, 0xe1, 0x3f, 0x76, 0xa5, 0x79, 0xe8, 0x72, 0x70, 0x71, 0xe7, 0x13, 0x27, 0x6a, 0x4b, 0x48,
	0x7c, 0x0c, 0x91, 0x78, 0x86, 0x5d, 0xa8, 0x20, 0xb1, 0xff, 0xb6, 0x16, 0x8f, 0x7c, 0x87, 0x7d,
	0xc7, 0x2a, 0x1e, 0xca, 0x7e, 0x2d, 0xf6, 0xfc, 0x46, 0x94, 0x6a, 0x92, 0x3c, 0x1b, 0x51, 0xaa,
	0xcb, 0x49, 0x53, 0xeb, 0x62, 0xaf, 0x16, 0x28, 0x09, 0x6b, 0x42, 0x10, 0xd6, 0x6f, 0x4b, 0xc1,
	0x57, 0x7e, 0x5b, 0x6a, 0x8e, 0x18, 0x6b, 0x08, 0x62, 0xee, 0xdc, 0x38, 0x4d, 0x97, 0x66, 0xd1,
	0xac, 0x1c, 0x12, 0x7b, 0x2a, 0x79, 0xf4, 0x3b, 0x16, 0xf4, 0xf3, 0x37, 0xed, 0x4f, 0xb5, 0x46,
	0x4d, 0x4a, 0x6a, 0xe5, 0x85, 0x7c, 0xfb, 0x02, 0xe2, 0x71, 0xce, 0xde, 0xd2, 0xf0, 0xf0, 0x8e,
	0xf8, 0x1e, 0x1e, 0x6a, 0x24, 0xd2, 0x96, 0xf5, 0x40, 0xe4, 0x3c, 0xf2, 0x29, 0x47, 0x4c, 0xe7,
	0x91, 0x4f, 0x25, 0xb2, 0x69, 0x5f, 0x43, 0x54, 0x2e, 0xb3, 0x67, 0x35, 0x54, 0x64, 0x14, 0x61,
	0xff, 0xed, 0xaa, 0x43, 0xf7, 0x1d, 0xf6, 0x03, 0x0b, 0x36, 0x2a, 0x01, 0x0c, 0xb6, 0x3f, 0x57,
	0x32, 0x55, 0xc3, 0x26, 0x3b, 0xd7, 0x4f, 0xde, 0x81, 0x10, 0x7d, 0x01, 0x11, 0xdd, 0xdf, 0xd9,
	0x3b, 0x19, 0xa2, 0xfb, 0x14, 0xb9, 0x7a, 0x57, 0xca, 0x04, 0x2d, 0xe6, 0x30, 0x4f, 0x26, 0x54,
	0x03, 0x1e, 0xf3, 0x64, 0x42, 0x4d, 0x20, 0xc3, 0x7e, 0x06, 0xd1, 0x7c, 0xca, 0xde, 0xd6, 0xd0,
	0xc4, 0x66, 0x7b, 0xe8, 0x57, 0x27, 0x1e, 0xe8, 0xe7, 0xae, 0x75, 0xd6, 0xa4, 0x5f, 0x96, 0xe3,
	0x0f, 0xcd, 0xe4, 0x55, 0xf6, 0xd2, 0xdb, 0xff, 0x0b, 0x71, 0xf8, 0xac, 0xfd, 0xfc, 0x09, 0x97,
	0x4a, 0x46, 0x17, 0xf6, 0x64, 0xe8, 0x40, 0x60, 0x98, 0x42, 0x57, 0xfa, 0xb0, 0x59, 0xd3, 0xfd,
	0x59, 0xc3, 0x8b, 0xbe, 0xf3, 0xd1, 0x63, 0x5a, 0x11, 0x5e, 0xbb, 0x88, 0xd7, 0xb6, 0xad, 0xc9,
	0xcb, 0x61, 0xec, 0xef, 0xc5, 0xd9, 0x54, 0xfc, 0xe8, 0xbb, 0x16, 0xac, 0x93, 0xaa, 0x29, 0x70,
	0xbc, 0x1f, 0xbf, 0x71, 0xf7, 0x56, 0xe3, 0x5e, 0xd5, 0x6a, 0xc2, 0x3b, 0x7b, 0x27, 0x6c, 0xdd,
	0xcc, 0x86, 0xb8, 0x3c, 0xe9, 0x7e, 0x3c, 0x1d, 0xbe, 0x68, 0x5d, 0xb9, 0xf9, 0x85, 0xbf, 0x78,
	0xff, 0xbc, 0xf5, 0xe3, 0xf7, 0xcf, 0x5b, 0x3f, 0x7d, 0xff, 0xbc, 0xf5, 0xf5, 0x1b, 0xe3, 0x20,
	0x0b, 0xbd, 0x03, 0xf5, 0x1b, 0x51, 0xf1, 0x27, 0x1b, 0x41, 0x24, 0xa3, 0x03, 0x7b, 0xde, 0x34,
	0x48, 0xf7, 0xc6, 0x71, 0x3e, 0xde, 0x41, 0x17, 0xdb, 0x7c, 0xf2, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x46, 0x4b, 0x97, 0x06, 0xd1, 0x63, 0x00, 0x00,
}
