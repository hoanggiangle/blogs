// Code generated by protoc-gen-sendo. DO NOT EDIT.
// Author: Viet Tran. Software Architect - DC1
// source: checkout/checkout.proto

/*
Package checkout is a generated protocol buffer package.

It is generated from these files:
	checkout/checkout.proto

It has these top-level messages:
	SaveOrderResponse
	CheckoutData
	TotalOrderInfo
	TotalDetailItem
	LoyaltyInfo
	VoucherInfo
	PaymentInfo
	ProductInfo
	CurrentPayment
	CurrentPaymentData
	Payment
	BanksConfig
	BankInstallmentTerms
	InstallmentPlan
	ShippingCarrierShop
	ShippingCarrier
	ProductShippingInfo
	ShopInfo
	MerchantSupportConfig
	DiscountConfig
	MerchantService
	LoyaltyConfig
	ShopWareHouse
	ProductCheckout
	CustomerData
	ClientInfo
	Customer
	BadBuyerInfo
	ProductItem
	ImageResize
	ExtendedShippingPackage
	ProductOption
	PaymentTransferInfo
	PaymentWalletInfo
	BankTransferInfo
	CustomerAddress
	Region
	City
	District
	Ward
	Error
	ErrorAction
	InvalidField
	CheckoutLoadRequest
	CheckoutLoadResponse
	GetCustomerAddressRequest
	GetCustomerAddressResponse
	GetCustomerVoucherRequest
	GetCustomerVoucherResponse
	AddCustomerAddressRequest
	AddCustomerAddressResponse
	RepushAffiliateRequest
	RepushAffiliateResponse
	UpdateCustomerAddressRequest
	UpdateCustomerAddressResponse
	DeleteCustomerAddressRequest
	DeleteCustomerAddressResponse
	GetRegionsListRequest
	GetRegionsListResponse
	GetWardsListRequest
	GetWardsListResponse
	GetShippingCarriersRequest
	GetShippingCarriersResponse
	GetOrderInfoRequest
	GetOrderInfoResponse
	UpdateOrderViewedRequest
	UpdateOrderViewedResponse
	ActionAfterSuccess
	GetSenpayTokenRequest
	GetSenpayTokenResponse
	SenpayOtpRequest
	SenpayOtpResponse
	CodOtpRequest
	CodOtpResponse
	TrackingTransaction
	TrackingItem
	TrackingCustomer
	TrackingActionFeild
	TrackingShopReputation
	TrackingCategory
	TrackingGoogleTagParams
	TrackingProduct
	TrackingPurchase
	TrackingCheckout
	TrackingEcommerce
	TrackingEcommerceData
	TrackingData
	RepushOPCOrderRequest
	RepushOPCOrderResponse
*/
package checkout

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "gitlab.sendo.vn/protobuf/internal-apis-go/product/flashdeal"

import (
	context "context"
	sendo "gitlab.sendo.vn/core/golang-sdk/new"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for CheckoutService service

type CheckoutService interface {
	GetCustomerAddress(sdCtx sendo.ServiceContext, ctx context.Context, in *GetCustomerAddressRequest) (*GetCustomerAddressResponse, error)
	GetCustomerVoucher(sdCtx sendo.ServiceContext, ctx context.Context, in *GetCustomerVoucherRequest) (*GetCustomerVoucherResponse, error)
	AddCustomerAddress(sdCtx sendo.ServiceContext, ctx context.Context, in *AddCustomerAddressRequest) (*AddCustomerAddressResponse, error)
	RepushAffiliate(sdCtx sendo.ServiceContext, ctx context.Context, in *RepushAffiliateRequest) (*RepushAffiliateResponse, error)
	UpdateCustomerAddress(sdCtx sendo.ServiceContext, ctx context.Context, in *UpdateCustomerAddressRequest) (*UpdateCustomerAddressResponse, error)
	DeleteCustomerAddress(sdCtx sendo.ServiceContext, ctx context.Context, in *DeleteCustomerAddressRequest) (*DeleteCustomerAddressResponse, error)
	GetRegionsList(sdCtx sendo.ServiceContext, ctx context.Context, in *GetRegionsListRequest) (*GetRegionsListResponse, error)
	GetWardsList(sdCtx sendo.ServiceContext, ctx context.Context, in *GetWardsListRequest) (*GetWardsListResponse, error)
	CheckoutLoad(sdCtx sendo.ServiceContext, ctx context.Context, in *CheckoutLoadRequest) (*CheckoutLoadResponse, error)
	GetShippingCarrier(sdCtx sendo.ServiceContext, ctx context.Context, in *GetShippingCarriersRequest) (*GetShippingCarriersResponse, error)
	SaveOrder(sdCtx sendo.ServiceContext, ctx context.Context, in *CheckoutLoadRequest) (*SaveOrderResponse, error)
	GetOrderInfo(sdCtx sendo.ServiceContext, ctx context.Context, in *GetOrderInfoRequest) (*GetOrderInfoResponse, error)
	UpdateOrderViewed(sdCtx sendo.ServiceContext, ctx context.Context, in *UpdateOrderViewedRequest) (*UpdateOrderViewedResponse, error)
	GetSenpayToken(sdCtx sendo.ServiceContext, ctx context.Context, in *GetSenpayTokenRequest) (*GetSenpayTokenResponse, error)
	SenpayOtp(sdCtx sendo.ServiceContext, ctx context.Context, in *SenpayOtpRequest) (*SenpayOtpResponse, error)
	CodOtp(sdCtx sendo.ServiceContext, ctx context.Context, in *CodOtpRequest) (*CodOtpResponse, error)
	RepushOrderToOPC(sdCtx sendo.ServiceContext, ctx context.Context, in *RepushOPCOrderRequest) (*RepushOPCOrderResponse, error)
}

type sDCheckoutServiceServer struct {
	ctx sendo.ServiceContext
	sv  CheckoutService
}

func NewSDCheckoutServiceServer(ctx sendo.ServiceContext, sv CheckoutService) *sDCheckoutServiceServer {
	return &sDCheckoutServiceServer{
		sv:  sv,
		ctx: ctx,
	}
}

func (h *sDCheckoutServiceServer) GetCustomerAddress(ctx context.Context, in *GetCustomerAddressRequest) (*GetCustomerAddressResponse, error) {
	return h.sv.GetCustomerAddress(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) GetCustomerVoucher(ctx context.Context, in *GetCustomerVoucherRequest) (*GetCustomerVoucherResponse, error) {
	return h.sv.GetCustomerVoucher(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) AddCustomerAddress(ctx context.Context, in *AddCustomerAddressRequest) (*AddCustomerAddressResponse, error) {
	return h.sv.AddCustomerAddress(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) RepushAffiliate(ctx context.Context, in *RepushAffiliateRequest) (*RepushAffiliateResponse, error) {
	return h.sv.RepushAffiliate(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) UpdateCustomerAddress(ctx context.Context, in *UpdateCustomerAddressRequest) (*UpdateCustomerAddressResponse, error) {
	return h.sv.UpdateCustomerAddress(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) DeleteCustomerAddress(ctx context.Context, in *DeleteCustomerAddressRequest) (*DeleteCustomerAddressResponse, error) {
	return h.sv.DeleteCustomerAddress(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) GetRegionsList(ctx context.Context, in *GetRegionsListRequest) (*GetRegionsListResponse, error) {
	return h.sv.GetRegionsList(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) GetWardsList(ctx context.Context, in *GetWardsListRequest) (*GetWardsListResponse, error) {
	return h.sv.GetWardsList(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) CheckoutLoad(ctx context.Context, in *CheckoutLoadRequest) (*CheckoutLoadResponse, error) {
	return h.sv.CheckoutLoad(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) GetShippingCarrier(ctx context.Context, in *GetShippingCarriersRequest) (*GetShippingCarriersResponse, error) {
	return h.sv.GetShippingCarrier(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) SaveOrder(ctx context.Context, in *CheckoutLoadRequest) (*SaveOrderResponse, error) {
	return h.sv.SaveOrder(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) GetOrderInfo(ctx context.Context, in *GetOrderInfoRequest) (*GetOrderInfoResponse, error) {
	return h.sv.GetOrderInfo(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) UpdateOrderViewed(ctx context.Context, in *UpdateOrderViewedRequest) (*UpdateOrderViewedResponse, error) {
	return h.sv.UpdateOrderViewed(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) GetSenpayToken(ctx context.Context, in *GetSenpayTokenRequest) (*GetSenpayTokenResponse, error) {
	return h.sv.GetSenpayToken(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) SenpayOtp(ctx context.Context, in *SenpayOtpRequest) (*SenpayOtpResponse, error) {
	return h.sv.SenpayOtp(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) CodOtp(ctx context.Context, in *CodOtpRequest) (*CodOtpResponse, error) {
	return h.sv.CodOtp(h.ctx, ctx, in)
}

func (h *sDCheckoutServiceServer) RepushOrderToOPC(ctx context.Context, in *RepushOPCOrderRequest) (*RepushOPCOrderResponse, error) {
	return h.sv.RepushOrderToOPC(h.ctx, ctx, in)
}

func AddCheckoutServiceHandler(service sendo.Service, sv CheckoutService) {
	service.Server().AddHandler(func(gRPC *grpc.Server) {
		RegisterCheckoutServiceServer(gRPC, NewSDCheckoutServiceServer(service, sv))
	})
}
