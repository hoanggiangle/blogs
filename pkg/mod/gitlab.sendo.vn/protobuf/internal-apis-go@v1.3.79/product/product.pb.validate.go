// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product/product.proto

package product

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on UpdateByRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateByRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetUpdateBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("UpdateBy", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Product", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateByRequestValidationError is the validation error returned by
// UpdateByRequest.Validate if the designated constraints aren't met.
type UpdateByRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateByRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateByRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateByRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateByRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateByRequestValidationError) ErrorName() string { return "UpdateByRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateByRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateByRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateByRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateByRequestValidationError{}

// Validate checks the field values on UpdateTypeShopMallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTypeShopMallRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for UpdateType

	// no validation rules for UpdatedUser

	if v, ok := interface{}(m.GetReasonReject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ReasonReject", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetReasonCancel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ReasonCancel", "embedded message failed validation"))
		}
	}

	// no validation rules for SellerAdminId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateTypeShopMallRequestValidationError is the validation error returned by
// UpdateTypeShopMallRequest.Validate if the designated constraints aren't met.
type UpdateTypeShopMallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTypeShopMallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTypeShopMallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTypeShopMallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTypeShopMallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTypeShopMallRequestValidationError) ErrorName() string {
	return "UpdateTypeShopMallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTypeShopMallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTypeShopMallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTypeShopMallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTypeShopMallRequestValidationError{}

// Validate checks the field values on Reason with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Reason) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ReasonCode

	// no validation rules for ReasonComment

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ReasonValidationError is the validation error returned by Reason.Validate if
// the designated constraints aren't met.
type ReasonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReasonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReasonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReasonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReasonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReasonValidationError) ErrorName() string { return "ReasonValidationError" }

// Error satisfies the builtin error interface
func (e ReasonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReason.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReasonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReasonValidationError{}

// Validate checks the field values on UpdateTypeShopMallResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTypeShopMallResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateTypeShopMallResponseValidationError is the validation error returned
// by UpdateTypeShopMallResponse.Validate if the designated constraints aren't met.
type UpdateTypeShopMallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTypeShopMallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTypeShopMallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTypeShopMallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTypeShopMallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTypeShopMallResponseValidationError) ErrorName() string {
	return "UpdateTypeShopMallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTypeShopMallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTypeShopMallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTypeShopMallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTypeShopMallResponseValidationError{}

// Validate checks the field values on UpdateByResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateByResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetUpdateBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("UpdateBy", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateByResponseValidationError is the validation error returned by
// UpdateByResponse.Validate if the designated constraints aren't met.
type UpdateByResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateByResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateByResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateByResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateByResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateByResponseValidationError) ErrorName() string { return "UpdateByResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateByResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateByResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateByResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateByResponseValidationError{}

// Validate checks the field values on UpdatesRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdatesRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdatesRequestValidationError is the validation error returned by
// UpdatesRequest.Validate if the designated constraints aren't met.
type UpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatesRequestValidationError) ErrorName() string { return "UpdatesRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatesRequestValidationError{}

// Validate checks the field values on UpdatesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdatesResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("List[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdatesResponseValidationError is the validation error returned by
// UpdatesResponse.Validate if the designated constraints aren't met.
type UpdatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatesResponseValidationError) ErrorName() string { return "UpdatesResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatesResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Product", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on AddRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddRequestValidationError is the validation error returned by
// AddRequest.Validate if the designated constraints aren't met.
type AddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRequestValidationError) ErrorName() string { return "AddRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRequestValidationError{}

// Validate checks the field values on AddResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddResponseValidationError is the validation error returned by
// AddResponse.Validate if the designated constraints aren't met.
type AddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResponseValidationError) ErrorName() string { return "AddResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResponseValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Filters", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Pagination", "embedded message failed validation"))
		}
	}

	// no validation rules for MetaData

	// no validation rules for ProductAll

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on Filters with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Filters) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CategoryId

	// no validation rules for StatusNew

	// no validation rules for StockStatus

	// no validation rules for Name

	// no validation rules for Sku

	// no validation rules for PriceFrom

	// no validation rules for PriceTo

	// no validation rules for IsPromotion

	// no validation rules for IsOff

	// no validation rules for UpdatedDateFrom

	// no validation rules for UpdatedDateTo

	// no validation rules for ProductIds

	// no validation rules for FilterType

	// no validation rules for Assignee

	// no validation rules for ReviewFromDate

	// no validation rules for ReviewToDate

	// no validation rules for Quantity

	// no validation rules for IsReview

	// no validation rules for IsReviewType

	// no validation rules for BrandId

	// no validation rules for ShopType

	// no validation rules for Status

	// no validation rules for ShopName

	// no validation rules for RatingFrom

	// no validation rules for RatingTo

	// no validation rules for PromotionPercentFrom

	// no validation rules for PromotionPercentTo

	// no validation rules for PromotionApp

	// no validation rules for ShopFreeShipping

	// no validation rules for IsCertified

	// no validation rules for SellerAdminId

	// no validation rules for SkuUser

	// no validation rules for PromotionStartDate

	// no validation rules for PromotionToDate

	// no validation rules for InsideProductType

	// no validation rules for FinalPriceFrom

	// no validation rules for FinalPriceTo

	// no validation rules for OrderComplete_30From

	// no validation rules for OrderComplete_30To

	// no validation rules for HasCertificate

	// no validation rules for Keyword

	// no validation rules for ExtendedShippingPackage

	// no validation rules for ProductExternalIds

	// no validation rules for IsConfigVariant

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// FiltersValidationError is the validation error returned by Filters.Validate
// if the designated constraints aren't met.
type FiltersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FiltersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FiltersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FiltersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FiltersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FiltersValidationError) ErrorName() string { return "FiltersValidationError" }

// Error satisfies the builtin error interface
func (e FiltersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FiltersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FiltersValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("List[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetMetaData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("MetaData", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Name

	// no validation rules for Sku

	// no validation rules for Rating

	// no validation rules for Price

	// no validation rules for StatusNew

	// no validation rules for StatusName

	// no validation rules for UpdatedAt

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Attributes[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for StockStatus

	// no validation rules for CatPath

	// no validation rules for UpdatedUser

	// no validation rules for IsReview

	// no validation rules for ReviewDate

	// no validation rules for Assignee

	// no validation rules for ReasonCode

	for idx, item := range m.GetProductCertificate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductCertificate[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for SellerAdminId

	// no validation rules for BrandName

	// no validation rules for CategoryName

	// no validation rules for UrlPath

	// no validation rules for ShopName

	// no validation rules for CategoryId

	// no validation rules for FinalPrice

	// no validation rules for PromotionPercent

	// no validation rules for BrandId

	// no validation rules for VersionNo

	// no validation rules for SkuUser

	// no validation rules for Weight

	// no validation rules for IsCertified

	// no validation rules for ShopFreeShipping

	// no validation rules for PromotionApp

	// no validation rules for OrderComplete_30

	// no validation rules for ReasonComment

	// no validation rules for Quantity

	// no validation rules for IsEnable

	// no validation rules for ShopType

	// no validation rules for IsUpdated

	// no validation rules for IsPromotion

	// no validation rules for PromotionStartDate

	// no validation rules for PromotionToDate

	// no validation rules for SpecialPrice

	// no validation rules for RatingPercent

	if v, ok := interface{}(m.GetCategoryLevels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CategoryLevels", "embedded message failed validation"))
		}
	}

	// no validation rules for PromotionNote

	// no validation rules for UnitType

	// no validation rules for CreatedAt

	// no validation rules for IsOff

	// no validation rules for Vasup

	// no validation rules for AdminId

	// no validation rules for LengthProduct

	// no validation rules for HeightProduct

	// no validation rules for WitdhProduct

	// no validation rules for ProductExternalId

	// no validation rules for ShippingImages

	if v, ok := interface{}(m.GetExtendedShippingPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ExtendedShippingPackage", "embedded message failed validation"))
		}
	}

	// no validation rules for IsConfigVariant

	// no validation rules for PriceMax

	// no validation rules for FinalPriceMax

	// no validation rules for TotalVariant

	// no validation rules for IsInvalidVariant

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on ProductAdd with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAdd) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for SellerAdminId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for DescriptionScore

	// no validation rules for ShortDescription

	// no validation rules for Weight

	// no validation rules for LengthProduct

	// no validation rules for HeightProduct

	// no validation rules for WitdhProduct

	// no validation rules for IsEnable

	// no validation rules for SkuUser

	// no validation rules for UnitType

	// no validation rules for CategoryId

	// no validation rules for StatusNew

	// no validation rules for HasOptions

	// no validation rules for StockStatus

	// no validation rules for TypeProduct

	// no validation rules for Quantity

	// no validation rules for Price

	// no validation rules for MetaTitle

	// no validation rules for MetaKeyword

	// no validation rules for MetaDescription

	// no validation rules for TagsKey

	// no validation rules for ProductRelateds

	// no validation rules for BrandId

	// no validation rules for IsBrand

	if v, ok := interface{}(m.GetAdditionalAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("AdditionalAttributes", "embedded message failed validation"))
		}
	}

	// no validation rules for SeoTitle

	// no validation rules for SeoKeyword

	// no validation rules for SeoDescription

	// no validation rules for SeoScore

	// no validation rules for VideoLink

	for idx, item := range m.GetCertificateFile() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("CertificateFile[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for ShopType

	// no validation rules for CreatedUser

	// no validation rules for Assignee

	// no validation rules for StatusDate

	// no validation rules for IsReview

	// no validation rules for IsReviewType

	// no validation rules for Score

	// no validation rules for ReasonCode

	// no validation rules for ReasonComment

	// no validation rules for FilterType

	// no validation rules for IsUpdated

	// no validation rules for IsPromotion

	// no validation rules for PromotionStartDate

	// no validation rules for PromotionToDate

	// no validation rules for SpecialPrice

	// no validation rules for PromotionNote

	if v, ok := interface{}(m.GetExtendedShippingPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ExtendedShippingPackage", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductAddValidationError is the validation error returned by
// ProductAdd.Validate if the designated constraints aren't met.
type ProductAddValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAddValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAddValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAddValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAddValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAddValidationError) ErrorName() string { return "ProductAddValidationError" }

// Error satisfies the builtin error interface
func (e ProductAddValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAdd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAddValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAddValidationError{}

// Validate checks the field values on ProductUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductUpdate) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for DescriptionScore

	// no validation rules for ShortDescription

	// no validation rules for Weight

	// no validation rules for LengthProduct

	// no validation rules for HeightProduct

	// no validation rules for WitdhProduct

	// no validation rules for SkuUser

	// no validation rules for UnitType

	// no validation rules for CategoryId

	// no validation rules for StatusNew

	// no validation rules for HasOptions

	// no validation rules for StockStatus

	// no validation rules for TypeProduct

	// no validation rules for Quantity

	// no validation rules for Price

	// no validation rules for MetaTitle

	// no validation rules for MetaKeyword

	// no validation rules for MetaDescription

	// no validation rules for TagsKey

	// no validation rules for ProductRelateds

	// no validation rules for BrandId

	// no validation rules for IsBrand

	if v, ok := interface{}(m.GetAdditionalAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("AdditionalAttributes", "embedded message failed validation"))
		}
	}

	// no validation rules for SeoTitle

	// no validation rules for SeoKeyword

	// no validation rules for SeoDescription

	// no validation rules for SeoScore

	// no validation rules for VideoLink

	for idx, item := range m.GetCertificateFile() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("CertificateFile[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for CreatedUser

	// no validation rules for UpdatedUser

	// no validation rules for StatusDate

	// no validation rules for IsReview

	// no validation rules for IsReviewType

	// no validation rules for Score

	// no validation rules for ReasonCode

	// no validation rules for ReasonComment

	// no validation rules for FilterType

	// no validation rules for IsEnable

	// no validation rules for Assignee

	// no validation rules for ReviewDate

	// no validation rules for ReasonDescription

	// no validation rules for SpecialPrice

	// no validation rules for IsPromotion

	// no validation rules for IsUpdated

	// no validation rules for PromotionStartDate

	// no validation rules for PromotionToDate

	// no validation rules for PromotionNote

	if v, ok := interface{}(m.GetExtendedShippingPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ExtendedShippingPackage", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for IsShopUpdate

	// no validation rules for IsEvent

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductUpdateValidationError is the validation error returned by
// ProductUpdate.Validate if the designated constraints aren't met.
type ProductUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductUpdateValidationError) ErrorName() string { return "ProductUpdateValidationError" }

// Error satisfies the builtin error interface
func (e ProductUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductUpdateValidationError{}

// Validate checks the field values on AttributeOptions with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AttributeOptions) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetMultiData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("MultiData[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetSingleData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("SingleData[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetTextData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("TextData[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetCustomData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("CustomData[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AttributeOptionsValidationError is the validation error returned by
// AttributeOptions.Validate if the designated constraints aren't met.
type AttributeOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeOptionsValidationError) ErrorName() string { return "AttributeOptionsValidationError" }

// Error satisfies the builtin error interface
func (e AttributeOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeOptionsValidationError{}

// Validate checks the field values on AttributeOption with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AttributeOption) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Key

	// no validation rules for Images

	for idx, item := range m.GetValueCustom() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ValueCustom[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for AttributeId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AttributeOptionValidationError is the validation error returned by
// AttributeOption.Validate if the designated constraints aren't met.
type AttributeOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeOptionValidationError) ErrorName() string { return "AttributeOptionValidationError" }

// Error satisfies the builtin error interface
func (e AttributeOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeOptionValidationError{}

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attribute) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for AttributeId

	// no validation rules for AttributeType

	// no validation rules for Name

	// no validation rules for ProductOption

	// no validation rules for ShowRequired

	// no validation rules for Type

	for idx, item := range m.GetAttributeValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("AttributeValue[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Code

	// no validation rules for IsCustom

	// no validation rules for IsCheckout

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

// Validate checks the field values on CustomAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CustomAttribute) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IdTemp

	// no validation rules for Key

	// no validation rules for Name

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Value[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Images

	// no validation rules for Code

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CustomAttributeValidationError is the validation error returned by
// CustomAttribute.Validate if the designated constraints aren't met.
type CustomAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomAttributeValidationError) ErrorName() string { return "CustomAttributeValidationError" }

// Error satisfies the builtin error interface
func (e CustomAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomAttributeValidationError{}

// Validate checks the field values on ValueCustom with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ValueCustom) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OptionIdTemp

	// no validation rules for Value

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ValueCustomValidationError is the validation error returned by
// ValueCustom.Validate if the designated constraints aren't met.
type ValueCustomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueCustomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueCustomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueCustomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueCustomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueCustomValidationError) ErrorName() string { return "ValueCustomValidationError" }

// Error satisfies the builtin error interface
func (e ValueCustomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValueCustom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueCustomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueCustomValidationError{}

// Validate checks the field values on AttributeValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AttributeValue) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Background

	// no validation rules for ColorHexRgb

	// no validation rules for Value

	// no validation rules for Image

	// no validation rules for Image_50X50

	// no validation rules for Image_500X500

	// no validation rules for OptionId

	// no validation rules for ColorType

	// no validation rules for IsCustom

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AttributeValueValidationError is the validation error returned by
// AttributeValue.Validate if the designated constraints aren't met.
type AttributeValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValueValidationError) ErrorName() string { return "AttributeValueValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValueValidationError{}

// Validate checks the field values on ProductCertificate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductCertificate) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for FileName

	// no validation rules for AttachmentUrl

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductCertificateValidationError is the validation error returned by
// ProductCertificate.Validate if the designated constraints aren't met.
type ProductCertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCertificateValidationError) ErrorName() string {
	return "ProductCertificateValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCertificateValidationError{}

// Validate checks the field values on UpdateBy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateBy) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for SellerAdminId

	// no validation rules for BrandId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateByValidationError is the validation error returned by
// UpdateBy.Validate if the designated constraints aren't met.
type UpdateByValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateByValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateByValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateByValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateByValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateByValidationError) ErrorName() string { return "UpdateByValidationError" }

// Error satisfies the builtin error interface
func (e UpdateByValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateByValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateByValidationError{}

// Validate checks the field values on UpdateByFields with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateByFields) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for StatusNew

	// no validation rules for ReasonCode

	// no validation rules for ReasonComment

	// no validation rules for BrandId

	// no validation rules for UpdatedUser

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateByFieldsValidationError is the validation error returned by
// UpdateByFields.Validate if the designated constraints aren't met.
type UpdateByFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateByFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateByFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateByFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateByFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateByFieldsValidationError) ErrorName() string { return "UpdateByFieldsValidationError" }

// Error satisfies the builtin error interface
func (e UpdateByFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateByFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateByFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateByFieldsValidationError{}

// Validate checks the field values on CountRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CountRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for SellerAdminId

	// no validation rules for StatusNew

	// no validation rules for IsOff

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CountRequestValidationError is the validation error returned by
// CountRequest.Validate if the designated constraints aren't met.
type CountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountRequestValidationError) ErrorName() string { return "CountRequestValidationError" }

// Error satisfies the builtin error interface
func (e CountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountRequestValidationError{}

// Validate checks the field values on CountResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CountResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CountResponseValidationError is the validation error returned by
// CountResponse.Validate if the designated constraints aren't met.
type CountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountResponseValidationError) ErrorName() string { return "CountResponseValidationError" }

// Error satisfies the builtin error interface
func (e CountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountResponseValidationError{}

// Validate checks the field values on MetaData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetaData) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MetaDataValidationError is the validation error returned by
// MetaData.Validate if the designated constraints aren't met.
type MetaDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaDataValidationError) ErrorName() string { return "MetaDataValidationError" }

// Error satisfies the builtin error interface
func (e MetaDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetaData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaDataValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for SellerAdminId

	// no validation rules for ResetCache

	// no validation rules for SkuUser

	// no validation rules for ProductExternalId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetVariantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetVariantRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for AttributeHash

	// no validation rules for SkuUser

	// no validation rules for Include

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetVariantRequestValidationError is the validation error returned by
// GetVariantRequest.Validate if the designated constraints aren't met.
type GetVariantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVariantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVariantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVariantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVariantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVariantRequestValidationError) ErrorName() string {
	return "GetVariantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVariantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVariantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVariantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVariantRequestValidationError{}

// Validate checks the field values on UpdateVariantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVariantsRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for UpdatedUser

	// no validation rules for VersionNo

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Fields", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateVariantsRequestValidationError is the validation error returned by
// UpdateVariantsRequest.Validate if the designated constraints aren't met.
type UpdateVariantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVariantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVariantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVariantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVariantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVariantsRequestValidationError) ErrorName() string {
	return "UpdateVariantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVariantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVariantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVariantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVariantsRequestValidationError{}

// Validate checks the field values on UpdateVariantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVariantsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateVariantsResponseValidationError is the validation error returned by
// UpdateVariantsResponse.Validate if the designated constraints aren't met.
type UpdateVariantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVariantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVariantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVariantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVariantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVariantsResponseValidationError) ErrorName() string {
	return "UpdateVariantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVariantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVariantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVariantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVariantsResponseValidationError{}

// Validate checks the field values on UpdateVariantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVariantResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for AttributeHash

	// no validation rules for Error

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateVariantResponseValidationError is the validation error returned by
// UpdateVariantResponse.Validate if the designated constraints aren't met.
type UpdateVariantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVariantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVariantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVariantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVariantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVariantResponseValidationError) ErrorName() string {
	return "UpdateVariantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVariantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVariantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVariantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVariantResponseValidationError{}

// Validate checks the field values on CategoryLevels with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CategoryLevels) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Cat1Id

	// no validation rules for Cat2Id

	// no validation rules for Cat3Id

	// no validation rules for Cat4Id

	// no validation rules for Cat2Name

	// no validation rules for Cat3Name

	// no validation rules for Cat4Name

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CategoryLevelsValidationError is the validation error returned by
// CategoryLevels.Validate if the designated constraints aren't met.
type CategoryLevelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryLevelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryLevelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryLevelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryLevelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryLevelsValidationError) ErrorName() string { return "CategoryLevelsValidationError" }

// Error satisfies the builtin error interface
func (e CategoryLevelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryLevels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryLevelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryLevelsValidationError{}

// Validate checks the field values on ProductVideo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductVideo) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Link

	// no validation rules for Thumbnail

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductVideoValidationError is the validation error returned by
// ProductVideo.Validate if the designated constraints aren't met.
type ProductVideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductVideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductVideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductVideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductVideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductVideoValidationError) ErrorName() string { return "ProductVideoValidationError" }

// Error satisfies the builtin error interface
func (e ProductVideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductVideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductVideoValidationError{}

// Validate checks the field values on ProductRelated with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductRelated) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for ProductName

	// no validation rules for ProductImage

	// no validation rules for SkuUser

	// no validation rules for CategoryName

	// no validation rules for SellerAdminId

	// no validation rules for Price

	// no validation rules for StatusNew

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductRelatedValidationError is the validation error returned by
// ProductRelated.Validate if the designated constraints aren't met.
type ProductRelatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductRelatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductRelatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductRelatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductRelatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductRelatedValidationError) ErrorName() string { return "ProductRelatedValidationError" }

// Error satisfies the builtin error interface
func (e ProductRelatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductRelated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductRelatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductRelatedValidationError{}

// Validate checks the field values on ProductDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductDetail) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Name

	// no validation rules for SkuUser

	// no validation rules for Price

	// no validation rules for UnitType

	// no validation rules for Weight

	// no validation rules for StockStatus

	// no validation rules for Description

	// no validation rules for VersionNo

	// no validation rules for CategoryId

	if v, ok := interface{}(m.GetCategoryLevels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("CategoryLevels", "embedded message failed validation"))
		}
	}

	// no validation rules for StatusNew

	// no validation rules for ReasonComment

	// no validation rules for TagsKey

	// no validation rules for IsPromotion

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	// no validation rules for BrandId

	// no validation rules for Quantity

	// no validation rules for Seo

	// no validation rules for SeoTitle

	// no validation rules for SeoDescription

	// no validation rules for SeoKeyword

	// no validation rules for SeoScore

	// no validation rules for ProductLink

	// no validation rules for HeightProduct

	// no validation rules for WitdhProduct

	// no validation rules for LengthProduct

	// no validation rules for VideoLink

	for idx, item := range m.GetVideoInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("VideoInfo[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for ShopType

	for idx, item := range m.GetProductRelateds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductRelateds[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Cprice

	// no validation rules for SellerAdminId

	// no validation rules for Sku

	// no validation rules for ProductImage

	// no validation rules for CategoryName

	// no validation rules for SpecialPrice

	// no validation rules for IsEnable

	// no validation rules for ReasonCode

	// no validation rules for ReasonDescription

	// no validation rules for BrandName

	// no validation rules for IsReview

	// no validation rules for ReviewDate

	for idx, item := range m.GetProductCertificate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductCertificate[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for UrlPath

	// no validation rules for UpdatedUser

	// no validation rules for Assignee

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Attributes[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for IsOff

	// no validation rules for PromotionStartDate

	// no validation rules for PromotionToDate

	// no validation rules for PromotionNote

	if v, ok := interface{}(m.GetExtendedShippingPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ExtendedShippingPackage", "embedded message failed validation"))
		}
	}

	// no validation rules for IsConfigVariant

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for ProductExternalId

	// no validation rules for RatingPercent

	// no validation rules for FinalPrice

	// no validation rules for PriceMax

	// no validation rules for FinalPriceMax

	// no validation rules for IsInvalidVariant

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductDetailValidationError is the validation error returned by
// ProductDetail.Validate if the designated constraints aren't met.
type ProductDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDetailValidationError) ErrorName() string { return "ProductDetailValidationError" }

// Error satisfies the builtin error interface
func (e ProductDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDetailValidationError{}

// Validate checks the field values on ProductVariants with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductVariants) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Attributes[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for SellerAdminId

	// no validation rules for AdminId

	// no validation rules for VersionNo

	// no validation rules for IsInvalidVariant

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductVariantsValidationError is the validation error returned by
// ProductVariants.Validate if the designated constraints aren't met.
type ProductVariantsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductVariantsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductVariantsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductVariantsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductVariantsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductVariantsValidationError) ErrorName() string { return "ProductVariantsValidationError" }

// Error satisfies the builtin error interface
func (e ProductVariantsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductVariants.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductVariantsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductVariantsValidationError{}

// Validate checks the field values on CertificateFilesFilters with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CertificateFilesFilters) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for SellerAdminId

	// no validation rules for CategoryId

	// no validation rules for BrandId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CertificateFilesFiltersValidationError is the validation error returned by
// CertificateFilesFilters.Validate if the designated constraints aren't met.
type CertificateFilesFiltersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateFilesFiltersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateFilesFiltersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateFilesFiltersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateFilesFiltersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateFilesFiltersValidationError) ErrorName() string {
	return "CertificateFilesFiltersValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateFilesFiltersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateFilesFilters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateFilesFiltersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateFilesFiltersValidationError{}

// Validate checks the field values on GetCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCertificateRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Filters", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCertificateRequestValidationError is the validation error returned by
// GetCertificateRequest.Validate if the designated constraints aren't met.
type GetCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCertificateRequestValidationError) ErrorName() string {
	return "GetCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCertificateRequestValidationError{}

// Validate checks the field values on CertificateFiles with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CertificateFiles) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("List[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for ProductId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CertificateFilesValidationError is the validation error returned by
// CertificateFiles.Validate if the designated constraints aren't met.
type CertificateFilesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateFilesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateFilesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateFilesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateFilesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateFilesValidationError) ErrorName() string { return "CertificateFilesValidationError" }

// Error satisfies the builtin error interface
func (e CertificateFilesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateFiles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateFilesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateFilesValidationError{}

// Validate checks the field values on ListHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Pagination", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListHistoryRequestValidationError is the validation error returned by
// ListHistoryRequest.Validate if the designated constraints aren't met.
type ListHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoryRequestValidationError) ErrorName() string {
	return "ListHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoryRequestValidationError{}

// Validate checks the field values on ListHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("List[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetMetaData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("MetaData", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListHistoryResponseValidationError is the validation error returned by
// ListHistoryResponse.Validate if the designated constraints aren't met.
type ListHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoryResponseValidationError) ErrorName() string {
	return "ListHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoryResponseValidationError{}

// Validate checks the field values on ProductHistory with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductHistory) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Action

	// no validation rules for ProductId

	// no validation rules for Sku

	// no validation rules for ProductName

	// no validation rules for StoreCode

	// no validation rules for StoreName

	// no validation rules for Status

	// no validation rules for UpdatedStatus

	// no validation rules for ReasonCode

	// no validation rules for ReasonComment

	// no validation rules for UpdatedUser

	// no validation rules for UpdatedDate

	// no validation rules for ReasonName

	// no validation rules for DiscountPercent

	// no validation rules for UpdatedDiscountPercent

	// no validation rules for StockAvailability

	// no validation rules for UpdatedStockAvailability

	// no validation rules for Weight

	// no validation rules for UpdatedWeight

	// no validation rules for Price

	// no validation rules for UpdatedPrice

	// no validation rules for IsStatusUpdated

	// no validation rules for IsDiscountPercentUpdated

	// no validation rules for IsStockAvailabilityUpdated

	// no validation rules for IsWeightUpdated

	// no validation rules for IsPriceUpdated

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductHistoryValidationError is the validation error returned by
// ProductHistory.Validate if the designated constraints aren't met.
type ProductHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductHistoryValidationError) ErrorName() string { return "ProductHistoryValidationError" }

// Error satisfies the builtin error interface
func (e ProductHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductHistoryValidationError{}

// Validate checks the field values on UpRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpRequestValidationError is the validation error returned by
// UpRequest.Validate if the designated constraints aren't met.
type UpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpRequestValidationError) ErrorName() string { return "UpRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpRequestValidationError{}

// Validate checks the field values on UpResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpResponseValidationError is the validation error returned by
// UpResponse.Validate if the designated constraints aren't met.
type UpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpResponseValidationError) ErrorName() string { return "UpResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpResponseValidationError{}

// Validate checks the field values on GetRedisByKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRedisByKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Command

	// no validation rules for Key

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRedisByKeyRequestValidationError is the validation error returned by
// GetRedisByKeyRequest.Validate if the designated constraints aren't met.
type GetRedisByKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRedisByKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRedisByKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRedisByKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRedisByKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRedisByKeyRequestValidationError) ErrorName() string {
	return "GetRedisByKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRedisByKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRedisByKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRedisByKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRedisByKeyRequestValidationError{}

// Validate checks the field values on GetRedisByKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRedisByKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Data

	// no validation rules for Error

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRedisByKeyResponseValidationError is the validation error returned by
// GetRedisByKeyResponse.Validate if the designated constraints aren't met.
type GetRedisByKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRedisByKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRedisByKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRedisByKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRedisByKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRedisByKeyResponseValidationError) ErrorName() string {
	return "GetRedisByKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRedisByKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRedisByKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRedisByKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRedisByKeyResponseValidationError{}

// Validate checks the field values on VasUp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *VasUp) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Time

	// no validation rules for CategoryId

	// no validation rules for Position

	// no validation rules for TypeUp

	// no validation rules for ProductExternalId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// VasUpValidationError is the validation error returned by VasUp.Validate if
// the designated constraints aren't met.
type VasUpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VasUpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VasUpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VasUpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VasUpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VasUpValidationError) ErrorName() string { return "VasUpValidationError" }

// Error satisfies the builtin error interface
func (e VasUpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVasUp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VasUpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VasUpValidationError{}

// Validate checks the field values on VasUpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VasUpResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Message

	// no validation rules for ProductExternalId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// VasUpResponseValidationError is the validation error returned by
// VasUpResponse.Validate if the designated constraints aren't met.
type VasUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VasUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VasUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VasUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VasUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VasUpResponseValidationError) ErrorName() string { return "VasUpResponseValidationError" }

// Error satisfies the builtin error interface
func (e VasUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVasUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VasUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VasUpResponseValidationError{}

// Validate checks the field values on RepushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepushRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for RepushEs

	// no validation rules for RepushRedis

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RepushRequestValidationError is the validation error returned by
// RepushRequest.Validate if the designated constraints aren't met.
type RepushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepushRequestValidationError) ErrorName() string { return "RepushRequestValidationError" }

// Error satisfies the builtin error interface
func (e RepushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepushRequestValidationError{}

// Validate checks the field values on RepushResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepushResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RepushResponseValidationError is the validation error returned by
// RepushResponse.Validate if the designated constraints aren't met.
type RepushResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepushResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepushResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepushResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepushResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepushResponseValidationError) ErrorName() string { return "RepushResponseValidationError" }

// Error satisfies the builtin error interface
func (e RepushResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepushResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepushResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepushResponseValidationError{}

// Validate checks the field values on ExtendedShippingPackage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExtendedShippingPackage) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for IsUsingInstant

	// no validation rules for IsUsingInDay

	// no validation rules for IsSelfShipping

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ExtendedShippingPackageValidationError is the validation error returned by
// ExtendedShippingPackage.Validate if the designated constraints aren't met.
type ExtendedShippingPackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtendedShippingPackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtendedShippingPackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtendedShippingPackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtendedShippingPackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtendedShippingPackageValidationError) ErrorName() string {
	return "ExtendedShippingPackageValidationError"
}

// Error satisfies the builtin error interface
func (e ExtendedShippingPackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtendedShippingPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtendedShippingPackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtendedShippingPackageValidationError{}

// Validate checks the field values on Variant with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Variant) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Attributes[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for AttributeHash

	// no validation rules for PromotionStartDate

	// no validation rules for PromotionEndDate

	// no validation rules for PromotionPercent

	// no validation rules for IsPromotion

	// no validation rules for SkuUser

	// no validation rules for Price

	// no validation rules for SpecialPrice

	// no validation rules for FinalPrice

	// no validation rules for Quantity

	// no validation rules for Order

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// VariantValidationError is the validation error returned by Variant.Validate
// if the designated constraints aren't met.
type VariantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariantValidationError) ErrorName() string { return "VariantValidationError" }

// Error satisfies the builtin error interface
func (e VariantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariantValidationError{}

// Validate checks the field values on VariantAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VariantAttribute) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for OptionId

	// no validation rules for Code

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// VariantAttributeValidationError is the validation error returned by
// VariantAttribute.Validate if the designated constraints aren't met.
type VariantAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariantAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariantAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariantAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariantAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariantAttributeValidationError) ErrorName() string { return "VariantAttributeValidationError" }

// Error satisfies the builtin error interface
func (e VariantAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariantAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariantAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariantAttributeValidationError{}

// Validate checks the field values on AdsService with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AdsService) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ShopAds

	// no validation rules for AdPlus

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AdsServiceValidationError is the validation error returned by
// AdsService.Validate if the designated constraints aren't met.
type AdsServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsServiceValidationError) ErrorName() string { return "AdsServiceValidationError" }

// Error satisfies the builtin error interface
func (e AdsServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsServiceValidationError{}

// Validate checks the field values on GetProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetProductSkus() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductSkus[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetDataConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("DataConfig", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetProductsRequestValidationError is the validation error returned by
// GetProductsRequest.Validate if the designated constraints aren't met.
type GetProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsRequestValidationError) ErrorName() string {
	return "GetProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsRequestValidationError{}

// Validate checks the field values on GetProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Products[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetProductsResponseValidationError is the validation error returned by
// GetProductsResponse.Validate if the designated constraints aren't met.
type GetProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsResponseValidationError) ErrorName() string {
	return "GetProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsResponseValidationError{}

// Validate checks the field values on ProductDetailSku with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductDetailSku) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for ProductExternalId

	// no validation rules for AdminId

	// no validation rules for SellerAdminId

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for CatPath

	// no validation rules for CategoryId

	// no validation rules for BrandId

	// no validation rules for StockStatus

	// no validation rules for StatusNew

	// no validation rules for Price

	// no validation rules for FinalPrice

	// no validation rules for IsPromotion

	// no validation rules for PromotionPercent

	// no validation rules for UnitType

	// no validation rules for Quantity

	// no validation rules for Weight

	// no validation rules for HeightProduct

	// no validation rules for WitdhProduct

	// no validation rules for LengthProduct

	// no validation rules for Sku

	// no validation rules for ProductSkuUser

	// no validation rules for VariantSkuUser

	// no validation rules for AttributeHash

	// no validation rules for IsConfigVariant

	// no validation rules for IsValidAttributeHash

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Attributes[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if v, ok := interface{}(m.GetExtendedShippingPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ExtendedShippingPackage", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetPromotion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Promotion", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetProductAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductAttributes[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductDetailSkuValidationError is the validation error returned by
// ProductDetailSku.Validate if the designated constraints aren't met.
type ProductDetailSkuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDetailSkuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDetailSkuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDetailSkuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDetailSkuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDetailSkuValidationError) ErrorName() string { return "ProductDetailSkuValidationError" }

// Error satisfies the builtin error interface
func (e ProductDetailSkuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDetailSku.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDetailSkuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDetailSkuValidationError{}

// Validate checks the field values on SkuAttributeOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SkuAttributeOption) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for OptionId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// SkuAttributeOptionValidationError is the validation error returned by
// SkuAttributeOption.Validate if the designated constraints aren't met.
type SkuAttributeOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuAttributeOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuAttributeOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuAttributeOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuAttributeOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuAttributeOptionValidationError) ErrorName() string {
	return "SkuAttributeOptionValidationError"
}

// Error satisfies the builtin error interface
func (e SkuAttributeOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuAttributeOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuAttributeOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuAttributeOptionValidationError{}

// Validate checks the field values on ProductSkuFilters with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductSkuFilters) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for AttributeHash

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductSkuFiltersValidationError is the validation error returned by
// ProductSkuFilters.Validate if the designated constraints aren't met.
type ProductSkuFiltersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSkuFiltersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSkuFiltersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSkuFiltersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSkuFiltersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSkuFiltersValidationError) ErrorName() string {
	return "ProductSkuFiltersValidationError"
}

// Error satisfies the builtin error interface
func (e ProductSkuFiltersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSkuFilters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSkuFiltersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSkuFiltersValidationError{}

// Validate checks the field values on ProductsFilters with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductsFilters) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetProductSkus() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductSkus[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductsFiltersValidationError is the validation error returned by
// ProductsFilters.Validate if the designated constraints aren't met.
type ProductsFiltersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsFiltersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsFiltersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsFiltersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsFiltersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsFiltersValidationError) ErrorName() string { return "ProductsFiltersValidationError" }

// Error satisfies the builtin error interface
func (e ProductsFiltersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsFilters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsFiltersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsFiltersValidationError{}

// Validate checks the field values on ProductDataConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductDataConfiguration) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Source

	// no validation rules for CheckPromotion

	// no validation rules for GetProductAttributes

	// no validation rules for GetFuturePromotion

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductDataConfigurationValidationError is the validation error returned by
// ProductDataConfiguration.Validate if the designated constraints aren't met.
type ProductDataConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDataConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDataConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDataConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDataConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDataConfigurationValidationError) ErrorName() string {
	return "ProductDataConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e ProductDataConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDataConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDataConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDataConfigurationValidationError{}

// Validate checks the field values on ProductVariationAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductVariationAttributes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for OptionId

	// no validation rules for OptionValue

	// no validation rules for ColorType

	// no validation rules for ColorValue

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductVariationAttributesValidationError is the validation error returned
// by ProductVariationAttributes.Validate if the designated constraints aren't met.
type ProductVariationAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductVariationAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductVariationAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductVariationAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductVariationAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductVariationAttributesValidationError) ErrorName() string {
	return "ProductVariationAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ProductVariationAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductVariationAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductVariationAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductVariationAttributesValidationError{}

// Validate checks the field values on EsErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EsErrorResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for RetryNumber

	// no validation rules for TimeStamp

	// no validation rules for Error

	// no validation rules for StatusCode

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// EsErrorResponseValidationError is the validation error returned by
// EsErrorResponse.Validate if the designated constraints aren't met.
type EsErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EsErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EsErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EsErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EsErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EsErrorResponseValidationError) ErrorName() string { return "EsErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e EsErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEsErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EsErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EsErrorResponseValidationError{}

// Validate checks the field values on EsReindexLog with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EsReindexLog) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for ProductId

	// no validation rules for Error

	for idx, item := range m.GetErrorResponses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ErrorResponses[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Status

	// no validation rules for StatusCode

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	// no validation rules for RetryCount

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// EsReindexLogValidationError is the validation error returned by
// EsReindexLog.Validate if the designated constraints aren't met.
type EsReindexLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EsReindexLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EsReindexLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EsReindexLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EsReindexLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EsReindexLogValidationError) ErrorName() string { return "EsReindexLogValidationError" }

// Error satisfies the builtin error interface
func (e EsReindexLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEsReindexLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EsReindexLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EsReindexLogValidationError{}

// Validate checks the field values on RepeatedFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedFilter) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RepeatedFilterValidationError is the validation error returned by
// RepeatedFilter.Validate if the designated constraints aren't met.
type RepeatedFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedFilterValidationError) ErrorName() string { return "RepeatedFilterValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedFilterValidationError{}

// Validate checks the field values on EsReindexLogListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EsReindexLogListRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for SortBy

	// no validation rules for OrderBy

	// no validation rules for Filters

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// EsReindexLogListRequestValidationError is the validation error returned by
// EsReindexLogListRequest.Validate if the designated constraints aren't met.
type EsReindexLogListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EsReindexLogListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EsReindexLogListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EsReindexLogListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EsReindexLogListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EsReindexLogListRequestValidationError) ErrorName() string {
	return "EsReindexLogListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EsReindexLogListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEsReindexLogListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EsReindexLogListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EsReindexLogListRequestValidationError{}

// Validate checks the field values on EsReindexLogListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EsReindexLogListResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	// no validation rules for TotalPage

	// no validation rules for CurrentPage

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Data[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Size

	// no validation rules for NextPage

	// no validation rules for PrevPage

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// EsReindexLogListResponseValidationError is the validation error returned by
// EsReindexLogListResponse.Validate if the designated constraints aren't met.
type EsReindexLogListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EsReindexLogListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EsReindexLogListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EsReindexLogListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EsReindexLogListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EsReindexLogListResponseValidationError) ErrorName() string {
	return "EsReindexLogListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EsReindexLogListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEsReindexLogListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EsReindexLogListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EsReindexLogListResponseValidationError{}
