// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product/comment/productcomment.proto

package comment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetProductId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ProductId", "embedded message failed validation"))
		}
	}

	// no validation rules for Sort

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Pagination", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Comments[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on ListProductByOwnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductByOwnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OwnerId

	// no validation rules for CommentsPerProduct

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Pagination", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListProductByOwnerRequestValidationError is the validation error returned by
// ListProductByOwnerRequest.Validate if the designated constraints aren't met.
type ListProductByOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductByOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductByOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductByOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductByOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductByOwnerRequestValidationError) ErrorName() string {
	return "ListProductByOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductByOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductByOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductByOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductByOwnerRequestValidationError{}

// Validate checks the field values on ListProductByOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductByOwnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Comments[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListProductByOwnerResponseValidationError is the validation error returned
// by ListProductByOwnerResponse.Validate if the designated constraints aren't met.
type ListProductByOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductByOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductByOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductByOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductByOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductByOwnerResponseValidationError) ErrorName() string {
	return "ListProductByOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductByOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductByOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductByOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductByOwnerResponseValidationError{}

// Validate checks the field values on GetRepliesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetRepliesRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetParentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ParentId", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Pagination", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRepliesRequestValidationError is the validation error returned by
// GetRepliesRequest.Validate if the designated constraints aren't met.
type GetRepliesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepliesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepliesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepliesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepliesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepliesRequestValidationError) ErrorName() string {
	return "GetRepliesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepliesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepliesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepliesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepliesRequestValidationError{}

// Validate checks the field values on GetRepliesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRepliesResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Comments[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetRepliesResponseValidationError is the validation error returned by
// GetRepliesResponse.Validate if the designated constraints aren't met.
type GetRepliesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepliesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepliesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepliesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepliesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepliesResponseValidationError) ErrorName() string {
	return "GetRepliesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepliesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepliesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepliesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepliesResponseValidationError{}

// Validate checks the field values on AddRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetProductId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ProductId", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Comment", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddRequestValidationError is the validation error returned by
// AddRequest.Validate if the designated constraints aren't met.
type AddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRequestValidationError) ErrorName() string { return "AddRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRequestValidationError{}

// Validate checks the field values on AddResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	switch m.Result.(type) {

	case *AddResponse_RateLimitReset:
		// no validation rules for RateLimitReset

	case *AddResponse_Comment:

		if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField("Comment", "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddResponseValidationError is the validation error returned by
// AddResponse.Validate if the designated constraints aren't met.
type AddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResponseValidationError) ErrorName() string { return "AddResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Id", "embedded message failed validation"))
		}
	}

	// no validation rules for OwnerId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on EditRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EditRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Id", "embedded message failed validation"))
		}
	}

	// no validation rules for Content

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// EditRequestValidationError is the validation error returned by
// EditRequest.Validate if the designated constraints aren't met.
type EditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditRequestValidationError) ErrorName() string { return "EditRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditRequestValidationError{}

// Validate checks the field values on EditResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EditResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// EditResponseValidationError is the validation error returned by
// EditResponse.Validate if the designated constraints aren't met.
type EditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditResponseValidationError) ErrorName() string { return "EditResponseValidationError" }

// Error satisfies the builtin error interface
func (e EditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditResponseValidationError{}

// Validate checks the field values on CountRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CountRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetProductId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ProductId", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CountRequestValidationError is the validation error returned by
// CountRequest.Validate if the designated constraints aren't met.
type CountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountRequestValidationError) ErrorName() string { return "CountRequestValidationError" }

// Error satisfies the builtin error interface
func (e CountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountRequestValidationError{}

// Validate checks the field values on CountResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CountResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for TotalParent

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CountResponseValidationError is the validation error returned by
// CountResponse.Validate if the designated constraints aren't met.
type CountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountResponseValidationError) ErrorName() string { return "CountResponseValidationError" }

// Error satisfies the builtin error interface
func (e CountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountResponseValidationError{}

// Validate checks the field values on GetCommentDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCommentDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Id", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCommentDetailsRequestValidationError is the validation error returned by
// GetCommentDetailsRequest.Validate if the designated constraints aren't met.
type GetCommentDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentDetailsRequestValidationError) ErrorName() string {
	return "GetCommentDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentDetailsRequestValidationError{}

// Validate checks the field values on GetCommentDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCommentDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Comment", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetCommentDetailsResponseValidationError is the validation error returned by
// GetCommentDetailsResponse.Validate if the designated constraints aren't met.
type GetCommentDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentDetailsResponseValidationError) ErrorName() string {
	return "GetCommentDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentDetailsResponseValidationError{}

// Validate checks the field values on ListAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetProductId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ProductId", "embedded message failed validation"))
		}
	}

	// no validation rules for Sort

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Pagination", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListAppRequestValidationError is the validation error returned by
// ListAppRequest.Validate if the designated constraints aren't met.
type ListAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppRequestValidationError) ErrorName() string { return "ListAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppRequestValidationError{}

// Validate checks the field values on ListAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Comments[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListAppResponseValidationError is the validation error returned by
// ListAppResponse.Validate if the designated constraints aren't met.
type ListAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppResponseValidationError) ErrorName() string { return "ListAppResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppResponseValidationError{}

// Validate checks the field values on AdminDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AdminDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Id", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AdminDeleteRequestValidationError is the validation error returned by
// AdminDeleteRequest.Validate if the designated constraints aren't met.
type AdminDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDeleteRequestValidationError) ErrorName() string {
	return "AdminDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDeleteRequestValidationError{}

// Validate checks the field values on AdminDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AdminDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AdminDeleteResponseValidationError is the validation error returned by
// AdminDeleteResponse.Validate if the designated constraints aren't met.
type AdminDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDeleteResponseValidationError) ErrorName() string {
	return "AdminDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDeleteResponseValidationError{}

// Validate checks the field values on GetOwnerCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOwnerCommentRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OwnerId

	// no validation rules for CreatedAt

	// no validation rules for Sort

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Pagination", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetOwnerCommentRequestValidationError is the validation error returned by
// GetOwnerCommentRequest.Validate if the designated constraints aren't met.
type GetOwnerCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnerCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnerCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnerCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnerCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnerCommentRequestValidationError) ErrorName() string {
	return "GetOwnerCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOwnerCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnerCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnerCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnerCommentRequestValidationError{}

// Validate checks the field values on GetOwnerCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOwnerCommentResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Comments[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetOwnerCommentResponseValidationError is the validation error returned by
// GetOwnerCommentResponse.Validate if the designated constraints aren't met.
type GetOwnerCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnerCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnerCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnerCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnerCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnerCommentResponseValidationError) ErrorName() string {
	return "GetOwnerCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOwnerCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnerCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnerCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnerCommentResponseValidationError{}

// Validate checks the field values on ListProductByOwnerResponse_CmtProduct
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListProductByOwnerResponse_CmtProduct) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetProductId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ProductId", "embedded message failed validation"))
		}
	}

	for idx, item := range m.GetComment() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Comment[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for TotalComment

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ListProductByOwnerResponse_CmtProductValidationError is the validation error
// returned by ListProductByOwnerResponse_CmtProduct.Validate if the
// designated constraints aren't met.
type ListProductByOwnerResponse_CmtProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductByOwnerResponse_CmtProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductByOwnerResponse_CmtProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductByOwnerResponse_CmtProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductByOwnerResponse_CmtProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductByOwnerResponse_CmtProductValidationError) ErrorName() string {
	return "ListProductByOwnerResponse_CmtProductValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductByOwnerResponse_CmtProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductByOwnerResponse_CmtProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductByOwnerResponse_CmtProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductByOwnerResponse_CmtProductValidationError{}

// Validate checks the field values on GetOwnerCommentResponse_CmtProduct with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetOwnerCommentResponse_CmtProduct) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	if v, ok := interface{}(m.GetProductId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("ProductId", "embedded message failed validation"))
		}
	}

	if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Comment", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetOwnerCommentResponse_CmtProductValidationError is the validation error
// returned by GetOwnerCommentResponse_CmtProduct.Validate if the designated
// constraints aren't met.
type GetOwnerCommentResponse_CmtProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnerCommentResponse_CmtProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnerCommentResponse_CmtProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnerCommentResponse_CmtProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnerCommentResponse_CmtProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnerCommentResponse_CmtProductValidationError) ErrorName() string {
	return "GetOwnerCommentResponse_CmtProductValidationError"
}

// Error satisfies the builtin error interface
func (e GetOwnerCommentResponse_CmtProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnerCommentResponse_CmtProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnerCommentResponse_CmtProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnerCommentResponse_CmtProductValidationError{}
