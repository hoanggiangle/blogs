// Code generated by protoc-gen-sendo. DO NOT EDIT.
// Author: Viet Tran. Software Architect - DC1
// source: product/product.proto

/*
Package product is a generated protocol buffer package.

It is generated from these files:
	product/product.proto

It has these top-level messages:
	UpdateByRequest
	UpdateTypeShopMallRequest
	Reason
	UpdateTypeShopMallResponse
	UpdateByResponse
	UpdatesRequest
	UpdatesResponse
	UpdateRequest
	UpdateResponse
	AddRequest
	AddResponse
	ListRequest
	Filters
	ListResponse
	Product
	ProductAdd
	ProductUpdate
	AttributeOptions
	AttributeOption
	Attribute
	CustomAttribute
	ValueCustom
	AttributeValue
	ProductCertificate
	UpdateBy
	UpdateByFields
	CountRequest
	CountResponse
	MetaData
	GetRequest
	GetVariantRequest
	UpdateVariantsRequest
	UpdateVariantsResponse
	UpdateVariantResponse
	CategoryLevels
	ProductVideo
	ProductRelated
	ProductDetail
	ProductVariants
	CertificateFilesFilters
	GetCertificateRequest
	CertificateFiles
	ListHistoryRequest
	ListHistoryResponse
	ProductHistory
	UpRequest
	UpResponse
	GetRedisByKeyRequest
	GetRedisByKeyResponse
	VasUp
	VasUpResponse
	RepushRequest
	RepushResponse
	ExtendedShippingPackage
	Variant
	VariantAttribute
	AdsService
	GetProductsRequest
	GetProductsResponse
	ProductDetailSku
	SkuAttributeOption
	ProductSkuFilters
	ProductsFilters
	ProductDataConfiguration
	ProductVariationAttributes
	EsErrorResponse
	EsReindexLog
	RepeatedFilter
	EsReindexLogListRequest
	EsReindexLogListResponse
*/
package product

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "gitlab.sendo.vn/protobuf/internal-apis-go/base"
import _ "google.golang.org/genproto/protobuf/field_mask"
import _ "gitlab.sendo.vn/protobuf/internal-apis-go/product/flashdeal"

import (
	context "context"
	sendo "gitlab.sendo.vn/core/golang-sdk/new"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for ProductService service

type ProductService interface {
	List(sdCtx sendo.ServiceContext, ctx context.Context, in *ListRequest) (*ListResponse, error)
	Add(sdCtx sendo.ServiceContext, ctx context.Context, in *AddRequest) (*AddResponse, error)
	GetEsReindexLogList(sdCtx sendo.ServiceContext, ctx context.Context, in *EsReindexLogListRequest) (*EsReindexLogListResponse, error)
	Get(sdCtx sendo.ServiceContext, ctx context.Context, in *GetRequest) (*ProductDetail, error)
	GetVariants(sdCtx sendo.ServiceContext, ctx context.Context, in *GetVariantRequest) (*ProductVariants, error)
	GetVariant(sdCtx sendo.ServiceContext, ctx context.Context, in *GetVariantRequest) (*Variant, error)
	UpdateVariants(sdCtx sendo.ServiceContext, ctx context.Context, in *UpdateVariantsRequest) (*UpdateVariantsResponse, error)
	Update(sdCtx sendo.ServiceContext, ctx context.Context, in *UpdateRequest) (*UpdateResponse, error)
	Updates(sdCtx sendo.ServiceContext, ctx context.Context, in *UpdatesRequest) (*UpdatesResponse, error)
	UpdateBy(sdCtx sendo.ServiceContext, ctx context.Context, in *UpdateByRequest) (*UpdateByResponse, error)
	UpdateTypeShopMall(sdCtx sendo.ServiceContext, ctx context.Context, in *UpdateTypeShopMallRequest) (*UpdateTypeShopMallResponse, error)
	Count(sdCtx sendo.ServiceContext, ctx context.Context, in *CountRequest) (*CountResponse, error)
	GetCertificateFiles(sdCtx sendo.ServiceContext, ctx context.Context, in *GetCertificateRequest) (*CertificateFiles, error)
	ListHistory(sdCtx sendo.ServiceContext, ctx context.Context, in *ListHistoryRequest) (*ListHistoryResponse, error)
	Up(sdCtx sendo.ServiceContext, ctx context.Context, in *UpRequest) (*UpResponse, error)
	GetRedisByKey(sdCtx sendo.ServiceContext, ctx context.Context, in *GetRedisByKeyRequest) (*GetRedisByKeyResponse, error)
	RepushProducts(sdCtx sendo.ServiceContext, ctx context.Context, in *RepushRequest) (*RepushResponse, error)
	GetProducts(sdCtx sendo.ServiceContext, ctx context.Context, in *GetProductsRequest) (*GetProductsResponse, error)
}

type sDProductServiceServer struct {
	ctx sendo.ServiceContext
	sv  ProductService
}

func NewSDProductServiceServer(ctx sendo.ServiceContext, sv ProductService) *sDProductServiceServer {
	return &sDProductServiceServer{
		sv:  sv,
		ctx: ctx,
	}
}

func (h *sDProductServiceServer) List(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	return h.sv.List(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) Add(ctx context.Context, in *AddRequest) (*AddResponse, error) {
	return h.sv.Add(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) GetEsReindexLogList(ctx context.Context, in *EsReindexLogListRequest) (*EsReindexLogListResponse, error) {
	return h.sv.GetEsReindexLogList(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) Get(ctx context.Context, in *GetRequest) (*ProductDetail, error) {
	return h.sv.Get(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) GetVariants(ctx context.Context, in *GetVariantRequest) (*ProductVariants, error) {
	return h.sv.GetVariants(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) GetVariant(ctx context.Context, in *GetVariantRequest) (*Variant, error) {
	return h.sv.GetVariant(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) UpdateVariants(ctx context.Context, in *UpdateVariantsRequest) (*UpdateVariantsResponse, error) {
	return h.sv.UpdateVariants(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) Update(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error) {
	return h.sv.Update(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) Updates(ctx context.Context, in *UpdatesRequest) (*UpdatesResponse, error) {
	return h.sv.Updates(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) UpdateBy(ctx context.Context, in *UpdateByRequest) (*UpdateByResponse, error) {
	return h.sv.UpdateBy(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) UpdateTypeShopMall(ctx context.Context, in *UpdateTypeShopMallRequest) (*UpdateTypeShopMallResponse, error) {
	return h.sv.UpdateTypeShopMall(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) Count(ctx context.Context, in *CountRequest) (*CountResponse, error) {
	return h.sv.Count(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) GetCertificateFiles(ctx context.Context, in *GetCertificateRequest) (*CertificateFiles, error) {
	return h.sv.GetCertificateFiles(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) ListHistory(ctx context.Context, in *ListHistoryRequest) (*ListHistoryResponse, error) {
	return h.sv.ListHistory(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) Up(ctx context.Context, in *UpRequest) (*UpResponse, error) {
	return h.sv.Up(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) GetRedisByKey(ctx context.Context, in *GetRedisByKeyRequest) (*GetRedisByKeyResponse, error) {
	return h.sv.GetRedisByKey(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) RepushProducts(ctx context.Context, in *RepushRequest) (*RepushResponse, error) {
	return h.sv.RepushProducts(h.ctx, ctx, in)
}

func (h *sDProductServiceServer) GetProducts(ctx context.Context, in *GetProductsRequest) (*GetProductsResponse, error) {
	return h.sv.GetProducts(h.ctx, ctx, in)
}

func AddProductServiceHandler(service sendo.Service, sv ProductService) {
	service.Server().AddHandler(func(gRPC *grpc.Server) {
		RegisterProductServiceServer(gRPC, NewSDProductServiceServer(service, sv))
	})
}
