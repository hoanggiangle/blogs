// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: product/flashdeal/productflashdeal.proto

package flashdeal // import "gitlab.sendo.vn/protobuf/internal-apis-go/product/flashdeal"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FlashSaleType int32

const (
	FlashSaleType_DEFAULT    FlashSaleType = 0
	FlashSaleType_SENMALL    FlashSaleType = 2
	FlashSaleType_LUCKY_SALE FlashSaleType = 3
)

var FlashSaleType_name = map[int32]string{
	0: "DEFAULT",
	2: "SENMALL",
	3: "LUCKY_SALE",
}
var FlashSaleType_value = map[string]int32{
	"DEFAULT":    0,
	"SENMALL":    2,
	"LUCKY_SALE": 3,
}

func (x FlashSaleType) String() string {
	return proto.EnumName(FlashSaleType_name, int32(x))
}
func (FlashSaleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{0}
}

type FlashDealRequest struct {
	FlashDealId          int32               `protobuf:"varint,1,opt,name=flash_deal_id,proto3" json:"flash_deal_id,omitempty"`
	ProductExternalId    int64               `protobuf:"varint,2,opt,name=product_external_id,proto3" json:"product_external_id,omitempty"`
	Status               int32               `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	FlashDealPrice       float32             `protobuf:"fixed32,4,opt,name=flash_deal_price,proto3" json:"flash_deal_price,omitempty"`
	StartAt              int64               `protobuf:"varint,5,opt,name=start_at,proto3" json:"start_at,omitempty"`
	EndAt                int64               `protobuf:"varint,6,opt,name=end_at,proto3" json:"end_at,omitempty"`
	VersionNo            int64               `protobuf:"varint,7,opt,name=version_no,proto3" json:"version_no,omitempty"`
	FlashDealQuantity    int32               `protobuf:"varint,8,opt,name=flash_deal_quantity,proto3" json:"flash_deal_quantity,omitempty"`
	SubsidyAmount        float32             `protobuf:"fixed32,9,opt,name=subsidy_amount,proto3" json:"subsidy_amount,omitempty"`
	SubsidyPromotionCode string              `protobuf:"bytes,10,opt,name=subsidy_promotion_code,proto3" json:"subsidy_promotion_code,omitempty"`
	IsMegaSale           bool                `protobuf:"varint,11,opt,name=is_mega_sale,proto3" json:"is_mega_sale,omitempty"`
	SlotId               uint32              `protobuf:"varint,12,opt,name=slot_id,proto3" json:"slot_id,omitempty"`
	FlashDealType        FlashSaleType       `protobuf:"varint,13,opt,name=flash_deal_type,proto3,enum=sendo.v1.api.product.flashdeal.FlashSaleType" json:"flash_deal_type,omitempty"`
	Variants             []*FlashdealVariant `protobuf:"bytes,14,rep,name=variants" json:"variants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FlashDealRequest) Reset()         { *m = FlashDealRequest{} }
func (m *FlashDealRequest) String() string { return proto.CompactTextString(m) }
func (*FlashDealRequest) ProtoMessage()    {}
func (*FlashDealRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{0}
}
func (m *FlashDealRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashDealRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashDealRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FlashDealRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashDealRequest.Merge(dst, src)
}
func (m *FlashDealRequest) XXX_Size() int {
	return m.Size()
}
func (m *FlashDealRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashDealRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlashDealRequest proto.InternalMessageInfo

func (m *FlashDealRequest) GetFlashDealId() int32 {
	if m != nil {
		return m.FlashDealId
	}
	return 0
}

func (m *FlashDealRequest) GetProductExternalId() int64 {
	if m != nil {
		return m.ProductExternalId
	}
	return 0
}

func (m *FlashDealRequest) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *FlashDealRequest) GetFlashDealPrice() float32 {
	if m != nil {
		return m.FlashDealPrice
	}
	return 0
}

func (m *FlashDealRequest) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *FlashDealRequest) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *FlashDealRequest) GetVersionNo() int64 {
	if m != nil {
		return m.VersionNo
	}
	return 0
}

func (m *FlashDealRequest) GetFlashDealQuantity() int32 {
	if m != nil {
		return m.FlashDealQuantity
	}
	return 0
}

func (m *FlashDealRequest) GetSubsidyAmount() float32 {
	if m != nil {
		return m.SubsidyAmount
	}
	return 0
}

func (m *FlashDealRequest) GetSubsidyPromotionCode() string {
	if m != nil {
		return m.SubsidyPromotionCode
	}
	return ""
}

func (m *FlashDealRequest) GetIsMegaSale() bool {
	if m != nil {
		return m.IsMegaSale
	}
	return false
}

func (m *FlashDealRequest) GetSlotId() uint32 {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *FlashDealRequest) GetFlashDealType() FlashSaleType {
	if m != nil {
		return m.FlashDealType
	}
	return FlashSaleType_DEFAULT
}

func (m *FlashDealRequest) GetVariants() []*FlashdealVariant {
	if m != nil {
		return m.Variants
	}
	return nil
}

type FlashdealVariant struct {
	AttributeHash        string   `protobuf:"bytes,1,opt,name=attribute_hash,proto3" json:"attribute_hash,omitempty"`
	FlashDealPrice       float32  `protobuf:"fixed32,2,opt,name=flash_deal_price,proto3" json:"flash_deal_price,omitempty"`
	FlashDealQuantity    int32    `protobuf:"varint,3,opt,name=flash_deal_quantity,proto3" json:"flash_deal_quantity,omitempty"`
	FlashDealRemain      int32    `protobuf:"varint,4,opt,name=flash_deal_remain,proto3" json:"flash_deal_remain,omitempty"`
	PromotionPercent     uint32   `protobuf:"varint,5,opt,name=promotion_percent,proto3" json:"promotion_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlashdealVariant) Reset()         { *m = FlashdealVariant{} }
func (m *FlashdealVariant) String() string { return proto.CompactTextString(m) }
func (*FlashdealVariant) ProtoMessage()    {}
func (*FlashdealVariant) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{1}
}
func (m *FlashdealVariant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashdealVariant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashdealVariant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FlashdealVariant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashdealVariant.Merge(dst, src)
}
func (m *FlashdealVariant) XXX_Size() int {
	return m.Size()
}
func (m *FlashdealVariant) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashdealVariant.DiscardUnknown(m)
}

var xxx_messageInfo_FlashdealVariant proto.InternalMessageInfo

func (m *FlashdealVariant) GetAttributeHash() string {
	if m != nil {
		return m.AttributeHash
	}
	return ""
}

func (m *FlashdealVariant) GetFlashDealPrice() float32 {
	if m != nil {
		return m.FlashDealPrice
	}
	return 0
}

func (m *FlashdealVariant) GetFlashDealQuantity() int32 {
	if m != nil {
		return m.FlashDealQuantity
	}
	return 0
}

func (m *FlashdealVariant) GetFlashDealRemain() int32 {
	if m != nil {
		return m.FlashDealRemain
	}
	return 0
}

func (m *FlashdealVariant) GetPromotionPercent() uint32 {
	if m != nil {
		return m.PromotionPercent
	}
	return 0
}

type AddFlashdealResponse struct {
	Status               int32             `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *FlashDealRequest `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddFlashdealResponse) Reset()         { *m = AddFlashdealResponse{} }
func (m *AddFlashdealResponse) String() string { return proto.CompactTextString(m) }
func (*AddFlashdealResponse) ProtoMessage()    {}
func (*AddFlashdealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{2}
}
func (m *AddFlashdealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFlashdealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFlashdealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddFlashdealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFlashdealResponse.Merge(dst, src)
}
func (m *AddFlashdealResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddFlashdealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFlashdealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddFlashdealResponse proto.InternalMessageInfo

func (m *AddFlashdealResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AddFlashdealResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AddFlashdealResponse) GetData() *FlashDealRequest {
	if m != nil {
		return m.Data
	}
	return nil
}

type FlashDeal struct {
	ProductId            int64               `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	Status               int32               `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	FlashDealPrice       float32             `protobuf:"fixed32,3,opt,name=flash_deal_price,proto3" json:"flash_deal_price,omitempty"`
	StartAt              int64               `protobuf:"varint,4,opt,name=start_at,proto3" json:"start_at,omitempty"`
	EndAt                int64               `protobuf:"varint,5,opt,name=end_at,proto3" json:"end_at,omitempty"`
	FlashDealId          int32               `protobuf:"varint,6,opt,name=flash_deal_id,proto3" json:"flash_deal_id,omitempty"`
	FlashDealQuantity    int32               `protobuf:"varint,7,opt,name=flash_deal_quantity,proto3" json:"flash_deal_quantity,omitempty"`
	FlashDealRemain      int32               `protobuf:"varint,8,opt,name=flash_deal_remain,proto3" json:"flash_deal_remain,omitempty"`
	SendoSupportAmount   float32             `protobuf:"fixed32,9,opt,name=sendo_support_amount,proto3" json:"sendo_support_amount,omitempty"`
	SendoSupportCode     string              `protobuf:"bytes,10,opt,name=sendo_support_code,proto3" json:"sendo_support_code,omitempty"`
	IsMegaSale           bool                `protobuf:"varint,11,opt,name=is_mega_sale,proto3" json:"is_mega_sale,omitempty"`
	SlotId               uint32              `protobuf:"varint,12,opt,name=slot_id,proto3" json:"slot_id,omitempty"`
	FlashDealType        FlashSaleType       `protobuf:"varint,13,opt,name=flash_deal_type,proto3,enum=sendo.v1.api.product.flashdeal.FlashSaleType" json:"flash_deal_type,omitempty"`
	Variants             []*FlashdealVariant `protobuf:"bytes,14,rep,name=variants" json:"variants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FlashDeal) Reset()         { *m = FlashDeal{} }
func (m *FlashDeal) String() string { return proto.CompactTextString(m) }
func (*FlashDeal) ProtoMessage()    {}
func (*FlashDeal) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{3}
}
func (m *FlashDeal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashDeal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashDeal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FlashDeal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashDeal.Merge(dst, src)
}
func (m *FlashDeal) XXX_Size() int {
	return m.Size()
}
func (m *FlashDeal) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashDeal.DiscardUnknown(m)
}

var xxx_messageInfo_FlashDeal proto.InternalMessageInfo

func (m *FlashDeal) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *FlashDeal) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *FlashDeal) GetFlashDealPrice() float32 {
	if m != nil {
		return m.FlashDealPrice
	}
	return 0
}

func (m *FlashDeal) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *FlashDeal) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *FlashDeal) GetFlashDealId() int32 {
	if m != nil {
		return m.FlashDealId
	}
	return 0
}

func (m *FlashDeal) GetFlashDealQuantity() int32 {
	if m != nil {
		return m.FlashDealQuantity
	}
	return 0
}

func (m *FlashDeal) GetFlashDealRemain() int32 {
	if m != nil {
		return m.FlashDealRemain
	}
	return 0
}

func (m *FlashDeal) GetSendoSupportAmount() float32 {
	if m != nil {
		return m.SendoSupportAmount
	}
	return 0
}

func (m *FlashDeal) GetSendoSupportCode() string {
	if m != nil {
		return m.SendoSupportCode
	}
	return ""
}

func (m *FlashDeal) GetIsMegaSale() bool {
	if m != nil {
		return m.IsMegaSale
	}
	return false
}

func (m *FlashDeal) GetSlotId() uint32 {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *FlashDeal) GetFlashDealType() FlashSaleType {
	if m != nil {
		return m.FlashDealType
	}
	return FlashSaleType_DEFAULT
}

func (m *FlashDeal) GetVariants() []*FlashdealVariant {
	if m != nil {
		return m.Variants
	}
	return nil
}

type CheckFlashDeal struct {
	ProductId            int64    `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckFlashDeal) Reset()         { *m = CheckFlashDeal{} }
func (m *CheckFlashDeal) String() string { return proto.CompactTextString(m) }
func (*CheckFlashDeal) ProtoMessage()    {}
func (*CheckFlashDeal) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{4}
}
func (m *CheckFlashDeal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckFlashDeal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckFlashDeal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckFlashDeal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckFlashDeal.Merge(dst, src)
}
func (m *CheckFlashDeal) XXX_Size() int {
	return m.Size()
}
func (m *CheckFlashDeal) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckFlashDeal.DiscardUnknown(m)
}

var xxx_messageInfo_CheckFlashDeal proto.InternalMessageInfo

func (m *CheckFlashDeal) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

type CheckFlashDealResponse struct {
	Status               int32      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data                 *FlashDeal `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CheckFlashDealResponse) Reset()         { *m = CheckFlashDealResponse{} }
func (m *CheckFlashDealResponse) String() string { return proto.CompactTextString(m) }
func (*CheckFlashDealResponse) ProtoMessage()    {}
func (*CheckFlashDealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{5}
}
func (m *CheckFlashDealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckFlashDealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckFlashDealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckFlashDealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckFlashDealResponse.Merge(dst, src)
}
func (m *CheckFlashDealResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckFlashDealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckFlashDealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckFlashDealResponse proto.InternalMessageInfo

func (m *CheckFlashDealResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CheckFlashDealResponse) GetData() *FlashDeal {
	if m != nil {
		return m.Data
	}
	return nil
}

type CheckFlashDeals struct {
	ProductIds           string   `protobuf:"bytes,1,opt,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
	CurrentActive        bool     `protobuf:"varint,2,opt,name=current_active,json=currentActive,proto3" json:"current_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckFlashDeals) Reset()         { *m = CheckFlashDeals{} }
func (m *CheckFlashDeals) String() string { return proto.CompactTextString(m) }
func (*CheckFlashDeals) ProtoMessage()    {}
func (*CheckFlashDeals) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{6}
}
func (m *CheckFlashDeals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckFlashDeals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckFlashDeals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckFlashDeals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckFlashDeals.Merge(dst, src)
}
func (m *CheckFlashDeals) XXX_Size() int {
	return m.Size()
}
func (m *CheckFlashDeals) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckFlashDeals.DiscardUnknown(m)
}

var xxx_messageInfo_CheckFlashDeals proto.InternalMessageInfo

func (m *CheckFlashDeals) GetProductIds() string {
	if m != nil {
		return m.ProductIds
	}
	return ""
}

func (m *CheckFlashDeals) GetCurrentActive() bool {
	if m != nil {
		return m.CurrentActive
	}
	return false
}

type CheckFlashDealsResponse struct {
	Status               int32                `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data                 map[int64]*FlashDeal `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CheckFlashDealsResponse) Reset()         { *m = CheckFlashDealsResponse{} }
func (m *CheckFlashDealsResponse) String() string { return proto.CompactTextString(m) }
func (*CheckFlashDealsResponse) ProtoMessage()    {}
func (*CheckFlashDealsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{7}
}
func (m *CheckFlashDealsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckFlashDealsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckFlashDealsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckFlashDealsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckFlashDealsResponse.Merge(dst, src)
}
func (m *CheckFlashDealsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckFlashDealsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckFlashDealsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckFlashDealsResponse proto.InternalMessageInfo

func (m *CheckFlashDealsResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CheckFlashDealsResponse) GetData() map[int64]*FlashDeal {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateRemainRequest struct {
	FlashDealId          int32                     `protobuf:"varint,1,opt,name=flash_deal_id,json=flashDealId,proto3" json:"flash_deal_id,omitempty"`
	ProductExternalId    int64                     `protobuf:"varint,2,opt,name=product_external_id,json=productExternalId,proto3" json:"product_external_id,omitempty"`
	FlashDealRemain      int32                     `protobuf:"varint,3,opt,name=flash_deal_remain,json=flashDealRemain,proto3" json:"flash_deal_remain,omitempty"`
	VersionNo            int64                     `protobuf:"varint,4,opt,name=version_no,json=versionNo,proto3" json:"version_no,omitempty"`
	Variants             []*FlashdealVariantRemain `protobuf:"bytes,5,rep,name=variants" json:"variants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpdateRemainRequest) Reset()         { *m = UpdateRemainRequest{} }
func (m *UpdateRemainRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRemainRequest) ProtoMessage()    {}
func (*UpdateRemainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{8}
}
func (m *UpdateRemainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRemainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRemainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateRemainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRemainRequest.Merge(dst, src)
}
func (m *UpdateRemainRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRemainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRemainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRemainRequest proto.InternalMessageInfo

func (m *UpdateRemainRequest) GetFlashDealId() int32 {
	if m != nil {
		return m.FlashDealId
	}
	return 0
}

func (m *UpdateRemainRequest) GetProductExternalId() int64 {
	if m != nil {
		return m.ProductExternalId
	}
	return 0
}

func (m *UpdateRemainRequest) GetFlashDealRemain() int32 {
	if m != nil {
		return m.FlashDealRemain
	}
	return 0
}

func (m *UpdateRemainRequest) GetVersionNo() int64 {
	if m != nil {
		return m.VersionNo
	}
	return 0
}

func (m *UpdateRemainRequest) GetVariants() []*FlashdealVariantRemain {
	if m != nil {
		return m.Variants
	}
	return nil
}

type FlashdealVariantRemain struct {
	AttributeHash        string   `protobuf:"bytes,1,opt,name=attribute_hash,json=attributeHash,proto3" json:"attribute_hash,omitempty"`
	FlashDealRemain      int32    `protobuf:"varint,2,opt,name=flash_deal_remain,json=flashDealRemain,proto3" json:"flash_deal_remain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlashdealVariantRemain) Reset()         { *m = FlashdealVariantRemain{} }
func (m *FlashdealVariantRemain) String() string { return proto.CompactTextString(m) }
func (*FlashdealVariantRemain) ProtoMessage()    {}
func (*FlashdealVariantRemain) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{9}
}
func (m *FlashdealVariantRemain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashdealVariantRemain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashdealVariantRemain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FlashdealVariantRemain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashdealVariantRemain.Merge(dst, src)
}
func (m *FlashdealVariantRemain) XXX_Size() int {
	return m.Size()
}
func (m *FlashdealVariantRemain) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashdealVariantRemain.DiscardUnknown(m)
}

var xxx_messageInfo_FlashdealVariantRemain proto.InternalMessageInfo

func (m *FlashdealVariantRemain) GetAttributeHash() string {
	if m != nil {
		return m.AttributeHash
	}
	return ""
}

func (m *FlashdealVariantRemain) GetFlashDealRemain() int32 {
	if m != nil {
		return m.FlashDealRemain
	}
	return 0
}

type UpdateRemainResponse struct {
	Status               int32                `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *UpdateRemainRequest `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpdateRemainResponse) Reset()         { *m = UpdateRemainResponse{} }
func (m *UpdateRemainResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRemainResponse) ProtoMessage()    {}
func (*UpdateRemainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{10}
}
func (m *UpdateRemainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRemainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRemainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateRemainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRemainResponse.Merge(dst, src)
}
func (m *UpdateRemainResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRemainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRemainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRemainResponse proto.InternalMessageInfo

func (m *UpdateRemainResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateRemainResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UpdateRemainResponse) GetData() *UpdateRemainRequest {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetFlashDeals struct {
	ProductIds           []int64  `protobuf:"varint,1,rep,packed,name=product_ids,json=productIds" json:"product_ids,omitempty"`
	CurrentActive        bool     `protobuf:"varint,2,opt,name=current_active,json=currentActive,proto3" json:"current_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFlashDeals) Reset()         { *m = GetFlashDeals{} }
func (m *GetFlashDeals) String() string { return proto.CompactTextString(m) }
func (*GetFlashDeals) ProtoMessage()    {}
func (*GetFlashDeals) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{11}
}
func (m *GetFlashDeals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlashDeals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlashDeals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetFlashDeals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlashDeals.Merge(dst, src)
}
func (m *GetFlashDeals) XXX_Size() int {
	return m.Size()
}
func (m *GetFlashDeals) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlashDeals.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlashDeals proto.InternalMessageInfo

func (m *GetFlashDeals) GetProductIds() []int64 {
	if m != nil {
		return m.ProductIds
	}
	return nil
}

func (m *GetFlashDeals) GetCurrentActive() bool {
	if m != nil {
		return m.CurrentActive
	}
	return false
}

type GetFlashDealsResponse struct {
	Status               int32                `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data                 map[int64]*FlashDeal `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetFlashDealsResponse) Reset()         { *m = GetFlashDealsResponse{} }
func (m *GetFlashDealsResponse) String() string { return proto.CompactTextString(m) }
func (*GetFlashDealsResponse) ProtoMessage()    {}
func (*GetFlashDealsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{12}
}
func (m *GetFlashDealsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlashDealsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlashDealsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetFlashDealsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlashDealsResponse.Merge(dst, src)
}
func (m *GetFlashDealsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFlashDealsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlashDealsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlashDealsResponse proto.InternalMessageInfo

func (m *GetFlashDealsResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetFlashDealsResponse) GetData() map[int64]*FlashDeal {
	if m != nil {
		return m.Data
	}
	return nil
}

type RemoveProductFlashDealsResponse struct {
	Removed              int64    `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveProductFlashDealsResponse) Reset()         { *m = RemoveProductFlashDealsResponse{} }
func (m *RemoveProductFlashDealsResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveProductFlashDealsResponse) ProtoMessage()    {}
func (*RemoveProductFlashDealsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_productflashdeal_5a53baa61cec15b5, []int{13}
}
func (m *RemoveProductFlashDealsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveProductFlashDealsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveProductFlashDealsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveProductFlashDealsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveProductFlashDealsResponse.Merge(dst, src)
}
func (m *RemoveProductFlashDealsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveProductFlashDealsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveProductFlashDealsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveProductFlashDealsResponse proto.InternalMessageInfo

func (m *RemoveProductFlashDealsResponse) GetRemoved() int64 {
	if m != nil {
		return m.Removed
	}
	return 0
}

func init() {
	proto.RegisterType((*FlashDealRequest)(nil), "sendo.v1.api.product.flashdeal.FlashDealRequest")
	proto.RegisterType((*FlashdealVariant)(nil), "sendo.v1.api.product.flashdeal.FlashdealVariant")
	proto.RegisterType((*AddFlashdealResponse)(nil), "sendo.v1.api.product.flashdeal.AddFlashdealResponse")
	proto.RegisterType((*FlashDeal)(nil), "sendo.v1.api.product.flashdeal.FlashDeal")
	proto.RegisterType((*CheckFlashDeal)(nil), "sendo.v1.api.product.flashdeal.CheckFlashDeal")
	proto.RegisterType((*CheckFlashDealResponse)(nil), "sendo.v1.api.product.flashdeal.CheckFlashDealResponse")
	proto.RegisterType((*CheckFlashDeals)(nil), "sendo.v1.api.product.flashdeal.CheckFlashDeals")
	proto.RegisterType((*CheckFlashDealsResponse)(nil), "sendo.v1.api.product.flashdeal.CheckFlashDealsResponse")
	proto.RegisterMapType((map[int64]*FlashDeal)(nil), "sendo.v1.api.product.flashdeal.CheckFlashDealsResponse.DataEntry")
	proto.RegisterType((*UpdateRemainRequest)(nil), "sendo.v1.api.product.flashdeal.UpdateRemainRequest")
	proto.RegisterType((*FlashdealVariantRemain)(nil), "sendo.v1.api.product.flashdeal.FlashdealVariantRemain")
	proto.RegisterType((*UpdateRemainResponse)(nil), "sendo.v1.api.product.flashdeal.UpdateRemainResponse")
	proto.RegisterType((*GetFlashDeals)(nil), "sendo.v1.api.product.flashdeal.GetFlashDeals")
	proto.RegisterType((*GetFlashDealsResponse)(nil), "sendo.v1.api.product.flashdeal.GetFlashDealsResponse")
	proto.RegisterMapType((map[int64]*FlashDeal)(nil), "sendo.v1.api.product.flashdeal.GetFlashDealsResponse.DataEntry")
	proto.RegisterType((*RemoveProductFlashDealsResponse)(nil), "sendo.v1.api.product.flashdeal.RemoveProductFlashDealsResponse")
	proto.RegisterEnum("sendo.v1.api.product.flashdeal.FlashSaleType", FlashSaleType_name, FlashSaleType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProductFlashdealServiceClient is the client API for ProductFlashdealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductFlashdealServiceClient interface {
	// Api add/update flashdeal data
	AddFlashDeal(ctx context.Context, in *FlashDealRequest, opts ...grpc.CallOption) (*AddFlashdealResponse, error)
	// Api update flashdeal remain
	UpdateFlashDealRemain(ctx context.Context, in *UpdateRemainRequest, opts ...grpc.CallOption) (*UpdateRemainResponse, error)
	// Api return flashdeal data of inputed product_id
	CheckActiveFlashDeal(ctx context.Context, in *CheckFlashDeal, opts ...grpc.CallOption) (*CheckFlashDealResponse, error)
	// Api return an array of flashdeal data of inputed string product_ids
	CheckActiveFlashDeals(ctx context.Context, in *CheckFlashDeals, opts ...grpc.CallOption) (*CheckFlashDealsResponse, error)
	// Api return an array of flashdeal data of inputed []int64 product_ids
	GetActiveFlashDeals(ctx context.Context, in *GetFlashDeals, opts ...grpc.CallOption) (*GetFlashDealsResponse, error)
	// Remove flash deals of a product from redis
	RemoveRedisProductFlashDeals(ctx context.Context, in *CheckFlashDeal, opts ...grpc.CallOption) (*RemoveProductFlashDealsResponse, error)
}

type productFlashdealServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductFlashdealServiceClient(cc *grpc.ClientConn) ProductFlashdealServiceClient {
	return &productFlashdealServiceClient{cc}
}

func (c *productFlashdealServiceClient) AddFlashDeal(ctx context.Context, in *FlashDealRequest, opts ...grpc.CallOption) (*AddFlashdealResponse, error) {
	out := new(AddFlashdealResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.product.flashdeal.ProductFlashdealService/AddFlashDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFlashdealServiceClient) UpdateFlashDealRemain(ctx context.Context, in *UpdateRemainRequest, opts ...grpc.CallOption) (*UpdateRemainResponse, error) {
	out := new(UpdateRemainResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.product.flashdeal.ProductFlashdealService/UpdateFlashDealRemain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFlashdealServiceClient) CheckActiveFlashDeal(ctx context.Context, in *CheckFlashDeal, opts ...grpc.CallOption) (*CheckFlashDealResponse, error) {
	out := new(CheckFlashDealResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.product.flashdeal.ProductFlashdealService/CheckActiveFlashDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFlashdealServiceClient) CheckActiveFlashDeals(ctx context.Context, in *CheckFlashDeals, opts ...grpc.CallOption) (*CheckFlashDealsResponse, error) {
	out := new(CheckFlashDealsResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.product.flashdeal.ProductFlashdealService/CheckActiveFlashDeals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFlashdealServiceClient) GetActiveFlashDeals(ctx context.Context, in *GetFlashDeals, opts ...grpc.CallOption) (*GetFlashDealsResponse, error) {
	out := new(GetFlashDealsResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.product.flashdeal.ProductFlashdealService/GetActiveFlashDeals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFlashdealServiceClient) RemoveRedisProductFlashDeals(ctx context.Context, in *CheckFlashDeal, opts ...grpc.CallOption) (*RemoveProductFlashDealsResponse, error) {
	out := new(RemoveProductFlashDealsResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.product.flashdeal.ProductFlashdealService/RemoveRedisProductFlashDeals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductFlashdealServiceServer is the server API for ProductFlashdealService service.
type ProductFlashdealServiceServer interface {
	// Api add/update flashdeal data
	AddFlashDeal(context.Context, *FlashDealRequest) (*AddFlashdealResponse, error)
	// Api update flashdeal remain
	UpdateFlashDealRemain(context.Context, *UpdateRemainRequest) (*UpdateRemainResponse, error)
	// Api return flashdeal data of inputed product_id
	CheckActiveFlashDeal(context.Context, *CheckFlashDeal) (*CheckFlashDealResponse, error)
	// Api return an array of flashdeal data of inputed string product_ids
	CheckActiveFlashDeals(context.Context, *CheckFlashDeals) (*CheckFlashDealsResponse, error)
	// Api return an array of flashdeal data of inputed []int64 product_ids
	GetActiveFlashDeals(context.Context, *GetFlashDeals) (*GetFlashDealsResponse, error)
	// Remove flash deals of a product from redis
	RemoveRedisProductFlashDeals(context.Context, *CheckFlashDeal) (*RemoveProductFlashDealsResponse, error)
}

func RegisterProductFlashdealServiceServer(s *grpc.Server, srv ProductFlashdealServiceServer) {
	s.RegisterService(&_ProductFlashdealService_serviceDesc, srv)
}

func _ProductFlashdealService_AddFlashDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlashDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFlashdealServiceServer).AddFlashDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.product.flashdeal.ProductFlashdealService/AddFlashDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFlashdealServiceServer).AddFlashDeal(ctx, req.(*FlashDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFlashdealService_UpdateFlashDealRemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFlashdealServiceServer).UpdateFlashDealRemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.product.flashdeal.ProductFlashdealService/UpdateFlashDealRemain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFlashdealServiceServer).UpdateFlashDealRemain(ctx, req.(*UpdateRemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFlashdealService_CheckActiveFlashDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFlashDeal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFlashdealServiceServer).CheckActiveFlashDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.product.flashdeal.ProductFlashdealService/CheckActiveFlashDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFlashdealServiceServer).CheckActiveFlashDeal(ctx, req.(*CheckFlashDeal))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFlashdealService_CheckActiveFlashDeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFlashDeals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFlashdealServiceServer).CheckActiveFlashDeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.product.flashdeal.ProductFlashdealService/CheckActiveFlashDeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFlashdealServiceServer).CheckActiveFlashDeals(ctx, req.(*CheckFlashDeals))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFlashdealService_GetActiveFlashDeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlashDeals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFlashdealServiceServer).GetActiveFlashDeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.product.flashdeal.ProductFlashdealService/GetActiveFlashDeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFlashdealServiceServer).GetActiveFlashDeals(ctx, req.(*GetFlashDeals))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFlashdealService_RemoveRedisProductFlashDeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFlashDeal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFlashdealServiceServer).RemoveRedisProductFlashDeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.product.flashdeal.ProductFlashdealService/RemoveRedisProductFlashDeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFlashdealServiceServer).RemoveRedisProductFlashDeals(ctx, req.(*CheckFlashDeal))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductFlashdealService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.product.flashdeal.ProductFlashdealService",
	HandlerType: (*ProductFlashdealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFlashDeal",
			Handler:    _ProductFlashdealService_AddFlashDeal_Handler,
		},
		{
			MethodName: "UpdateFlashDealRemain",
			Handler:    _ProductFlashdealService_UpdateFlashDealRemain_Handler,
		},
		{
			MethodName: "CheckActiveFlashDeal",
			Handler:    _ProductFlashdealService_CheckActiveFlashDeal_Handler,
		},
		{
			MethodName: "CheckActiveFlashDeals",
			Handler:    _ProductFlashdealService_CheckActiveFlashDeals_Handler,
		},
		{
			MethodName: "GetActiveFlashDeals",
			Handler:    _ProductFlashdealService_GetActiveFlashDeals_Handler,
		},
		{
			MethodName: "RemoveRedisProductFlashDeals",
			Handler:    _ProductFlashdealService_RemoveRedisProductFlashDeals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/flashdeal/productflashdeal.proto",
}

func (m *FlashDealRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashDealRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlashDealId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealId))
	}
	if m.ProductExternalId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.ProductExternalId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Status))
	}
	if m.FlashDealPrice != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FlashDealPrice))))
		i += 4
	}
	if m.StartAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.EndAt))
	}
	if m.VersionNo != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.VersionNo))
	}
	if m.FlashDealQuantity != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealQuantity))
	}
	if m.SubsidyAmount != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubsidyAmount))))
		i += 4
	}
	if len(m.SubsidyPromotionCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(len(m.SubsidyPromotionCode)))
		i += copy(dAtA[i:], m.SubsidyPromotionCode)
	}
	if m.IsMegaSale {
		dAtA[i] = 0x58
		i++
		if m.IsMegaSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SlotId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.SlotId))
	}
	if m.FlashDealType != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealType))
	}
	if len(m.Variants) > 0 {
		for _, msg := range m.Variants {
			dAtA[i] = 0x72
			i++
			i = encodeVarintProductflashdeal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlashdealVariant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashdealVariant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttributeHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(len(m.AttributeHash)))
		i += copy(dAtA[i:], m.AttributeHash)
	}
	if m.FlashDealPrice != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FlashDealPrice))))
		i += 4
	}
	if m.FlashDealQuantity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealQuantity))
	}
	if m.FlashDealRemain != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealRemain))
	}
	if m.PromotionPercent != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.PromotionPercent))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddFlashdealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFlashdealResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlashDeal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashDeal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.ProductId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Status))
	}
	if m.FlashDealPrice != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FlashDealPrice))))
		i += 4
	}
	if m.StartAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.EndAt))
	}
	if m.FlashDealId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealId))
	}
	if m.FlashDealQuantity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealQuantity))
	}
	if m.FlashDealRemain != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealRemain))
	}
	if m.SendoSupportAmount != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SendoSupportAmount))))
		i += 4
	}
	if len(m.SendoSupportCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(len(m.SendoSupportCode)))
		i += copy(dAtA[i:], m.SendoSupportCode)
	}
	if m.IsMegaSale {
		dAtA[i] = 0x58
		i++
		if m.IsMegaSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SlotId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.SlotId))
	}
	if m.FlashDealType != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealType))
	}
	if len(m.Variants) > 0 {
		for _, msg := range m.Variants {
			dAtA[i] = 0x72
			i++
			i = encodeVarintProductflashdeal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckFlashDeal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckFlashDeal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckFlashDealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckFlashDealResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Status))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckFlashDeals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckFlashDeals) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProductIds) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(len(m.ProductIds)))
		i += copy(dAtA[i:], m.ProductIds)
	}
	if m.CurrentActive {
		dAtA[i] = 0x10
		i++
		if m.CurrentActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckFlashDealsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckFlashDealsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Status))
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x12
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProductflashdeal(uint64(msgSize))
			}
			mapSize := 1 + sovProductflashdeal(uint64(k)) + msgSize
			i = encodeVarintProductflashdeal(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintProductflashdeal(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProductflashdeal(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateRemainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRemainRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlashDealId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealId))
	}
	if m.ProductExternalId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.ProductExternalId))
	}
	if m.FlashDealRemain != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealRemain))
	}
	if m.VersionNo != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.VersionNo))
	}
	if len(m.Variants) > 0 {
		for _, msg := range m.Variants {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintProductflashdeal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlashdealVariantRemain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashdealVariantRemain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttributeHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(len(m.AttributeHash)))
		i += copy(dAtA[i:], m.AttributeHash)
	}
	if m.FlashDealRemain != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.FlashDealRemain))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateRemainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRemainResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetFlashDeals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlashDeals) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProductIds) > 0 {
		dAtA6 := make([]byte, len(m.ProductIds)*10)
		var j5 int
		for _, num1 := range m.ProductIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.CurrentActive {
		dAtA[i] = 0x10
		i++
		if m.CurrentActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetFlashDealsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlashDealsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Status))
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x12
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProductflashdeal(uint64(msgSize))
			}
			mapSize := 1 + sovProductflashdeal(uint64(k)) + msgSize
			i = encodeVarintProductflashdeal(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintProductflashdeal(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProductflashdeal(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveProductFlashDealsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveProductFlashDealsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Removed != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProductflashdeal(dAtA, i, uint64(m.Removed))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintProductflashdeal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlashDealRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlashDealId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealId))
	}
	if m.ProductExternalId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.ProductExternalId))
	}
	if m.Status != 0 {
		n += 1 + sovProductflashdeal(uint64(m.Status))
	}
	if m.FlashDealPrice != 0 {
		n += 5
	}
	if m.StartAt != 0 {
		n += 1 + sovProductflashdeal(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovProductflashdeal(uint64(m.EndAt))
	}
	if m.VersionNo != 0 {
		n += 1 + sovProductflashdeal(uint64(m.VersionNo))
	}
	if m.FlashDealQuantity != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealQuantity))
	}
	if m.SubsidyAmount != 0 {
		n += 5
	}
	l = len(m.SubsidyPromotionCode)
	if l > 0 {
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.IsMegaSale {
		n += 2
	}
	if m.SlotId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.SlotId))
	}
	if m.FlashDealType != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealType))
	}
	if len(m.Variants) > 0 {
		for _, e := range m.Variants {
			l = e.Size()
			n += 1 + l + sovProductflashdeal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashdealVariant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttributeHash)
	if l > 0 {
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.FlashDealPrice != 0 {
		n += 5
	}
	if m.FlashDealQuantity != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealQuantity))
	}
	if m.FlashDealRemain != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealRemain))
	}
	if m.PromotionPercent != 0 {
		n += 1 + sovProductflashdeal(uint64(m.PromotionPercent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFlashdealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProductflashdeal(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashDeal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.ProductId))
	}
	if m.Status != 0 {
		n += 1 + sovProductflashdeal(uint64(m.Status))
	}
	if m.FlashDealPrice != 0 {
		n += 5
	}
	if m.StartAt != 0 {
		n += 1 + sovProductflashdeal(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovProductflashdeal(uint64(m.EndAt))
	}
	if m.FlashDealId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealId))
	}
	if m.FlashDealQuantity != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealQuantity))
	}
	if m.FlashDealRemain != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealRemain))
	}
	if m.SendoSupportAmount != 0 {
		n += 5
	}
	l = len(m.SendoSupportCode)
	if l > 0 {
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.IsMegaSale {
		n += 2
	}
	if m.SlotId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.SlotId))
	}
	if m.FlashDealType != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealType))
	}
	if len(m.Variants) > 0 {
		for _, e := range m.Variants {
			l = e.Size()
			n += 1 + l + sovProductflashdeal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckFlashDeal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckFlashDealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProductflashdeal(uint64(m.Status))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckFlashDeals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProductIds)
	if l > 0 {
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.CurrentActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckFlashDealsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProductflashdeal(uint64(m.Status))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProductflashdeal(uint64(l))
			}
			mapEntrySize := 1 + sovProductflashdeal(uint64(k)) + l
			n += mapEntrySize + 1 + sovProductflashdeal(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRemainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlashDealId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealId))
	}
	if m.ProductExternalId != 0 {
		n += 1 + sovProductflashdeal(uint64(m.ProductExternalId))
	}
	if m.FlashDealRemain != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealRemain))
	}
	if m.VersionNo != 0 {
		n += 1 + sovProductflashdeal(uint64(m.VersionNo))
	}
	if len(m.Variants) > 0 {
		for _, e := range m.Variants {
			l = e.Size()
			n += 1 + l + sovProductflashdeal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashdealVariantRemain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttributeHash)
	if l > 0 {
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.FlashDealRemain != 0 {
		n += 1 + sovProductflashdeal(uint64(m.FlashDealRemain))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRemainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProductflashdeal(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovProductflashdeal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetFlashDeals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductIds) > 0 {
		l = 0
		for _, e := range m.ProductIds {
			l += sovProductflashdeal(uint64(e))
		}
		n += 1 + sovProductflashdeal(uint64(l)) + l
	}
	if m.CurrentActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetFlashDealsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProductflashdeal(uint64(m.Status))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProductflashdeal(uint64(l))
			}
			mapEntrySize := 1 + sovProductflashdeal(uint64(k)) + l
			n += mapEntrySize + 1 + sovProductflashdeal(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveProductFlashDealsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Removed != 0 {
		n += 1 + sovProductflashdeal(uint64(m.Removed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProductflashdeal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProductflashdeal(x uint64) (n int) {
	return sovProductflashdeal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlashDealRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashDealRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashDealRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealId", wireType)
			}
			m.FlashDealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductExternalId", wireType)
			}
			m.ProductExternalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductExternalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FlashDealPrice = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNo", wireType)
			}
			m.VersionNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealQuantity", wireType)
			}
			m.FlashDealQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealQuantity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsidyAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubsidyAmount = float32(math.Float32frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsidyPromotionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubsidyPromotionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMegaSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMegaSale = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealType", wireType)
			}
			m.FlashDealType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealType |= (FlashSaleType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variants = append(m.Variants, &FlashdealVariant{})
			if err := m.Variants[len(m.Variants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashdealVariant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashdealVariant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashdealVariant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FlashDealPrice = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealQuantity", wireType)
			}
			m.FlashDealQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealQuantity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealRemain", wireType)
			}
			m.FlashDealRemain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealRemain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionPercent", wireType)
			}
			m.PromotionPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotionPercent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFlashdealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFlashdealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFlashdealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FlashDealRequest{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashDeal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashDeal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashDeal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FlashDealPrice = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealId", wireType)
			}
			m.FlashDealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealQuantity", wireType)
			}
			m.FlashDealQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealQuantity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealRemain", wireType)
			}
			m.FlashDealRemain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealRemain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoSupportAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SendoSupportAmount = float32(math.Float32frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoSupportCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendoSupportCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMegaSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMegaSale = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealType", wireType)
			}
			m.FlashDealType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealType |= (FlashSaleType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variants = append(m.Variants, &FlashdealVariant{})
			if err := m.Variants[len(m.Variants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckFlashDeal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckFlashDeal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckFlashDeal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckFlashDealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckFlashDealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckFlashDealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FlashDeal{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckFlashDeals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckFlashDeals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckFlashDeals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckFlashDealsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckFlashDealsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckFlashDealsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*FlashDeal)
			}
			var mapkey int64
			var mapvalue *FlashDeal
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProductflashdeal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProductflashdeal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProductflashdeal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProductflashdeal
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProductflashdeal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FlashDeal{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProductflashdeal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProductflashdeal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRemainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRemainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRemainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealId", wireType)
			}
			m.FlashDealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductExternalId", wireType)
			}
			m.ProductExternalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductExternalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealRemain", wireType)
			}
			m.FlashDealRemain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealRemain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNo", wireType)
			}
			m.VersionNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variants = append(m.Variants, &FlashdealVariantRemain{})
			if err := m.Variants[len(m.Variants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashdealVariantRemain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashdealVariantRemain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashdealVariantRemain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDealRemain", wireType)
			}
			m.FlashDealRemain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashDealRemain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRemainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRemainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRemainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UpdateRemainRequest{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlashDeals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFlashDeals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFlashDeals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProductflashdeal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProductIds = append(m.ProductIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProductflashdeal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProductflashdeal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ProductIds) == 0 {
					m.ProductIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProductflashdeal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProductIds = append(m.ProductIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlashDealsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFlashDealsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFlashDealsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*FlashDeal)
			}
			var mapkey int64
			var mapvalue *FlashDeal
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProductflashdeal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProductflashdeal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProductflashdeal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProductflashdeal
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProductflashdeal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FlashDeal{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProductflashdeal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProductflashdeal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveProductFlashDealsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveProductFlashDealsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveProductFlashDealsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			m.Removed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Removed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProductflashdeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProductflashdeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProductflashdeal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProductflashdeal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProductflashdeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProductflashdeal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProductflashdeal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProductflashdeal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProductflashdeal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProductflashdeal   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("product/flashdeal/productflashdeal.proto", fileDescriptor_productflashdeal_5a53baa61cec15b5)
}

var fileDescriptor_productflashdeal_5a53baa61cec15b5 = []byte{
	// 1222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xef, 0x24, 0x4d, 0x93, 0xbc, 0x36, 0x69, 0x76, 0xfa, 0xcf, 0x8a, 0xb6, 0x6d, 0xd6, 0x02,
	0x36, 0x5b, 0xd1, 0x78, 0xe9, 0x42, 0x81, 0x5d, 0xad, 0x56, 0xa1, 0xff, 0xa8, 0x08, 0x2b, 0xe4,
	0x6e, 0x59, 0xed, 0x5e, 0xac, 0x49, 0x3c, 0x4d, 0xad, 0x26, 0xb6, 0xd7, 0x33, 0x89, 0x88, 0x50,
	0x2f, 0x88, 0x03, 0x27, 0x24, 0x84, 0xf8, 0x0c, 0x7c, 0x0d, 0x4e, 0x88, 0x23, 0x12, 0x5f, 0x00,
	0x55, 0x1c, 0x38, 0xc0, 0x05, 0x71, 0xe1, 0x86, 0x3c, 0x76, 0x1c, 0xbb, 0x71, 0x9a, 0xa6, 0x17,
	0x0e, 0xdc, 0x32, 0xef, 0xbd, 0x79, 0x7e, 0x7f, 0x7e, 0xbf, 0xf7, 0xa6, 0x85, 0xb2, 0xed, 0x58,
	0x7a, 0xa7, 0xc1, 0x95, 0x93, 0x16, 0x61, 0xa7, 0x3a, 0x25, 0x2d, 0xc5, 0x97, 0x04, 0x82, 0x8a,
	0xed, 0x58, 0xdc, 0xc2, 0x6b, 0x8c, 0x9a, 0xba, 0x55, 0xe9, 0xbe, 0x55, 0x21, 0xb6, 0x51, 0xf1,
	0x8d, 0x2a, 0x81, 0x55, 0xf1, 0x76, 0xd3, 0xb2, 0x9a, 0x2d, 0xaa, 0x10, 0xdb, 0x50, 0x88, 0x69,
	0x5a, 0x9c, 0x70, 0xc3, 0x32, 0x99, 0x77, 0x5b, 0xfe, 0x67, 0x1a, 0x0a, 0xfb, 0xae, 0xed, 0x2e,
	0x25, 0x2d, 0x95, 0xbe, 0xea, 0x50, 0xc6, 0xf1, 0x6b, 0x90, 0x13, 0xf7, 0x35, 0xd7, 0x81, 0x66,
	0xe8, 0x12, 0x2a, 0xa1, 0x72, 0x4a, 0x8d, 0x0a, 0xf1, 0x7d, 0x58, 0xf0, 0xbf, 0xa6, 0xd1, 0xcf,
	0x38, 0x75, 0x4c, 0xcf, 0x36, 0x51, 0x42, 0xe5, 0xa4, 0x1a, 0xa7, 0xc2, 0xcb, 0x30, 0xc3, 0x38,
	0xe1, 0x1d, 0x26, 0x25, 0x85, 0x43, 0xff, 0x84, 0x37, 0xa0, 0x10, 0x72, 0x6d, 0x3b, 0x46, 0x83,
	0x4a, 0xd3, 0x25, 0x54, 0x4e, 0xa8, 0x43, 0x72, 0x5c, 0x84, 0x0c, 0xe3, 0xc4, 0xe1, 0x1a, 0xe1,
	0x52, 0x4a, 0x7c, 0x2a, 0x38, 0xbb, 0xfe, 0xa9, 0xa9, 0xbb, 0x9a, 0x19, 0xa1, 0xf1, 0x4f, 0x78,
	0x0d, 0xa0, 0x4b, 0x1d, 0x66, 0x58, 0xa6, 0x66, 0x5a, 0x52, 0x5a, 0xe8, 0x42, 0x12, 0x37, 0x93,
	0xd0, 0x77, 0x5e, 0x75, 0x88, 0xc9, 0x0d, 0xde, 0x93, 0x32, 0x22, 0xc8, 0x38, 0x15, 0x7e, 0x03,
	0xf2, 0xac, 0x53, 0x67, 0x86, 0xde, 0xd3, 0x48, 0xdb, 0xea, 0x98, 0x5c, 0xca, 0x8a, 0x78, 0x2f,
	0x49, 0xf1, 0x36, 0x2c, 0xf7, 0x25, 0xb6, 0x63, 0xb5, 0x2d, 0xb7, 0xf4, 0x5a, 0xc3, 0xd2, 0xa9,
	0x04, 0x25, 0x54, 0xce, 0xaa, 0x23, 0xb4, 0x58, 0x86, 0x39, 0x83, 0x69, 0x6d, 0xda, 0x24, 0x1a,
	0x23, 0x2d, 0x2a, 0xcd, 0x96, 0x50, 0x39, 0xa3, 0x46, 0x64, 0x58, 0x82, 0x34, 0x6b, 0x59, 0xdc,
	0xad, 0xf9, 0x5c, 0x09, 0x95, 0x73, 0x6a, 0xff, 0x88, 0x9f, 0xc3, 0x7c, 0x28, 0x68, 0xde, 0xb3,
	0xa9, 0x94, 0x2b, 0xa1, 0x72, 0x7e, 0x6b, 0xb3, 0x72, 0x35, 0x58, 0x2a, 0x02, 0x0a, 0x47, 0xa4,
	0x45, 0x9f, 0xf5, 0x6c, 0xaa, 0x5e, 0xf6, 0x82, 0x6b, 0x90, 0xe9, 0x12, 0xc7, 0x20, 0x26, 0x67,
	0x52, 0xbe, 0x94, 0x2c, 0xcf, 0x6e, 0xdd, 0xbf, 0x96, 0x47, 0xf7, 0xd7, 0xa7, 0xde, 0x45, 0x35,
	0xf0, 0x20, 0xff, 0x8d, 0x7c, 0xec, 0x85, 0xd4, 0x6e, 0x65, 0x09, 0xe7, 0x8e, 0x51, 0xef, 0x70,
	0xaa, 0x9d, 0x12, 0x76, 0x2a, 0xc0, 0x97, 0x55, 0x2f, 0x49, 0x63, 0x31, 0x93, 0x18, 0x81, 0x99,
	0x11, 0xfd, 0x4d, 0x8e, 0xee, 0xef, 0x9b, 0x70, 0x2b, 0x24, 0x76, 0x68, 0x9b, 0x18, 0xa6, 0x80,
	0x64, 0x4a, 0x1d, 0x56, 0xb8, 0xd6, 0x83, 0xfe, 0xd9, 0xd4, 0x69, 0x50, 0xd3, 0x03, 0x67, 0x4e,
	0x1d, 0x56, 0xc8, 0x5f, 0x23, 0x58, 0xac, 0xea, 0x7a, 0x90, 0xb9, 0x4a, 0x99, 0x6d, 0x99, 0x8c,
	0x86, 0xe8, 0x81, 0x22, 0xf4, 0x90, 0x20, 0xdd, 0xa6, 0x8c, 0x91, 0xa6, 0x97, 0x61, 0x56, 0xed,
	0x1f, 0xf1, 0x2e, 0x4c, 0xeb, 0x84, 0x13, 0x91, 0xc9, 0x75, 0x7b, 0x11, 0x22, 0xba, 0x2a, 0x6e,
	0xcb, 0x7f, 0x4d, 0x43, 0x36, 0x50, 0xb9, 0x64, 0xe9, 0x73, 0xd7, 0x67, 0x7e, 0x52, 0x0d, 0x49,
	0x42, 0x51, 0x26, 0xc6, 0x92, 0x38, 0x79, 0x0d, 0x12, 0x4f, 0x8f, 0x24, 0x71, 0x2a, 0x42, 0xe2,
	0xa1, 0xa1, 0x34, 0x33, 0x62, 0x28, 0xc5, 0xb5, 0x3a, 0x3d, 0x61, 0xab, 0x33, 0xa3, 0x5a, 0xbd,
	0x05, 0x8b, 0xa2, 0xc8, 0x1a, 0xeb, 0xd8, 0xb6, 0xe5, 0x46, 0x1c, 0xa6, 0x7f, 0xac, 0x0e, 0x57,
	0x00, 0x47, 0xe5, 0xa1, 0x01, 0x10, 0xa3, 0xf9, 0x7f, 0x90, 0x5f, 0x81, 0xfc, 0xce, 0x29, 0x6d,
	0x9c, 0x0d, 0x80, 0xb7, 0x1a, 0x03, 0xbc, 0xac, 0x2f, 0x39, 0xd4, 0x65, 0x0b, 0x96, 0xa3, 0x17,
	0xc6, 0xf2, 0xe6, 0xb1, 0xcf, 0x8e, 0x84, 0x60, 0xc7, 0xbd, 0xeb, 0xb3, 0xc3, 0xa3, 0xc5, 0x0b,
	0x98, 0x8f, 0x7e, 0x90, 0xe1, 0x75, 0x98, 0x1d, 0x84, 0xc8, 0xfc, 0xc9, 0x04, 0x41, 0x8c, 0x0c,
	0xbf, 0x0e, 0xf9, 0x46, 0xc7, 0x71, 0xa8, 0xc9, 0x35, 0xd2, 0xe0, 0x46, 0xd7, 0x63, 0x6c, 0x46,
	0xcd, 0xf9, 0xd2, 0xaa, 0x10, 0xca, 0x7f, 0x20, 0x58, 0xb9, 0xe4, 0x7b, 0x6c, 0x36, 0xc7, 0x41,
	0x36, 0x6e, 0xe9, 0xab, 0xe3, 0xb2, 0x19, 0xe1, 0xbe, 0xb2, 0x4b, 0x38, 0xd9, 0x33, 0xb9, 0xd3,
	0xf3, 0xb2, 0x2c, 0xd6, 0x21, 0x1b, 0x88, 0x70, 0x01, 0x92, 0x67, 0xb4, 0xe7, 0xd7, 0xde, 0xfd,
	0x89, 0x9f, 0x40, 0xaa, 0x4b, 0x5a, 0x1d, 0x3a, 0x79, 0x11, 0xbd, 0x7b, 0x0f, 0x13, 0xef, 0x21,
	0xf9, 0xab, 0x04, 0x2c, 0x1c, 0xdb, 0x3a, 0xe1, 0x54, 0x15, 0x2c, 0xea, 0xbf, 0x33, 0xe4, 0xf8,
	0x77, 0xc6, 0xec, 0x49, 0xdf, 0xc9, 0xa1, 0x8e, 0x2b, 0x57, 0xbd, 0x32, 0x6e, 0xf9, 0xaa, 0x3d,
	0x5f, 0x73, 0xa8, 0xe3, 0x8d, 0x38, 0x3a, 0x7b, 0x93, 0x7e, 0xfe, 0x64, 0x00, 0x1d, 0x41, 0xe6,
	0xd5, 0xc8, 0xbb, 0xc0, 0x1b, 0x44, 0x59, 0x5f, 0xf2, 0xd4, 0xc2, 0x6a, 0x08, 0xf0, 0x29, 0x51,
	0xf5, 0xed, 0x89, 0x01, 0xef, 0xe5, 0x3b, 0x80, 0xfd, 0x19, 0x2c, 0xc7, 0xdb, 0xb8, 0xd0, 0x89,
	0x5d, 0x7c, 0xb9, 0x40, 0xfa, 0xa1, 0xb7, 0xf7, 0x62, 0xf2, 0x4b, 0xc4, 0xe6, 0x27, 0x7f, 0x83,
	0x60, 0x31, 0x5a, 0xf7, 0x1b, 0x6f, 0x9a, 0x83, 0xc8, 0xa6, 0x79, 0x30, 0xae, 0x0e, 0x31, 0xdd,
	0xf6, 0x59, 0xf5, 0x1c, 0x72, 0x07, 0x94, 0x5f, 0xc5, 0xa9, 0x64, 0x68, 0xe1, 0x4c, 0xc0, 0xa9,
	0xdf, 0x11, 0x2c, 0x45, 0x3c, 0x8f, 0xcd, 0xf6, 0x28, 0xc2, 0xa8, 0x27, 0xe3, 0x72, 0x8a, 0x75,
	0xfe, 0x9f, 0xf0, 0xe9, 0x11, 0xac, 0xab, 0xb4, 0x6d, 0x75, 0xe9, 0x27, 0x9e, 0x7d, 0x4c, 0xce,
	0x12, 0xa4, 0x1d, 0x61, 0xd2, 0x9f, 0xa4, 0xfd, 0xe3, 0xc6, 0xfb, 0x90, 0x8b, 0x0c, 0x7a, 0x3c,
	0x0b, 0xe9, 0xdd, 0xbd, 0xfd, 0xea, 0x71, 0xed, 0x59, 0x61, 0xca, 0x3d, 0x1c, 0xed, 0x3d, 0xfd,
	0xb8, 0x5a, 0xab, 0x15, 0x12, 0x38, 0x0f, 0x50, 0x3b, 0xde, 0xf9, 0xe8, 0x85, 0x76, 0x54, 0xad,
	0xed, 0x15, 0x92, 0x5b, 0x7f, 0xa6, 0x61, 0x25, 0xfc, 0x49, 0x37, 0xc2, 0x23, 0xea, 0x74, 0xdd,
	0x95, 0xfe, 0x1d, 0x82, 0xb9, 0xfe, 0xab, 0x46, 0x8c, 0xf3, 0x89, 0x5f, 0x23, 0xc5, 0xb7, 0xc7,
	0xdd, 0x88, 0x7b, 0x35, 0xc9, 0xab, 0x5f, 0xfc, 0xf2, 0xdb, 0xb7, 0x89, 0x15, 0x19, 0x2b, 0x43,
	0x7f, 0x32, 0x3d, 0x44, 0x1b, 0xf8, 0x4b, 0x04, 0x4b, 0x1e, 0x1a, 0xf7, 0x2f, 0xb1, 0xff, 0x26,
	0x20, 0x1e, 0x1f, 0x63, 0x1c, 0xdf, 0xe4, 0x29, 0xfc, 0x3d, 0x82, 0x45, 0x31, 0x92, 0x3d, 0xb4,
	0x0e, 0xca, 0x54, 0x99, 0x6c, 0x90, 0x17, 0xb7, 0x27, 0xb3, 0x0f, 0x42, 0xb8, 0x2b, 0xca, 0x74,
	0x07, 0xaf, 0x0f, 0x97, 0x49, 0xf9, 0x7c, 0x40, 0xc0, 0x73, 0xfc, 0x23, 0x82, 0xa5, 0xb8, 0x48,
	0x19, 0x56, 0x26, 0xdc, 0x39, 0xc5, 0x77, 0x6f, 0xb8, 0xa4, 0xe4, 0x1d, 0x11, 0xec, 0x63, 0x7c,
	0x67, 0x38, 0x58, 0x16, 0x8e, 0x96, 0x9d, 0xbf, 0x94, 0xe4, 0x85, 0x18, 0x23, 0xb7, 0xf3, 0xe7,
	0xb0, 0x70, 0x40, 0xf9, 0x50, 0x16, 0x9b, 0x13, 0xf1, 0xbc, 0xf8, 0xce, 0x8d, 0xc6, 0x82, 0x3c,
	0x85, 0x7f, 0x40, 0x70, 0xdb, 0x63, 0xa9, 0x4a, 0x75, 0x83, 0x0d, 0x51, 0x75, 0xe2, 0xce, 0x8f,
	0x1d, 0x50, 0x63, 0x66, 0x82, 0xac, 0x88, 0xaa, 0xde, 0x93, 0xef, 0x06, 0x05, 0x0b, 0x37, 0x5e,
	0xd1, 0x69, 0x8b, 0x72, 0xba, 0x39, 0x28, 0xe2, 0x07, 0x87, 0x3f, 0x5d, 0xac, 0xa1, 0x9f, 0x2f,
	0xd6, 0xd0, 0xaf, 0x17, 0x6b, 0xe8, 0xe5, 0xa3, 0xa6, 0xc1, 0x5b, 0xa4, 0xde, 0x8f, 0xc2, 0x54,
	0xc4, 0x7f, 0x10, 0xea, 0x9d, 0x13, 0xc5, 0x30, 0xbd, 0xf5, 0xbb, 0x49, 0x6c, 0x83, 0x6d, 0x36,
	0xad, 0xe1, 0x86, 0xd4, 0x67, 0x84, 0xf1, 0x83, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xc6,
	0x69, 0xf6, 0xd8, 0x10, 0x00, 0x00,
}
