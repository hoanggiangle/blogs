// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product/flashdeal/productflashdeal.proto

package flashdeal

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on FlashDealRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FlashDealRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for FlashDealId

	// no validation rules for ProductExternalId

	// no validation rules for Status

	// no validation rules for FlashDealPrice

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for VersionNo

	// no validation rules for FlashDealQuantity

	// no validation rules for SubsidyAmount

	// no validation rules for SubsidyPromotionCode

	// no validation rules for IsMegaSale

	// no validation rules for SlotId

	// no validation rules for FlashDealType

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// FlashDealRequestValidationError is the validation error returned by
// FlashDealRequest.Validate if the designated constraints aren't met.
type FlashDealRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlashDealRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlashDealRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlashDealRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlashDealRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlashDealRequestValidationError) ErrorName() string { return "FlashDealRequestValidationError" }

// Error satisfies the builtin error interface
func (e FlashDealRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlashDealRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlashDealRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlashDealRequestValidationError{}

// Validate checks the field values on FlashdealVariant with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FlashdealVariant) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for AttributeHash

	// no validation rules for FlashDealPrice

	// no validation rules for FlashDealQuantity

	// no validation rules for FlashDealRemain

	// no validation rules for PromotionPercent

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// FlashdealVariantValidationError is the validation error returned by
// FlashdealVariant.Validate if the designated constraints aren't met.
type FlashdealVariantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlashdealVariantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlashdealVariantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlashdealVariantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlashdealVariantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlashdealVariantValidationError) ErrorName() string { return "FlashdealVariantValidationError" }

// Error satisfies the builtin error interface
func (e FlashdealVariantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlashdealVariant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlashdealVariantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlashdealVariantValidationError{}

// Validate checks the field values on AddFlashdealResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddFlashdealResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// AddFlashdealResponseValidationError is the validation error returned by
// AddFlashdealResponse.Validate if the designated constraints aren't met.
type AddFlashdealResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFlashdealResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFlashdealResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFlashdealResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFlashdealResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFlashdealResponseValidationError) ErrorName() string {
	return "AddFlashdealResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddFlashdealResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFlashdealResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFlashdealResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFlashdealResponseValidationError{}

// Validate checks the field values on FlashDeal with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FlashDeal) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for Status

	// no validation rules for FlashDealPrice

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for FlashDealId

	// no validation rules for FlashDealQuantity

	// no validation rules for FlashDealRemain

	// no validation rules for SendoSupportAmount

	// no validation rules for SendoSupportCode

	// no validation rules for IsMegaSale

	// no validation rules for SlotId

	// no validation rules for FlashDealType

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// FlashDealValidationError is the validation error returned by
// FlashDeal.Validate if the designated constraints aren't met.
type FlashDealValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlashDealValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlashDealValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlashDealValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlashDealValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlashDealValidationError) ErrorName() string { return "FlashDealValidationError" }

// Error satisfies the builtin error interface
func (e FlashDealValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlashDeal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlashDealValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlashDealValidationError{}

// Validate checks the field values on CheckFlashDeal with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckFlashDeal) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckFlashDealValidationError is the validation error returned by
// CheckFlashDeal.Validate if the designated constraints aren't met.
type CheckFlashDealValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckFlashDealValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckFlashDealValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckFlashDealValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckFlashDealValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckFlashDealValidationError) ErrorName() string { return "CheckFlashDealValidationError" }

// Error satisfies the builtin error interface
func (e CheckFlashDealValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckFlashDeal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckFlashDealValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckFlashDealValidationError{}

// Validate checks the field values on CheckFlashDealResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckFlashDealResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckFlashDealResponseValidationError is the validation error returned by
// CheckFlashDealResponse.Validate if the designated constraints aren't met.
type CheckFlashDealResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckFlashDealResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckFlashDealResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckFlashDealResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckFlashDealResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckFlashDealResponseValidationError) ErrorName() string {
	return "CheckFlashDealResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckFlashDealResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckFlashDealResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckFlashDealResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckFlashDealResponseValidationError{}

// Validate checks the field values on CheckFlashDeals with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CheckFlashDeals) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductIds

	// no validation rules for CurrentActive

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckFlashDealsValidationError is the validation error returned by
// CheckFlashDeals.Validate if the designated constraints aren't met.
type CheckFlashDealsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckFlashDealsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckFlashDealsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckFlashDealsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckFlashDealsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckFlashDealsValidationError) ErrorName() string { return "CheckFlashDealsValidationError" }

// Error satisfies the builtin error interface
func (e CheckFlashDealsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckFlashDeals.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckFlashDealsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckFlashDealsValidationError{}

// Validate checks the field values on CheckFlashDealsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckFlashDealsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	// no validation rules for Data

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CheckFlashDealsResponseValidationError is the validation error returned by
// CheckFlashDealsResponse.Validate if the designated constraints aren't met.
type CheckFlashDealsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckFlashDealsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckFlashDealsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckFlashDealsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckFlashDealsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckFlashDealsResponseValidationError) ErrorName() string {
	return "CheckFlashDealsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckFlashDealsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckFlashDealsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckFlashDealsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckFlashDealsResponseValidationError{}

// Validate checks the field values on UpdateRemainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRemainRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for FlashDealId

	// no validation rules for ProductExternalId

	// no validation rules for FlashDealRemain

	// no validation rules for VersionNo

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Variants[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateRemainRequestValidationError is the validation error returned by
// UpdateRemainRequest.Validate if the designated constraints aren't met.
type UpdateRemainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRemainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRemainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRemainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRemainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRemainRequestValidationError) ErrorName() string {
	return "UpdateRemainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRemainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRemainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRemainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRemainRequestValidationError{}

// Validate checks the field values on FlashdealVariantRemain with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FlashdealVariantRemain) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for AttributeHash

	// no validation rules for FlashDealRemain

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// FlashdealVariantRemainValidationError is the validation error returned by
// FlashdealVariantRemain.Validate if the designated constraints aren't met.
type FlashdealVariantRemainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlashdealVariantRemainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlashdealVariantRemainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlashdealVariantRemainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlashdealVariantRemainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlashdealVariantRemainValidationError) ErrorName() string {
	return "FlashdealVariantRemainValidationError"
}

// Error satisfies the builtin error interface
func (e FlashdealVariantRemainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlashdealVariantRemain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlashdealVariantRemainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlashdealVariantRemainValidationError{}

// Validate checks the field values on UpdateRemainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRemainResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Data", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// UpdateRemainResponseValidationError is the validation error returned by
// UpdateRemainResponse.Validate if the designated constraints aren't met.
type UpdateRemainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRemainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRemainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRemainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRemainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRemainResponseValidationError) ErrorName() string {
	return "UpdateRemainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRemainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRemainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRemainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRemainResponseValidationError{}

// Validate checks the field values on GetFlashDeals with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetFlashDeals) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for CurrentActive

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetFlashDealsValidationError is the validation error returned by
// GetFlashDeals.Validate if the designated constraints aren't met.
type GetFlashDealsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFlashDealsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFlashDealsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFlashDealsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFlashDealsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFlashDealsValidationError) ErrorName() string { return "GetFlashDealsValidationError" }

// Error satisfies the builtin error interface
func (e GetFlashDealsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFlashDeals.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFlashDealsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFlashDealsValidationError{}

// Validate checks the field values on GetFlashDealsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetFlashDealsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	// no validation rules for Data

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// GetFlashDealsResponseValidationError is the validation error returned by
// GetFlashDealsResponse.Validate if the designated constraints aren't met.
type GetFlashDealsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFlashDealsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFlashDealsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFlashDealsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFlashDealsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFlashDealsResponseValidationError) ErrorName() string {
	return "GetFlashDealsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFlashDealsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFlashDealsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFlashDealsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFlashDealsResponseValidationError{}

// Validate checks the field values on RemoveProductFlashDealsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProductFlashDealsResponse) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Removed

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// RemoveProductFlashDealsResponseValidationError is the validation error
// returned by RemoveProductFlashDealsResponse.Validate if the designated
// constraints aren't met.
type RemoveProductFlashDealsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProductFlashDealsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProductFlashDealsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProductFlashDealsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProductFlashDealsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProductFlashDealsResponseValidationError) ErrorName() string {
	return "RemoveProductFlashDealsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProductFlashDealsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProductFlashDealsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProductFlashDealsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProductFlashDealsResponseValidationError{}
