// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/pubsub/pubsub.proto

package pubsub // import "gitlab.sendo.vn/protobuf/internal-apis-go/core/pubsub"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PublishReq struct {
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// publisher token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// delay execute (second)
	Delay                *types.Duration `protobuf:"bytes,4,opt,name=delay" json:"delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PublishReq) Reset()         { *m = PublishReq{} }
func (m *PublishReq) String() string { return proto.CompactTextString(m) }
func (*PublishReq) ProtoMessage()    {}
func (*PublishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_d1ebfec31e20f9f3, []int{0}
}
func (m *PublishReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishReq.Merge(dst, src)
}
func (m *PublishReq) XXX_Size() int {
	return m.Size()
}
func (m *PublishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublishReq proto.InternalMessageInfo

func (m *PublishReq) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *PublishReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PublishReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PublishReq) GetDelay() *types.Duration {
	if m != nil {
		return m.Delay
	}
	return nil
}

type PublishResp struct {
	MessageId            string   `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResp) Reset()         { *m = PublishResp{} }
func (m *PublishResp) String() string { return proto.CompactTextString(m) }
func (*PublishResp) ProtoMessage()    {}
func (*PublishResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_d1ebfec31e20f9f3, []int{1}
}
func (m *PublishResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublishResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResp.Merge(dst, src)
}
func (m *PublishResp) XXX_Size() int {
	return m.Size()
}
func (m *PublishResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResp.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResp proto.InternalMessageInfo

func (m *PublishResp) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type SubscribeRequest struct {
	// Types that are valid to be assigned to Request:
	//	*SubscribeRequest_Option
	//	*SubscribeRequest_Ack
	//	*SubscribeRequest_Redeliver
	Request              isSubscribeRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_d1ebfec31e20f9f3, []int{2}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(dst, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

type isSubscribeRequest_Request interface {
	isSubscribeRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SubscribeRequest_Option struct {
	Option *SubscribeOption `protobuf:"bytes,1,opt,name=option,oneof"`
}
type SubscribeRequest_Ack struct {
	Ack *MessageAck `protobuf:"bytes,2,opt,name=ack,oneof"`
}
type SubscribeRequest_Redeliver struct {
	Redeliver *MessageRedeliver `protobuf:"bytes,3,opt,name=redeliver,oneof"`
}

func (*SubscribeRequest_Option) isSubscribeRequest_Request()    {}
func (*SubscribeRequest_Ack) isSubscribeRequest_Request()       {}
func (*SubscribeRequest_Redeliver) isSubscribeRequest_Request() {}

func (m *SubscribeRequest) GetRequest() isSubscribeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SubscribeRequest) GetOption() *SubscribeOption {
	if x, ok := m.GetRequest().(*SubscribeRequest_Option); ok {
		return x.Option
	}
	return nil
}

func (m *SubscribeRequest) GetAck() *MessageAck {
	if x, ok := m.GetRequest().(*SubscribeRequest_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *SubscribeRequest) GetRedeliver() *MessageRedeliver {
	if x, ok := m.GetRequest().(*SubscribeRequest_Redeliver); ok {
		return x.Redeliver
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubscribeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubscribeRequest_OneofMarshaler, _SubscribeRequest_OneofUnmarshaler, _SubscribeRequest_OneofSizer, []interface{}{
		(*SubscribeRequest_Option)(nil),
		(*SubscribeRequest_Ack)(nil),
		(*SubscribeRequest_Redeliver)(nil),
	}
}

func _SubscribeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubscribeRequest)
	// request
	switch x := m.Request.(type) {
	case *SubscribeRequest_Option:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Option); err != nil {
			return err
		}
	case *SubscribeRequest_Ack:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case *SubscribeRequest_Redeliver:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Redeliver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SubscribeRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SubscribeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubscribeRequest)
	switch tag {
	case 1: // request.option
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubscribeOption)
		err := b.DecodeMessage(msg)
		m.Request = &SubscribeRequest_Option{msg}
		return true, err
	case 2: // request.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageAck)
		err := b.DecodeMessage(msg)
		m.Request = &SubscribeRequest_Ack{msg}
		return true, err
	case 3: // request.redeliver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageRedeliver)
		err := b.DecodeMessage(msg)
		m.Request = &SubscribeRequest_Redeliver{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SubscribeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubscribeRequest)
	// request
	switch x := m.Request.(type) {
	case *SubscribeRequest_Option:
		s := proto.Size(x.Option)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeRequest_Ack:
		s := proto.Size(x.Ack)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeRequest_Redeliver:
		s := proto.Size(x.Redeliver)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SubscribeOption struct {
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// subscriber token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// default: max server-side allowed number
	MaxConcurrent        int32    `protobuf:"varint,3,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeOption) Reset()         { *m = SubscribeOption{} }
func (m *SubscribeOption) String() string { return proto.CompactTextString(m) }
func (*SubscribeOption) ProtoMessage()    {}
func (*SubscribeOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_d1ebfec31e20f9f3, []int{3}
}
func (m *SubscribeOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeOption.Merge(dst, src)
}
func (m *SubscribeOption) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeOption.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeOption proto.InternalMessageInfo

func (m *SubscribeOption) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *SubscribeOption) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SubscribeOption) GetMaxConcurrent() int32 {
	if m != nil {
		return m.MaxConcurrent
	}
	return 0
}

type MessageAck struct {
	// managed by client, incr by 1 for each incoming message
	Tag uint64 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// a log message
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageAck) Reset()         { *m = MessageAck{} }
func (m *MessageAck) String() string { return proto.CompactTextString(m) }
func (*MessageAck) ProtoMessage()    {}
func (*MessageAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_d1ebfec31e20f9f3, []int{4}
}
func (m *MessageAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAck.Merge(dst, src)
}
func (m *MessageAck) XXX_Size() int {
	return m.Size()
}
func (m *MessageAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAck.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAck proto.InternalMessageInfo

func (m *MessageAck) GetTag() uint64 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *MessageAck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MessageRedeliver struct {
	// managed by client, incr by 1 for each incoming message
	Tag   uint64          `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Delay *types.Duration `protobuf:"bytes,2,opt,name=delay" json:"delay,omitempty"`
	// a log message
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageRedeliver) Reset()         { *m = MessageRedeliver{} }
func (m *MessageRedeliver) String() string { return proto.CompactTextString(m) }
func (*MessageRedeliver) ProtoMessage()    {}
func (*MessageRedeliver) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_d1ebfec31e20f9f3, []int{5}
}
func (m *MessageRedeliver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageRedeliver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageRedeliver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageRedeliver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageRedeliver.Merge(dst, src)
}
func (m *MessageRedeliver) XXX_Size() int {
	return m.Size()
}
func (m *MessageRedeliver) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageRedeliver.DiscardUnknown(m)
}

var xxx_messageInfo_MessageRedeliver proto.InternalMessageInfo

func (m *MessageRedeliver) GetTag() uint64 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *MessageRedeliver) GetDelay() *types.Duration {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *MessageRedeliver) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Message struct {
	// message id
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// number of time this message has redelivered (but not acknowledge yet)
	DeliveredCount int32 `protobuf:"varint,3,opt,name=delivered_count,json=deliveredCount,proto3" json:"delivered_count,omitempty"`
	// message created time
	Created              *types.Timestamp `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_d1ebfec31e20f9f3, []int{6}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetDeliveredCount() int32 {
	if m != nil {
		return m.DeliveredCount
	}
	return 0
}

func (m *Message) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishReq)(nil), "sendo.v1.api.core.pubsub.PublishReq")
	proto.RegisterType((*PublishResp)(nil), "sendo.v1.api.core.pubsub.PublishResp")
	proto.RegisterType((*SubscribeRequest)(nil), "sendo.v1.api.core.pubsub.SubscribeRequest")
	proto.RegisterType((*SubscribeOption)(nil), "sendo.v1.api.core.pubsub.SubscribeOption")
	proto.RegisterType((*MessageAck)(nil), "sendo.v1.api.core.pubsub.MessageAck")
	proto.RegisterType((*MessageRedeliver)(nil), "sendo.v1.api.core.pubsub.MessageRedeliver")
	proto.RegisterType((*Message)(nil), "sendo.v1.api.core.pubsub.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SendoPubsubClient is the client API for SendoPubsub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendoPubsubClient interface {
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	// Subscribe for messages
	// to begin receive message, client need send a SubscribeOption
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (SendoPubsub_SubscribeClient, error)
}

type sendoPubsubClient struct {
	cc *grpc.ClientConn
}

func NewSendoPubsubClient(cc *grpc.ClientConn) SendoPubsubClient {
	return &sendoPubsubClient{cc}
}

func (c *sendoPubsubClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.core.pubsub.SendoPubsub/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendoPubsubClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (SendoPubsub_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SendoPubsub_serviceDesc.Streams[0], "/sendo.v1.api.core.pubsub.SendoPubsub/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &sendoPubsubSubscribeClient{stream}
	return x, nil
}

type SendoPubsub_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type sendoPubsubSubscribeClient struct {
	grpc.ClientStream
}

func (x *sendoPubsubSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sendoPubsubSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SendoPubsubServer is the server API for SendoPubsub service.
type SendoPubsubServer interface {
	Publish(context.Context, *PublishReq) (*PublishResp, error)
	// Subscribe for messages
	// to begin receive message, client need send a SubscribeOption
	Subscribe(SendoPubsub_SubscribeServer) error
}

func RegisterSendoPubsubServer(s *grpc.Server, srv SendoPubsubServer) {
	s.RegisterService(&_SendoPubsub_serviceDesc, srv)
}

func _SendoPubsub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendoPubsubServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.core.pubsub.SendoPubsub/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendoPubsubServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendoPubsub_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SendoPubsubServer).Subscribe(&sendoPubsubSubscribeServer{stream})
}

type SendoPubsub_SubscribeServer interface {
	Send(*Message) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type sendoPubsubSubscribeServer struct {
	grpc.ServerStream
}

func (x *sendoPubsubSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sendoPubsubSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SendoPubsub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.core.pubsub.SendoPubsub",
	HandlerType: (*SendoPubsubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _SendoPubsub_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _SendoPubsub_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/pubsub/pubsub.proto",
}

func (m *PublishReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Delay != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Delay.Size()))
		n1, err := m.Delay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublishResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.MessageId)))
		i += copy(dAtA[i:], m.MessageId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		nn2, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeRequest_Option) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Option != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Option.Size()))
		n3, err := m.Option.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *SubscribeRequest_Ack) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ack != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Ack.Size()))
		n4, err := m.Ack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *SubscribeRequest_Redeliver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Redeliver != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Redeliver.Size()))
		n5, err := m.Redeliver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *SubscribeOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.MaxConcurrent != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.MaxConcurrent))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Tag))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageRedeliver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageRedeliver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Tag))
	}
	if m.Delay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Delay.Size()))
		n6, err := m.Delay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.DeliveredCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.DeliveredCount))
	}
	if m.Created != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Created.Size()))
		n7, err := m.Created.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPubsub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PublishReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Delay != nil {
		l = m.Delay.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeRequest_Option) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Option != nil {
		l = m.Option.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}
func (m *SubscribeRequest_Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}
func (m *SubscribeRequest_Redeliver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Redeliver != nil {
		l = m.Redeliver.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}
func (m *SubscribeOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.MaxConcurrent != 0 {
		n += 1 + sovPubsub(uint64(m.MaxConcurrent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != 0 {
		n += 1 + sovPubsub(uint64(m.Tag))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageRedeliver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != 0 {
		n += 1 + sovPubsub(uint64(m.Tag))
	}
	if m.Delay != nil {
		l = m.Delay.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.DeliveredCount != 0 {
		n += 1 + sovPubsub(uint64(m.DeliveredCount))
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPubsub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPubsub(x uint64) (n int) {
	return sovPubsub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublishReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delay == nil {
				m.Delay = &types.Duration{}
			}
			if err := m.Delay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SubscribeOption{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &SubscribeRequest_Option{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &SubscribeRequest_Ack{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redeliver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageRedeliver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &SubscribeRequest_Redeliver{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrent", wireType)
			}
			m.MaxConcurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConcurrent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageRedeliver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageRedeliver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageRedeliver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delay == nil {
				m.Delay = &types.Duration{}
			}
			if err := m.Delay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveredCount", wireType)
			}
			m.DeliveredCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliveredCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubsub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPubsub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPubsub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPubsub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPubsub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubsub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("core/pubsub/pubsub.proto", fileDescriptor_pubsub_d1ebfec31e20f9f3) }

var fileDescriptor_pubsub_d1ebfec31e20f9f3 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xae, 0xdb, 0x6d, 0x55, 0x5f, 0xa0, 0xab, 0x2c, 0x0e, 0xa1, 0x12, 0xa5, 0x44, 0x4c, 0x94,
	0x89, 0xa5, 0x50, 0x40, 0xda, 0x95, 0x95, 0x43, 0x41, 0x42, 0x4c, 0x1e, 0x07, 0xc4, 0xa5, 0x38,
	0x89, 0x09, 0x56, 0xd3, 0x38, 0xb3, 0x9d, 0x6a, 0x1c, 0xf8, 0x07, 0xfc, 0x30, 0xb8, 0xf1, 0x13,
	0x50, 0x4f, 0xfc, 0x0c, 0x94, 0xc4, 0x49, 0x4b, 0x61, 0xac, 0x9c, 0x12, 0x3f, 0x7f, 0xdf, 0x7b,
	0xdf, 0x7b, 0xfe, 0x6c, 0xb0, 0x7d, 0x21, 0xd9, 0x30, 0x49, 0x3d, 0x95, 0x7a, 0xe6, 0xe3, 0x26,
	0x52, 0x68, 0x81, 0x6d, 0xc5, 0xe2, 0x40, 0xb8, 0x8b, 0x47, 0x2e, 0x4d, 0xb8, 0x9b, 0xc1, 0xdc,
	0x62, 0xbf, 0xdb, 0x0b, 0x85, 0x08, 0x23, 0x36, 0xcc, 0x71, 0x5e, 0xfa, 0x61, 0x18, 0xa4, 0x92,
	0x6a, 0x2e, 0xe2, 0x82, 0xd9, 0xbd, 0xbd, 0xb9, 0xaf, 0xf9, 0x9c, 0x29, 0x4d, 0xe7, 0x49, 0x01,
	0x70, 0x3e, 0x03, 0x9c, 0xa6, 0x5e, 0xc4, 0xd5, 0x47, 0xc2, 0xce, 0xf1, 0x0d, 0xd8, 0x65, 0x0b,
	0x16, 0x6b, 0x1b, 0xf5, 0xd1, 0xa0, 0x45, 0x8a, 0x45, 0x16, 0xd5, 0x62, 0xc6, 0x62, 0xbb, 0x5e,
	0x44, 0xf3, 0x05, 0xc6, 0xb0, 0x13, 0x50, 0x4d, 0xed, 0x46, 0x1f, 0x0d, 0xae, 0x91, 0xfc, 0x1f,
	0x0f, 0x61, 0x37, 0x60, 0x11, 0xfd, 0x64, 0xef, 0xf4, 0xd1, 0xc0, 0x1a, 0xdd, 0x74, 0x8b, 0xf2,
	0x6e, 0x59, 0xde, 0x7d, 0x6e, 0xe4, 0x91, 0x02, 0xe7, 0x3c, 0x00, 0xab, 0x2a, 0xaf, 0x12, 0x7c,
	0x0b, 0x60, 0xce, 0x94, 0xa2, 0x21, 0x9b, 0xf2, 0xc0, 0x88, 0x68, 0x99, 0xc8, 0x8b, 0xc0, 0xf9,
	0x89, 0xa0, 0x73, 0x96, 0x7a, 0xca, 0x97, 0xdc, 0x63, 0x84, 0x9d, 0xa7, 0x4c, 0x69, 0x3c, 0x86,
	0x3d, 0x91, 0x64, 0x39, 0x73, 0xbc, 0x35, 0xba, 0xef, 0x5e, 0x36, 0x2d, 0xb7, 0xe2, 0xbe, 0xce,
	0x09, 0x93, 0x1a, 0x31, 0x54, 0x7c, 0x0c, 0x0d, 0xea, 0xcf, 0xf2, 0x06, 0xad, 0xd1, 0xdd, 0xcb,
	0x33, 0xbc, 0x2a, 0xb4, 0x3c, 0xf3, 0x67, 0x93, 0x1a, 0xc9, 0x28, 0xf8, 0x25, 0xb4, 0x24, 0x0b,
	0x58, 0xc4, 0x17, 0x4c, 0xe6, 0xb3, 0xb0, 0x46, 0x87, 0x57, 0xf2, 0x49, 0xc9, 0x98, 0xd4, 0xc8,
	0x8a, 0x7e, 0xd2, 0x82, 0xa6, 0x2c, 0xba, 0x72, 0x02, 0xd8, 0xdf, 0x50, 0xfb, 0x5f, 0x87, 0x73,
	0x00, 0xed, 0x39, 0xbd, 0x98, 0xfa, 0x22, 0xf6, 0x53, 0x29, 0x33, 0x52, 0x26, 0x6d, 0x97, 0x5c,
	0x9f, 0xd3, 0x8b, 0x71, 0x15, 0x74, 0x8e, 0x01, 0x56, 0x1d, 0xe1, 0x0e, 0x34, 0x34, 0x0d, 0xf3,
	0xf4, 0x3b, 0x24, 0xfb, 0xc5, 0x36, 0x34, 0xcd, 0xf4, 0x4d, 0xfa, 0x72, 0xe9, 0x08, 0xe8, 0x6c,
	0xf6, 0xf2, 0x17, 0x7e, 0xe5, 0x87, 0xfa, 0x76, 0x7e, 0x58, 0x2f, 0xd8, 0xf8, 0xbd, 0xe0, 0x17,
	0x04, 0x4d, 0x53, 0x11, 0xb7, 0xa1, 0x5e, 0xd9, 0xa3, 0xce, 0x83, 0xca, 0x8a, 0xf5, 0x35, 0x2b,
	0xde, 0x83, 0x7d, 0xa3, 0x8b, 0x05, 0x53, 0x5f, 0xa4, 0xd5, 0x08, 0xda, 0x55, 0x78, 0x9c, 0x45,
	0xf1, 0x13, 0x68, 0xfa, 0x92, 0x51, 0xcd, 0x02, 0xe3, 0xda, 0xee, 0x1f, 0x2a, 0xdf, 0x94, 0x97,
	0x86, 0x94, 0xd0, 0xd1, 0x37, 0x04, 0xd6, 0x59, 0x76, 0xca, 0xa7, 0xf9, 0xc1, 0xe2, 0xb7, 0xd0,
	0x34, 0x46, 0xc6, 0xff, 0xb0, 0xcf, 0xea, 0xaa, 0x75, 0x0f, 0xb6, 0x40, 0xa9, 0xc4, 0xa9, 0xe1,
	0xf7, 0xd0, 0xaa, 0x9c, 0x80, 0x0f, 0xb7, 0x30, 0xb7, 0xb9, 0x18, 0xdd, 0x3b, 0x57, 0xda, 0xd0,
	0xa9, 0x0d, 0xd0, 0x43, 0x74, 0x32, 0xfe, 0xba, 0xec, 0xa1, 0xef, 0xcb, 0x1e, 0xfa, 0xb1, 0xec,
	0xa1, 0x77, 0x4f, 0x43, 0xae, 0x23, 0xea, 0x95, 0xe4, 0x78, 0xf5, 0x76, 0xf0, 0x58, 0x33, 0x19,
	0xd3, 0xe8, 0x88, 0x26, 0x5c, 0x1d, 0x85, 0x62, 0xb8, 0xf6, 0x60, 0x79, 0x7b, 0x39, 0xec, 0xf1,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xc0, 0x62, 0x11, 0xc6, 0x04, 0x00, 0x00,
}
