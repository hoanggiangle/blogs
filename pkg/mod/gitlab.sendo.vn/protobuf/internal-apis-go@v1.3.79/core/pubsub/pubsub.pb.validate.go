// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/pubsub/pubsub.proto

package pubsub

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on PublishReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PublishReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Event

	// no validation rules for Token

	// no validation rules for Data

	if v, ok := interface{}(m.GetDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Delay", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// PublishReqValidationError is the validation error returned by
// PublishReq.Validate if the designated constraints aren't met.
type PublishReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishReqValidationError) ErrorName() string { return "PublishReqValidationError" }

// Error satisfies the builtin error interface
func (e PublishReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishReqValidationError{}

// Validate checks the field values on PublishResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PublishResp) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MessageId

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// PublishRespValidationError is the validation error returned by
// PublishResp.Validate if the designated constraints aren't met.
type PublishRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishRespValidationError) ErrorName() string { return "PublishRespValidationError" }

// Error satisfies the builtin error interface
func (e PublishRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishRespValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SubscribeRequest) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	switch m.Request.(type) {

	case *SubscribeRequest_Option:

		if v, ok := interface{}(m.GetOption()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField("Option", "embedded message failed validation"))
			}
		}

	case *SubscribeRequest_Ack:

		if v, ok := interface{}(m.GetAck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField("Ack", "embedded message failed validation"))
			}
		}

	case *SubscribeRequest_Redeliver:

		if v, ok := interface{}(m.GetRedeliver()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField("Redeliver", "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscribeOption with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SubscribeOption) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Event

	// no validation rules for Token

	// no validation rules for MaxConcurrent

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// SubscribeOptionValidationError is the validation error returned by
// SubscribeOption.Validate if the designated constraints aren't met.
type SubscribeOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeOptionValidationError) ErrorName() string { return "SubscribeOptionValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeOptionValidationError{}

// Validate checks the field values on MessageAck with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MessageAck) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Tag

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MessageAckValidationError is the validation error returned by
// MessageAck.Validate if the designated constraints aren't met.
type MessageAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageAckValidationError) ErrorName() string { return "MessageAckValidationError" }

// Error satisfies the builtin error interface
func (e MessageAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageAckValidationError{}

// Validate checks the field values on MessageRedeliver with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MessageRedeliver) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Tag

	if v, ok := interface{}(m.GetDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Delay", "embedded message failed validation"))
		}
	}

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MessageRedeliverValidationError is the validation error returned by
// MessageRedeliver.Validate if the designated constraints aren't met.
type MessageRedeliverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRedeliverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRedeliverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRedeliverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRedeliverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRedeliverValidationError) ErrorName() string { return "MessageRedeliverValidationError" }

// Error satisfies the builtin error interface
func (e MessageRedeliverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRedeliver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRedeliverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRedeliverValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Data

	// no validation rules for DeliveredCount

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Created", "embedded message failed validation"))
		}
	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}
