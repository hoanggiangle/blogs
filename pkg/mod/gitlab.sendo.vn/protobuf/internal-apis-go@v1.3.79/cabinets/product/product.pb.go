// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cabinets/product/product.proto

package product // import "gitlab.sendo.vn/protobuf/internal-apis-go/cabinets/product"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import base "gitlab.sendo.vn/protobuf/internal-apis-go/base"
import cabinets "gitlab.sendo.vn/protobuf/internal-apis-go/cabinets"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ListRequest struct {
	Pagination           *base.Pagination `protobuf:"bytes,1,opt,name=pagination" json:"pagination,omitempty"`
	Sorts                []string         `protobuf:"bytes,2,rep,name=sorts" json:"sorts,omitempty"`
	ProductIds           string           `protobuf:"bytes,3,opt,name=product_ids,proto3" json:"product_ids,omitempty"`
	ShopId               int32            `protobuf:"varint,4,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	CategoryId           int32            `protobuf:"varint,5,opt,name=category_id,proto3" json:"category_id,omitempty"`
	ProductName          string           `protobuf:"bytes,6,opt,name=product_name,proto3" json:"product_name,omitempty"`
	ShopName             string           `protobuf:"bytes,7,opt,name=shop_name,proto3" json:"shop_name,omitempty"`
	MinProductRating     float32          `protobuf:"fixed32,8,opt,name=min_product_rating,proto3" json:"min_product_rating,omitempty"`
	MinPromotionPercent  int32            `protobuf:"varint,9,opt,name=min_promotion_percent,proto3" json:"min_promotion_percent,omitempty"`
	MaxPromotionPercent  int32            `protobuf:"varint,10,opt,name=max_promotion_percent,proto3" json:"max_promotion_percent,omitempty"`
	MinOrderCompleted_30 int32            `protobuf:"varint,11,opt,name=min_order_completed_30,proto3" json:"min_order_completed_30,omitempty"`
	PromotionApp         int32            `protobuf:"varint,12,opt,name=promotion_app,proto3" json:"promotion_app,omitempty"`
	FreeShipping         int32            `protobuf:"varint,13,opt,name=free_shipping,proto3" json:"free_shipping,omitempty"`
	MinShopRating        float32          `protobuf:"fixed32,14,opt,name=min_shop_rating,proto3" json:"min_shop_rating,omitempty"`
	IsCertified          int32            `protobuf:"varint,15,opt,name=is_certified,proto3" json:"is_certified,omitempty"`
	ShopType             int32            `protobuf:"varint,16,opt,name=shop_type,proto3" json:"shop_type,omitempty"`
	MinPrice             int32            `protobuf:"varint,17,opt,name=min_price,proto3" json:"min_price,omitempty"`
	MaxPrice             int32            `protobuf:"varint,18,opt,name=max_price,proto3" json:"max_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_ffb15fcafbe56996, []int{0}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(dst, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetPagination() *base.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListRequest) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *ListRequest) GetProductIds() string {
	if m != nil {
		return m.ProductIds
	}
	return ""
}

func (m *ListRequest) GetShopId() int32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *ListRequest) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *ListRequest) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ListRequest) GetShopName() string {
	if m != nil {
		return m.ShopName
	}
	return ""
}

func (m *ListRequest) GetMinProductRating() float32 {
	if m != nil {
		return m.MinProductRating
	}
	return 0
}

func (m *ListRequest) GetMinPromotionPercent() int32 {
	if m != nil {
		return m.MinPromotionPercent
	}
	return 0
}

func (m *ListRequest) GetMaxPromotionPercent() int32 {
	if m != nil {
		return m.MaxPromotionPercent
	}
	return 0
}

func (m *ListRequest) GetMinOrderCompleted_30() int32 {
	if m != nil {
		return m.MinOrderCompleted_30
	}
	return 0
}

func (m *ListRequest) GetPromotionApp() int32 {
	if m != nil {
		return m.PromotionApp
	}
	return 0
}

func (m *ListRequest) GetFreeShipping() int32 {
	if m != nil {
		return m.FreeShipping
	}
	return 0
}

func (m *ListRequest) GetMinShopRating() float32 {
	if m != nil {
		return m.MinShopRating
	}
	return 0
}

func (m *ListRequest) GetIsCertified() int32 {
	if m != nil {
		return m.IsCertified
	}
	return 0
}

func (m *ListRequest) GetShopType() int32 {
	if m != nil {
		return m.ShopType
	}
	return 0
}

func (m *ListRequest) GetMinPrice() int32 {
	if m != nil {
		return m.MinPrice
	}
	return 0
}

func (m *ListRequest) GetMaxPrice() int32 {
	if m != nil {
		return m.MaxPrice
	}
	return 0
}

type ListResponse struct {
	Status               *cabinets.Status  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *ListResponseData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_ffb15fcafbe56996, []int{1}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(dst, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetStatus() *cabinets.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListResponse) GetData() *ListResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

type ListResponseData struct {
	Total                int32               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Products             []*cabinets.Product `protobuf:"bytes,2,rep,name=products" json:"products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListResponseData) Reset()         { *m = ListResponseData{} }
func (m *ListResponseData) String() string { return proto.CompactTextString(m) }
func (*ListResponseData) ProtoMessage()    {}
func (*ListResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_ffb15fcafbe56996, []int{2}
}
func (m *ListResponseData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponseData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponseData.Merge(dst, src)
}
func (m *ListResponseData) XXX_Size() int {
	return m.Size()
}
func (m *ListResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponseData proto.InternalMessageInfo

func (m *ListResponseData) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListResponseData) GetProducts() []*cabinets.Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRequest)(nil), "sendo.v1.api.cabinets.productserv.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "sendo.v1.api.cabinets.productserv.ListResponse")
	proto.RegisterType((*ListResponseData)(nil), "sendo.v1.api.cabinets.productserv.ListResponseData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductServiceClient interface {
	// Get list of cate 1
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.cabinets.productserv.ProductService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
type ProductServiceServer interface {
	// Get list of cate 1
	List(context.Context, *ListRequest) (*ListResponse, error)
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.cabinets.productserv.ProductService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.cabinets.productserv.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProductService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cabinets/product/product.proto",
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Pagination.Size()))
		n1, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ProductIds) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductIds)))
		i += copy(dAtA[i:], m.ProductIds)
	}
	if m.ShopId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.ShopId))
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.CategoryId))
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.ShopName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ShopName)))
		i += copy(dAtA[i:], m.ShopName)
	}
	if m.MinProductRating != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinProductRating))))
		i += 4
	}
	if m.MinPromotionPercent != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.MinPromotionPercent))
	}
	if m.MaxPromotionPercent != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.MaxPromotionPercent))
	}
	if m.MinOrderCompleted_30 != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.MinOrderCompleted_30))
	}
	if m.PromotionApp != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.PromotionApp))
	}
	if m.FreeShipping != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.FreeShipping))
	}
	if m.MinShopRating != 0 {
		dAtA[i] = 0x75
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinShopRating))))
		i += 4
	}
	if m.IsCertified != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.IsCertified))
	}
	if m.ShopType != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.ShopType))
	}
	if m.MinPrice != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.MinPrice))
	}
	if m.MaxPrice != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.MaxPrice))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponseData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Total))
	}
	if len(m.Products) > 0 {
		for _, msg := range m.Products {
			dAtA[i] = 0x12
			i++
			i = encodeVarintProduct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintProduct(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovProduct(uint64(l))
		}
	}
	l = len(m.ProductIds)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.ShopId != 0 {
		n += 1 + sovProduct(uint64(m.ShopId))
	}
	if m.CategoryId != 0 {
		n += 1 + sovProduct(uint64(m.CategoryId))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ShopName)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.MinProductRating != 0 {
		n += 5
	}
	if m.MinPromotionPercent != 0 {
		n += 1 + sovProduct(uint64(m.MinPromotionPercent))
	}
	if m.MaxPromotionPercent != 0 {
		n += 1 + sovProduct(uint64(m.MaxPromotionPercent))
	}
	if m.MinOrderCompleted_30 != 0 {
		n += 1 + sovProduct(uint64(m.MinOrderCompleted_30))
	}
	if m.PromotionApp != 0 {
		n += 1 + sovProduct(uint64(m.PromotionApp))
	}
	if m.FreeShipping != 0 {
		n += 1 + sovProduct(uint64(m.FreeShipping))
	}
	if m.MinShopRating != 0 {
		n += 5
	}
	if m.IsCertified != 0 {
		n += 1 + sovProduct(uint64(m.IsCertified))
	}
	if m.ShopType != 0 {
		n += 2 + sovProduct(uint64(m.ShopType))
	}
	if m.MinPrice != 0 {
		n += 2 + sovProduct(uint64(m.MinPrice))
	}
	if m.MaxPrice != 0 {
		n += 2 + sovProduct(uint64(m.MaxPrice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponseData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovProduct(uint64(m.Total))
	}
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovProduct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProduct(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProduct(x uint64) (n int) {
	return sovProduct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &base.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShopName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProductRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinProductRating = float32(math.Float32frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPromotionPercent", wireType)
			}
			m.MinPromotionPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPromotionPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPromotionPercent", wireType)
			}
			m.MaxPromotionPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPromotionPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderCompleted_30", wireType)
			}
			m.MinOrderCompleted_30 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinOrderCompleted_30 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionApp", wireType)
			}
			m.PromotionApp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotionApp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeShipping", wireType)
			}
			m.FreeShipping = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeShipping |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinShopRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinShopRating = float32(math.Float32frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCertified", wireType)
			}
			m.IsCertified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCertified |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopType", wireType)
			}
			m.ShopType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			m.MinPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPrice |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			m.MaxPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPrice |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &cabinets.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ListResponseData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &cabinets.Product{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProduct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProduct
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProduct
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProduct(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProduct = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProduct   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("cabinets/product/product.proto", fileDescriptor_product_ffb15fcafbe56996)
}

var fileDescriptor_product_ffb15fcafbe56996 = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xd5, 0xb4, 0x4d, 0xdb, 0x38, 0xfd, 0xf5, 0xf7, 0x15, 0x99, 0xaa, 0x44, 0x21, 0x62, 0x31,
	0x9b, 0xce, 0x40, 0x0a, 0x2c, 0x2a, 0xb1, 0x41, 0x48, 0xb0, 0x60, 0x51, 0x4d, 0x77, 0x6c, 0x46,
	0xce, 0xcc, 0xed, 0xd4, 0xd2, 0xc4, 0x36, 0xb6, 0x53, 0xd1, 0x6d, 0x1f, 0x80, 0x0d, 0xe2, 0x9d,
	0x10, 0x2b, 0x24, 0x5e, 0x00, 0x55, 0x3c, 0x08, 0xf2, 0x9d, 0x9f, 0x26, 0x25, 0x15, 0xb0, 0x99,
	0x91, 0xcf, 0x39, 0xf7, 0xdc, 0xeb, 0x6b, 0x5f, 0x93, 0x7e, 0xc6, 0xc7, 0x42, 0x82, 0xb3, 0xb1,
	0x36, 0x2a, 0x9f, 0x66, 0xae, 0xf9, 0x47, 0xda, 0x28, 0xa7, 0xe8, 0x43, 0x0b, 0x32, 0x57, 0xd1,
	0xc5, 0x93, 0x88, 0x6b, 0x11, 0x35, 0xe2, 0xa8, 0x16, 0x59, 0x30, 0x17, 0xfb, 0x07, 0x85, 0x52,
	0x45, 0x09, 0x31, 0xd7, 0x22, 0xe6, 0x52, 0x2a, 0xc7, 0x9d, 0x50, 0xd2, 0x56, 0x06, 0xfb, 0x7b,
	0x6d, 0x82, 0x89, 0xca, 0xa1, 0x6c, 0xe0, 0xed, 0x31, 0xb7, 0x10, 0xfb, 0x4f, 0x05, 0x0c, 0xbf,
	0x76, 0x48, 0xef, 0xad, 0xb0, 0x2e, 0x81, 0xf7, 0x53, 0xb0, 0x8e, 0xbe, 0x20, 0x44, 0xf3, 0x42,
	0x48, 0x34, 0x63, 0xc1, 0x20, 0x08, 0x7b, 0xa3, 0x07, 0xd1, 0x5c, 0x35, 0x18, 0x7d, 0xd2, 0x8a,
	0x92, 0x99, 0x00, 0xfa, 0x3f, 0xe9, 0x58, 0x65, 0x9c, 0x65, 0x4b, 0x83, 0xe5, 0xb0, 0x9b, 0x54,
	0x0b, 0x3a, 0x20, 0xbd, 0xba, 0xf2, 0x54, 0xe4, 0x96, 0x2d, 0x0f, 0x82, 0xb0, 0x9b, 0xcc, 0x42,
	0x94, 0x91, 0x35, 0x7b, 0xae, 0x74, 0x2a, 0x72, 0xb6, 0x32, 0x08, 0xc2, 0x4e, 0xd2, 0x2c, 0x7d,
	0x6c, 0xc6, 0x1d, 0x14, 0xca, 0x5c, 0x7a, 0xb6, 0x83, 0xec, 0x2c, 0x44, 0x87, 0x64, 0xa3, 0xb1,
	0x92, 0x7c, 0x02, 0x6c, 0x15, 0xed, 0xe7, 0x30, 0x7a, 0x40, 0xba, 0x68, 0x88, 0x82, 0x35, 0x14,
	0xdc, 0x00, 0x34, 0x22, 0x74, 0x22, 0x64, 0xda, 0x44, 0x18, 0xee, 0x84, 0x2c, 0xd8, 0xfa, 0x20,
	0x08, 0x97, 0x92, 0x05, 0x0c, 0x7d, 0x4a, 0xf6, 0x6a, 0x74, 0xa2, 0xfc, 0xb6, 0x53, 0x0d, 0x26,
	0x03, 0xe9, 0x58, 0x17, 0xab, 0x5b, 0x4c, 0x62, 0x14, 0xff, 0xb0, 0x20, 0x8a, 0xd4, 0x51, 0x8b,
	0x48, 0xfa, 0x9c, 0xdc, 0xf3, 0x76, 0xca, 0xe4, 0x60, 0xd2, 0x4c, 0x4d, 0x74, 0x09, 0x0e, 0xf2,
	0xf4, 0xe8, 0x31, 0xeb, 0x61, 0xd8, 0x1d, 0x2c, 0x7d, 0x44, 0x36, 0x6f, 0xcc, 0xb8, 0xd6, 0x6c,
	0x03, 0xe5, 0xf3, 0xa0, 0x57, 0x9d, 0x19, 0x80, 0xd4, 0x9e, 0x0b, 0xad, 0xfd, 0xa6, 0x37, 0x2b,
	0xd5, 0x1c, 0x48, 0x43, 0xb2, 0xed, 0xb3, 0x60, 0xc3, 0xea, 0xe6, 0x6c, 0x61, 0x73, 0x6e, 0xc3,
	0xfe, 0x2c, 0x84, 0x4d, 0x33, 0x30, 0x4e, 0x9c, 0x09, 0xc8, 0xd9, 0x36, 0xda, 0xcd, 0x61, 0xed,
	0x59, 0xb8, 0x4b, 0x0d, 0x6c, 0x07, 0x05, 0x37, 0x80, 0x67, 0xab, 0xf6, 0x89, 0x0c, 0xd8, 0x6e,
	0xc5, 0xb6, 0x00, 0xb2, 0xd8, 0x26, 0xcf, 0xd2, 0x9a, 0x6d, 0x80, 0xe1, 0xc7, 0x80, 0x6c, 0x54,
	0x97, 0xd9, 0x6a, 0x25, 0x2d, 0xd0, 0x67, 0x64, 0xd5, 0x3a, 0xee, 0xa6, 0x76, 0xf1, 0x4d, 0x6e,
	0xe7, 0xea, 0x14, 0x45, 0x49, 0x2d, 0xa6, 0xaf, 0xc9, 0x4a, 0xce, 0x1d, 0xc7, 0x8b, 0xda, 0x1b,
	0x1d, 0x45, 0x7f, 0x1c, 0xc6, 0x68, 0x36, 0xeb, 0x2b, 0xee, 0x78, 0x82, 0x06, 0xc3, 0x9c, 0xec,
	0xdc, 0x66, 0xfc, 0x88, 0x38, 0xe5, 0x78, 0x89, 0x25, 0x75, 0x92, 0x6a, 0x41, 0x8f, 0xc9, 0x7a,
	0xe3, 0x87, 0xb3, 0xd3, 0x1b, 0xf5, 0xef, 0x48, 0x7b, 0x52, 0xc9, 0x92, 0x56, 0x3f, 0xfa, 0x1c,
	0x90, 0xad, 0x1a, 0x3d, 0x05, 0x73, 0xe1, 0xfb, 0x74, 0x15, 0x90, 0x15, 0x9f, 0x99, 0x46, 0x7f,
	0x5d, 0x3c, 0xce, 0xff, 0x7e, 0xfc, 0x8f, 0x9b, 0x1d, 0xde, 0xbf, 0xfa, 0xfe, 0xf3, 0xd3, 0xd2,
	0x7f, 0x74, 0x37, 0xbe, 0xfd, 0xa4, 0xbd, 0x7c, 0xf3, 0xe5, 0xba, 0x1f, 0x7c, 0xbb, 0xee, 0x07,
	0x3f, 0xae, 0xfb, 0xc1, 0xbb, 0xe3, 0x42, 0xb8, 0x92, 0x8f, 0x1b, 0x7f, 0x19, 0xe3, 0x03, 0x34,
	0x9e, 0x9e, 0xc5, 0x42, 0x3a, 0x30, 0x92, 0x97, 0x87, 0x5c, 0x0b, 0x7b, 0x58, 0xa8, 0xdf, 0x9c,
	0xc6, 0xab, 0xa8, 0x3d, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0x29, 0x73, 0x76, 0xf3, 0x37, 0x05,
	0x00, 0x00,
}
