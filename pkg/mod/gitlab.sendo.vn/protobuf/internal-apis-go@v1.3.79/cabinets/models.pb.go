// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cabinets/models.proto

package cabinets // import "gitlab.sendo.vn/protobuf/internal-apis-go/cabinets"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Cabinet_ProductCheckType int32

const (
	Cabinet_AUTO   Cabinet_ProductCheckType = 0
	Cabinet_MANUAL Cabinet_ProductCheckType = 1
)

var Cabinet_ProductCheckType_name = map[int32]string{
	0: "AUTO",
	1: "MANUAL",
}
var Cabinet_ProductCheckType_value = map[string]int32{
	"AUTO":   0,
	"MANUAL": 1,
}

func (x Cabinet_ProductCheckType) String() string {
	return proto.EnumName(Cabinet_ProductCheckType_name, int32(x))
}
func (Cabinet_ProductCheckType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_models_a226daf6250cff90, []int{0, 0}
}

type Cabinet struct {
	Id                   int32                    `protobuf:"varint,1,opt,name=id,json=cabinet_id,proto3" json:"id,omitempty"`
	Name                 string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsActive             int32                    `protobuf:"varint,3,opt,name=is_active,proto3" json:"is_active,omitempty"`
	AllowShop            int32                    `protobuf:"varint,4,opt,name=allow_shop,proto3" json:"allow_shop,omitempty"`
	CheckType            Cabinet_ProductCheckType `protobuf:"varint,5,opt,name=check_type,proto3,enum=sendo.v1.api.cabinets.Cabinet_ProductCheckType" json:"check_type,omitempty"`
	Uptin                int32                    `protobuf:"varint,6,opt,name=uptin,proto3" json:"uptin,omitempty"`
	SellerDescription    string                   `protobuf:"bytes,7,opt,name=seller_description,proto3" json:"seller_description,omitempty"`
	BuyerDescription     string                   `protobuf:"bytes,8,opt,name=buyer_description,proto3" json:"buyer_description,omitempty"`
	UrlKey               string                   `protobuf:"bytes,9,opt,name=url_key,proto3" json:"url_key,omitempty"`
	Banner               string                   `protobuf:"bytes,10,opt,name=banner,proto3" json:"banner,omitempty"`
	Constraints          *CabinetConstraints      `protobuf:"bytes,11,opt,name=constraints" json:"constraints,omitempty"`
	CreatedBy            string                   `protobuf:"bytes,13,opt,name=created_by,proto3" json:"created_by,omitempty"`
	CreatedAt            int64                    `protobuf:"varint,14,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedBy            string                   `protobuf:"bytes,15,opt,name=updated_by,proto3" json:"updated_by,omitempty"`
	UpdatedAt            int64                    `protobuf:"varint,16,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Cabinet) Reset()         { *m = Cabinet{} }
func (m *Cabinet) String() string { return proto.CompactTextString(m) }
func (*Cabinet) ProtoMessage()    {}
func (*Cabinet) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_a226daf6250cff90, []int{0}
}
func (m *Cabinet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cabinet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cabinet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Cabinet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cabinet.Merge(dst, src)
}
func (m *Cabinet) XXX_Size() int {
	return m.Size()
}
func (m *Cabinet) XXX_DiscardUnknown() {
	xxx_messageInfo_Cabinet.DiscardUnknown(m)
}

var xxx_messageInfo_Cabinet proto.InternalMessageInfo

func (m *Cabinet) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cabinet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cabinet) GetIsActive() int32 {
	if m != nil {
		return m.IsActive
	}
	return 0
}

func (m *Cabinet) GetAllowShop() int32 {
	if m != nil {
		return m.AllowShop
	}
	return 0
}

func (m *Cabinet) GetCheckType() Cabinet_ProductCheckType {
	if m != nil {
		return m.CheckType
	}
	return Cabinet_AUTO
}

func (m *Cabinet) GetUptin() int32 {
	if m != nil {
		return m.Uptin
	}
	return 0
}

func (m *Cabinet) GetSellerDescription() string {
	if m != nil {
		return m.SellerDescription
	}
	return ""
}

func (m *Cabinet) GetBuyerDescription() string {
	if m != nil {
		return m.BuyerDescription
	}
	return ""
}

func (m *Cabinet) GetUrlKey() string {
	if m != nil {
		return m.UrlKey
	}
	return ""
}

func (m *Cabinet) GetBanner() string {
	if m != nil {
		return m.Banner
	}
	return ""
}

func (m *Cabinet) GetConstraints() *CabinetConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func (m *Cabinet) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Cabinet) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Cabinet) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *Cabinet) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type CabinetConstraints struct {
	MinDiscountPercent      int32    `protobuf:"varint,1,opt,name=min_discount_percent,proto3" json:"min_discount_percent,omitempty"`
	MaxDiscountPercent      int32    `protobuf:"varint,2,opt,name=max_discount_percent,proto3" json:"max_discount_percent,omitempty"`
	MinPrice                int32    `protobuf:"varint,3,opt,name=min_price,proto3" json:"min_price,omitempty"`
	MaxPrice                int32    `protobuf:"varint,4,opt,name=max_price,proto3" json:"max_price,omitempty"`
	MinProductRating        float32  `protobuf:"fixed32,5,opt,name=min_product_rating,proto3" json:"min_product_rating,omitempty"`
	MinOrderCompleted_30    int32    `protobuf:"varint,6,opt,name=min_order_completed_30,proto3" json:"min_order_completed_30,omitempty"`
	HasShippingFeeSupported bool     `protobuf:"varint,7,opt,name=has_shipping_fee_supported,proto3" json:"has_shipping_fee_supported,omitempty"`
	HasAppDiscount          bool     `protobuf:"varint,8,opt,name=has_app_discount,proto3" json:"has_app_discount,omitempty"`
	CertifiedShopOnly       bool     `protobuf:"varint,9,opt,name=certified_shop_only,proto3" json:"certified_shop_only,omitempty"`
	MallOnly                bool     `protobuf:"varint,10,opt,name=mall_only,proto3" json:"mall_only,omitempty"`
	MinShopRating           float32  `protobuf:"fixed32,11,opt,name=min_shop_rating,proto3" json:"min_shop_rating,omitempty"`
	MinShopWorkingTime      int32    `protobuf:"varint,12,opt,name=min_shop_working_time,proto3" json:"min_shop_working_time,omitempty"`
	CategoryIds             []int32  `protobuf:"varint,13,rep,packed,name=category_ids" json:"category_ids,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *CabinetConstraints) Reset()         { *m = CabinetConstraints{} }
func (m *CabinetConstraints) String() string { return proto.CompactTextString(m) }
func (*CabinetConstraints) ProtoMessage()    {}
func (*CabinetConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_a226daf6250cff90, []int{1}
}
func (m *CabinetConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CabinetConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CabinetConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CabinetConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CabinetConstraints.Merge(dst, src)
}
func (m *CabinetConstraints) XXX_Size() int {
	return m.Size()
}
func (m *CabinetConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_CabinetConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_CabinetConstraints proto.InternalMessageInfo

func (m *CabinetConstraints) GetMinDiscountPercent() int32 {
	if m != nil {
		return m.MinDiscountPercent
	}
	return 0
}

func (m *CabinetConstraints) GetMaxDiscountPercent() int32 {
	if m != nil {
		return m.MaxDiscountPercent
	}
	return 0
}

func (m *CabinetConstraints) GetMinPrice() int32 {
	if m != nil {
		return m.MinPrice
	}
	return 0
}

func (m *CabinetConstraints) GetMaxPrice() int32 {
	if m != nil {
		return m.MaxPrice
	}
	return 0
}

func (m *CabinetConstraints) GetMinProductRating() float32 {
	if m != nil {
		return m.MinProductRating
	}
	return 0
}

func (m *CabinetConstraints) GetMinOrderCompleted_30() int32 {
	if m != nil {
		return m.MinOrderCompleted_30
	}
	return 0
}

func (m *CabinetConstraints) GetHasShippingFeeSupported() bool {
	if m != nil {
		return m.HasShippingFeeSupported
	}
	return false
}

func (m *CabinetConstraints) GetHasAppDiscount() bool {
	if m != nil {
		return m.HasAppDiscount
	}
	return false
}

func (m *CabinetConstraints) GetCertifiedShopOnly() bool {
	if m != nil {
		return m.CertifiedShopOnly
	}
	return false
}

func (m *CabinetConstraints) GetMallOnly() bool {
	if m != nil {
		return m.MallOnly
	}
	return false
}

func (m *CabinetConstraints) GetMinShopRating() float32 {
	if m != nil {
		return m.MinShopRating
	}
	return 0
}

func (m *CabinetConstraints) GetMinShopWorkingTime() int32 {
	if m != nil {
		return m.MinShopWorkingTime
	}
	return 0
}

func (m *CabinetConstraints) GetCategoryIds() []int32 {
	if m != nil {
		return m.CategoryIds
	}
	return nil
}

type Product struct {
	ProductId            int32    `protobuf:"varint,1,opt,name=product_id,proto3" json:"product_id,omitempty"`
	CabinetId            int32    `protobuf:"varint,2,opt,name=cabinet_id,proto3" json:"cabinet_id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Image                string   `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	CatPath              string   `protobuf:"bytes,5,opt,name=cat_path,proto3" json:"cat_path,omitempty"`
	UrlKey               string   `protobuf:"bytes,6,opt,name=url_key,proto3" json:"url_key,omitempty"`
	CategoryId           string   `protobuf:"bytes,7,opt,name=category_id,proto3" json:"category_id,omitempty"`
	CategoryName         string   `protobuf:"bytes,8,opt,name=category_name,proto3" json:"category_name,omitempty"`
	Price                int32    `protobuf:"varint,9,opt,name=price,proto3" json:"price,omitempty"`
	FinalPrice           int32    `protobuf:"varint,10,opt,name=final_price,proto3" json:"final_price,omitempty"`
	PromotionPercent     int32    `protobuf:"varint,11,opt,name=promotion_percent,proto3" json:"promotion_percent,omitempty"`
	Status               int32    `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	StatusNew            int32    `protobuf:"varint,13,opt,name=status_new,proto3" json:"status_new,omitempty"`
	StockStatus          int32    `protobuf:"varint,14,opt,name=stock_status,proto3" json:"stock_status,omitempty"`
	ShopName             string   `protobuf:"bytes,15,opt,name=shop_name,proto3" json:"shop_name,omitempty"`
	ShopId               int32    `protobuf:"varint,16,opt,name=shop_id,proto3" json:"shop_id,omitempty"`
	ProductStatus        int32    `protobuf:"varint,17,opt,name=product_status,proto3" json:"product_status,omitempty"`
	UpdatedBy            string   `protobuf:"bytes,18,opt,name=updated_by,proto3" json:"updated_by,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,19,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_a226daf6250cff90, []int{2}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(dst, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetProductId() int32 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Product) GetCabinetId() int32 {
	if m != nil {
		return m.CabinetId
	}
	return 0
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Product) GetCatPath() string {
	if m != nil {
		return m.CatPath
	}
	return ""
}

func (m *Product) GetUrlKey() string {
	if m != nil {
		return m.UrlKey
	}
	return ""
}

func (m *Product) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

func (m *Product) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *Product) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetFinalPrice() int32 {
	if m != nil {
		return m.FinalPrice
	}
	return 0
}

func (m *Product) GetPromotionPercent() int32 {
	if m != nil {
		return m.PromotionPercent
	}
	return 0
}

func (m *Product) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Product) GetStatusNew() int32 {
	if m != nil {
		return m.StatusNew
	}
	return 0
}

func (m *Product) GetStockStatus() int32 {
	if m != nil {
		return m.StockStatus
	}
	return 0
}

func (m *Product) GetShopName() string {
	if m != nil {
		return m.ShopName
	}
	return ""
}

func (m *Product) GetShopId() int32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *Product) GetProductStatus() int32 {
	if m != nil {
		return m.ProductStatus
	}
	return 0
}

func (m *Product) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *Product) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type Status struct {
	Code                 int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Errors               []*MessageBag `protobuf:"bytes,3,rep,name=errors,json=error" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_a226daf6250cff90, []int{3}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetErrors() []*MessageBag {
	if m != nil {
		return m.Errors
	}
	return nil
}

type MessageBag struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,json=code,proto3" json:"field,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageBag) Reset()         { *m = MessageBag{} }
func (m *MessageBag) String() string { return proto.CompactTextString(m) }
func (*MessageBag) ProtoMessage()    {}
func (*MessageBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_a226daf6250cff90, []int{4}
}
func (m *MessageBag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBag.Merge(dst, src)
}
func (m *MessageBag) XXX_Size() int {
	return m.Size()
}
func (m *MessageBag) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBag.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBag proto.InternalMessageInfo

func (m *MessageBag) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MessageBag) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *MessageBag) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Cabinet)(nil), "sendo.v1.api.cabinets.Cabinet")
	proto.RegisterType((*CabinetConstraints)(nil), "sendo.v1.api.cabinets.CabinetConstraints")
	proto.RegisterType((*Product)(nil), "sendo.v1.api.cabinets.Product")
	proto.RegisterType((*Status)(nil), "sendo.v1.api.cabinets.Status")
	proto.RegisterType((*MessageBag)(nil), "sendo.v1.api.cabinets.MessageBag")
	proto.RegisterEnum("sendo.v1.api.cabinets.Cabinet_ProductCheckType", Cabinet_ProductCheckType_name, Cabinet_ProductCheckType_value)
}
func (m *Cabinet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cabinet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.IsActive != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.IsActive))
	}
	if m.AllowShop != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.AllowShop))
	}
	if m.CheckType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.CheckType))
	}
	if m.Uptin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Uptin))
	}
	if len(m.SellerDescription) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.SellerDescription)))
		i += copy(dAtA[i:], m.SellerDescription)
	}
	if len(m.BuyerDescription) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.BuyerDescription)))
		i += copy(dAtA[i:], m.BuyerDescription)
	}
	if len(m.UrlKey) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.UrlKey)))
		i += copy(dAtA[i:], m.UrlKey)
	}
	if len(m.Banner) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Banner)))
		i += copy(dAtA[i:], m.Banner)
	}
	if m.Constraints != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Constraints.Size()))
		n1, err := m.Constraints.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.CreatedBy) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.CreatedBy)))
		i += copy(dAtA[i:], m.CreatedBy)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.CreatedAt))
	}
	if len(m.UpdatedBy) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.UpdatedBy)))
		i += copy(dAtA[i:], m.UpdatedBy)
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CabinetConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CabinetConstraints) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinDiscountPercent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.MinDiscountPercent))
	}
	if m.MaxDiscountPercent != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.MaxDiscountPercent))
	}
	if m.MinPrice != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.MinPrice))
	}
	if m.MaxPrice != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.MaxPrice))
	}
	if m.MinProductRating != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinProductRating))))
		i += 4
	}
	if m.MinOrderCompleted_30 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.MinOrderCompleted_30))
	}
	if m.HasShippingFeeSupported {
		dAtA[i] = 0x38
		i++
		if m.HasShippingFeeSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasAppDiscount {
		dAtA[i] = 0x40
		i++
		if m.HasAppDiscount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CertifiedShopOnly {
		dAtA[i] = 0x48
		i++
		if m.CertifiedShopOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MallOnly {
		dAtA[i] = 0x50
		i++
		if m.MallOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MinShopRating != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinShopRating))))
		i += 4
	}
	if m.MinShopWorkingTime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.MinShopWorkingTime))
	}
	if len(m.CategoryIds) > 0 {
		dAtA3 := make([]byte, len(m.CategoryIds)*10)
		var j2 int
		for _, num1 := range m.CategoryIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintModels(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.ProductId))
	}
	if m.CabinetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.CabinetId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.CatPath) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.CatPath)))
		i += copy(dAtA[i:], m.CatPath)
	}
	if len(m.UrlKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.UrlKey)))
		i += copy(dAtA[i:], m.UrlKey)
	}
	if len(m.CategoryId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.CategoryId)))
		i += copy(dAtA[i:], m.CategoryId)
	}
	if len(m.CategoryName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.CategoryName)))
		i += copy(dAtA[i:], m.CategoryName)
	}
	if m.Price != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Price))
	}
	if m.FinalPrice != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.FinalPrice))
	}
	if m.PromotionPercent != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.PromotionPercent))
	}
	if m.Status != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Status))
	}
	if m.StatusNew != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.StatusNew))
	}
	if m.StockStatus != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.StockStatus))
	}
	if len(m.ShopName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.ShopName)))
		i += copy(dAtA[i:], m.ShopName)
	}
	if m.ShopId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.ShopId))
	}
	if m.ProductStatus != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.ProductStatus))
	}
	if len(m.UpdatedBy) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.UpdatedBy)))
		i += copy(dAtA[i:], m.UpdatedBy)
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Errors) > 0 {
		for _, msg := range m.Errors {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageBag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Code))
	}
	if len(m.Field) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Cabinet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.IsActive != 0 {
		n += 1 + sovModels(uint64(m.IsActive))
	}
	if m.AllowShop != 0 {
		n += 1 + sovModels(uint64(m.AllowShop))
	}
	if m.CheckType != 0 {
		n += 1 + sovModels(uint64(m.CheckType))
	}
	if m.Uptin != 0 {
		n += 1 + sovModels(uint64(m.Uptin))
	}
	l = len(m.SellerDescription)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.BuyerDescription)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.UrlKey)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Banner)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Constraints != nil {
		l = m.Constraints.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovModels(uint64(m.CreatedAt))
	}
	l = len(m.UpdatedBy)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovModels(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CabinetConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinDiscountPercent != 0 {
		n += 1 + sovModels(uint64(m.MinDiscountPercent))
	}
	if m.MaxDiscountPercent != 0 {
		n += 1 + sovModels(uint64(m.MaxDiscountPercent))
	}
	if m.MinPrice != 0 {
		n += 1 + sovModels(uint64(m.MinPrice))
	}
	if m.MaxPrice != 0 {
		n += 1 + sovModels(uint64(m.MaxPrice))
	}
	if m.MinProductRating != 0 {
		n += 5
	}
	if m.MinOrderCompleted_30 != 0 {
		n += 1 + sovModels(uint64(m.MinOrderCompleted_30))
	}
	if m.HasShippingFeeSupported {
		n += 2
	}
	if m.HasAppDiscount {
		n += 2
	}
	if m.CertifiedShopOnly {
		n += 2
	}
	if m.MallOnly {
		n += 2
	}
	if m.MinShopRating != 0 {
		n += 5
	}
	if m.MinShopWorkingTime != 0 {
		n += 1 + sovModels(uint64(m.MinShopWorkingTime))
	}
	if len(m.CategoryIds) > 0 {
		l = 0
		for _, e := range m.CategoryIds {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovModels(uint64(m.ProductId))
	}
	if m.CabinetId != 0 {
		n += 1 + sovModels(uint64(m.CabinetId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.CatPath)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.UrlKey)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.CategoryId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.CategoryName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovModels(uint64(m.Price))
	}
	if m.FinalPrice != 0 {
		n += 1 + sovModels(uint64(m.FinalPrice))
	}
	if m.PromotionPercent != 0 {
		n += 1 + sovModels(uint64(m.PromotionPercent))
	}
	if m.Status != 0 {
		n += 1 + sovModels(uint64(m.Status))
	}
	if m.StatusNew != 0 {
		n += 1 + sovModels(uint64(m.StatusNew))
	}
	if m.StockStatus != 0 {
		n += 1 + sovModels(uint64(m.StockStatus))
	}
	l = len(m.ShopName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ShopId != 0 {
		n += 2 + sovModels(uint64(m.ShopId))
	}
	if m.ProductStatus != 0 {
		n += 2 + sovModels(uint64(m.ProductStatus))
	}
	l = len(m.UpdatedBy)
	if l > 0 {
		n += 2 + l + sovModels(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovModels(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovModels(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageBag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovModels(uint64(m.Code))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Cabinet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cabinet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cabinet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			m.IsActive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsActive |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowShop", wireType)
			}
			m.AllowShop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowShop |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckType", wireType)
			}
			m.CheckType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckType |= (Cabinet_ProductCheckType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptin", wireType)
			}
			m.Uptin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Constraints == nil {
				m.Constraints = &CabinetConstraints{}
			}
			if err := m.Constraints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CabinetConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CabinetConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CabinetConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDiscountPercent", wireType)
			}
			m.MinDiscountPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDiscountPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDiscountPercent", wireType)
			}
			m.MaxDiscountPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDiscountPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			m.MinPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPrice |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			m.MaxPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPrice |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProductRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinProductRating = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderCompleted_30", wireType)
			}
			m.MinOrderCompleted_30 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinOrderCompleted_30 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasShippingFeeSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasShippingFeeSupported = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAppDiscount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasAppDiscount = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertifiedShopOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CertifiedShopOnly = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MallOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MallOnly = bool(v != 0)
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinShopRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinShopRating = float32(math.Float32frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinShopWorkingTime", wireType)
			}
			m.MinShopWorkingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinShopWorkingTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CategoryIds = append(m.CategoryIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CategoryIds) == 0 {
					m.CategoryIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CategoryIds = append(m.CategoryIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CabinetId", wireType)
			}
			m.CabinetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CabinetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CatPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPrice", wireType)
			}
			m.FinalPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalPrice |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionPercent", wireType)
			}
			m.PromotionPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotionPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusNew", wireType)
			}
			m.StatusNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusNew |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockStatus", wireType)
			}
			m.StockStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShopName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductStatus", wireType)
			}
			m.ProductStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &MessageBag{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageBag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModels(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cabinets/models.proto", fileDescriptor_models_a226daf6250cff90) }

var fileDescriptor_models_a226daf6250cff90 = []byte{
	// 907 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x5d, 0x8f, 0x1b, 0x35,
	0x14, 0x65, 0x36, 0x1f, 0x9b, 0xdc, 0x74, 0xb7, 0xa9, 0xf7, 0x43, 0xa3, 0x0a, 0xad, 0x42, 0x84,
	0x50, 0x40, 0x34, 0x29, 0x29, 0x42, 0x3c, 0x21, 0xb6, 0xfb, 0x08, 0x65, 0xd1, 0xd0, 0xbe, 0xf0,
	0x62, 0x39, 0x33, 0x4e, 0x62, 0xed, 0xc4, 0xb6, 0x6c, 0xa7, 0xdb, 0xfc, 0x43, 0x1e, 0x91, 0xf8,
	0x03, 0x65, 0x7f, 0x09, 0xf2, 0xc7, 0x64, 0x26, 0xc9, 0x74, 0x79, 0x9b, 0x7b, 0xce, 0xbd, 0x9e,
	0x7b, 0xaf, 0xcf, 0x9c, 0x04, 0x2e, 0x52, 0x32, 0x63, 0x9c, 0x1a, 0x3d, 0x59, 0x89, 0x8c, 0xe6,
	0x7a, 0x2c, 0x95, 0x30, 0x02, 0x5d, 0x68, 0xca, 0x33, 0x31, 0x7e, 0xff, 0xdd, 0x98, 0x48, 0x36,
	0x2e, 0x72, 0x86, 0xff, 0x36, 0xe1, 0xf8, 0xc6, 0x07, 0xe8, 0x12, 0x8e, 0x58, 0x16, 0x47, 0x83,
	0x68, 0xd4, 0x4a, 0x20, 0x64, 0x60, 0x96, 0x21, 0x04, 0x4d, 0x4e, 0x56, 0x34, 0x3e, 0x1a, 0x44,
	0xa3, 0x6e, 0xe2, 0x9e, 0xd1, 0xe7, 0xd0, 0x65, 0x1a, 0x93, 0xd4, 0xb0, 0xf7, 0x34, 0x6e, 0xb8,
	0x92, 0x12, 0x40, 0x57, 0x00, 0x24, 0xcf, 0xc5, 0x3d, 0xd6, 0x4b, 0x21, 0xe3, 0xa6, 0x3f, 0xb1,
	0x44, 0xd0, 0x2d, 0x40, 0xba, 0xa4, 0xe9, 0x1d, 0x36, 0x1b, 0x49, 0xe3, 0xd6, 0x20, 0x1a, 0x9d,
	0x4e, 0x27, 0xe3, 0xda, 0x0e, 0xc7, 0xa1, 0xbb, 0xf1, 0xef, 0x4a, 0x64, 0xeb, 0xd4, 0xdc, 0xd8,
	0xba, 0xb7, 0x1b, 0x49, 0x93, 0xca, 0x11, 0xe8, 0x1c, 0x5a, 0x6b, 0x69, 0x18, 0x8f, 0xdb, 0xee,
	0x5d, 0x3e, 0x40, 0x63, 0x40, 0x9a, 0xe6, 0x39, 0x55, 0x38, 0xa3, 0x3a, 0x55, 0x4c, 0x1a, 0x26,
	0x78, 0x7c, 0xec, 0xc6, 0xa8, 0x61, 0xd0, 0xb7, 0xf0, 0x6c, 0xb6, 0xde, 0xec, 0xa5, 0x77, 0x5c,
	0xfa, 0x21, 0x81, 0x62, 0x38, 0x5e, 0xab, 0x1c, 0xdf, 0xd1, 0x4d, 0xdc, 0x75, 0x39, 0x45, 0x88,
	0x2e, 0xa1, 0x3d, 0x23, 0x9c, 0x53, 0x15, 0x83, 0x23, 0x42, 0x84, 0x7e, 0x81, 0x5e, 0x2a, 0xb8,
	0x36, 0x8a, 0x30, 0x6e, 0x74, 0xdc, 0x1b, 0x44, 0xa3, 0xde, 0xf4, 0xeb, 0xc7, 0xe7, 0xbe, 0x29,
	0x0b, 0x92, 0x6a, 0xb5, 0xdd, 0x71, 0xaa, 0x28, 0x31, 0x34, 0xc3, 0xb3, 0x4d, 0x7c, 0xe2, 0x5e,
	0x54, 0x41, 0xaa, 0x3c, 0x31, 0xf1, 0xe9, 0x20, 0x1a, 0x35, 0x92, 0x0a, 0x62, 0xf9, 0xb5, 0xcc,
	0x8a, 0xfa, 0xa7, 0xbe, 0xbe, 0x44, 0xaa, 0x3c, 0x31, 0x71, 0xdf, 0xd7, 0x97, 0xc8, 0x70, 0x04,
	0xfd, 0xfd, 0x2b, 0x41, 0x1d, 0x68, 0x5e, 0xbf, 0x7b, 0x7b, 0xdb, 0xff, 0x0c, 0x01, 0xb4, 0xdf,
	0x5c, 0xff, 0xf6, 0xee, 0xfa, 0xd7, 0x7e, 0x34, 0xfc, 0xd8, 0x04, 0x74, 0x38, 0x0d, 0x9a, 0xc2,
	0xf9, 0x8a, 0x71, 0x9c, 0x31, 0x9d, 0x8a, 0x35, 0x37, 0x58, 0x52, 0x95, 0x52, 0x6e, 0x82, 0x00,
	0x6b, 0x39, 0x57, 0x43, 0x3e, 0x1c, 0xd6, 0x1c, 0x85, 0x9a, 0x1a, 0xce, 0x4a, 0xd5, 0x9e, 0x25,
	0x15, 0x4b, 0xb7, 0x52, 0xdd, 0x02, 0x8e, 0x25, 0x1f, 0x02, 0xdb, 0x0c, 0x6c, 0x01, 0x58, 0x05,
	0xf9, 0x54, 0x37, 0x28, 0x56, 0xc4, 0x30, 0xbe, 0x70, 0x82, 0x3d, 0x4a, 0x6a, 0x18, 0xf4, 0x03,
	0x5c, 0x5a, 0x54, 0xa8, 0x8c, 0x2a, 0x9c, 0x8a, 0x95, 0xcc, 0xa9, 0x5d, 0xd7, 0xab, 0x97, 0x41,
	0x98, 0x9f, 0x60, 0xd1, 0x4f, 0xf0, 0x7c, 0x49, 0x34, 0xd6, 0x4b, 0x26, 0x25, 0xe3, 0x0b, 0x3c,
	0xa7, 0x14, 0xeb, 0xb5, 0x94, 0x42, 0x19, 0x9a, 0x39, 0xc5, 0x76, 0x92, 0x47, 0x32, 0xd0, 0x37,
	0xd0, 0xb7, 0x2c, 0x91, 0x72, 0x3b, 0xbf, 0x13, 0x6e, 0x27, 0x39, 0xc0, 0xd1, 0x4b, 0x38, 0x4b,
	0xa9, 0x32, 0x6c, 0xce, 0x68, 0xe6, 0x3e, 0x47, 0x2c, 0x78, 0xee, 0x35, 0xdc, 0x49, 0xea, 0x28,
	0xbf, 0xa3, 0x3c, 0xf7, 0x79, 0xe0, 0xf2, 0x4a, 0x00, 0x8d, 0xe0, 0xa9, 0x9d, 0xca, 0xa5, 0x87,
	0x05, 0xf5, 0xdc, 0x82, 0xf6, 0x61, 0xf4, 0x3d, 0x5c, 0x6c, 0xa1, 0x7b, 0xa1, 0xee, 0xec, 0x1c,
	0x86, 0xad, 0x68, 0xfc, 0xc4, 0x2d, 0xa7, 0x9e, 0x44, 0x43, 0x78, 0x92, 0x12, 0x43, 0x17, 0x42,
	0x6d, 0x30, 0xcb, 0x74, 0x7c, 0x32, 0x68, 0x8c, 0x5a, 0xc9, 0x0e, 0x36, 0xfc, 0xa7, 0x09, 0xc7,
	0x41, 0x8d, 0x56, 0xb8, 0xc5, 0xad, 0x94, 0x76, 0x56, 0x22, 0xee, 0xc3, 0xd8, 0x9a, 0x5b, 0x50,
	0x4e, 0x9d, 0xdd, 0x35, 0x2a, 0x76, 0x77, 0x0e, 0x2d, 0xb6, 0x22, 0x0b, 0xaf, 0x90, 0x6e, 0xe2,
	0x03, 0xf4, 0x1c, 0x3a, 0x29, 0x31, 0x58, 0x12, 0xb3, 0x74, 0x9a, 0xe8, 0x26, 0xdb, 0xb8, 0xea,
	0x0e, 0xed, 0x5d, 0x77, 0x18, 0x40, 0xaf, 0xd2, 0x7b, 0xb0, 0xa3, 0x2a, 0x84, 0xbe, 0x84, 0x93,
	0x6d, 0xe8, 0x5a, 0xf1, 0x1e, 0xb4, 0x0b, 0xda, 0x9e, 0xbc, 0x6a, 0xbb, 0xde, 0xf3, 0xbc, 0x62,
	0x07, 0xd0, 0x9b, 0x33, 0x4e, 0xf2, 0xa0, 0x68, 0x70, 0x5c, 0x15, 0xb2, 0x2e, 0x27, 0x95, 0x58,
	0x09, 0x6b, 0x62, 0xdb, 0x0f, 0xa8, 0xe7, 0xf2, 0x0e, 0x09, 0xeb, 0x65, 0xda, 0x10, 0xb3, 0xd6,
	0xe1, 0x92, 0x42, 0x64, 0xb7, 0xe8, 0x9f, 0x30, 0xa7, 0xf7, 0xce, 0x7e, 0x5a, 0x49, 0x05, 0xb1,
	0xb7, 0xa6, 0x8d, 0x48, 0xef, 0x70, 0xa8, 0x3e, 0x75, 0x19, 0x3b, 0x98, 0xd5, 0x95, 0xbb, 0x6e,
	0x37, 0xa3, 0x77, 0xa0, 0x12, 0xb0, 0x1b, 0x74, 0x01, 0xcb, 0x9c, 0xfb, 0xb4, 0x92, 0x22, 0x44,
	0x5f, 0xc1, 0x69, 0x71, 0x9f, 0xe1, 0xf4, 0x67, 0x2e, 0x61, 0x0f, 0xdd, 0xb3, 0x38, 0xf4, 0x3f,
	0x16, 0x77, 0x76, 0x60, 0x71, 0x12, 0xda, 0x7f, 0xf8, 0x93, 0x10, 0x34, 0x53, 0x91, 0xd1, 0xa0,
	0x26, 0xf7, 0x6c, 0xfb, 0x5b, 0x51, 0xad, 0xad, 0x2a, 0xfc, 0x2f, 0x63, 0x11, 0xa2, 0x1f, 0xa1,
	0x4d, 0x95, 0x12, 0x4a, 0xc7, 0x8d, 0x41, 0x63, 0xd4, 0x9b, 0x7e, 0xf1, 0x09, 0x8b, 0x7f, 0xe3,
	0xf3, 0x5f, 0x93, 0x45, 0xd2, 0x72, 0x05, 0xc3, 0x5b, 0x80, 0x12, 0xac, 0x7d, 0xeb, 0x19, 0xb4,
	0xe6, 0x8c, 0xe6, 0x59, 0xf1, 0x6b, 0xbc, 0xdf, 0x4a, 0x63, 0xa7, 0x95, 0xd7, 0x3f, 0xff, 0xf5,
	0x70, 0x15, 0xfd, 0xfd, 0x70, 0x15, 0x7d, 0x7c, 0xb8, 0x8a, 0xfe, 0x9c, 0x2e, 0x98, 0xc9, 0xc9,
	0xac, 0x68, 0x87, 0x4f, 0xdc, 0x7f, 0x83, 0xd9, 0x7a, 0x3e, 0x61, 0xdc, 0x50, 0xc5, 0x49, 0xfe,
	0x82, 0x48, 0xa6, 0x5f, 0x2c, 0xc4, 0xa4, 0x68, 0x72, 0xd6, 0x76, 0x39, 0xaf, 0xfe, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0xf5, 0x4c, 0x38, 0xff, 0x58, 0x08, 0x00, 0x00,
}
