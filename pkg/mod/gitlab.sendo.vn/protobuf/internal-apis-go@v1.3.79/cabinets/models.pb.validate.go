// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cabinets/models.proto

package cabinets

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on Cabinet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cabinet) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsActive

	// no validation rules for AllowShop

	// no validation rules for CheckType

	// no validation rules for Uptin

	// no validation rules for SellerDescription

	// no validation rules for BuyerDescription

	// no validation rules for UrlKey

	// no validation rules for Banner

	if v, ok := interface{}(m.GetConstraints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			errorFields = append(errorFields, errorField("Constraints", "embedded message failed validation"))
		}
	}

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedBy

	// no validation rules for UpdatedAt

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CabinetValidationError is the validation error returned by Cabinet.Validate
// if the designated constraints aren't met.
type CabinetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CabinetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CabinetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CabinetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CabinetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CabinetValidationError) ErrorName() string { return "CabinetValidationError" }

// Error satisfies the builtin error interface
func (e CabinetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCabinet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CabinetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CabinetValidationError{}

// Validate checks the field values on CabinetConstraints with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CabinetConstraints) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for MinDiscountPercent

	// no validation rules for MaxDiscountPercent

	// no validation rules for MinPrice

	// no validation rules for MaxPrice

	// no validation rules for MinProductRating

	// no validation rules for MinOrderCompleted_30

	// no validation rules for HasShippingFeeSupported

	// no validation rules for HasAppDiscount

	// no validation rules for CertifiedShopOnly

	// no validation rules for MallOnly

	// no validation rules for MinShopRating

	// no validation rules for MinShopWorkingTime

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// CabinetConstraintsValidationError is the validation error returned by
// CabinetConstraints.Validate if the designated constraints aren't met.
type CabinetConstraintsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CabinetConstraintsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CabinetConstraintsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CabinetConstraintsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CabinetConstraintsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CabinetConstraintsValidationError) ErrorName() string {
	return "CabinetConstraintsValidationError"
}

// Error satisfies the builtin error interface
func (e CabinetConstraintsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCabinetConstraints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CabinetConstraintsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CabinetConstraintsValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ProductId

	// no validation rules for CabinetId

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for CatPath

	// no validation rules for UrlKey

	// no validation rules for CategoryId

	// no validation rules for CategoryName

	// no validation rules for Price

	// no validation rules for FinalPrice

	// no validation rules for PromotionPercent

	// no validation rules for Status

	// no validation rules for StatusNew

	// no validation rules for StockStatus

	// no validation rules for ShopName

	// no validation rules for ShopId

	// no validation rules for ProductStatus

	// no validation rules for UpdatedBy

	// no validation rules for UpdatedAt

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Status) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Errors[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

// Validate checks the field values on MessageBag with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MessageBag) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Code

	// no validation rules for Field

	// no validation rules for Message

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// MessageBagValidationError is the validation error returned by
// MessageBag.Validate if the designated constraints aren't met.
type MessageBagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageBagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageBagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageBagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageBagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageBagValidationError) ErrorName() string { return "MessageBagValidationError" }

// Error satisfies the builtin error interface
func (e MessageBagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageBag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageBagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageBagValidationError{}
