// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cabinets/cabinet/cabinet.proto

package cabinet // import "gitlab.sendo.vn/protobuf/internal-apis-go/cabinets/cabinet"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import base "gitlab.sendo.vn/protobuf/internal-apis-go/base"
import cabinets "gitlab.sendo.vn/protobuf/internal-apis-go/cabinets"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SaveRequest_ProductCheckType int32

const (
	SaveRequest_AUTO   SaveRequest_ProductCheckType = 0
	SaveRequest_MANUAL SaveRequest_ProductCheckType = 1
)

var SaveRequest_ProductCheckType_name = map[int32]string{
	0: "AUTO",
	1: "MANUAL",
}
var SaveRequest_ProductCheckType_value = map[string]int32{
	"AUTO":   0,
	"MANUAL": 1,
}

func (x SaveRequest_ProductCheckType) String() string {
	return proto.EnumName(SaveRequest_ProductCheckType_name, int32(x))
}
func (SaveRequest_ProductCheckType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cabinet_2a0acb0cb3322f34, []int{2, 0}
}

type GetRequest struct {
	CabinetId            int32    `protobuf:"varint,1,opt,name=cabinet_id,proto3" json:"cabinet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cabinet_2a0acb0cb3322f34, []int{0}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(dst, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetCabinetId() int32 {
	if m != nil {
		return m.CabinetId
	}
	return 0
}

type GetResponse struct {
	Status               *cabinets.Status  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *cabinets.Cabinet `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cabinet_2a0acb0cb3322f34, []int{1}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(dst, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetStatus() *cabinets.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetResponse) GetData() *cabinets.Cabinet {
	if m != nil {
		return m.Data
	}
	return nil
}

type SaveRequest struct {
	Id                   int32                        `protobuf:"varint,1,opt,name=id,json=cabinet_id,proto3" json:"id,omitempty"`
	Name                 string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsActive             int32                        `protobuf:"varint,3,opt,name=is_active,proto3" json:"is_active,omitempty"`
	AllowShop            int32                        `protobuf:"varint,4,opt,name=allow_shop,proto3" json:"allow_shop,omitempty"`
	CheckType            SaveRequest_ProductCheckType `protobuf:"varint,5,opt,name=check_type,proto3,enum=sendo.v1.api.cabinets.cabinet.SaveRequest_ProductCheckType" json:"check_type,omitempty"`
	Uptin                int32                        `protobuf:"varint,6,opt,name=uptin,proto3" json:"uptin,omitempty"`
	SellerDescription    string                       `protobuf:"bytes,7,opt,name=seller_description,proto3" json:"seller_description,omitempty"`
	BuyerDescription     string                       `protobuf:"bytes,8,opt,name=buyer_description,proto3" json:"buyer_description,omitempty"`
	UrlKey               string                       `protobuf:"bytes,9,opt,name=url_key,proto3" json:"url_key,omitempty"`
	Banner               string                       `protobuf:"bytes,10,opt,name=banner,proto3" json:"banner,omitempty"`
	Constraints          *cabinets.CabinetConstraints `protobuf:"bytes,11,opt,name=constraints" json:"constraints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SaveRequest) Reset()         { *m = SaveRequest{} }
func (m *SaveRequest) String() string { return proto.CompactTextString(m) }
func (*SaveRequest) ProtoMessage()    {}
func (*SaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cabinet_2a0acb0cb3322f34, []int{2}
}
func (m *SaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRequest.Merge(dst, src)
}
func (m *SaveRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRequest proto.InternalMessageInfo

func (m *SaveRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SaveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SaveRequest) GetIsActive() int32 {
	if m != nil {
		return m.IsActive
	}
	return 0
}

func (m *SaveRequest) GetAllowShop() int32 {
	if m != nil {
		return m.AllowShop
	}
	return 0
}

func (m *SaveRequest) GetCheckType() SaveRequest_ProductCheckType {
	if m != nil {
		return m.CheckType
	}
	return SaveRequest_AUTO
}

func (m *SaveRequest) GetUptin() int32 {
	if m != nil {
		return m.Uptin
	}
	return 0
}

func (m *SaveRequest) GetSellerDescription() string {
	if m != nil {
		return m.SellerDescription
	}
	return ""
}

func (m *SaveRequest) GetBuyerDescription() string {
	if m != nil {
		return m.BuyerDescription
	}
	return ""
}

func (m *SaveRequest) GetUrlKey() string {
	if m != nil {
		return m.UrlKey
	}
	return ""
}

func (m *SaveRequest) GetBanner() string {
	if m != nil {
		return m.Banner
	}
	return ""
}

func (m *SaveRequest) GetConstraints() *cabinets.CabinetConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type SaveResponse struct {
	Status               *cabinets.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SaveResponse) Reset()         { *m = SaveResponse{} }
func (m *SaveResponse) String() string { return proto.CompactTextString(m) }
func (*SaveResponse) ProtoMessage()    {}
func (*SaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cabinet_2a0acb0cb3322f34, []int{3}
}
func (m *SaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveResponse.Merge(dst, src)
}
func (m *SaveResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveResponse proto.InternalMessageInfo

func (m *SaveResponse) GetStatus() *cabinets.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ListRequest struct {
	CabinetId            int32            `protobuf:"varint,1,opt,name=cabinet_id,json=cabinetId,proto3" json:"cabinet_id,omitempty"`
	Name                 string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsActive             int32            `protobuf:"varint,3,opt,name=is_active,proto3" json:"is_active,omitempty"`
	AllowShop            int32            `protobuf:"varint,4,opt,name=allow_shop,proto3" json:"allow_shop,omitempty"`
	MinUptin             int32            `protobuf:"varint,5,opt,name=min_uptin,proto3" json:"min_uptin,omitempty"`
	MaxUptin             int32            `protobuf:"varint,6,opt,name=max_uptin,proto3" json:"max_uptin,omitempty"`
	CheckType            int32            `protobuf:"varint,7,opt,name=check_type,proto3" json:"check_type,omitempty"`
	UpdatedBy            string           `protobuf:"bytes,8,opt,name=updated_by,proto3" json:"updated_by,omitempty"`
	UpdatedFrom          int64            `protobuf:"varint,9,opt,name=updated_from,proto3" json:"updated_from,omitempty"`
	UpdatedTo            int64            `protobuf:"varint,10,opt,name=updated_to,proto3" json:"updated_to,omitempty"`
	Pagination           *base.Pagination `protobuf:"bytes,11,opt,name=pagination" json:"pagination,omitempty"`
	Sorts                []string         `protobuf:"bytes,12,rep,name=sorts" json:"sorts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cabinet_2a0acb0cb3322f34, []int{4}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(dst, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetCabinetId() int32 {
	if m != nil {
		return m.CabinetId
	}
	return 0
}

func (m *ListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListRequest) GetIsActive() int32 {
	if m != nil {
		return m.IsActive
	}
	return 0
}

func (m *ListRequest) GetAllowShop() int32 {
	if m != nil {
		return m.AllowShop
	}
	return 0
}

func (m *ListRequest) GetMinUptin() int32 {
	if m != nil {
		return m.MinUptin
	}
	return 0
}

func (m *ListRequest) GetMaxUptin() int32 {
	if m != nil {
		return m.MaxUptin
	}
	return 0
}

func (m *ListRequest) GetCheckType() int32 {
	if m != nil {
		return m.CheckType
	}
	return 0
}

func (m *ListRequest) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *ListRequest) GetUpdatedFrom() int64 {
	if m != nil {
		return m.UpdatedFrom
	}
	return 0
}

func (m *ListRequest) GetUpdatedTo() int64 {
	if m != nil {
		return m.UpdatedTo
	}
	return 0
}

func (m *ListRequest) GetPagination() *base.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListRequest) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

type ListResponse struct {
	Status               *cabinets.Status  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data                 *ListResponseData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cabinet_2a0acb0cb3322f34, []int{5}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(dst, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetStatus() *cabinets.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListResponse) GetData() *ListResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

type ListResponseData struct {
	// number of cabinets
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// subset of cabinets, based on pagination
	Cabinets             []*cabinets.Cabinet `protobuf:"bytes,2,rep,name=cabinets" json:"cabinets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListResponseData) Reset()         { *m = ListResponseData{} }
func (m *ListResponseData) String() string { return proto.CompactTextString(m) }
func (*ListResponseData) ProtoMessage()    {}
func (*ListResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cabinet_2a0acb0cb3322f34, []int{6}
}
func (m *ListResponseData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponseData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponseData.Merge(dst, src)
}
func (m *ListResponseData) XXX_Size() int {
	return m.Size()
}
func (m *ListResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponseData proto.InternalMessageInfo

func (m *ListResponseData) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListResponseData) GetCabinets() []*cabinets.Cabinet {
	if m != nil {
		return m.Cabinets
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "sendo.v1.api.cabinets.cabinet.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "sendo.v1.api.cabinets.cabinet.GetResponse")
	proto.RegisterType((*SaveRequest)(nil), "sendo.v1.api.cabinets.cabinet.SaveRequest")
	proto.RegisterType((*SaveResponse)(nil), "sendo.v1.api.cabinets.cabinet.SaveResponse")
	proto.RegisterType((*ListRequest)(nil), "sendo.v1.api.cabinets.cabinet.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "sendo.v1.api.cabinets.cabinet.ListResponse")
	proto.RegisterType((*ListResponseData)(nil), "sendo.v1.api.cabinets.cabinet.ListResponseData")
	proto.RegisterEnum("sendo.v1.api.cabinets.cabinet.SaveRequest_ProductCheckType", SaveRequest_ProductCheckType_name, SaveRequest_ProductCheckType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CabinetServiceClient is the client API for CabinetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CabinetServiceClient interface {
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	//   rpc Delete(DeleteRequest) returns (DeleteResponse) {}
	//   rpc Edit(EditRequest) returns (EditResponse) {}
	// List cabinet by condition
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type cabinetServiceClient struct {
	cc *grpc.ClientConn
}

func NewCabinetServiceClient(cc *grpc.ClientConn) CabinetServiceClient {
	return &cabinetServiceClient{cc}
}

func (c *cabinetServiceClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.cabinets.cabinet.CabinetService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.cabinets.cabinet.CabinetService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.cabinets.cabinet.CabinetService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CabinetServiceServer is the server API for CabinetService service.
type CabinetServiceServer interface {
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	//   rpc Delete(DeleteRequest) returns (DeleteResponse) {}
	//   rpc Edit(EditRequest) returns (EditResponse) {}
	// List cabinet by condition
	List(context.Context, *ListRequest) (*ListResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

func RegisterCabinetServiceServer(s *grpc.Server, srv CabinetServiceServer) {
	s.RegisterService(&_CabinetService_serviceDesc, srv)
}

func _CabinetService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.cabinets.cabinet.CabinetService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.cabinets.cabinet.CabinetService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.cabinets.cabinet.CabinetService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CabinetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.cabinets.cabinet.CabinetService",
	HandlerType: (*CabinetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _CabinetService_Save_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CabinetService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CabinetService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cabinets/cabinet/cabinet.proto",
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CabinetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.CabinetId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.IsActive != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.IsActive))
	}
	if m.AllowShop != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.AllowShop))
	}
	if m.CheckType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.CheckType))
	}
	if m.Uptin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Uptin))
	}
	if len(m.SellerDescription) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(len(m.SellerDescription)))
		i += copy(dAtA[i:], m.SellerDescription)
	}
	if len(m.BuyerDescription) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(len(m.BuyerDescription)))
		i += copy(dAtA[i:], m.BuyerDescription)
	}
	if len(m.UrlKey) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(len(m.UrlKey)))
		i += copy(dAtA[i:], m.UrlKey)
	}
	if len(m.Banner) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(len(m.Banner)))
		i += copy(dAtA[i:], m.Banner)
	}
	if m.Constraints != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Constraints.Size()))
		n3, err := m.Constraints.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Status.Size()))
		n4, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CabinetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.CabinetId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.IsActive != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.IsActive))
	}
	if m.AllowShop != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.AllowShop))
	}
	if m.MinUptin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.MinUptin))
	}
	if m.MaxUptin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.MaxUptin))
	}
	if m.CheckType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.CheckType))
	}
	if len(m.UpdatedBy) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(len(m.UpdatedBy)))
		i += copy(dAtA[i:], m.UpdatedBy)
	}
	if m.UpdatedFrom != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.UpdatedFrom))
	}
	if m.UpdatedTo != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.UpdatedTo))
	}
	if m.Pagination != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Pagination.Size()))
		n5, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Status.Size()))
		n6, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Data.Size()))
		n7, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponseData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCabinet(dAtA, i, uint64(m.Total))
	}
	if len(m.Cabinets) > 0 {
		for _, msg := range m.Cabinets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCabinet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCabinet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CabinetId != 0 {
		n += 1 + sovCabinet(uint64(m.CabinetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCabinet(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.IsActive != 0 {
		n += 1 + sovCabinet(uint64(m.IsActive))
	}
	if m.AllowShop != 0 {
		n += 1 + sovCabinet(uint64(m.AllowShop))
	}
	if m.CheckType != 0 {
		n += 1 + sovCabinet(uint64(m.CheckType))
	}
	if m.Uptin != 0 {
		n += 1 + sovCabinet(uint64(m.Uptin))
	}
	l = len(m.SellerDescription)
	if l > 0 {
		n += 1 + l + sovCabinet(uint64(l))
	}
	l = len(m.BuyerDescription)
	if l > 0 {
		n += 1 + l + sovCabinet(uint64(l))
	}
	l = len(m.UrlKey)
	if l > 0 {
		n += 1 + l + sovCabinet(uint64(l))
	}
	l = len(m.Banner)
	if l > 0 {
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.Constraints != nil {
		l = m.Constraints.Size()
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CabinetId != 0 {
		n += 1 + sovCabinet(uint64(m.CabinetId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.IsActive != 0 {
		n += 1 + sovCabinet(uint64(m.IsActive))
	}
	if m.AllowShop != 0 {
		n += 1 + sovCabinet(uint64(m.AllowShop))
	}
	if m.MinUptin != 0 {
		n += 1 + sovCabinet(uint64(m.MinUptin))
	}
	if m.MaxUptin != 0 {
		n += 1 + sovCabinet(uint64(m.MaxUptin))
	}
	if m.CheckType != 0 {
		n += 1 + sovCabinet(uint64(m.CheckType))
	}
	l = len(m.UpdatedBy)
	if l > 0 {
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.UpdatedFrom != 0 {
		n += 1 + sovCabinet(uint64(m.UpdatedFrom))
	}
	if m.UpdatedTo != 0 {
		n += 1 + sovCabinet(uint64(m.UpdatedTo))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCabinet(uint64(l))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovCabinet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCabinet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponseData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovCabinet(uint64(m.Total))
	}
	if len(m.Cabinets) > 0 {
		for _, e := range m.Cabinets {
			l = e.Size()
			n += 1 + l + sovCabinet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCabinet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCabinet(x uint64) (n int) {
	return sovCabinet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCabinet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CabinetId", wireType)
			}
			m.CabinetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CabinetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCabinet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCabinet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCabinet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &cabinets.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &cabinets.Cabinet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCabinet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCabinet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCabinet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			m.IsActive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsActive |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowShop", wireType)
			}
			m.AllowShop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowShop |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckType", wireType)
			}
			m.CheckType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckType |= (SaveRequest_ProductCheckType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptin", wireType)
			}
			m.Uptin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Constraints == nil {
				m.Constraints = &cabinets.CabinetConstraints{}
			}
			if err := m.Constraints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCabinet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCabinet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCabinet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &cabinets.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCabinet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCabinet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCabinet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CabinetId", wireType)
			}
			m.CabinetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CabinetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			m.IsActive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsActive |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowShop", wireType)
			}
			m.AllowShop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowShop |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUptin", wireType)
			}
			m.MinUptin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUptin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUptin", wireType)
			}
			m.MaxUptin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUptin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckType", wireType)
			}
			m.CheckType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedFrom", wireType)
			}
			m.UpdatedFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedFrom |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTo", wireType)
			}
			m.UpdatedTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &base.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCabinet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCabinet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCabinet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &cabinets.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ListResponseData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCabinet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCabinet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCabinet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cabinets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCabinet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cabinets = append(m.Cabinets, &cabinets.Cabinet{})
			if err := m.Cabinets[len(m.Cabinets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCabinet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCabinet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCabinet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCabinet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCabinet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCabinet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCabinet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCabinet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCabinet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCabinet   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("cabinets/cabinet/cabinet.proto", fileDescriptor_cabinet_2a0acb0cb3322f34)
}

var fileDescriptor_cabinet_2a0acb0cb3322f34 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x41, 0x8f, 0xe3, 0x34,
	0x14, 0x26, 0x4d, 0xdb, 0x99, 0xbe, 0x56, 0x4b, 0xd7, 0xc0, 0x28, 0x54, 0x9d, 0xa8, 0xca, 0x01,
	0x75, 0x87, 0xdd, 0x44, 0x14, 0x71, 0x19, 0xc4, 0x61, 0x28, 0x68, 0x41, 0x2c, 0xb0, 0xca, 0xec,
	0x5e, 0xe0, 0x10, 0x39, 0x89, 0xb7, 0x6b, 0x6d, 0x6a, 0x87, 0xd8, 0x29, 0x53, 0xd0, 0x5c, 0x10,
	0x27, 0x8e, 0xcc, 0x9f, 0xe2, 0x88, 0xc4, 0x1f, 0x40, 0x23, 0xfe, 0x00, 0xff, 0x00, 0xc5, 0x49,
	0x9a, 0x4c, 0x5b, 0xa6, 0x95, 0x46, 0x7b, 0x69, 0xed, 0xcf, 0xdf, 0x7b, 0x9f, 0xed, 0xf7, 0xf9,
	0x05, 0xcc, 0x00, 0xfb, 0x94, 0x11, 0x29, 0x9c, 0x62, 0x50, 0xfe, 0xdb, 0x71, 0xc2, 0x25, 0x47,
	0xc7, 0x82, 0xb0, 0x90, 0xdb, 0x8b, 0x0f, 0x6c, 0x1c, 0x53, 0xbb, 0x24, 0x97, 0x83, 0xc1, 0x70,
	0xc6, 0xf9, 0x2c, 0x22, 0x0e, 0x8e, 0xa9, 0x83, 0x19, 0xe3, 0x12, 0x4b, 0xca, 0x99, 0xc8, 0x83,
	0x07, 0xef, 0xac, 0x92, 0xcf, 0x79, 0x48, 0xa2, 0x12, 0x7e, 0xd3, 0xc7, 0x82, 0x38, 0xd9, 0x4f,
	0x0e, 0x58, 0x0f, 0x01, 0x1e, 0x13, 0xe9, 0x92, 0x1f, 0x52, 0x22, 0x24, 0x32, 0x01, 0x8a, 0x38,
	0x8f, 0x86, 0x86, 0x36, 0xd2, 0xc6, 0x2d, 0xb7, 0x86, 0x58, 0x17, 0xd0, 0x55, 0x6c, 0x11, 0x73,
	0x26, 0x08, 0xfa, 0x08, 0xda, 0x42, 0x62, 0x99, 0x0a, 0x45, 0xed, 0x4e, 0x8e, 0xed, 0xed, 0x5b,
	0x3e, 0x57, 0x24, 0xb7, 0x20, 0xa3, 0x09, 0x34, 0x43, 0x2c, 0xb1, 0xa1, 0xab, 0x20, 0xf3, 0x7f,
	0x82, 0xa6, 0xf9, 0xc0, 0x55, 0x5c, 0xeb, 0x5f, 0x1d, 0xba, 0xe7, 0x78, 0x41, 0xca, 0x9d, 0x1e,
	0x41, 0x63, 0xdb, 0x0e, 0x11, 0x82, 0x26, 0xc3, 0x73, 0x62, 0x34, 0x46, 0xda, 0xb8, 0xe3, 0xaa,
	0x31, 0x1a, 0x42, 0x87, 0x0a, 0x0f, 0x07, 0x92, 0x2e, 0x88, 0x12, 0x6d, 0xb9, 0x15, 0x90, 0x9d,
	0x19, 0x47, 0x11, 0xff, 0xd1, 0x13, 0x2f, 0x79, 0x6c, 0x34, 0xf3, 0x8c, 0x15, 0x82, 0xbe, 0x07,
	0x08, 0x5e, 0x92, 0xe0, 0x95, 0x27, 0x97, 0x31, 0x31, 0x5a, 0x23, 0x6d, 0x7c, 0x6f, 0xf2, 0xb1,
	0x7d, 0x6b, 0x6d, 0xec, 0xda, 0x4e, 0xed, 0xa7, 0x09, 0x0f, 0xd3, 0x40, 0x4e, 0xb3, 0x1c, 0xcf,
	0x96, 0x31, 0x71, 0x6b, 0xe9, 0xd0, 0xdb, 0xd0, 0x4a, 0x63, 0x49, 0x99, 0xd1, 0x56, 0xba, 0xf9,
	0x04, 0xd9, 0x80, 0x04, 0x89, 0x22, 0x92, 0x78, 0x21, 0x11, 0x41, 0x42, 0xe3, 0xac, 0xb2, 0xc6,
	0x81, 0x3a, 0xd2, 0x96, 0x15, 0xf4, 0x10, 0xee, 0xfb, 0xe9, 0x72, 0x8d, 0x7e, 0xa8, 0xe8, 0x9b,
	0x0b, 0xc8, 0x80, 0x83, 0x34, 0x89, 0xbc, 0x57, 0x64, 0x69, 0x74, 0x14, 0xa7, 0x9c, 0xa2, 0x23,
	0x68, 0xfb, 0x98, 0x31, 0x92, 0x18, 0xa0, 0x16, 0x8a, 0x19, 0xfa, 0x0a, 0xba, 0x01, 0x67, 0x42,
	0x26, 0x98, 0x32, 0x29, 0x8c, 0xae, 0xaa, 0xdb, 0x83, 0xdb, 0xeb, 0x36, 0xad, 0x02, 0xdc, 0x7a,
	0xb4, 0x35, 0x86, 0xfe, 0xfa, 0x95, 0xa0, 0x43, 0x68, 0x9e, 0x3d, 0x7f, 0xf6, 0x6d, 0xff, 0x0d,
	0x04, 0xd0, 0xfe, 0xfa, 0xec, 0x9b, 0xe7, 0x67, 0x4f, 0xfa, 0x9a, 0xf5, 0x39, 0xf4, 0xf2, 0x8b,
	0xbc, 0x93, 0xdd, 0xac, 0x2b, 0x1d, 0xba, 0x4f, 0xa8, 0x58, 0x99, 0xfc, 0x78, 0x8b, 0xc9, 0x3b,
	0x05, 0xf2, 0xe5, 0xeb, 0x70, 0xd0, 0x10, 0x3a, 0x73, 0xca, 0xbc, 0xbc, 0xd0, 0xad, 0x3c, 0x7a,
	0x05, 0xa8, 0x55, 0x7c, 0xe1, 0xd5, 0x6d, 0x50, 0x01, 0xea, 0x45, 0x56, 0xee, 0x3b, 0x28, 0xfc,
	0x5e, 0x19, 0xc8, 0x04, 0x48, 0xe3, 0x10, 0x4b, 0x12, 0x7a, 0xfe, 0xb2, 0xa8, 0x79, 0x0d, 0x41,
	0x16, 0xf4, 0xca, 0xd9, 0x8b, 0x84, 0xcf, 0x55, 0xc5, 0x75, 0xf7, 0x06, 0x56, 0xcf, 0x21, 0xb9,
	0x2a, 0xbd, 0xee, 0xd6, 0x10, 0xf4, 0x09, 0x40, 0x8c, 0x67, 0x94, 0xa9, 0x06, 0x53, 0x54, 0x7f,
	0xed, 0xee, 0x55, 0x47, 0x79, 0xba, 0x22, 0xb9, 0xb5, 0x80, 0xcc, 0xe3, 0x82, 0x27, 0x52, 0x18,
	0xbd, 0x91, 0x3e, 0xee, 0xb8, 0xf9, 0xc4, 0xfa, 0x4d, 0x83, 0x5e, 0x5e, 0x95, 0xbb, 0x35, 0x93,
	0xe9, 0x8d, 0x66, 0xe2, 0xec, 0x78, 0x98, 0x75, 0xc5, 0xcf, 0xb0, 0xc4, 0x45, 0x77, 0x09, 0xa1,
	0xbf, 0xbe, 0x92, 0x6d, 0x5b, 0x72, 0x89, 0xa3, 0xc2, 0x21, 0xf9, 0x04, 0x9d, 0xc2, 0x61, 0x99,
	0xd4, 0x68, 0x8c, 0xf4, 0x3d, 0xfa, 0xd7, 0x8a, 0x3f, 0xf9, 0x5d, 0x87, 0x7b, 0x05, 0x7a, 0x4e,
	0x92, 0x05, 0x0d, 0x08, 0xba, 0x84, 0x66, 0x66, 0x71, 0x74, 0xb2, 0x7f, 0x43, 0x19, 0xbc, 0xbf,
	0x17, 0x37, 0x3f, 0x89, 0x35, 0xfc, 0xe5, 0xaf, 0x7f, 0xae, 0x1a, 0x47, 0xd6, 0x7d, 0x67, 0xfd,
	0x6b, 0x73, 0xaa, 0x9d, 0xa0, 0x9f, 0xa0, 0x99, 0x9d, 0x7b, 0xa7, 0x7c, 0xed, 0xf9, 0xec, 0x94,
	0xaf, 0x5f, 0xa4, 0xf5, 0xae, 0x92, 0x7f, 0x0b, 0x6d, 0xca, 0xa3, 0x5f, 0x35, 0xd0, 0x1f, 0x13,
	0x89, 0x1e, 0xec, 0xc8, 0x57, 0x7d, 0x9e, 0x06, 0x27, 0xfb, 0x50, 0x0b, 0xe5, 0xf7, 0x94, 0xf2,
	0x08, 0x99, 0x1b, 0xca, 0xce, 0xcf, 0xd5, 0xf3, 0xbf, 0xfc, 0xf4, 0x8b, 0x3f, 0xae, 0x4d, 0xed,
	0xcf, 0x6b, 0x53, 0xfb, 0xfb, 0xda, 0xd4, 0xbe, 0x3b, 0x9d, 0x51, 0x19, 0x61, 0xbf, 0xd4, 0x61,
	0x8e, 0xfa, 0x4a, 0xfa, 0xe9, 0x0b, 0x87, 0x32, 0x49, 0x12, 0x86, 0xa3, 0x47, 0x38, 0xa6, 0xe2,
	0xd1, 0x8c, 0x6f, 0xa4, 0xf5, 0xdb, 0x8a, 0xfb, 0xe1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xee,
	0x0c, 0x76, 0x05, 0xd8, 0x07, 0x00, 0x00,
}
