// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order_statistic/order_statistic.proto

package order_statistic

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

func errorField(fieldName, msg string) *errdetails.BadRequest_FieldViolation {
	return &errdetails.BadRequest_FieldViolation{
		Field:       fieldName,
		Description: msg,
	}
}

// Validate checks the field values on OrderListReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderListReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Query

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderListReqValidationError is the validation error returned by
// OrderListReq.Validate if the designated constraints aren't met.
type OrderListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListReqValidationError) ErrorName() string { return "OrderListReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListReqValidationError{}

// Validate checks the field values on OrderListRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderListRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Orders[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderListResValidationError is the validation error returned by
// OrderListRes.Validate if the designated constraints aren't met.
type OrderListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListResValidationError) ErrorName() string { return "OrderListResValidationError" }

// Error satisfies the builtin error interface
func (e OrderListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListResValidationError{}

// Validate checks the field values on OrderLogRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderLogRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("Logs[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderLogResValidationError is the validation error returned by
// OrderLogRes.Validate if the designated constraints aren't met.
type OrderLogResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLogResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLogResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLogResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLogResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLogResValidationError) ErrorName() string { return "OrderLogResValidationError" }

// Error satisfies the builtin error interface
func (e OrderLogResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLogRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLogResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLogResValidationError{}

// Validate checks the field values on ErrorLog with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ErrorLog) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderId

	// no validation rules for ProductId

	// no validation rules for Reason

	// no validation rules for Time

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ErrorLogValidationError is the validation error returned by
// ErrorLog.Validate if the designated constraints aren't met.
type ErrorLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorLogValidationError) ErrorName() string { return "ErrorLogValidationError" }

// Error satisfies the builtin error interface
func (e ErrorLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorLogValidationError{}

// Validate checks the field values on OrderList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OrderList) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Status

	// no validation rules for CancelBy

	// no validation rules for AdminId

	// no validation rules for CustomerId

	// no validation rules for PaymentMethod

	// no validation rules for ProductId

	// no validation rules for CategoryId

	// no validation rules for Price

	// no validation rules for QtyOrdered

	// no validation rules for VersionNo

	// no validation rules for CountryId

	// no validation rules for RegionId

	// no validation rules for EcomWardId

	// no validation rules for EcomDistrict

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderListValidationError is the validation error returned by
// OrderList.Validate if the designated constraints aren't met.
type OrderListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListValidationError) ErrorName() string { return "OrderListValidationError" }

// Error satisfies the builtin error interface
func (e OrderListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListValidationError{}

// Validate checks the field values on OrderSearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderSearchReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderId

	// no validation rules for CreatedAt

	// no validation rules for CreatedAtFrom

	// no validation rules for CreatedAtTo

	// no validation rules for UpdatedAt

	// no validation rules for UpdatedAtFrom

	// no validation rules for UpdatedAtTo

	// no validation rules for Status

	// no validation rules for CancelBy

	// no validation rules for AdminId

	// no validation rules for CustomerId

	// no validation rules for PaymentMethod

	// no validation rules for ProductId

	// no validation rules for CategoryId

	// no validation rules for Price

	// no validation rules for PriceFrom

	// no validation rules for PriceTo

	// no validation rules for QtyOrdered

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderSearchReqValidationError is the validation error returned by
// OrderSearchReq.Validate if the designated constraints aren't met.
type OrderSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderSearchReqValidationError) ErrorName() string { return "OrderSearchReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderSearchReqValidationError{}

// Validate checks the field values on OrderSearchRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderSearchRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Total

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderSearchResValidationError is the validation error returned by
// OrderSearchRes.Validate if the designated constraints aren't met.
type OrderSearchResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderSearchResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderSearchResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderSearchResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderSearchResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderSearchResValidationError) ErrorName() string { return "OrderSearchResValidationError" }

// Error satisfies the builtin error interface
func (e OrderSearchResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderSearchRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderSearchResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderSearchResValidationError{}

// Validate checks the field values on ProductListItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductListItem) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for ExternalId

	// no validation rules for ProductId

	// no validation rules for Weight

	// no validation rules for ProductName

	// no validation rules for Description

	// no validation rules for LstAttOptional

	// no validation rules for OrderQuantity

	// no validation rules for UnitPrice

	// no validation rules for AffiliateAmount

	// no validation rules for AffiliateSendoAmount

	// no validation rules for ProductLength

	// no validation rules for ProductWidth

	// no validation rules for ProductHeight

	// no validation rules for VMWeight

	// no validation rules for FlashSalesInfo

	// no validation rules for FlashSalesAmount

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// ProductListItemValidationError is the validation error returned by
// ProductListItem.Validate if the designated constraints aren't met.
type ProductListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductListItemValidationError) ErrorName() string { return "ProductListItemValidationError" }

// Error satisfies the builtin error interface
func (e ProductListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductListItemValidationError{}

// Validate checks the field values on OrderAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderAddReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderNumber

	// no validation rules for BuyerId

	// no validation rules for StoreId

	// no validation rules for StoreName

	// no validation rules for StorePhone

	// no validation rules for StoreEmail

	for idx, item := range m.GetProductList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				errorFields = append(errorFields, errorField(fmt.Sprintf("ProductList[%v]", idx), "embedded message failed validation"))
			}
		}

	}

	// no validation rules for Note

	// no validation rules for Weight

	// no validation rules for ActualWeight

	// no validation rules for Tax

	// no validation rules for ShippingMethod

	// no validation rules for ShippingFee

	// no validation rules for ServiceFee

	// no validation rules for SubTotal

	// no validation rules for TotalAmount

	// no validation rules for ExpectedDeliveryDate

	// no validation rules for OrderStatus

	// no validation rules for OrderStatusDate

	// no validation rules for PaymentStatus

	// no validation rules for PaymentStatusDate

	// no validation rules for PaymentMethod

	// no validation rules for PaymentType

	// no validation rules for BuyerName

	// no validation rules for BuyerAddress

	// no validation rules for BuyerEmail

	// no validation rules for BuyerLocation

	// no validation rules for BuyerCity

	// no validation rules for BuyerContactPhone

	// no validation rules for ReceiverName

	// no validation rules for ShippingFromAddress

	// no validation rules for ShippingFromWard

	// no validation rules for ShippingFromWardId

	// no validation rules for ShippingFromLocation

	// no validation rules for ShippingFromCity

	// no validation rules for ShippingFromZipcode

	// no validation rules for ShippingAddress

	// no validation rules for ShippingWard

	// no validation rules for ShippingWardId

	// no validation rules for ShippingLocation

	// no validation rules for ShippingCity

	// no validation rules for ShippingZipcode

	// no validation rules for ShippingContactPhone

	// no validation rules for CarrierCode

	// no validation rules for OrderDateTime

	// no validation rules for BuyerFreeShipping

	// no validation rules for SellerShippingFee

	// no validation rules for SendoSupportFee

	// no validation rules for SendoSupportFeeToBuyer

	// no validation rules for CarrierServiceId

	// no validation rules for SenpayFreeShipping

	// no validation rules for CampainCode

	// no validation rules for VoucherCode

	// no validation rules for IsShopVoucher

	// no validation rules for VoucherAmount

	// no validation rules for CODFee

	// no validation rules for LoyaltyAmount

	// no validation rules for SellerLoyalAmount

	// no validation rules for WarningStatus

	// no validation rules for MobileDiscountAmount

	// no validation rules for DiscountAmount

	// no validation rules for TrackingOrderSource

	// no validation rules for AllowCheck

	// no validation rules for UserIp

	// no validation rules for BrowserId

	// no validation rules for IsLoggedIn

	// no validation rules for OriginalFee

	// no validation rules for SubFee

	// no validation rules for SenpayFee

	// no validation rules for BankName

	// no validation rules for InstallmentFee

	// no validation rules for PostOfficesFee

	// no validation rules for AffiliateTotalAmount

	// no validation rules for AffiliateSendoTotalAmount

	// no validation rules for AffiliateName

	// no validation rules for Comment

	// no validation rules for ExceptionCode

	// no validation rules for IsPostOffice

	// no validation rules for Repush

	// no validation rules for GaSource

	// no validation rules for ComplainUrl

	// no validation rules for SalesOrderType

	// no validation rules for TypesOfSalesPromotion

	// no validation rules for SenderLatitude

	// no validation rules for SenderLongitude

	// no validation rules for ReceiverLatitude

	// no validation rules for ReceiverLongitude

	// no validation rules for SalesPromotionAmount

	// no validation rules for AffiliateReferer

	// no validation rules for DeviceId

	// no validation rules for UserAgent

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderAddReqValidationError is the validation error returned by
// OrderAddReq.Validate if the designated constraints aren't met.
type OrderAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderAddReqValidationError) ErrorName() string { return "OrderAddReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderAddReqValidationError{}

// Validate checks the field values on OrderUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderUpdateReq) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for OrderNumber

	// no validation rules for PaymentStatusInside

	// no validation rules for OrderStatusInside

	// no validation rules for DeliveryStatusInside

	// no validation rules for VersionNo

	// no validation rules for CancelReason

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderUpdateReqValidationError is the validation error returned by
// OrderUpdateReq.Validate if the designated constraints aren't met.
type OrderUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderUpdateReqValidationError) ErrorName() string { return "OrderUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderUpdateReqValidationError{}

// Validate checks the field values on OrderAddRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderAddRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderAddResValidationError is the validation error returned by
// OrderAddRes.Validate if the designated constraints aren't met.
type OrderAddResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderAddResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderAddResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderAddResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderAddResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderAddResValidationError) ErrorName() string { return "OrderAddResValidationError" }

// Error satisfies the builtin error interface
func (e OrderAddResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderAddRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderAddResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderAddResValidationError{}

// Validate checks the field values on OrderUpdateRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderUpdateRes) Validate() error {
	if m == nil {
		return nil
	}

	errorFields := []*errdetails.BadRequest_FieldViolation{}

	// no validation rules for Status

	if len(errorFields) > 0 {
		st := status.New(codes.InvalidArgument, "Invalid data")
		br := &errdetails.BadRequest{}
		br.FieldViolations = errorFields
		st, _ = st.WithDetails(br)
		return st.Err()
	}

	return nil
}

// OrderUpdateResValidationError is the validation error returned by
// OrderUpdateRes.Validate if the designated constraints aren't met.
type OrderUpdateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderUpdateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderUpdateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderUpdateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderUpdateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderUpdateResValidationError) ErrorName() string { return "OrderUpdateResValidationError" }

// Error satisfies the builtin error interface
func (e OrderUpdateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderUpdateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderUpdateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderUpdateResValidationError{}
