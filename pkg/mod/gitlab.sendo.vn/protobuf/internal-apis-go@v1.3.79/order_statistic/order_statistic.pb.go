// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order_statistic/order_statistic.proto

package order_statistic // import "gitlab.sendo.vn/protobuf/internal-apis-go/order_statistic"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OrderListReq struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderListReq) Reset()         { *m = OrderListReq{} }
func (m *OrderListReq) String() string { return proto.CompactTextString(m) }
func (*OrderListReq) ProtoMessage()    {}
func (*OrderListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{0}
}
func (m *OrderListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderListReq.Merge(dst, src)
}
func (m *OrderListReq) XXX_Size() int {
	return m.Size()
}
func (m *OrderListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderListReq.DiscardUnknown(m)
}

var xxx_messageInfo_OrderListReq proto.InternalMessageInfo

func (m *OrderListReq) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type OrderListRes struct {
	Total                uint32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Orders               []*OrderList `protobuf:"bytes,2,rep,name=orders" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OrderListRes) Reset()         { *m = OrderListRes{} }
func (m *OrderListRes) String() string { return proto.CompactTextString(m) }
func (*OrderListRes) ProtoMessage()    {}
func (*OrderListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{1}
}
func (m *OrderListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderListRes.Merge(dst, src)
}
func (m *OrderListRes) XXX_Size() int {
	return m.Size()
}
func (m *OrderListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderListRes.DiscardUnknown(m)
}

var xxx_messageInfo_OrderListRes proto.InternalMessageInfo

func (m *OrderListRes) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *OrderListRes) GetOrders() []*OrderList {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrderLogRes struct {
	Total                int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Logs                 []*ErrorLog `protobuf:"bytes,2,rep,name=logs,json=log" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderLogRes) Reset()         { *m = OrderLogRes{} }
func (m *OrderLogRes) String() string { return proto.CompactTextString(m) }
func (*OrderLogRes) ProtoMessage()    {}
func (*OrderLogRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{2}
}
func (m *OrderLogRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderLogRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderLogRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderLogRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderLogRes.Merge(dst, src)
}
func (m *OrderLogRes) XXX_Size() int {
	return m.Size()
}
func (m *OrderLogRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderLogRes.DiscardUnknown(m)
}

var xxx_messageInfo_OrderLogRes proto.InternalMessageInfo

func (m *OrderLogRes) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *OrderLogRes) GetLogs() []*ErrorLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type ErrorLog struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Time                 int64    `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorLog) Reset()         { *m = ErrorLog{} }
func (m *ErrorLog) String() string { return proto.CompactTextString(m) }
func (*ErrorLog) ProtoMessage()    {}
func (*ErrorLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{3}
}
func (m *ErrorLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ErrorLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorLog.Merge(dst, src)
}
func (m *ErrorLog) XXX_Size() int {
	return m.Size()
}
func (m *ErrorLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorLog.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorLog proto.InternalMessageInfo

func (m *ErrorLog) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *ErrorLog) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ErrorLog) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ErrorLog) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type OrderList struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	CreatedAt            int64    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CancelBy             string   `protobuf:"bytes,5,opt,name=cancel_by,json=cancelBy,proto3" json:"cancel_by,omitempty"`
	AdminId              int32    `protobuf:"varint,6,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	CustomerId           int32    `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PaymentMethod        string   `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	ProductId            int64    `protobuf:"varint,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CategoryId           string   `protobuf:"bytes,10,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Price                float32  `protobuf:"fixed32,11,opt,name=price,proto3" json:"price,omitempty"`
	QtyOrdered           float32  `protobuf:"fixed32,12,opt,name=qty_ordered,json=qtyOrdered,proto3" json:"qty_ordered,omitempty"`
	VersionNo            int64    `protobuf:"varint,13,opt,name=version_no,json=versionNo,proto3" json:"version_no,omitempty"`
	CountryId            string   `protobuf:"bytes,14,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	RegionId             int32    `protobuf:"varint,15,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	EcomWardId           int32    `protobuf:"varint,16,opt,name=ecom_ward_id,json=ecomWardId,proto3" json:"ecom_ward_id,omitempty"`
	EcomDistrict         int32    `protobuf:"varint,17,opt,name=ecom_district,json=ecomDistrict,proto3" json:"ecom_district,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderList) Reset()         { *m = OrderList{} }
func (m *OrderList) String() string { return proto.CompactTextString(m) }
func (*OrderList) ProtoMessage()    {}
func (*OrderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{4}
}
func (m *OrderList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderList.Merge(dst, src)
}
func (m *OrderList) XXX_Size() int {
	return m.Size()
}
func (m *OrderList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderList.DiscardUnknown(m)
}

var xxx_messageInfo_OrderList proto.InternalMessageInfo

func (m *OrderList) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *OrderList) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *OrderList) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *OrderList) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *OrderList) GetCancelBy() string {
	if m != nil {
		return m.CancelBy
	}
	return ""
}

func (m *OrderList) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *OrderList) GetCustomerId() int32 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *OrderList) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *OrderList) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *OrderList) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

func (m *OrderList) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderList) GetQtyOrdered() float32 {
	if m != nil {
		return m.QtyOrdered
	}
	return 0
}

func (m *OrderList) GetVersionNo() int64 {
	if m != nil {
		return m.VersionNo
	}
	return 0
}

func (m *OrderList) GetCountryId() string {
	if m != nil {
		return m.CountryId
	}
	return ""
}

func (m *OrderList) GetRegionId() int32 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *OrderList) GetEcomWardId() int32 {
	if m != nil {
		return m.EcomWardId
	}
	return 0
}

func (m *OrderList) GetEcomDistrict() int32 {
	if m != nil {
		return m.EcomDistrict
	}
	return 0
}

type OrderSearchReq struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,proto3" json:"order_id,omitempty"`
	CreatedAt            int64    `protobuf:"varint,2,opt,name=created_at,proto3" json:"created_at,omitempty"`
	CreatedAtFrom        int64    `protobuf:"varint,3,opt,name=created_at_from,json=created_at,proto3" json:"created_at_from,omitempty"`
	CreatedAtTo          int64    `protobuf:"varint,4,opt,name=created_at_to,json=created_at,proto3" json:"created_at_to,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,5,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	UpdatedAtFrom        int64    `protobuf:"varint,6,opt,name=updated_at_from,json=updated_at,proto3" json:"updated_at_from,omitempty"`
	UpdatedAtTo          int64    `protobuf:"varint,7,opt,name=updated_at_to,json=updated_at,proto3" json:"updated_at_to,omitempty"`
	Status               string   `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	CancelBy             string   `protobuf:"bytes,9,opt,name=cancel_by,proto3" json:"cancel_by,omitempty"`
	AdminId              int32    `protobuf:"varint,10,opt,name=admin_id,proto3" json:"admin_id,omitempty"`
	CustomerId           int32    `protobuf:"varint,11,opt,name=customer_id,proto3" json:"customer_id,omitempty"`
	PaymentMethod        string   `protobuf:"bytes,12,opt,name=payment_method,proto3" json:"payment_method,omitempty"`
	ProductId            int64    `protobuf:"varint,13,opt,name=product_id,proto3" json:"product_id,omitempty"`
	CategoryId           string   `protobuf:"bytes,14,opt,name=category_id,proto3" json:"category_id,omitempty"`
	Price                float32  `protobuf:"fixed32,15,opt,name=price,proto3" json:"price,omitempty"`
	PriceFrom            float32  `protobuf:"fixed32,16,opt,name=price_from,json=price,proto3" json:"price_from,omitempty"`
	PriceTo              float32  `protobuf:"fixed32,17,opt,name=price_to,json=price,proto3" json:"price_to,omitempty"`
	QtyOrdered           float32  `protobuf:"fixed32,18,opt,name=qty_ordered,proto3" json:"qty_ordered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderSearchReq) Reset()         { *m = OrderSearchReq{} }
func (m *OrderSearchReq) String() string { return proto.CompactTextString(m) }
func (*OrderSearchReq) ProtoMessage()    {}
func (*OrderSearchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{5}
}
func (m *OrderSearchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderSearchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderSearchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderSearchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSearchReq.Merge(dst, src)
}
func (m *OrderSearchReq) XXX_Size() int {
	return m.Size()
}
func (m *OrderSearchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSearchReq.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSearchReq proto.InternalMessageInfo

func (m *OrderSearchReq) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *OrderSearchReq) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *OrderSearchReq) GetCreatedAtFrom() int64 {
	if m != nil {
		return m.CreatedAtFrom
	}
	return 0
}

func (m *OrderSearchReq) GetCreatedAtTo() int64 {
	if m != nil {
		return m.CreatedAtTo
	}
	return 0
}

func (m *OrderSearchReq) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *OrderSearchReq) GetUpdatedAtFrom() int64 {
	if m != nil {
		return m.UpdatedAtFrom
	}
	return 0
}

func (m *OrderSearchReq) GetUpdatedAtTo() int64 {
	if m != nil {
		return m.UpdatedAtTo
	}
	return 0
}

func (m *OrderSearchReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *OrderSearchReq) GetCancelBy() string {
	if m != nil {
		return m.CancelBy
	}
	return ""
}

func (m *OrderSearchReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *OrderSearchReq) GetCustomerId() int32 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *OrderSearchReq) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *OrderSearchReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *OrderSearchReq) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

func (m *OrderSearchReq) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderSearchReq) GetPriceFrom() float32 {
	if m != nil {
		return m.PriceFrom
	}
	return 0
}

func (m *OrderSearchReq) GetPriceTo() float32 {
	if m != nil {
		return m.PriceTo
	}
	return 0
}

func (m *OrderSearchReq) GetQtyOrdered() float32 {
	if m != nil {
		return m.QtyOrdered
	}
	return 0
}

type OrderSearchRes struct {
	Total                uint32   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderSearchRes) Reset()         { *m = OrderSearchRes{} }
func (m *OrderSearchRes) String() string { return proto.CompactTextString(m) }
func (*OrderSearchRes) ProtoMessage()    {}
func (*OrderSearchRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{6}
}
func (m *OrderSearchRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderSearchRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderSearchRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderSearchRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSearchRes.Merge(dst, src)
}
func (m *OrderSearchRes) XXX_Size() int {
	return m.Size()
}
func (m *OrderSearchRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSearchRes.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSearchRes proto.InternalMessageInfo

func (m *OrderSearchRes) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ProductListItem struct {
	ExternalId           int32    `protobuf:"varint,1,opt,name=ExternalId,proto3" json:"ExternalId,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	Weight               float32  `protobuf:"fixed32,3,opt,name=Weight,proto3" json:"Weight,omitempty"`
	ProductName          string   `protobuf:"bytes,4,opt,name=ProductName,proto3" json:"ProductName,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	LstAttOptional       string   `protobuf:"bytes,6,opt,name=LstAttOptional,proto3" json:"LstAttOptional,omitempty"`
	OrderQuantity        int32    `protobuf:"varint,7,opt,name=OrderQuantity,proto3" json:"OrderQuantity,omitempty"`
	UnitPrice            float32  `protobuf:"fixed32,8,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	AffiliateAmount      float32  `protobuf:"fixed32,9,opt,name=AffiliateAmount,proto3" json:"AffiliateAmount,omitempty"`
	AffiliateSendoAmount float32  `protobuf:"fixed32,10,opt,name=AffiliateSendoAmount,proto3" json:"AffiliateSendoAmount,omitempty"`
	ProductLength        float32  `protobuf:"fixed32,11,opt,name=ProductLength,proto3" json:"ProductLength,omitempty"`
	ProductWidth         float32  `protobuf:"fixed32,12,opt,name=ProductWidth,proto3" json:"ProductWidth,omitempty"`
	ProductHeight        float32  `protobuf:"fixed32,13,opt,name=ProductHeight,proto3" json:"ProductHeight,omitempty"`
	VMWeight             float32  `protobuf:"fixed32,14,opt,name=VMWeight,proto3" json:"VMWeight,omitempty"`
	FlashSalesInfo       string   `protobuf:"bytes,15,opt,name=FlashSalesInfo,proto3" json:"FlashSalesInfo,omitempty"`
	FlashSalesAmount     float32  `protobuf:"fixed32,16,opt,name=FlashSalesAmount,proto3" json:"FlashSalesAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductListItem) Reset()         { *m = ProductListItem{} }
func (m *ProductListItem) String() string { return proto.CompactTextString(m) }
func (*ProductListItem) ProtoMessage()    {}
func (*ProductListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{7}
}
func (m *ProductListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductListItem.Merge(dst, src)
}
func (m *ProductListItem) XXX_Size() int {
	return m.Size()
}
func (m *ProductListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductListItem.DiscardUnknown(m)
}

var xxx_messageInfo_ProductListItem proto.InternalMessageInfo

func (m *ProductListItem) GetExternalId() int32 {
	if m != nil {
		return m.ExternalId
	}
	return 0
}

func (m *ProductListItem) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductListItem) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ProductListItem) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ProductListItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProductListItem) GetLstAttOptional() string {
	if m != nil {
		return m.LstAttOptional
	}
	return ""
}

func (m *ProductListItem) GetOrderQuantity() int32 {
	if m != nil {
		return m.OrderQuantity
	}
	return 0
}

func (m *ProductListItem) GetUnitPrice() float32 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *ProductListItem) GetAffiliateAmount() float32 {
	if m != nil {
		return m.AffiliateAmount
	}
	return 0
}

func (m *ProductListItem) GetAffiliateSendoAmount() float32 {
	if m != nil {
		return m.AffiliateSendoAmount
	}
	return 0
}

func (m *ProductListItem) GetProductLength() float32 {
	if m != nil {
		return m.ProductLength
	}
	return 0
}

func (m *ProductListItem) GetProductWidth() float32 {
	if m != nil {
		return m.ProductWidth
	}
	return 0
}

func (m *ProductListItem) GetProductHeight() float32 {
	if m != nil {
		return m.ProductHeight
	}
	return 0
}

func (m *ProductListItem) GetVMWeight() float32 {
	if m != nil {
		return m.VMWeight
	}
	return 0
}

func (m *ProductListItem) GetFlashSalesInfo() string {
	if m != nil {
		return m.FlashSalesInfo
	}
	return ""
}

func (m *ProductListItem) GetFlashSalesAmount() float32 {
	if m != nil {
		return m.FlashSalesAmount
	}
	return 0
}

type OrderAddReq struct {
	OrderNumber               string             `protobuf:"bytes,1,opt,name=OrderNumber,proto3" json:"OrderNumber,omitempty"`
	BuyerId                   string             `protobuf:"bytes,2,opt,name=BuyerId,proto3" json:"BuyerId,omitempty"`
	StoreId                   int32              `protobuf:"varint,3,opt,name=StoreId,proto3" json:"StoreId,omitempty"`
	StoreName                 string             `protobuf:"bytes,4,opt,name=StoreName,proto3" json:"StoreName,omitempty"`
	StorePhone                string             `protobuf:"bytes,5,opt,name=StorePhone,proto3" json:"StorePhone,omitempty"`
	StoreEmail                string             `protobuf:"bytes,6,opt,name=StoreEmail,proto3" json:"StoreEmail,omitempty"`
	ProductList               []*ProductListItem `protobuf:"bytes,7,rep,name=ProductList" json:"ProductList,omitempty"`
	Note                      string             `protobuf:"bytes,8,opt,name=Note,proto3" json:"Note,omitempty"`
	Weight                    float32            `protobuf:"fixed32,9,opt,name=Weight,proto3" json:"Weight,omitempty"`
	ActualWeight              float32            `protobuf:"fixed32,10,opt,name=ActualWeight,proto3" json:"ActualWeight,omitempty"`
	Tax                       float32            `protobuf:"fixed32,11,opt,name=Tax,proto3" json:"Tax,omitempty"`
	ShippingMethod            int32              `protobuf:"varint,12,opt,name=ShippingMethod,proto3" json:"ShippingMethod,omitempty"`
	ShippingFee               float32            `protobuf:"fixed32,13,opt,name=ShippingFee,proto3" json:"ShippingFee,omitempty"`
	ServiceFee                float32            `protobuf:"fixed32,14,opt,name=ServiceFee,proto3" json:"ServiceFee,omitempty"`
	SubTotal                  float32            `protobuf:"fixed32,15,opt,name=SubTotal,proto3" json:"SubTotal,omitempty"`
	TotalAmount               float32            `protobuf:"fixed32,16,opt,name=TotalAmount,proto3" json:"TotalAmount,omitempty"`
	ExpectedDeliveryDate      string             `protobuf:"bytes,17,opt,name=ExpectedDeliveryDate,proto3" json:"ExpectedDeliveryDate,omitempty"`
	OrderStatus               int32              `protobuf:"varint,18,opt,name=OrderStatus,proto3" json:"OrderStatus,omitempty"`
	OrderStatusDate           string             `protobuf:"bytes,19,opt,name=OrderStatusDate,proto3" json:"OrderStatusDate,omitempty"`
	PaymentStatus             int32              `protobuf:"varint,20,opt,name=PaymentStatus,proto3" json:"PaymentStatus,omitempty"`
	PaymentStatusDate         string             `protobuf:"bytes,21,opt,name=PaymentStatusDate,proto3" json:"PaymentStatusDate,omitempty"`
	PaymentMethod             int32              `protobuf:"varint,22,opt,name=PaymentMethod,proto3" json:"PaymentMethod,omitempty"`
	PaymentType               int32              `protobuf:"varint,23,opt,name=PaymentType,proto3" json:"PaymentType,omitempty"`
	BuyerName                 string             `protobuf:"bytes,24,opt,name=BuyerName,proto3" json:"BuyerName,omitempty"`
	BuyerAddress              string             `protobuf:"bytes,25,opt,name=BuyerAddress,proto3" json:"BuyerAddress,omitempty"`
	BuyerEmail                string             `protobuf:"bytes,26,opt,name=BuyerEmail,proto3" json:"BuyerEmail,omitempty"`
	BuyerLocation             int32              `protobuf:"varint,27,opt,name=BuyerLocation,proto3" json:"BuyerLocation,omitempty"`
	BuyerCity                 int32              `protobuf:"varint,28,opt,name=BuyerCity,proto3" json:"BuyerCity,omitempty"`
	BuyerContactPhone         string             `protobuf:"bytes,29,opt,name=BuyerContactPhone,proto3" json:"BuyerContactPhone,omitempty"`
	ReceiverName              string             `protobuf:"bytes,30,opt,name=ReceiverName,proto3" json:"ReceiverName,omitempty"`
	ShippingFromAddress       string             `protobuf:"bytes,31,opt,name=ShippingFromAddress,proto3" json:"ShippingFromAddress,omitempty"`
	ShippingFromWard          string             `protobuf:"bytes,32,opt,name=ShippingFromWard,proto3" json:"ShippingFromWard,omitempty"`
	ShippingFromWardId        int32              `protobuf:"varint,33,opt,name=ShippingFromWardId,proto3" json:"ShippingFromWardId,omitempty"`
	ShippingFromLocation      int32              `protobuf:"varint,34,opt,name=ShippingFromLocation,proto3" json:"ShippingFromLocation,omitempty"`
	ShippingFromCity          int32              `protobuf:"varint,35,opt,name=ShippingFromCity,proto3" json:"ShippingFromCity,omitempty"`
	ShippingFromZipcode       string             `protobuf:"bytes,36,opt,name=ShippingFromZipcode,proto3" json:"ShippingFromZipcode,omitempty"`
	ShippingAddress           string             `protobuf:"bytes,37,opt,name=ShippingAddress,proto3" json:"ShippingAddress,omitempty"`
	ShippingWard              string             `protobuf:"bytes,38,opt,name=ShippingWard,proto3" json:"ShippingWard,omitempty"`
	ShippingWardId            int32              `protobuf:"varint,39,opt,name=ShippingWardId,proto3" json:"ShippingWardId,omitempty"`
	ShippingLocation          int32              `protobuf:"varint,40,opt,name=ShippingLocation,proto3" json:"ShippingLocation,omitempty"`
	ShippingCity              int32              `protobuf:"varint,41,opt,name=ShippingCity,proto3" json:"ShippingCity,omitempty"`
	ShippingZipcode           string             `protobuf:"bytes,42,opt,name=ShippingZipcode,proto3" json:"ShippingZipcode,omitempty"`
	ShippingContactPhone      string             `protobuf:"bytes,43,opt,name=ShippingContactPhone,proto3" json:"ShippingContactPhone,omitempty"`
	CarrierCode               string             `protobuf:"bytes,44,opt,name=CarrierCode,proto3" json:"CarrierCode,omitempty"`
	OrderDateTime             string             `protobuf:"bytes,45,opt,name=OrderDateTime,proto3" json:"OrderDateTime,omitempty"`
	BuyerFreeShipping         float32            `protobuf:"fixed32,46,opt,name=BuyerFreeShipping,proto3" json:"BuyerFreeShipping,omitempty"`
	SellerShippingFee         float32            `protobuf:"fixed32,47,opt,name=SellerShippingFee,proto3" json:"SellerShippingFee,omitempty"`
	SendoSupportFee           float32            `protobuf:"fixed32,48,opt,name=SendoSupportFee,proto3" json:"SendoSupportFee,omitempty"`
	SendoSupportFeeToBuyer    float32            `protobuf:"fixed32,49,opt,name=SendoSupportFeeToBuyer,proto3" json:"SendoSupportFeeToBuyer,omitempty"`
	CarrierServiceId          int32              `protobuf:"varint,50,opt,name=CarrierServiceId,proto3" json:"CarrierServiceId,omitempty"`
	SenpayFreeShipping        float32            `protobuf:"fixed32,51,opt,name=SenpayFreeShipping,proto3" json:"SenpayFreeShipping,omitempty"`
	CampainCode               string             `protobuf:"bytes,52,opt,name=CampainCode,proto3" json:"CampainCode,omitempty"`
	VoucherCode               string             `protobuf:"bytes,53,opt,name=VoucherCode,proto3" json:"VoucherCode,omitempty"`
	IsShopVoucher             bool               `protobuf:"varint,54,opt,name=IsShopVoucher,proto3" json:"IsShopVoucher,omitempty"`
	VoucherAmount             float32            `protobuf:"fixed32,55,opt,name=VoucherAmount,proto3" json:"VoucherAmount,omitempty"`
	CODFee                    float32            `protobuf:"fixed32,56,opt,name=CODFee,proto3" json:"CODFee,omitempty"`
	LoyaltyAmount             float32            `protobuf:"fixed32,57,opt,name=LoyaltyAmount,proto3" json:"LoyaltyAmount,omitempty"`
	SellerLoyalAmount         float32            `protobuf:"fixed32,58,opt,name=SellerLoyalAmount,proto3" json:"SellerLoyalAmount,omitempty"`
	WarningStatus             int32              `protobuf:"varint,59,opt,name=WarningStatus,proto3" json:"WarningStatus,omitempty"`
	MobileDiscountAmount      float32            `protobuf:"fixed32,60,opt,name=MobileDiscountAmount,proto3" json:"MobileDiscountAmount,omitempty"`
	DiscountAmount            float32            `protobuf:"fixed32,61,opt,name=DiscountAmount,proto3" json:"DiscountAmount,omitempty"`
	TrackingOrderSource       int32              `protobuf:"varint,62,opt,name=TrackingOrderSource,proto3" json:"TrackingOrderSource,omitempty"`
	AllowCheck                bool               `protobuf:"varint,63,opt,name=AllowCheck,proto3" json:"AllowCheck,omitempty"`
	UserIp                    string             `protobuf:"bytes,64,opt,name=UserIp,proto3" json:"UserIp,omitempty"`
	BrowserId                 string             `protobuf:"bytes,65,opt,name=BrowserId,proto3" json:"BrowserId,omitempty"`
	IsLoggedIn                int32              `protobuf:"varint,66,opt,name=IsLoggedIn,proto3" json:"IsLoggedIn,omitempty"`
	OriginalFee               float32            `protobuf:"fixed32,67,opt,name=OriginalFee,proto3" json:"OriginalFee,omitempty"`
	SubFee                    float32            `protobuf:"fixed32,68,opt,name=SubFee,proto3" json:"SubFee,omitempty"`
	SenpayFee                 float32            `protobuf:"fixed32,69,opt,name=SenpayFee,proto3" json:"SenpayFee,omitempty"`
	BankName                  string             `protobuf:"bytes,70,opt,name=BankName,proto3" json:"BankName,omitempty"`
	InstallmentFee            float32            `protobuf:"fixed32,71,opt,name=InstallmentFee,proto3" json:"InstallmentFee,omitempty"`
	PostOfficesFee            float32            `protobuf:"fixed32,72,opt,name=PostOfficesFee,proto3" json:"PostOfficesFee,omitempty"`
	AffiliateTotalAmount      float32            `protobuf:"fixed32,73,opt,name=AffiliateTotalAmount,proto3" json:"AffiliateTotalAmount,omitempty"`
	AffiliateSendoTotalAmount float32            `protobuf:"fixed32,74,opt,name=AffiliateSendoTotalAmount,proto3" json:"AffiliateSendoTotalAmount,omitempty"`
	AffiliateName             string             `protobuf:"bytes,75,opt,name=AffiliateName,proto3" json:"AffiliateName,omitempty"`
	Comment                   string             `protobuf:"bytes,76,opt,name=Comment,proto3" json:"Comment,omitempty"`
	ExceptionCode             int32              `protobuf:"varint,77,opt,name=ExceptionCode,proto3" json:"ExceptionCode,omitempty"`
	IsPostOffice              bool               `protobuf:"varint,78,opt,name=IsPostOffice,proto3" json:"IsPostOffice,omitempty"`
	Repush                    string             `protobuf:"bytes,79,opt,name=Repush,proto3" json:"Repush,omitempty"`
	GaSource                  string             `protobuf:"bytes,80,opt,name=GaSource,proto3" json:"GaSource,omitempty"`
	ComplainUrl               string             `protobuf:"bytes,81,opt,name=ComplainUrl,proto3" json:"ComplainUrl,omitempty"`
	SalesOrderType            int32              `protobuf:"varint,82,opt,name=SalesOrderType,proto3" json:"SalesOrderType,omitempty"`
	TypesOfSalesPromotion     int32              `protobuf:"varint,83,opt,name=TypesOfSalesPromotion,proto3" json:"TypesOfSalesPromotion,omitempty"`
	SenderLatitude            float32            `protobuf:"fixed32,84,opt,name=SenderLatitude,proto3" json:"SenderLatitude,omitempty"`
	SenderLongitude           float32            `protobuf:"fixed32,85,opt,name=SenderLongitude,proto3" json:"SenderLongitude,omitempty"`
	ReceiverLatitude          float32            `protobuf:"fixed32,86,opt,name=ReceiverLatitude,proto3" json:"ReceiverLatitude,omitempty"`
	ReceiverLongitude         float32            `protobuf:"fixed32,87,opt,name=ReceiverLongitude,proto3" json:"ReceiverLongitude,omitempty"`
	SalesPromotionAmount      float32            `protobuf:"fixed32,88,opt,name=SalesPromotionAmount,proto3" json:"SalesPromotionAmount,omitempty"`
	AffiliateReferer          string             `protobuf:"bytes,89,opt,name=AffiliateReferer,proto3" json:"AffiliateReferer,omitempty"`
	DeviceId                  string             `protobuf:"bytes,90,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	UserAgent                 string             `protobuf:"bytes,91,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}           `json:"-"`
	XXX_unrecognized          []byte             `json:"-"`
	XXX_sizecache             int32              `json:"-"`
}

func (m *OrderAddReq) Reset()         { *m = OrderAddReq{} }
func (m *OrderAddReq) String() string { return proto.CompactTextString(m) }
func (*OrderAddReq) ProtoMessage()    {}
func (*OrderAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{8}
}
func (m *OrderAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderAddReq.Merge(dst, src)
}
func (m *OrderAddReq) XXX_Size() int {
	return m.Size()
}
func (m *OrderAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_OrderAddReq proto.InternalMessageInfo

func (m *OrderAddReq) GetOrderNumber() string {
	if m != nil {
		return m.OrderNumber
	}
	return ""
}

func (m *OrderAddReq) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *OrderAddReq) GetStoreId() int32 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *OrderAddReq) GetStoreName() string {
	if m != nil {
		return m.StoreName
	}
	return ""
}

func (m *OrderAddReq) GetStorePhone() string {
	if m != nil {
		return m.StorePhone
	}
	return ""
}

func (m *OrderAddReq) GetStoreEmail() string {
	if m != nil {
		return m.StoreEmail
	}
	return ""
}

func (m *OrderAddReq) GetProductList() []*ProductListItem {
	if m != nil {
		return m.ProductList
	}
	return nil
}

func (m *OrderAddReq) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *OrderAddReq) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *OrderAddReq) GetActualWeight() float32 {
	if m != nil {
		return m.ActualWeight
	}
	return 0
}

func (m *OrderAddReq) GetTax() float32 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *OrderAddReq) GetShippingMethod() int32 {
	if m != nil {
		return m.ShippingMethod
	}
	return 0
}

func (m *OrderAddReq) GetShippingFee() float32 {
	if m != nil {
		return m.ShippingFee
	}
	return 0
}

func (m *OrderAddReq) GetServiceFee() float32 {
	if m != nil {
		return m.ServiceFee
	}
	return 0
}

func (m *OrderAddReq) GetSubTotal() float32 {
	if m != nil {
		return m.SubTotal
	}
	return 0
}

func (m *OrderAddReq) GetTotalAmount() float32 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *OrderAddReq) GetExpectedDeliveryDate() string {
	if m != nil {
		return m.ExpectedDeliveryDate
	}
	return ""
}

func (m *OrderAddReq) GetOrderStatus() int32 {
	if m != nil {
		return m.OrderStatus
	}
	return 0
}

func (m *OrderAddReq) GetOrderStatusDate() string {
	if m != nil {
		return m.OrderStatusDate
	}
	return ""
}

func (m *OrderAddReq) GetPaymentStatus() int32 {
	if m != nil {
		return m.PaymentStatus
	}
	return 0
}

func (m *OrderAddReq) GetPaymentStatusDate() string {
	if m != nil {
		return m.PaymentStatusDate
	}
	return ""
}

func (m *OrderAddReq) GetPaymentMethod() int32 {
	if m != nil {
		return m.PaymentMethod
	}
	return 0
}

func (m *OrderAddReq) GetPaymentType() int32 {
	if m != nil {
		return m.PaymentType
	}
	return 0
}

func (m *OrderAddReq) GetBuyerName() string {
	if m != nil {
		return m.BuyerName
	}
	return ""
}

func (m *OrderAddReq) GetBuyerAddress() string {
	if m != nil {
		return m.BuyerAddress
	}
	return ""
}

func (m *OrderAddReq) GetBuyerEmail() string {
	if m != nil {
		return m.BuyerEmail
	}
	return ""
}

func (m *OrderAddReq) GetBuyerLocation() int32 {
	if m != nil {
		return m.BuyerLocation
	}
	return 0
}

func (m *OrderAddReq) GetBuyerCity() int32 {
	if m != nil {
		return m.BuyerCity
	}
	return 0
}

func (m *OrderAddReq) GetBuyerContactPhone() string {
	if m != nil {
		return m.BuyerContactPhone
	}
	return ""
}

func (m *OrderAddReq) GetReceiverName() string {
	if m != nil {
		return m.ReceiverName
	}
	return ""
}

func (m *OrderAddReq) GetShippingFromAddress() string {
	if m != nil {
		return m.ShippingFromAddress
	}
	return ""
}

func (m *OrderAddReq) GetShippingFromWard() string {
	if m != nil {
		return m.ShippingFromWard
	}
	return ""
}

func (m *OrderAddReq) GetShippingFromWardId() int32 {
	if m != nil {
		return m.ShippingFromWardId
	}
	return 0
}

func (m *OrderAddReq) GetShippingFromLocation() int32 {
	if m != nil {
		return m.ShippingFromLocation
	}
	return 0
}

func (m *OrderAddReq) GetShippingFromCity() int32 {
	if m != nil {
		return m.ShippingFromCity
	}
	return 0
}

func (m *OrderAddReq) GetShippingFromZipcode() string {
	if m != nil {
		return m.ShippingFromZipcode
	}
	return ""
}

func (m *OrderAddReq) GetShippingAddress() string {
	if m != nil {
		return m.ShippingAddress
	}
	return ""
}

func (m *OrderAddReq) GetShippingWard() string {
	if m != nil {
		return m.ShippingWard
	}
	return ""
}

func (m *OrderAddReq) GetShippingWardId() int32 {
	if m != nil {
		return m.ShippingWardId
	}
	return 0
}

func (m *OrderAddReq) GetShippingLocation() int32 {
	if m != nil {
		return m.ShippingLocation
	}
	return 0
}

func (m *OrderAddReq) GetShippingCity() int32 {
	if m != nil {
		return m.ShippingCity
	}
	return 0
}

func (m *OrderAddReq) GetShippingZipcode() string {
	if m != nil {
		return m.ShippingZipcode
	}
	return ""
}

func (m *OrderAddReq) GetShippingContactPhone() string {
	if m != nil {
		return m.ShippingContactPhone
	}
	return ""
}

func (m *OrderAddReq) GetCarrierCode() string {
	if m != nil {
		return m.CarrierCode
	}
	return ""
}

func (m *OrderAddReq) GetOrderDateTime() string {
	if m != nil {
		return m.OrderDateTime
	}
	return ""
}

func (m *OrderAddReq) GetBuyerFreeShipping() float32 {
	if m != nil {
		return m.BuyerFreeShipping
	}
	return 0
}

func (m *OrderAddReq) GetSellerShippingFee() float32 {
	if m != nil {
		return m.SellerShippingFee
	}
	return 0
}

func (m *OrderAddReq) GetSendoSupportFee() float32 {
	if m != nil {
		return m.SendoSupportFee
	}
	return 0
}

func (m *OrderAddReq) GetSendoSupportFeeToBuyer() float32 {
	if m != nil {
		return m.SendoSupportFeeToBuyer
	}
	return 0
}

func (m *OrderAddReq) GetCarrierServiceId() int32 {
	if m != nil {
		return m.CarrierServiceId
	}
	return 0
}

func (m *OrderAddReq) GetSenpayFreeShipping() float32 {
	if m != nil {
		return m.SenpayFreeShipping
	}
	return 0
}

func (m *OrderAddReq) GetCampainCode() string {
	if m != nil {
		return m.CampainCode
	}
	return ""
}

func (m *OrderAddReq) GetVoucherCode() string {
	if m != nil {
		return m.VoucherCode
	}
	return ""
}

func (m *OrderAddReq) GetIsShopVoucher() bool {
	if m != nil {
		return m.IsShopVoucher
	}
	return false
}

func (m *OrderAddReq) GetVoucherAmount() float32 {
	if m != nil {
		return m.VoucherAmount
	}
	return 0
}

func (m *OrderAddReq) GetCODFee() float32 {
	if m != nil {
		return m.CODFee
	}
	return 0
}

func (m *OrderAddReq) GetLoyaltyAmount() float32 {
	if m != nil {
		return m.LoyaltyAmount
	}
	return 0
}

func (m *OrderAddReq) GetSellerLoyalAmount() float32 {
	if m != nil {
		return m.SellerLoyalAmount
	}
	return 0
}

func (m *OrderAddReq) GetWarningStatus() int32 {
	if m != nil {
		return m.WarningStatus
	}
	return 0
}

func (m *OrderAddReq) GetMobileDiscountAmount() float32 {
	if m != nil {
		return m.MobileDiscountAmount
	}
	return 0
}

func (m *OrderAddReq) GetDiscountAmount() float32 {
	if m != nil {
		return m.DiscountAmount
	}
	return 0
}

func (m *OrderAddReq) GetTrackingOrderSource() int32 {
	if m != nil {
		return m.TrackingOrderSource
	}
	return 0
}

func (m *OrderAddReq) GetAllowCheck() bool {
	if m != nil {
		return m.AllowCheck
	}
	return false
}

func (m *OrderAddReq) GetUserIp() string {
	if m != nil {
		return m.UserIp
	}
	return ""
}

func (m *OrderAddReq) GetBrowserId() string {
	if m != nil {
		return m.BrowserId
	}
	return ""
}

func (m *OrderAddReq) GetIsLoggedIn() int32 {
	if m != nil {
		return m.IsLoggedIn
	}
	return 0
}

func (m *OrderAddReq) GetOriginalFee() float32 {
	if m != nil {
		return m.OriginalFee
	}
	return 0
}

func (m *OrderAddReq) GetSubFee() float32 {
	if m != nil {
		return m.SubFee
	}
	return 0
}

func (m *OrderAddReq) GetSenpayFee() float32 {
	if m != nil {
		return m.SenpayFee
	}
	return 0
}

func (m *OrderAddReq) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *OrderAddReq) GetInstallmentFee() float32 {
	if m != nil {
		return m.InstallmentFee
	}
	return 0
}

func (m *OrderAddReq) GetPostOfficesFee() float32 {
	if m != nil {
		return m.PostOfficesFee
	}
	return 0
}

func (m *OrderAddReq) GetAffiliateTotalAmount() float32 {
	if m != nil {
		return m.AffiliateTotalAmount
	}
	return 0
}

func (m *OrderAddReq) GetAffiliateSendoTotalAmount() float32 {
	if m != nil {
		return m.AffiliateSendoTotalAmount
	}
	return 0
}

func (m *OrderAddReq) GetAffiliateName() string {
	if m != nil {
		return m.AffiliateName
	}
	return ""
}

func (m *OrderAddReq) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *OrderAddReq) GetExceptionCode() int32 {
	if m != nil {
		return m.ExceptionCode
	}
	return 0
}

func (m *OrderAddReq) GetIsPostOffice() bool {
	if m != nil {
		return m.IsPostOffice
	}
	return false
}

func (m *OrderAddReq) GetRepush() string {
	if m != nil {
		return m.Repush
	}
	return ""
}

func (m *OrderAddReq) GetGaSource() string {
	if m != nil {
		return m.GaSource
	}
	return ""
}

func (m *OrderAddReq) GetComplainUrl() string {
	if m != nil {
		return m.ComplainUrl
	}
	return ""
}

func (m *OrderAddReq) GetSalesOrderType() int32 {
	if m != nil {
		return m.SalesOrderType
	}
	return 0
}

func (m *OrderAddReq) GetTypesOfSalesPromotion() int32 {
	if m != nil {
		return m.TypesOfSalesPromotion
	}
	return 0
}

func (m *OrderAddReq) GetSenderLatitude() float32 {
	if m != nil {
		return m.SenderLatitude
	}
	return 0
}

func (m *OrderAddReq) GetSenderLongitude() float32 {
	if m != nil {
		return m.SenderLongitude
	}
	return 0
}

func (m *OrderAddReq) GetReceiverLatitude() float32 {
	if m != nil {
		return m.ReceiverLatitude
	}
	return 0
}

func (m *OrderAddReq) GetReceiverLongitude() float32 {
	if m != nil {
		return m.ReceiverLongitude
	}
	return 0
}

func (m *OrderAddReq) GetSalesPromotionAmount() float32 {
	if m != nil {
		return m.SalesPromotionAmount
	}
	return 0
}

func (m *OrderAddReq) GetAffiliateReferer() string {
	if m != nil {
		return m.AffiliateReferer
	}
	return ""
}

func (m *OrderAddReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *OrderAddReq) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

type OrderUpdateReq struct {
	OrderNumber          string   `protobuf:"bytes,1,opt,name=OrderNumber,proto3" json:"OrderNumber,omitempty"`
	PaymentStatusInside  int32    `protobuf:"varint,2,opt,name=PaymentStatusInside,proto3" json:"PaymentStatusInside,omitempty"`
	OrderStatusInside    int32    `protobuf:"varint,3,opt,name=OrderStatusInside,proto3" json:"OrderStatusInside,omitempty"`
	DeliveryStatusInside int32    `protobuf:"varint,4,opt,name=DeliveryStatusInside,proto3" json:"DeliveryStatusInside,omitempty"`
	VersionNo            int64    `protobuf:"varint,5,opt,name=VersionNo,proto3" json:"VersionNo,omitempty"`
	CancelReason         string   `protobuf:"bytes,6,opt,name=CancelReason,proto3" json:"CancelReason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderUpdateReq) Reset()         { *m = OrderUpdateReq{} }
func (m *OrderUpdateReq) String() string { return proto.CompactTextString(m) }
func (*OrderUpdateReq) ProtoMessage()    {}
func (*OrderUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{9}
}
func (m *OrderUpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderUpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderUpdateReq.Merge(dst, src)
}
func (m *OrderUpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *OrderUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_OrderUpdateReq proto.InternalMessageInfo

func (m *OrderUpdateReq) GetOrderNumber() string {
	if m != nil {
		return m.OrderNumber
	}
	return ""
}

func (m *OrderUpdateReq) GetPaymentStatusInside() int32 {
	if m != nil {
		return m.PaymentStatusInside
	}
	return 0
}

func (m *OrderUpdateReq) GetOrderStatusInside() int32 {
	if m != nil {
		return m.OrderStatusInside
	}
	return 0
}

func (m *OrderUpdateReq) GetDeliveryStatusInside() int32 {
	if m != nil {
		return m.DeliveryStatusInside
	}
	return 0
}

func (m *OrderUpdateReq) GetVersionNo() int64 {
	if m != nil {
		return m.VersionNo
	}
	return 0
}

func (m *OrderUpdateReq) GetCancelReason() string {
	if m != nil {
		return m.CancelReason
	}
	return ""
}

type OrderAddRes struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderAddRes) Reset()         { *m = OrderAddRes{} }
func (m *OrderAddRes) String() string { return proto.CompactTextString(m) }
func (*OrderAddRes) ProtoMessage()    {}
func (*OrderAddRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{10}
}
func (m *OrderAddRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderAddRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderAddRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderAddRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderAddRes.Merge(dst, src)
}
func (m *OrderAddRes) XXX_Size() int {
	return m.Size()
}
func (m *OrderAddRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderAddRes.DiscardUnknown(m)
}

var xxx_messageInfo_OrderAddRes proto.InternalMessageInfo

func (m *OrderAddRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type OrderUpdateRes struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderUpdateRes) Reset()         { *m = OrderUpdateRes{} }
func (m *OrderUpdateRes) String() string { return proto.CompactTextString(m) }
func (*OrderUpdateRes) ProtoMessage()    {}
func (*OrderUpdateRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_statistic_f4b19d509ec1d7e7, []int{11}
}
func (m *OrderUpdateRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderUpdateRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderUpdateRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrderUpdateRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderUpdateRes.Merge(dst, src)
}
func (m *OrderUpdateRes) XXX_Size() int {
	return m.Size()
}
func (m *OrderUpdateRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderUpdateRes.DiscardUnknown(m)
}

var xxx_messageInfo_OrderUpdateRes proto.InternalMessageInfo

func (m *OrderUpdateRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*OrderListReq)(nil), "sendo.v1.api.order_statistic.OrderListReq")
	proto.RegisterType((*OrderListRes)(nil), "sendo.v1.api.order_statistic.OrderListRes")
	proto.RegisterType((*OrderLogRes)(nil), "sendo.v1.api.order_statistic.OrderLogRes")
	proto.RegisterType((*ErrorLog)(nil), "sendo.v1.api.order_statistic.ErrorLog")
	proto.RegisterType((*OrderList)(nil), "sendo.v1.api.order_statistic.OrderList")
	proto.RegisterType((*OrderSearchReq)(nil), "sendo.v1.api.order_statistic.OrderSearchReq")
	proto.RegisterType((*OrderSearchRes)(nil), "sendo.v1.api.order_statistic.OrderSearchRes")
	proto.RegisterType((*ProductListItem)(nil), "sendo.v1.api.order_statistic.ProductListItem")
	proto.RegisterType((*OrderAddReq)(nil), "sendo.v1.api.order_statistic.OrderAddReq")
	proto.RegisterType((*OrderUpdateReq)(nil), "sendo.v1.api.order_statistic.OrderUpdateReq")
	proto.RegisterType((*OrderAddRes)(nil), "sendo.v1.api.order_statistic.OrderAddRes")
	proto.RegisterType((*OrderUpdateRes)(nil), "sendo.v1.api.order_statistic.OrderUpdateRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventOrderStatisticServiceClient is the client API for EventOrderStatisticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventOrderStatisticServiceClient interface {
	Add(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddRes, error)
	Update(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateRes, error)
	Search(ctx context.Context, in *OrderSearchReq, opts ...grpc.CallOption) (*OrderSearchRes, error)
	ListEs(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListRes, error)
	ListMongo(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListRes, error)
	ListLog(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderLogRes, error)
}

type eventOrderStatisticServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventOrderStatisticServiceClient(cc *grpc.ClientConn) EventOrderStatisticServiceClient {
	return &eventOrderStatisticServiceClient{cc}
}

func (c *eventOrderStatisticServiceClient) Add(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddRes, error) {
	out := new(OrderAddRes)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.order_statistic.EventOrderStatisticService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOrderStatisticServiceClient) Update(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateRes, error) {
	out := new(OrderUpdateRes)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.order_statistic.EventOrderStatisticService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOrderStatisticServiceClient) Search(ctx context.Context, in *OrderSearchReq, opts ...grpc.CallOption) (*OrderSearchRes, error) {
	out := new(OrderSearchRes)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.order_statistic.EventOrderStatisticService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOrderStatisticServiceClient) ListEs(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListRes, error) {
	out := new(OrderListRes)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.order_statistic.EventOrderStatisticService/ListEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOrderStatisticServiceClient) ListMongo(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListRes, error) {
	out := new(OrderListRes)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.order_statistic.EventOrderStatisticService/ListMongo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOrderStatisticServiceClient) ListLog(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderLogRes, error) {
	out := new(OrderLogRes)
	err := c.cc.Invoke(ctx, "/sendo.v1.api.order_statistic.EventOrderStatisticService/ListLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventOrderStatisticServiceServer is the server API for EventOrderStatisticService service.
type EventOrderStatisticServiceServer interface {
	Add(context.Context, *OrderAddReq) (*OrderAddRes, error)
	Update(context.Context, *OrderUpdateReq) (*OrderUpdateRes, error)
	Search(context.Context, *OrderSearchReq) (*OrderSearchRes, error)
	ListEs(context.Context, *OrderListReq) (*OrderListRes, error)
	ListMongo(context.Context, *OrderListReq) (*OrderListRes, error)
	ListLog(context.Context, *OrderListReq) (*OrderLogRes, error)
}

func RegisterEventOrderStatisticServiceServer(s *grpc.Server, srv EventOrderStatisticServiceServer) {
	s.RegisterService(&_EventOrderStatisticService_serviceDesc, srv)
}

func _EventOrderStatisticService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOrderStatisticServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.order_statistic.EventOrderStatisticService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOrderStatisticServiceServer).Add(ctx, req.(*OrderAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOrderStatisticService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOrderStatisticServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.order_statistic.EventOrderStatisticService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOrderStatisticServiceServer).Update(ctx, req.(*OrderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOrderStatisticService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOrderStatisticServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.order_statistic.EventOrderStatisticService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOrderStatisticServiceServer).Search(ctx, req.(*OrderSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOrderStatisticService_ListEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOrderStatisticServiceServer).ListEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.order_statistic.EventOrderStatisticService/ListEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOrderStatisticServiceServer).ListEs(ctx, req.(*OrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOrderStatisticService_ListMongo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOrderStatisticServiceServer).ListMongo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.order_statistic.EventOrderStatisticService/ListMongo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOrderStatisticServiceServer).ListMongo(ctx, req.(*OrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOrderStatisticService_ListLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOrderStatisticServiceServer).ListLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendo.v1.api.order_statistic.EventOrderStatisticService/ListLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOrderStatisticServiceServer).ListLog(ctx, req.(*OrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventOrderStatisticService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sendo.v1.api.order_statistic.EventOrderStatisticService",
	HandlerType: (*EventOrderStatisticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _EventOrderStatisticService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EventOrderStatisticService_Update_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _EventOrderStatisticService_Search_Handler,
		},
		{
			MethodName: "ListEs",
			Handler:    _EventOrderStatisticService_ListEs_Handler,
		},
		{
			MethodName: "ListMongo",
			Handler:    _EventOrderStatisticService_ListMongo_Handler,
		},
		{
			MethodName: "ListLog",
			Handler:    _EventOrderStatisticService_ListLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_statistic/order_statistic.proto",
}

func (m *OrderListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderListRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.Total))
	}
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrderStatistic(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderLogRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderLogRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.Total))
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrderStatistic(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ErrorLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.OrderId))
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ProductId))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.Time != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.OrderId))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.UpdatedAt))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.CancelBy) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.CancelBy)))
		i += copy(dAtA[i:], m.CancelBy)
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.AdminId))
	}
	if m.CustomerId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.CustomerId))
	}
	if len(m.PaymentMethod) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.PaymentMethod)))
		i += copy(dAtA[i:], m.PaymentMethod)
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ProductId))
	}
	if len(m.CategoryId) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.CategoryId)))
		i += copy(dAtA[i:], m.CategoryId)
	}
	if m.Price != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i += 4
	}
	if m.QtyOrdered != 0 {
		dAtA[i] = 0x65
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.QtyOrdered))))
		i += 4
	}
	if m.VersionNo != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.VersionNo))
	}
	if len(m.CountryId) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.CountryId)))
		i += copy(dAtA[i:], m.CountryId)
	}
	if m.RegionId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.RegionId))
	}
	if m.EcomWardId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.EcomWardId))
	}
	if m.EcomDistrict != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.EcomDistrict))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderSearchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.OrderId))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.CreatedAt))
	}
	if m.CreatedAtFrom != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.CreatedAtFrom))
	}
	if m.CreatedAtTo != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.CreatedAtTo))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.UpdatedAt))
	}
	if m.UpdatedAtFrom != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.UpdatedAtFrom))
	}
	if m.UpdatedAtTo != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.UpdatedAtTo))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.CancelBy) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.CancelBy)))
		i += copy(dAtA[i:], m.CancelBy)
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.AdminId))
	}
	if m.CustomerId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.CustomerId))
	}
	if len(m.PaymentMethod) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.PaymentMethod)))
		i += copy(dAtA[i:], m.PaymentMethod)
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ProductId))
	}
	if len(m.CategoryId) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.CategoryId)))
		i += copy(dAtA[i:], m.CategoryId)
	}
	if m.Price != 0 {
		dAtA[i] = 0x7d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i += 4
	}
	if m.PriceFrom != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PriceFrom))))
		i += 4
	}
	if m.PriceTo != 0 {
		dAtA[i] = 0x8d
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PriceTo))))
		i += 4
	}
	if m.QtyOrdered != 0 {
		dAtA[i] = 0x95
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.QtyOrdered))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderSearchRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderSearchRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductListItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExternalId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ExternalId))
	}
	if m.ProductId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ProductId))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Weight))))
		i += 4
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.LstAttOptional) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.LstAttOptional)))
		i += copy(dAtA[i:], m.LstAttOptional)
	}
	if m.OrderQuantity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.OrderQuantity))
	}
	if m.UnitPrice != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UnitPrice))))
		i += 4
	}
	if m.AffiliateAmount != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AffiliateAmount))))
		i += 4
	}
	if m.AffiliateSendoAmount != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AffiliateSendoAmount))))
		i += 4
	}
	if m.ProductLength != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ProductLength))))
		i += 4
	}
	if m.ProductWidth != 0 {
		dAtA[i] = 0x65
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ProductWidth))))
		i += 4
	}
	if m.ProductHeight != 0 {
		dAtA[i] = 0x6d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ProductHeight))))
		i += 4
	}
	if m.VMWeight != 0 {
		dAtA[i] = 0x75
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VMWeight))))
		i += 4
	}
	if len(m.FlashSalesInfo) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.FlashSalesInfo)))
		i += copy(dAtA[i:], m.FlashSalesInfo)
	}
	if m.FlashSalesAmount != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FlashSalesAmount))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.OrderNumber)))
		i += copy(dAtA[i:], m.OrderNumber)
	}
	if len(m.BuyerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.BuyerId)))
		i += copy(dAtA[i:], m.BuyerId)
	}
	if m.StoreId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.StoreId))
	}
	if len(m.StoreName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.StoreName)))
		i += copy(dAtA[i:], m.StoreName)
	}
	if len(m.StorePhone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.StorePhone)))
		i += copy(dAtA[i:], m.StorePhone)
	}
	if len(m.StoreEmail) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.StoreEmail)))
		i += copy(dAtA[i:], m.StoreEmail)
	}
	if len(m.ProductList) > 0 {
		for _, msg := range m.ProductList {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintOrderStatistic(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Weight))))
		i += 4
	}
	if m.ActualWeight != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ActualWeight))))
		i += 4
	}
	if m.Tax != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Tax))))
		i += 4
	}
	if m.ShippingMethod != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ShippingMethod))
	}
	if m.ShippingFee != 0 {
		dAtA[i] = 0x6d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShippingFee))))
		i += 4
	}
	if m.ServiceFee != 0 {
		dAtA[i] = 0x75
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ServiceFee))))
		i += 4
	}
	if m.SubTotal != 0 {
		dAtA[i] = 0x7d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubTotal))))
		i += 4
	}
	if m.TotalAmount != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalAmount))))
		i += 4
	}
	if len(m.ExpectedDeliveryDate) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ExpectedDeliveryDate)))
		i += copy(dAtA[i:], m.ExpectedDeliveryDate)
	}
	if m.OrderStatus != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.OrderStatus))
	}
	if len(m.OrderStatusDate) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.OrderStatusDate)))
		i += copy(dAtA[i:], m.OrderStatusDate)
	}
	if m.PaymentStatus != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.PaymentStatus))
	}
	if len(m.PaymentStatusDate) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.PaymentStatusDate)))
		i += copy(dAtA[i:], m.PaymentStatusDate)
	}
	if m.PaymentMethod != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.PaymentMethod))
	}
	if m.PaymentType != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.PaymentType))
	}
	if len(m.BuyerName) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.BuyerName)))
		i += copy(dAtA[i:], m.BuyerName)
	}
	if len(m.BuyerAddress) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.BuyerAddress)))
		i += copy(dAtA[i:], m.BuyerAddress)
	}
	if len(m.BuyerEmail) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.BuyerEmail)))
		i += copy(dAtA[i:], m.BuyerEmail)
	}
	if m.BuyerLocation != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.BuyerLocation))
	}
	if m.BuyerCity != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.BuyerCity))
	}
	if len(m.BuyerContactPhone) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.BuyerContactPhone)))
		i += copy(dAtA[i:], m.BuyerContactPhone)
	}
	if len(m.ReceiverName) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ReceiverName)))
		i += copy(dAtA[i:], m.ReceiverName)
	}
	if len(m.ShippingFromAddress) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ShippingFromAddress)))
		i += copy(dAtA[i:], m.ShippingFromAddress)
	}
	if len(m.ShippingFromWard) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ShippingFromWard)))
		i += copy(dAtA[i:], m.ShippingFromWard)
	}
	if m.ShippingFromWardId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ShippingFromWardId))
	}
	if m.ShippingFromLocation != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ShippingFromLocation))
	}
	if m.ShippingFromCity != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ShippingFromCity))
	}
	if len(m.ShippingFromZipcode) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ShippingFromZipcode)))
		i += copy(dAtA[i:], m.ShippingFromZipcode)
	}
	if len(m.ShippingAddress) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ShippingAddress)))
		i += copy(dAtA[i:], m.ShippingAddress)
	}
	if len(m.ShippingWard) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ShippingWard)))
		i += copy(dAtA[i:], m.ShippingWard)
	}
	if m.ShippingWardId != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ShippingWardId))
	}
	if m.ShippingLocation != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ShippingLocation))
	}
	if m.ShippingCity != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ShippingCity))
	}
	if len(m.ShippingZipcode) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ShippingZipcode)))
		i += copy(dAtA[i:], m.ShippingZipcode)
	}
	if len(m.ShippingContactPhone) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ShippingContactPhone)))
		i += copy(dAtA[i:], m.ShippingContactPhone)
	}
	if len(m.CarrierCode) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.CarrierCode)))
		i += copy(dAtA[i:], m.CarrierCode)
	}
	if len(m.OrderDateTime) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.OrderDateTime)))
		i += copy(dAtA[i:], m.OrderDateTime)
	}
	if m.BuyerFreeShipping != 0 {
		dAtA[i] = 0xf5
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuyerFreeShipping))))
		i += 4
	}
	if m.SellerShippingFee != 0 {
		dAtA[i] = 0xfd
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SellerShippingFee))))
		i += 4
	}
	if m.SendoSupportFee != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SendoSupportFee))))
		i += 4
	}
	if m.SendoSupportFeeToBuyer != 0 {
		dAtA[i] = 0x8d
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SendoSupportFeeToBuyer))))
		i += 4
	}
	if m.CarrierServiceId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.CarrierServiceId))
	}
	if m.SenpayFreeShipping != 0 {
		dAtA[i] = 0x9d
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SenpayFreeShipping))))
		i += 4
	}
	if len(m.CampainCode) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.CampainCode)))
		i += copy(dAtA[i:], m.CampainCode)
	}
	if len(m.VoucherCode) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.VoucherCode)))
		i += copy(dAtA[i:], m.VoucherCode)
	}
	if m.IsShopVoucher {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x3
		i++
		if m.IsShopVoucher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VoucherAmount != 0 {
		dAtA[i] = 0xbd
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VoucherAmount))))
		i += 4
	}
	if m.CODFee != 0 {
		dAtA[i] = 0xc5
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CODFee))))
		i += 4
	}
	if m.LoyaltyAmount != 0 {
		dAtA[i] = 0xcd
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LoyaltyAmount))))
		i += 4
	}
	if m.SellerLoyalAmount != 0 {
		dAtA[i] = 0xd5
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SellerLoyalAmount))))
		i += 4
	}
	if m.WarningStatus != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.WarningStatus))
	}
	if m.MobileDiscountAmount != 0 {
		dAtA[i] = 0xe5
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MobileDiscountAmount))))
		i += 4
	}
	if m.DiscountAmount != 0 {
		dAtA[i] = 0xed
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DiscountAmount))))
		i += 4
	}
	if m.TrackingOrderSource != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.TrackingOrderSource))
	}
	if m.AllowCheck {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		if m.AllowCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserIp) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.UserIp)))
		i += copy(dAtA[i:], m.UserIp)
	}
	if len(m.BrowserId) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.BrowserId)))
		i += copy(dAtA[i:], m.BrowserId)
	}
	if m.IsLoggedIn != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.IsLoggedIn))
	}
	if m.OriginalFee != 0 {
		dAtA[i] = 0x9d
		i++
		dAtA[i] = 0x4
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginalFee))))
		i += 4
	}
	if m.SubFee != 0 {
		dAtA[i] = 0xa5
		i++
		dAtA[i] = 0x4
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubFee))))
		i += 4
	}
	if m.SenpayFee != 0 {
		dAtA[i] = 0xad
		i++
		dAtA[i] = 0x4
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SenpayFee))))
		i += 4
	}
	if len(m.BankName) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.BankName)))
		i += copy(dAtA[i:], m.BankName)
	}
	if m.InstallmentFee != 0 {
		dAtA[i] = 0xbd
		i++
		dAtA[i] = 0x4
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.InstallmentFee))))
		i += 4
	}
	if m.PostOfficesFee != 0 {
		dAtA[i] = 0xc5
		i++
		dAtA[i] = 0x4
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PostOfficesFee))))
		i += 4
	}
	if m.AffiliateTotalAmount != 0 {
		dAtA[i] = 0xcd
		i++
		dAtA[i] = 0x4
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AffiliateTotalAmount))))
		i += 4
	}
	if m.AffiliateSendoTotalAmount != 0 {
		dAtA[i] = 0xd5
		i++
		dAtA[i] = 0x4
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AffiliateSendoTotalAmount))))
		i += 4
	}
	if len(m.AffiliateName) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.AffiliateName)))
		i += copy(dAtA[i:], m.AffiliateName)
	}
	if len(m.Comment) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.Comment)))
		i += copy(dAtA[i:], m.Comment)
	}
	if m.ExceptionCode != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.ExceptionCode))
	}
	if m.IsPostOffice {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x4
		i++
		if m.IsPostOffice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Repush) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.Repush)))
		i += copy(dAtA[i:], m.Repush)
	}
	if len(m.GaSource) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.GaSource)))
		i += copy(dAtA[i:], m.GaSource)
	}
	if len(m.ComplainUrl) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.ComplainUrl)))
		i += copy(dAtA[i:], m.ComplainUrl)
	}
	if m.SalesOrderType != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.SalesOrderType))
	}
	if m.TypesOfSalesPromotion != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.TypesOfSalesPromotion))
	}
	if m.SenderLatitude != 0 {
		dAtA[i] = 0xa5
		i++
		dAtA[i] = 0x5
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SenderLatitude))))
		i += 4
	}
	if m.SenderLongitude != 0 {
		dAtA[i] = 0xad
		i++
		dAtA[i] = 0x5
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SenderLongitude))))
		i += 4
	}
	if m.ReceiverLatitude != 0 {
		dAtA[i] = 0xb5
		i++
		dAtA[i] = 0x5
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ReceiverLatitude))))
		i += 4
	}
	if m.ReceiverLongitude != 0 {
		dAtA[i] = 0xbd
		i++
		dAtA[i] = 0x5
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ReceiverLongitude))))
		i += 4
	}
	if m.SalesPromotionAmount != 0 {
		dAtA[i] = 0xc5
		i++
		dAtA[i] = 0x5
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SalesPromotionAmount))))
		i += 4
	}
	if len(m.AffiliateReferer) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.AffiliateReferer)))
		i += copy(dAtA[i:], m.AffiliateReferer)
	}
	if len(m.DeviceId) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.DeviceId)))
		i += copy(dAtA[i:], m.DeviceId)
	}
	if len(m.UserAgent) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.UserAgent)))
		i += copy(dAtA[i:], m.UserAgent)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.OrderNumber)))
		i += copy(dAtA[i:], m.OrderNumber)
	}
	if m.PaymentStatusInside != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.PaymentStatusInside))
	}
	if m.OrderStatusInside != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.OrderStatusInside))
	}
	if m.DeliveryStatusInside != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.DeliveryStatusInside))
	}
	if m.VersionNo != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(m.VersionNo))
	}
	if len(m.CancelReason) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrderStatistic(dAtA, i, uint64(len(m.CancelReason)))
		i += copy(dAtA[i:], m.CancelReason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderAddRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderAddRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderUpdateRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderUpdateRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOrderStatistic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OrderListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovOrderStatistic(uint64(m.Total))
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrderStatistic(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderLogRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovOrderStatistic(uint64(m.Total))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovOrderStatistic(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ErrorLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.OrderId))
	}
	if m.ProductId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.ProductId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovOrderStatistic(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.OrderId))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovOrderStatistic(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovOrderStatistic(uint64(m.UpdatedAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.CancelBy)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.AdminId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.AdminId))
	}
	if m.CustomerId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.CustomerId))
	}
	l = len(m.PaymentMethod)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.ProductId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.ProductId))
	}
	l = len(m.CategoryId)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.QtyOrdered != 0 {
		n += 5
	}
	if m.VersionNo != 0 {
		n += 1 + sovOrderStatistic(uint64(m.VersionNo))
	}
	l = len(m.CountryId)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.RegionId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.RegionId))
	}
	if m.EcomWardId != 0 {
		n += 2 + sovOrderStatistic(uint64(m.EcomWardId))
	}
	if m.EcomDistrict != 0 {
		n += 2 + sovOrderStatistic(uint64(m.EcomDistrict))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderSearchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.OrderId))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovOrderStatistic(uint64(m.CreatedAt))
	}
	if m.CreatedAtFrom != 0 {
		n += 1 + sovOrderStatistic(uint64(m.CreatedAtFrom))
	}
	if m.CreatedAtTo != 0 {
		n += 1 + sovOrderStatistic(uint64(m.CreatedAtTo))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovOrderStatistic(uint64(m.UpdatedAt))
	}
	if m.UpdatedAtFrom != 0 {
		n += 1 + sovOrderStatistic(uint64(m.UpdatedAtFrom))
	}
	if m.UpdatedAtTo != 0 {
		n += 1 + sovOrderStatistic(uint64(m.UpdatedAtTo))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.CancelBy)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.AdminId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.AdminId))
	}
	if m.CustomerId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.CustomerId))
	}
	l = len(m.PaymentMethod)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.ProductId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.ProductId))
	}
	l = len(m.CategoryId)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.PriceFrom != 0 {
		n += 6
	}
	if m.PriceTo != 0 {
		n += 6
	}
	if m.QtyOrdered != 0 {
		n += 6
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderSearchRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovOrderStatistic(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.ExternalId))
	}
	if m.ProductId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.ProductId))
	}
	if m.Weight != 0 {
		n += 5
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.LstAttOptional)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.OrderQuantity != 0 {
		n += 1 + sovOrderStatistic(uint64(m.OrderQuantity))
	}
	if m.UnitPrice != 0 {
		n += 5
	}
	if m.AffiliateAmount != 0 {
		n += 5
	}
	if m.AffiliateSendoAmount != 0 {
		n += 5
	}
	if m.ProductLength != 0 {
		n += 5
	}
	if m.ProductWidth != 0 {
		n += 5
	}
	if m.ProductHeight != 0 {
		n += 5
	}
	if m.VMWeight != 0 {
		n += 5
	}
	l = len(m.FlashSalesInfo)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.FlashSalesAmount != 0 {
		n += 6
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderNumber)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.StoreId != 0 {
		n += 1 + sovOrderStatistic(uint64(m.StoreId))
	}
	l = len(m.StoreName)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.StorePhone)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.StoreEmail)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if len(m.ProductList) > 0 {
		for _, e := range m.ProductList {
			l = e.Size()
			n += 1 + l + sovOrderStatistic(uint64(l))
		}
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.Weight != 0 {
		n += 5
	}
	if m.ActualWeight != 0 {
		n += 5
	}
	if m.Tax != 0 {
		n += 5
	}
	if m.ShippingMethod != 0 {
		n += 1 + sovOrderStatistic(uint64(m.ShippingMethod))
	}
	if m.ShippingFee != 0 {
		n += 5
	}
	if m.ServiceFee != 0 {
		n += 5
	}
	if m.SubTotal != 0 {
		n += 5
	}
	if m.TotalAmount != 0 {
		n += 6
	}
	l = len(m.ExpectedDeliveryDate)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.OrderStatus != 0 {
		n += 2 + sovOrderStatistic(uint64(m.OrderStatus))
	}
	l = len(m.OrderStatusDate)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.PaymentStatus != 0 {
		n += 2 + sovOrderStatistic(uint64(m.PaymentStatus))
	}
	l = len(m.PaymentStatusDate)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.PaymentMethod != 0 {
		n += 2 + sovOrderStatistic(uint64(m.PaymentMethod))
	}
	if m.PaymentType != 0 {
		n += 2 + sovOrderStatistic(uint64(m.PaymentType))
	}
	l = len(m.BuyerName)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.BuyerAddress)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.BuyerEmail)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.BuyerLocation != 0 {
		n += 2 + sovOrderStatistic(uint64(m.BuyerLocation))
	}
	if m.BuyerCity != 0 {
		n += 2 + sovOrderStatistic(uint64(m.BuyerCity))
	}
	l = len(m.BuyerContactPhone)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.ReceiverName)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.ShippingFromAddress)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.ShippingFromWard)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.ShippingFromWardId != 0 {
		n += 2 + sovOrderStatistic(uint64(m.ShippingFromWardId))
	}
	if m.ShippingFromLocation != 0 {
		n += 2 + sovOrderStatistic(uint64(m.ShippingFromLocation))
	}
	if m.ShippingFromCity != 0 {
		n += 2 + sovOrderStatistic(uint64(m.ShippingFromCity))
	}
	l = len(m.ShippingFromZipcode)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.ShippingAddress)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.ShippingWard)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.ShippingWardId != 0 {
		n += 2 + sovOrderStatistic(uint64(m.ShippingWardId))
	}
	if m.ShippingLocation != 0 {
		n += 2 + sovOrderStatistic(uint64(m.ShippingLocation))
	}
	if m.ShippingCity != 0 {
		n += 2 + sovOrderStatistic(uint64(m.ShippingCity))
	}
	l = len(m.ShippingZipcode)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.ShippingContactPhone)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.CarrierCode)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.OrderDateTime)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.BuyerFreeShipping != 0 {
		n += 6
	}
	if m.SellerShippingFee != 0 {
		n += 6
	}
	if m.SendoSupportFee != 0 {
		n += 6
	}
	if m.SendoSupportFeeToBuyer != 0 {
		n += 6
	}
	if m.CarrierServiceId != 0 {
		n += 2 + sovOrderStatistic(uint64(m.CarrierServiceId))
	}
	if m.SenpayFreeShipping != 0 {
		n += 6
	}
	l = len(m.CampainCode)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.VoucherCode)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.IsShopVoucher {
		n += 3
	}
	if m.VoucherAmount != 0 {
		n += 6
	}
	if m.CODFee != 0 {
		n += 6
	}
	if m.LoyaltyAmount != 0 {
		n += 6
	}
	if m.SellerLoyalAmount != 0 {
		n += 6
	}
	if m.WarningStatus != 0 {
		n += 2 + sovOrderStatistic(uint64(m.WarningStatus))
	}
	if m.MobileDiscountAmount != 0 {
		n += 6
	}
	if m.DiscountAmount != 0 {
		n += 6
	}
	if m.TrackingOrderSource != 0 {
		n += 2 + sovOrderStatistic(uint64(m.TrackingOrderSource))
	}
	if m.AllowCheck {
		n += 3
	}
	l = len(m.UserIp)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.BrowserId)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.IsLoggedIn != 0 {
		n += 2 + sovOrderStatistic(uint64(m.IsLoggedIn))
	}
	if m.OriginalFee != 0 {
		n += 6
	}
	if m.SubFee != 0 {
		n += 6
	}
	if m.SenpayFee != 0 {
		n += 6
	}
	l = len(m.BankName)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.InstallmentFee != 0 {
		n += 6
	}
	if m.PostOfficesFee != 0 {
		n += 6
	}
	if m.AffiliateTotalAmount != 0 {
		n += 6
	}
	if m.AffiliateSendoTotalAmount != 0 {
		n += 6
	}
	l = len(m.AffiliateName)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.ExceptionCode != 0 {
		n += 2 + sovOrderStatistic(uint64(m.ExceptionCode))
	}
	if m.IsPostOffice {
		n += 3
	}
	l = len(m.Repush)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.GaSource)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.ComplainUrl)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.SalesOrderType != 0 {
		n += 2 + sovOrderStatistic(uint64(m.SalesOrderType))
	}
	if m.TypesOfSalesPromotion != 0 {
		n += 2 + sovOrderStatistic(uint64(m.TypesOfSalesPromotion))
	}
	if m.SenderLatitude != 0 {
		n += 6
	}
	if m.SenderLongitude != 0 {
		n += 6
	}
	if m.ReceiverLatitude != 0 {
		n += 6
	}
	if m.ReceiverLongitude != 0 {
		n += 6
	}
	if m.SalesPromotionAmount != 0 {
		n += 6
	}
	l = len(m.AffiliateReferer)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 2 + l + sovOrderStatistic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderUpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderNumber)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.PaymentStatusInside != 0 {
		n += 1 + sovOrderStatistic(uint64(m.PaymentStatusInside))
	}
	if m.OrderStatusInside != 0 {
		n += 1 + sovOrderStatistic(uint64(m.OrderStatusInside))
	}
	if m.DeliveryStatusInside != 0 {
		n += 1 + sovOrderStatistic(uint64(m.DeliveryStatusInside))
	}
	if m.VersionNo != 0 {
		n += 1 + sovOrderStatistic(uint64(m.VersionNo))
	}
	l = len(m.CancelReason)
	if l > 0 {
		n += 1 + l + sovOrderStatistic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderAddRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderUpdateRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrderStatistic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrderStatistic(x uint64) (n int) {
	return sovOrderStatistic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &OrderList{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderLogRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderLogRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderLogRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &ErrorLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			m.CustomerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field QtyOrdered", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.QtyOrdered = float32(math.Float32frombits(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNo", wireType)
			}
			m.VersionNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcomWardId", wireType)
			}
			m.EcomWardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EcomWardId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcomDistrict", wireType)
			}
			m.EcomDistrict = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EcomDistrict |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtFrom", wireType)
			}
			m.CreatedAtFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtFrom |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtTo", wireType)
			}
			m.CreatedAtTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtFrom", wireType)
			}
			m.UpdatedAtFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtFrom |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtTo", wireType)
			}
			m.UpdatedAtTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			m.CustomerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFrom", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PriceFrom = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTo", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PriceTo = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field QtyOrdered", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.QtyOrdered = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderSearchRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderSearchRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderSearchRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			m.ExternalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Weight = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LstAttOptional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LstAttOptional = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQuantity", wireType)
			}
			m.OrderQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderQuantity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UnitPrice = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AffiliateAmount = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateSendoAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AffiliateSendoAmount = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductLength", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ProductLength = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductWidth", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ProductWidth = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductHeight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ProductHeight = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMWeight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.VMWeight = float32(math.Float32frombits(v))
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashSalesInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlashSalesInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashSalesAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FlashSalesAmount = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			m.StoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorePhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductList = append(m.ProductList, &ProductListItem{})
			if err := m.ProductList[len(m.ProductList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Weight = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualWeight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ActualWeight = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Tax = float32(math.Float32frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingMethod", wireType)
			}
			m.ShippingMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingMethod |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShippingFee = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ServiceFee = float32(math.Float32frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTotal", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubTotal = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalAmount = float32(math.Float32frombits(v))
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedDeliveryDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedDeliveryDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatus", wireType)
			}
			m.OrderStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatusDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderStatusDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatus", wireType)
			}
			m.PaymentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatusDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentStatusDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			m.PaymentMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentMethod |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			m.PaymentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerLocation", wireType)
			}
			m.BuyerLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerLocation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCity", wireType)
			}
			m.BuyerCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerContactPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerContactPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFromWard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingFromWard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFromWardId", wireType)
			}
			m.ShippingFromWardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingFromWardId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFromLocation", wireType)
			}
			m.ShippingFromLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingFromLocation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFromCity", wireType)
			}
			m.ShippingFromCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingFromCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFromZipcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingFromZipcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingWard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingWard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingWardId", wireType)
			}
			m.ShippingWardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingWardId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingLocation", wireType)
			}
			m.ShippingLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingLocation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCity", wireType)
			}
			m.ShippingCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingZipcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingZipcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingContactPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingContactPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarrierCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderDateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderDateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerFreeShipping", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuyerFreeShipping = float32(math.Float32frombits(v))
		case 47:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerShippingFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SellerShippingFee = float32(math.Float32frombits(v))
		case 48:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoSupportFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SendoSupportFee = float32(math.Float32frombits(v))
		case 49:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendoSupportFeeToBuyer", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SendoSupportFeeToBuyer = float32(math.Float32frombits(v))
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierServiceId", wireType)
			}
			m.CarrierServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarrierServiceId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenpayFreeShipping", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SenpayFreeShipping = float32(math.Float32frombits(v))
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampainCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampainCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoucherCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShopVoucher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShopVoucher = bool(v != 0)
		case 55:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.VoucherAmount = float32(math.Float32frombits(v))
		case 56:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CODFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CODFee = float32(math.Float32frombits(v))
		case 57:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoyaltyAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LoyaltyAmount = float32(math.Float32frombits(v))
		case 58:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerLoyalAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SellerLoyalAmount = float32(math.Float32frombits(v))
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarningStatus", wireType)
			}
			m.WarningStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarningStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileDiscountAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MobileDiscountAmount = float32(math.Float32frombits(v))
		case 61:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DiscountAmount = float32(math.Float32frombits(v))
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingOrderSource", wireType)
			}
			m.TrackingOrderSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackingOrderSource |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowCheck = bool(v != 0)
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrowserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrowserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLoggedIn", wireType)
			}
			m.IsLoggedIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLoggedIn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 67:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginalFee = float32(math.Float32frombits(v))
		case 68:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubFee = float32(math.Float32frombits(v))
		case 69:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenpayFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SenpayFee = float32(math.Float32frombits(v))
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 71:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallmentFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.InstallmentFee = float32(math.Float32frombits(v))
		case 72:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostOfficesFee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PostOfficesFee = float32(math.Float32frombits(v))
		case 73:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateTotalAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AffiliateTotalAmount = float32(math.Float32frombits(v))
		case 74:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateSendoTotalAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AffiliateSendoTotalAmount = float32(math.Float32frombits(v))
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptionCode", wireType)
			}
			m.ExceptionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExceptionCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPostOffice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPostOffice = bool(v != 0)
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repush", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repush = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GaSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComplainUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComplainUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesOrderType", wireType)
			}
			m.SalesOrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SalesOrderType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypesOfSalesPromotion", wireType)
			}
			m.TypesOfSalesPromotion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypesOfSalesPromotion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 84:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderLatitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SenderLatitude = float32(math.Float32frombits(v))
		case 85:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderLongitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SenderLongitude = float32(math.Float32frombits(v))
		case 86:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverLatitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ReceiverLatitude = float32(math.Float32frombits(v))
		case 87:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverLongitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ReceiverLongitude = float32(math.Float32frombits(v))
		case 88:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesPromotionAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SalesPromotionAmount = float32(math.Float32frombits(v))
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateReferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateReferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatusInside", wireType)
			}
			m.PaymentStatusInside = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentStatusInside |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatusInside", wireType)
			}
			m.OrderStatusInside = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderStatusInside |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryStatusInside", wireType)
			}
			m.DeliveryStatusInside = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliveryStatusInside |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNo", wireType)
			}
			m.VersionNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderAddRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderAddRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderAddRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderUpdateRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderUpdateRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderUpdateRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOrderStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderStatistic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderStatistic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderStatistic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrderStatistic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrderStatistic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrderStatistic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrderStatistic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderStatistic   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("order_statistic/order_statistic.proto", fileDescriptor_order_statistic_f4b19d509ec1d7e7)
}

var fileDescriptor_order_statistic_f4b19d509ec1d7e7 = []byte{
	// 2410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x5f, 0x73, 0xd4, 0xc8,
	0x11, 0xaf, 0xf5, 0xff, 0x1d, 0x6c, 0xe0, 0x04, 0x07, 0xf2, 0xc2, 0x99, 0x45, 0xfc, 0x39, 0x1f,
	0x01, 0x9b, 0xe3, 0x2e, 0x97, 0x70, 0xb9, 0xe4, 0xb2, 0xd8, 0x86, 0x53, 0x62, 0x63, 0x9f, 0xd6,
	0x40, 0x42, 0xaa, 0xe2, 0x92, 0xa5, 0xb1, 0x56, 0x85, 0x56, 0x23, 0xa4, 0x59, 0xf0, 0x56, 0x2a,
	0x95, 0xca, 0xbd, 0x24, 0xef, 0xa9, 0x3c, 0xe5, 0x7b, 0xe4, 0x23, 0xa4, 0xf2, 0x98, 0xaa, 0x54,
	0xde, 0x53, 0x54, 0x3e, 0x48, 0xaa, 0xbb, 0x47, 0xda, 0x19, 0xed, 0x42, 0xcc, 0x43, 0x9e, 0xec,
	0xfe, 0x75, 0xcf, 0xf4, 0x74, 0xcf, 0x6f, 0x7a, 0x7a, 0xb4, 0xec, 0x86, 0xc8, 0x43, 0x9e, 0x1f,
	0x14, 0xd2, 0x97, 0x71, 0x21, 0xe3, 0x60, 0xbd, 0x26, 0xaf, 0x65, 0xb9, 0x90, 0xc2, 0xba, 0x5c,
	0xf0, 0x34, 0x14, 0x6b, 0xaf, 0x3e, 0x5d, 0xf3, 0xb3, 0x78, 0xad, 0x66, 0xd3, 0xba, 0x1c, 0x09,
	0x11, 0x25, 0x7c, 0xdd, 0xcf, 0xe2, 0x75, 0x3f, 0x4d, 0x05, 0x28, 0x44, 0x5a, 0xd0, 0x58, 0xe7,
	0x3a, 0x5b, 0xdc, 0x85, 0x01, 0xdb, 0x71, 0x21, 0x3d, 0xfe, 0xd2, 0x3a, 0xcf, 0x66, 0x5f, 0x0e,
	0x78, 0x3e, 0xb4, 0x1b, 0xed, 0xc6, 0x6a, 0xd3, 0x23, 0xc1, 0xe1, 0x86, 0x55, 0x01, 0x56, 0x52,
	0x48, 0x3f, 0x41, 0xab, 0x25, 0x8f, 0x04, 0xeb, 0x6b, 0x36, 0x87, 0xce, 0x0b, 0x7b, 0xaa, 0x3d,
	0xbd, 0x7a, 0xea, 0xde, 0xc7, 0x6b, 0xef, 0x5a, 0xd8, 0xda, 0x68, 0x46, 0x35, 0xcc, 0xf9, 0x35,
	0x3b, 0x45, 0xa0, 0x88, 0xc6, 0xbc, 0x4c, 0x97, 0x5e, 0xee, 0xb3, 0x99, 0x44, 0x44, 0xa5, 0x8f,
	0x9b, 0xef, 0xf6, 0xb1, 0x95, 0xe7, 0x02, 0xa7, 0x9b, 0x4e, 0x44, 0xe4, 0x64, 0x6c, 0xa1, 0x04,
	0xac, 0x65, 0xb6, 0x40, 0xc6, 0x71, 0xa8, 0xe6, 0x9f, 0x47, 0xd9, 0x0d, 0xad, 0x8f, 0x18, 0xcb,
	0x72, 0x11, 0x0e, 0x02, 0x09, 0xca, 0x29, 0x54, 0x36, 0x15, 0xe2, 0x86, 0xd6, 0x05, 0x36, 0x97,
	0x73, 0xbf, 0x10, 0xa9, 0x3d, 0x8d, 0x39, 0x52, 0x92, 0x65, 0xb1, 0x19, 0x19, 0xf7, 0xb9, 0x3d,
	0x83, 0x03, 0xf0, 0x7f, 0xe7, 0xcf, 0x33, 0xac, 0x59, 0xc5, 0xf9, 0x3f, 0x7c, 0x06, 0x39, 0xf7,
	0x25, 0x0f, 0x0f, 0x7c, 0x59, 0xfa, 0x54, 0x48, 0x47, 0x82, 0x7a, 0x90, 0x85, 0xa5, 0x7a, 0x9a,
	0xd4, 0x0a, 0xe9, 0x48, 0x58, 0x12, 0xc4, 0x3c, 0x28, 0xd0, 0x79, 0xd3, 0x53, 0x92, 0x75, 0x89,
	0x35, 0x03, 0x3f, 0x0d, 0x78, 0x72, 0x70, 0x38, 0xb4, 0x67, 0x51, 0xb5, 0x40, 0xc0, 0x83, 0x21,
	0xac, 0xc6, 0x0f, 0xfb, 0x71, 0x0a, 0xab, 0x99, 0x6b, 0x37, 0x56, 0x67, 0xbd, 0x79, 0x94, 0xdd,
	0xd0, 0xba, 0xc2, 0x4e, 0x05, 0x83, 0x42, 0x8a, 0x3e, 0xad, 0x75, 0x1e, 0xb5, 0xac, 0x84, 0xdc,
	0xd0, 0xba, 0xc1, 0x4e, 0x67, 0xfe, 0xb0, 0xcf, 0x53, 0x79, 0xd0, 0xe7, 0xb2, 0x27, 0x42, 0x7b,
	0x01, 0x67, 0x5f, 0x52, 0xe8, 0x0e, 0x82, 0xb5, 0x4c, 0x36, 0xeb, 0x99, 0x04, 0x37, 0xbe, 0xe4,
	0x91, 0xc8, 0x87, 0xa0, 0x67, 0x38, 0x05, 0x2b, 0x21, 0x37, 0x04, 0x06, 0x64, 0x79, 0x1c, 0x70,
	0xfb, 0x54, 0xbb, 0xb1, 0x3a, 0xe5, 0x91, 0x00, 0xc3, 0x5e, 0xca, 0xe1, 0x01, 0xa6, 0x8e, 0x87,
	0xf6, 0x22, 0xea, 0xd8, 0x4b, 0x39, 0xdc, 0x25, 0x04, 0xdc, 0xbe, 0xe2, 0x79, 0x11, 0x8b, 0xf4,
	0x20, 0x15, 0xf6, 0x12, 0xb9, 0x55, 0xc8, 0x63, 0x81, 0xb9, 0x16, 0x83, 0x54, 0x92, 0xd7, 0xd3,
	0xe8, 0xb5, 0xa9, 0x10, 0x37, 0x84, 0xa4, 0xe5, 0x3c, 0x82, 0xc1, 0x71, 0x68, 0x9f, 0xc1, 0xd0,
	0x17, 0x08, 0x70, 0x43, 0xab, 0xcd, 0x16, 0x79, 0x20, 0xfa, 0x07, 0xaf, 0xfd, 0x3c, 0x04, 0xfd,
	0x59, 0x4a, 0x0d, 0x60, 0xcf, 0xfc, 0x3c, 0x74, 0x43, 0xeb, 0x1a, 0x5b, 0x42, 0x8b, 0x30, 0x2e,
	0x64, 0x1e, 0x07, 0xd2, 0xfe, 0x00, 0x4d, 0x70, 0xd8, 0xa6, 0xc2, 0x9c, 0xbf, 0xcd, 0xb0, 0xd3,
	0xb8, 0xda, 0x2e, 0xf7, 0xf3, 0xa0, 0x07, 0x27, 0xaf, 0x35, 0x46, 0x8e, 0x4a, 0xb6, 0x56, 0x26,
	0xb0, 0x43, 0x43, 0xac, 0x6b, 0xec, 0xcc, 0x48, 0x3a, 0x38, 0xca, 0x45, 0x5f, 0x71, 0x44, 0x37,
	0xba, 0xca, 0x96, 0x34, 0x23, 0x29, 0x14, 0x51, 0x75, 0x93, 0x15, 0x83, 0x66, 0xb3, 0xa4, 0x1f,
	0x21, 0xe0, 0x67, 0x24, 0x91, 0x9f, 0xb9, 0x31, 0xa3, 0xab, 0x6c, 0x49, 0x33, 0x92, 0x02, 0xe9,
	0x63, 0x9a, 0x8c, 0xf8, 0xba, 0x60, 0xf0, 0xf5, 0xb2, 0xce, 0xd7, 0xa6, 0xda, 0x98, 0x12, 0x80,
	0x0c, 0x55, 0x84, 0x65, 0xb4, 0x2f, 0xa5, 0x6c, 0xb5, 0x4d, 0xc6, 0x9e, 0x42, 0xb5, 0x0e, 0x59,
	0x37, 0xc7, 0x28, 0xbb, 0x88, 0x0e, 0x6a, 0x28, 0xe4, 0x40, 0xe3, 0x2c, 0x91, 0x47, 0x43, 0xd0,
	0x93, 0x46, 0x5a, 0xa2, 0x8f, 0x0e, 0x8d, 0x58, 0x7b, 0x46, 0x67, 0xed, 0x32, 0xcc, 0x1b, 0x07,
	0x9c, 0xd2, 0x76, 0x56, 0x57, 0x5d, 0x64, 0x0b, 0xa4, 0x92, 0x02, 0xd9, 0x52, 0x29, 0xda, 0x26,
	0xd3, 0x2d, 0xd4, 0xe9, 0x90, 0x73, 0xb3, 0xc6, 0xa3, 0xb7, 0xd4, 0x66, 0xe7, 0x5f, 0x33, 0xec,
	0xcc, 0x1e, 0x05, 0x01, 0xa5, 0xc8, 0x95, 0xbc, 0x0f, 0x91, 0x6e, 0x1d, 0x4b, 0x9e, 0xa7, 0x7e,
	0xe2, 0x12, 0xe7, 0x66, 0x3d, 0x0d, 0x81, 0xdd, 0xd8, 0x2b, 0xcf, 0x6a, 0x59, 0x92, 0xf6, 0xf4,
	0x32, 0xf8, 0x8c, 0xc7, 0x51, 0x8f, 0xca, 0xd1, 0x94, 0xa7, 0x24, 0x58, 0xb3, 0x32, 0x7a, 0xec,
	0xab, 0x6a, 0xd8, 0xf4, 0x74, 0x08, 0x2c, 0x36, 0x79, 0x11, 0xe4, 0x71, 0x06, 0x37, 0x91, 0xaa,
	0x4b, 0x3a, 0x04, 0x7b, 0xb5, 0x5d, 0xc8, 0x8e, 0x94, 0xbb, 0x28, 0xfb, 0x09, 0xd2, 0xac, 0xe9,
	0xd5, 0x50, 0xeb, 0x3a, 0x5b, 0xc2, 0xe8, 0xbf, 0x1d, 0xf8, 0xa9, 0x8c, 0xe5, 0x50, 0x55, 0x2a,
	0x13, 0x84, 0x38, 0x9e, 0xa4, 0xb1, 0xdc, 0xc3, 0x3d, 0x59, 0xc0, 0xc5, 0x8e, 0x00, 0x6b, 0x95,
	0x9d, 0xe9, 0x1c, 0x1d, 0xc5, 0x49, 0xec, 0x4b, 0xde, 0xe9, 0x43, 0x15, 0x40, 0xe6, 0x4d, 0x79,
	0x75, 0xd8, 0xba, 0xc7, 0xce, 0x57, 0x50, 0x17, 0x6e, 0x1d, 0x65, 0xce, 0xd0, 0x7c, 0xa2, 0x0e,
	0x56, 0x58, 0xa6, 0x9d, 0xa7, 0x91, 0xec, 0xa9, 0x4a, 0x66, 0x82, 0x96, 0xc3, 0x16, 0x15, 0xf0,
	0x2c, 0x0e, 0x65, 0x4f, 0x95, 0x34, 0x03, 0xd3, 0x66, 0xfa, 0x86, 0xd2, 0xbe, 0x64, 0xcc, 0x44,
	0x20, 0x9c, 0x91, 0xa7, 0x3b, 0x6a, 0x5f, 0x4e, 0xa3, 0x41, 0x25, 0x43, 0x56, 0x1f, 0x26, 0x7e,
	0xd1, 0xeb, 0xfa, 0x09, 0x2f, 0xdc, 0xf4, 0x48, 0x20, 0x41, 0x9b, 0x5e, 0x0d, 0xb5, 0x6e, 0xb1,
	0xb3, 0x23, 0x44, 0xc5, 0x48, 0x7c, 0x1d, 0xc3, 0x9d, 0xbf, 0x5e, 0x52, 0x77, 0x76, 0x27, 0x0c,
	0xa1, 0x8a, 0xb5, 0x95, 0xf8, 0x78, 0xd0, 0x3f, 0xe4, 0xb9, 0xea, 0x22, 0x74, 0xc8, 0xb2, 0xd9,
	0xfc, 0x83, 0xc1, 0x10, 0x6e, 0x11, 0xe4, 0x54, 0xd3, 0x2b, 0x45, 0xd0, 0x74, 0xa5, 0xc8, 0xb9,
	0x1b, 0x22, 0xa5, 0x66, 0xbd, 0x52, 0x84, 0x1d, 0xc4, 0x7f, 0x35, 0x46, 0x8d, 0x00, 0xe0, 0x31,
	0x0a, 0x7b, 0x3d, 0x91, 0x72, 0x45, 0x27, 0x0d, 0xa9, 0xf4, 0x5b, 0x7d, 0x3f, 0x2e, 0x99, 0xa4,
	0x21, 0xd6, 0x6e, 0xc5, 0x58, 0x38, 0x1a, 0xf6, 0x3c, 0x36, 0x16, 0x77, 0xde, 0xdd, 0x58, 0xd4,
	0xce, 0x92, 0xa7, 0xcf, 0x00, 0x9d, 0xc0, 0x63, 0x21, 0xb9, 0x2a, 0x6e, 0xf8, 0xbf, 0x76, 0x5c,
	0x9a, 0xc6, 0x71, 0x71, 0xd8, 0x62, 0x27, 0x90, 0x03, 0x3f, 0x51, 0x5a, 0x22, 0x93, 0x81, 0x59,
	0x67, 0xd9, 0xf4, 0xbe, 0x7f, 0xac, 0xa8, 0x03, 0xff, 0xc2, 0x56, 0x76, 0x7b, 0x71, 0x96, 0xc5,
	0x69, 0xb4, 0x33, 0x2a, 0x66, 0xb3, 0x5e, 0x0d, 0x85, 0xed, 0x28, 0x91, 0x87, 0x9c, 0x2b, 0xca,
	0xe8, 0x10, 0x26, 0x87, 0xe7, 0xaf, 0xe2, 0x80, 0x83, 0x01, 0x51, 0x46, 0x43, 0x80, 0x50, 0xdd,
	0xc1, 0xe1, 0x3e, 0x56, 0x14, 0xaa, 0x67, 0x95, 0x0c, 0xb3, 0xe3, 0x3f, 0x06, 0x47, 0x74, 0x08,
	0x8e, 0xcc, 0xd6, 0x71, 0xc6, 0x03, 0xc9, 0xc3, 0x4d, 0x9e, 0xc4, 0xaf, 0x78, 0x3e, 0xdc, 0xf4,
	0x25, 0xc7, 0x2a, 0xd7, 0xf4, 0x26, 0xea, 0x2a, 0x0a, 0x75, 0xe9, 0x86, 0xb0, 0xa8, 0x94, 0x6b,
	0x10, 0x1c, 0x59, 0x4d, 0xc4, 0x09, 0xcf, 0xe1, 0x84, 0x75, 0x18, 0x0f, 0x0d, 0x95, 0x77, 0x35,
	0xdb, 0x79, 0x2a, 0x10, 0x06, 0x68, 0xdd, 0x66, 0x1f, 0x18, 0x00, 0xce, 0xf8, 0x21, 0xce, 0x38,
	0xae, 0xd0, 0xe6, 0x54, 0xa9, 0xbf, 0x60, 0xcc, 0x39, 0xca, 0xbc, 0x02, 0xf6, 0x87, 0x19, 0xb7,
	0x2f, 0x52, 0x14, 0x1a, 0x04, 0xa4, 0x46, 0xe6, 0x23, 0xa9, 0x6d, 0x22, 0x75, 0x05, 0x00, 0x2f,
	0x50, 0xe8, 0x84, 0x61, 0xce, 0x8b, 0xc2, 0x5e, 0x46, 0x03, 0x03, 0x83, 0xbd, 0x43, 0x99, 0x88,
	0xdd, 0x22, 0x62, 0x8f, 0x10, 0x58, 0x29, 0x4a, 0xdb, 0x22, 0xc0, 0xa6, 0xdf, 0xbe, 0x44, 0x2b,
	0x35, 0xc0, 0x6a, 0x1d, 0x1b, 0x50, 0x40, 0x2f, 0xa3, 0xc5, 0x08, 0x80, 0xdc, 0x90, 0x20, 0x52,
	0xe9, 0x07, 0x92, 0xce, 0xd8, 0x47, 0x94, 0x9b, 0x31, 0x05, 0xac, 0xda, 0xe3, 0x01, 0x87, 0xcd,
	0xc4, 0xb0, 0x56, 0x68, 0xd5, 0x3a, 0x66, 0xdd, 0x65, 0xe7, 0x2a, 0x02, 0xe6, 0xa2, 0x5f, 0x06,
	0x78, 0x05, 0x4d, 0x27, 0xa9, 0xa0, 0x20, 0xe9, 0x30, 0x34, 0x5a, 0x76, 0x1b, 0xcd, 0xc7, 0x70,
	0x6b, 0x8d, 0x59, 0x75, 0xcc, 0x0d, 0xed, 0xab, 0x18, 0xd6, 0x04, 0x0d, 0x30, 0x54, 0x47, 0xab,
	0x54, 0x39, 0x38, 0x62, 0xa2, 0xae, 0xbe, 0x1e, 0x4c, 0xdc, 0x35, 0xb4, 0x1f, 0xc3, 0xeb, 0xd1,
	0x3e, 0x8f, 0xb3, 0x40, 0x84, 0xdc, 0xbe, 0x3e, 0x1e, 0xad, 0x52, 0x01, 0xbb, 0x4b, 0xb8, 0xcc,
	0xcd, 0x0d, 0x62, 0x77, 0x0d, 0x86, 0x6c, 0x97, 0x10, 0xe6, 0xe4, 0x26, 0x65, 0x5b, 0xc7, 0xf4,
	0x4a, 0xa1, 0x72, 0xf1, 0xb1, 0x59, 0x29, 0x54, 0x1e, 0xb4, 0x98, 0xaa, 0x1c, 0xac, 0x9a, 0x31,
	0x55, 0xf1, 0x6b, 0x7e, 0x31, 0xf6, 0x4f, 0xa8, 0xc3, 0xd5, 0x31, 0x3d, 0x8a, 0x32, 0xe6, 0x5b,
	0x66, 0x14, 0x65, 0xbc, 0xda, 0x0e, 0x18, 0x24, 0xfb, 0x1e, 0xd5, 0x88, 0x49, 0x3a, 0x38, 0x5d,
	0x1b, 0x7e, 0x9e, 0xc7, 0x40, 0xbf, 0x90, 0xdb, 0xb7, 0xe9, 0x9a, 0xd1, 0xa0, 0xaa, 0x35, 0x80,
	0x23, 0xbb, 0x0f, 0xcf, 0xb2, 0x3b, 0xf4, 0x40, 0x31, 0xc0, 0x8a, 0xdd, 0x0f, 0x73, 0xce, 0x4b,
	0x47, 0xf6, 0x1a, 0xd6, 0xb1, 0x71, 0x05, 0x58, 0x77, 0x79, 0x92, 0xf0, 0x5c, 0xaf, 0xa9, 0xeb,
	0x64, 0x3d, 0xa6, 0xc0, 0x0c, 0xc0, 0x15, 0xd2, 0x1d, 0x64, 0x99, 0xc8, 0x25, 0xd8, 0xde, 0xa5,
	0xc6, 0xa2, 0x06, 0x5b, 0x5f, 0xb0, 0x0b, 0x35, 0x68, 0x5f, 0xa0, 0x77, 0xfb, 0x53, 0x1c, 0xf0,
	0x16, 0x2d, 0xec, 0x99, 0x0a, 0x59, 0x15, 0x6c, 0x37, 0xb4, 0xef, 0xd1, 0x9e, 0xd5, 0x71, 0x3c,
	0x17, 0x3c, 0xcd, 0xfc, 0xa1, 0x11, 0xea, 0x67, 0x38, 0xff, 0x04, 0x0d, 0x65, 0xb8, 0x9f, 0xf9,
	0x71, 0x8a, 0x19, 0xfe, 0xbc, 0xcc, 0x70, 0x05, 0x81, 0xc5, 0x53, 0x31, 0x08, 0x7a, 0x6a, 0x0f,
	0xbe, 0x4f, 0x16, 0x1a, 0x04, 0x7b, 0xe0, 0x16, 0xdd, 0x9e, 0xc8, 0x14, 0x68, 0x7f, 0xd1, 0x6e,
	0xac, 0x2e, 0x78, 0x26, 0x08, 0x56, 0xea, 0x5f, 0x75, 0x8f, 0xfc, 0x80, 0x1a, 0x1b, 0x03, 0x84,
	0xfb, 0x73, 0x63, 0x77, 0x13, 0x92, 0xf8, 0x43, 0xba, 0x3f, 0x49, 0x82, 0xd1, 0xdb, 0x62, 0xe8,
	0x27, 0x72, 0xa8, 0x46, 0xdf, 0xa7, 0xd1, 0x06, 0x38, 0xda, 0x39, 0x84, 0x95, 0xe5, 0x97, 0xfa,
	0xce, 0x69, 0x0a, 0x98, 0xf3, 0x99, 0x9f, 0xa7, 0x71, 0x1a, 0xa9, 0x5b, 0xe3, 0x47, 0x54, 0x37,
	0x0d, 0x10, 0x78, 0xbb, 0x23, 0x0e, 0xe3, 0x84, 0x6f, 0xc6, 0x05, 0xbe, 0x1e, 0xd5, 0xb4, 0x5f,
	0x51, 0x3b, 0x38, 0x49, 0x07, 0xa7, 0xb1, 0x66, 0xfd, 0x63, 0xb4, 0xae, 0xa1, 0x50, 0x35, 0xf6,
	0x73, 0x3f, 0x78, 0x11, 0xa7, 0x11, 0x5d, 0x69, 0x62, 0x90, 0x07, 0xdc, 0xfe, 0x09, 0xae, 0x63,
	0x92, 0x0a, 0xee, 0x82, 0x4e, 0x92, 0x88, 0xd7, 0x1b, 0x3d, 0x1e, 0xbc, 0xb0, 0xbf, 0xc6, 0x44,
	0x6b, 0x08, 0xe4, 0xef, 0x49, 0xc1, 0x73, 0x37, 0xb3, 0x7f, 0x4a, 0x4f, 0x2e, 0x92, 0xb0, 0xfa,
	0xe7, 0xe2, 0x75, 0x81, 0x0d, 0x59, 0x47, 0xdd, 0x42, 0x25, 0x00, 0xb3, 0xba, 0xc5, 0xb6, 0x88,
	0x22, 0x1e, 0xba, 0xa9, 0xfd, 0x80, 0x9e, 0x08, 0x23, 0x84, 0xee, 0xea, 0x38, 0x8a, 0x53, 0x3f,
	0x81, 0xad, 0xd9, 0xa0, 0x0e, 0x40, 0x83, 0xc0, 0x6f, 0x77, 0x70, 0x08, 0xca, 0x4d, 0xda, 0x37,
	0x92, 0xb0, 0xa5, 0x23, 0xd6, 0x71, 0x6e, 0x6f, 0x51, 0x53, 0x5e, 0x01, 0xd0, 0x75, 0x3c, 0xf0,
	0xd3, 0x17, 0x78, 0x87, 0x3c, 0xa4, 0xef, 0x16, 0xa5, 0x0c, 0x39, 0x74, 0xd3, 0x42, 0xfa, 0x49,
	0x02, 0x57, 0x29, 0x0c, 0x7f, 0x44, 0x39, 0x34, 0x51, 0xb0, 0xdb, 0x13, 0x85, 0xdc, 0x3d, 0x3a,
	0x8a, 0x03, 0x5e, 0x80, 0xdd, 0x37, 0x64, 0x67, 0xa2, 0x46, 0x5b, 0xaf, 0xb7, 0x33, 0x6e, 0xad,
	0xad, 0xd7, 0xfb, 0x9a, 0xaf, 0xd8, 0xb2, 0xd9, 0xee, 0xeb, 0x03, 0x7f, 0x86, 0x03, 0xdf, 0x6e,
	0x00, 0xfc, 0xaa, 0x94, 0x18, 0xe2, 0xcf, 0xa9, 0x36, 0x19, 0x20, 0xb4, 0xc3, 0x1b, 0xa2, 0x0f,
	0xd1, 0xd8, 0xdb, 0xd4, 0x28, 0x2b, 0x11, 0xc6, 0x6f, 0x1d, 0x07, 0x1c, 0x5f, 0x41, 0x78, 0xf6,
	0x76, 0x88, 0x9f, 0x06, 0x08, 0x55, 0xda, 0x2d, 0x46, 0xb1, 0xda, 0x8f, 0x91, 0x13, 0x06, 0x06,
	0xbb, 0xe3, 0xf1, 0x6c, 0x50, 0xf4, 0xec, 0x5d, 0x62, 0x05, 0x49, 0x90, 0xff, 0x47, 0xbe, 0x22,
	0xdd, 0x1e, 0xe5, 0xbf, 0x94, 0xb1, 0x32, 0x88, 0x7e, 0x96, 0xf8, 0x71, 0xfa, 0x24, 0x4f, 0xec,
	0x6f, 0x55, 0x65, 0x18, 0x41, 0x78, 0xe7, 0xc0, 0x1b, 0x01, 0xf9, 0x89, 0xed, 0x8f, 0xa7, 0xee,
	0x1c, 0x03, 0xb5, 0x3e, 0x67, 0x1f, 0xc2, 0xdf, 0x62, 0xf7, 0x08, 0x15, 0x7b, 0xb9, 0xe8, 0x0b,
	0xbc, 0x78, 0xba, 0x68, 0x3e, 0x59, 0x89, 0xb3, 0xf3, 0x34, 0xe4, 0xf9, 0xb6, 0x2f, 0x63, 0x39,
	0x08, 0xb9, 0xbd, 0x4f, 0xfb, 0x6a, 0xa2, 0x65, 0xfd, 0x85, 0xa3, 0x9d, 0x46, 0x64, 0xf8, 0x64,
	0x54, 0x7f, 0x35, 0x18, 0xea, 0x68, 0xd9, 0xa1, 0x54, 0x73, 0x3e, 0xa5, 0x07, 0x4f, 0x1d, 0x87,
	0x4a, 0x52, 0x61, 0xd5, 0xbc, 0xcf, 0xa8, 0x92, 0x8c, 0x29, 0xf0, 0x6e, 0x33, 0x56, 0xaf, 0x28,
	0xf2, 0x0b, 0xe2, 0xd6, 0x24, 0x1d, 0xac, 0xa6, 0x22, 0x82, 0xc7, 0x8f, 0x78, 0xce, 0x73, 0xfb,
	0x97, 0xd4, 0xed, 0xd4, 0x71, 0xd8, 0xa7, 0x4d, 0xae, 0x2a, 0xff, 0x73, 0xda, 0xa7, 0x52, 0xc6,
	0x67, 0x6f, 0xc1, 0xf3, 0x4e, 0x04, 0x0c, 0xfa, 0x15, 0x9d, 0xec, 0x0a, 0x70, 0xfe, 0x38, 0xa5,
	0xbe, 0x1c, 0x3c, 0xc1, 0xcf, 0x32, 0x27, 0x7b, 0xbb, 0xdd, 0x65, 0xe7, 0x8c, 0x7e, 0xd8, 0x4d,
	0x8b, 0x38, 0xe4, 0xf8, 0x8e, 0x9b, 0xf5, 0x26, 0xa9, 0x20, 0x5d, 0x5a, 0x4f, 0xae, 0xec, 0xe9,
	0x75, 0x37, 0xae, 0x80, 0x74, 0x95, 0x4f, 0x01, 0x63, 0xc0, 0x0c, 0x35, 0x63, 0x93, 0x74, 0x10,
	0xe6, 0xd3, 0xf2, 0xd3, 0x9e, 0xfa, 0x64, 0x35, 0x02, 0xe0, 0x10, 0x6c, 0xe0, 0x07, 0x24, 0x8f,
	0x3e, 0xd9, 0xd2, 0xeb, 0xcf, 0xc0, 0x9c, 0x1b, 0xfa, 0x13, 0xb6, 0xd0, 0x3e, 0x4e, 0x35, 0xf0,
	0xc4, 0x28, 0xc9, 0x59, 0xad, 0x25, 0xec, 0xad, 0x96, 0xf7, 0xfe, 0x32, 0xc7, 0x5a, 0x5b, 0xaf,
	0x78, 0x2a, 0xab, 0x08, 0xf1, 0xd1, 0xa8, 0x2e, 0x63, 0x4b, 0xb0, 0xe9, 0x4e, 0x18, 0x5a, 0x9f,
	0x9c, 0xe0, 0xf3, 0x38, 0xbd, 0xaa, 0x5b, 0x27, 0x36, 0x2d, 0x1c, 0xeb, 0xbb, 0x7f, 0xfe, 0xe7,
	0x4f, 0x53, 0x8b, 0xce, 0x3c, 0xfd, 0x58, 0x50, 0x7c, 0xd9, 0xb8, 0x65, 0x1d, 0xb3, 0x39, 0x5a,
	0xb4, 0x75, 0xfb, 0x04, 0x13, 0x55, 0x84, 0x68, 0xbd, 0x8f, 0x75, 0xe5, 0xb9, 0xa5, 0x7b, 0xfe,
	0x1d, 0x9b, 0xa3, 0x2f, 0x53, 0x27, 0xf2, 0x5c, 0x7d, 0x0c, 0x6d, 0xbd, 0x8f, 0x75, 0xe1, 0x2c,
	0xa3, 0xe7, 0x73, 0xce, 0x69, 0xe5, 0x79, 0xbd, 0x40, 0x15, 0x2c, 0xe0, 0xf7, 0x0d, 0x36, 0x07,
	0x6f, 0xf2, 0xad, 0xc2, 0xba, 0x75, 0xd2, 0x9f, 0x23, 0xf8, 0xcb, 0xd6, 0xc9, 0x6d, 0x0b, 0xe7,
	0x0a, 0x7a, 0x5f, 0xb6, 0x2e, 0x96, 0xde, 0x79, 0xb1, 0x9e, 0xc4, 0x85, 0x5c, 0xff, 0x0d, 0xfe,
	0x78, 0xf2, 0x5b, 0xeb, 0x0f, 0x0d, 0xd6, 0x04, 0xe3, 0x1d, 0x91, 0x46, 0xe2, 0xff, 0xb6, 0x0c,
	0x07, 0x97, 0x71, 0xd9, 0x6a, 0x95, 0xcb, 0xe8, 0x83, 0x3b, 0x73, 0x25, 0xdf, 0x35, 0xd8, 0x3c,
	0xd8, 0x6f, 0x8b, 0xe8, 0xbd, 0xd6, 0x71, 0x12, 0xfe, 0xd1, 0x8f, 0x36, 0x4e, 0x1b, 0x97, 0xd1,
	0xb2, 0xec, 0x72, 0x19, 0x89, 0x88, 0x8c, 0x45, 0x3c, 0x78, 0xf4, 0xf7, 0x37, 0x2b, 0x8d, 0x7f,
	0xbc, 0x59, 0x69, 0xfc, 0xfb, 0xcd, 0x4a, 0xe3, 0xf9, 0xfd, 0x28, 0x96, 0x89, 0x7f, 0x58, 0x3a,
	0x48, 0xd7, 0xf1, 0x77, 0xa9, 0xc3, 0xc1, 0xd1, 0x7a, 0x9c, 0xd2, 0x97, 0xc8, 0x3b, 0x7e, 0x16,
	0x17, 0x77, 0x22, 0x51, 0xff, 0xf5, 0xeb, 0x70, 0x0e, 0x4d, 0x3f, 0xfb, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd4, 0xb2, 0x92, 0x15, 0x27, 0x1b, 0x00, 0x00,
}
